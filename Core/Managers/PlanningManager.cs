using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using BrandSystems.Marcom.Core.Interface;
using BrandSystems.Marcom.Core.Managers.Proxy;
using BrandSystems.Marcom.Core.Planning;
using BrandSystems.Marcom.Core.Planning.Interface;
using BrandSystems.Marcom.Dal.Planning.Model;
using Newtonsoft.Json.Linq;
using BrandSystems.Marcom.Dal.Access.Model;
using BrandSystems.Marcom.Core.Access.Interface;
using BrandSystems.Marcom.Core.Access;
using BrandSystems.Marcom.Dal.Base;
using BrandSystems.Marcom.Core.Common.Interface;
using BrandSystems.Marcom.Core.Common;
using BrandSystems.Marcom.Core.Task.Interface;
using BrandSystems.Marcom.Core.Task;
using BrandSystems.Marcom.Dal.Common.Model;
using System.Web;
using BrandSystems.Marcom.Utility;
using System.Xml;
using System.IO;
using NHibernate.Mapping.ByCode;
using System.Collections;
using BrandSystems.Marcom.Dal.Metadata.Model;
using System.Xml.Linq;
using BrandSystems.Marcom.Core.User.Interface;
using BrandSystems.Marcom.Dal.User.Model;
using Newtonsoft.Json;
using System.Configuration;
using Lucene.Net.Documents;
using Lucene.Net.Search;
using Lucene.Net;
using Lucene.Net.Util;
using Lucene.Net.Analysis;
using Lucene.Net.Analysis.Standard;
using Lucene.Net.Store;
using Lucene.Net.Index;
using Lucene.Net.QueryParsers;
using System.Threading;
using System.Threading.Tasks;
using Mail;
using BrandSystems.Marcom.Core.Utility;
using System.Globalization;
using BrandSystems.Marcom.Dal.Task.Model;
using System.Drawing.Drawing2D;
using SD = System.Drawing;
using BrandSystems.Marcom.Dal.DAM.Model;
using BrandSystems.Marcom.Core.DAM.Interface;
using BrandSystems.Marcom.Core.DAM;
using BrandSystems.Marcom.Dal.CMS.Model;

namespace BrandSystems.Marcom.Core.Managers
{
    internal partial class PlanningManager : IManager
    {
        /// <summary>
        /// The instance
        /// </summary>
        private static PlanningManager instance = new PlanningManager();

        /// <summary>
        /// Gets the instance.
        /// </summary>
        /// <value>
        /// The instance.
        /// </value>
        internal static PlanningManager Instance
        {
            get { return instance; }
        }

        /// <summary>
        /// Initializes the specified marcom manager.
        /// </summary>
        /// <param name="marcomManager">The marcom manager.</param>
        void IManager.Initialize(IMarcomManager marcomManager)
        {

        }

        /// <summary>
        /// Commit all caches since the transaction has been commited.
        /// </summary>
        void IManager.CommitCaches()
        {
            //_activityTypes.Commit();
        }

        /// <summary>
        /// Rollback all caches since the transaction has been rollbacked.
        /// </summary>
        void IManager.RollbackCaches()
        {
            //_activityTypes.Rollback();
        }

        /// <summary>
        /// Intializes the imilestone.
        /// </summary>
        /// <param name="strBody">accepts string body containing imilestone objects.</param>
        /// <returns>IMilestone</returns>
        public IMilestone IntializeImilestone(string strBody)
        {
            try
            {
                JObject jobj = JObject.Parse(strBody.ToUpper());
                IMilestone imileStone = new Milestone();
                imileStone.Id = jobj["ID"] == null ? 0 : (int)jobj["ID"];
                imileStone.Description = jobj["DESCRIPTION"] == null ? "" : (string)jobj["DESCRIPTION"];
                imileStone.DueDate = jobj["DUEDATE"] == null ? DateTime.Now : (DateTime)jobj["DUEDATE"];
                imileStone.Entityid = jobj["ENTITYID"] == null ? 0 : (int)jobj["ENTITYID"];
                imileStone.Name = jobj["NAME"] == null ? "" : (string)jobj["NAME"];
                imileStone.Status = jobj["STATUS"] == null ? 0 : (int)jobj["STATUS"];
                return imileStone;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        //Milestone

        /// <summary>
        /// Creates the milestone.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="name">The name.</param>
        /// <param name="dueDate">The due date.</param>
        /// <returns>last inserted id</returns>
        //public int CreateMilestone(PlanningManagerProxy proxy, int entityId,int milestoneTypeId, string name, IList<IAttributeData> entityattributedata)
        //{
        //    return CreateMilestone(proxy, entityId,milestoneTypeId,name,entityattributedata);
        //}

        /// <summary>
        /// Creates the milestone.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="name">The name.</param>
        /// <param name="description">The description.</param>
        /// <param name="dueDate">The due date.</param>
        /// <returns>last inserted id</returns>
        //public int CreateMilestone(PlanningManagerProxy proxy, int entityId,int milestoneTypeId, string name, IList<IAttributeData> entityattributedata)
        //{
        //    return CreateMilestone(proxy, entityId,milestoneTypeId, name,entityattributedata, null);
        //}

        /// <summary>
        /// Creates the milestone.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityTypeId">The Entity Type Id.</param>
        /// <param name="name">The Name</param>
        /// <param name="attributes">List of attributes Data</param>
        /// <returns>last inserted id</returns>
        public int CreateMilestone(PlanningManagerProxy proxy, int milestoneTypeId, string name, IList<IAttributeData> entityattributedata)
        {
            try
            {

                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Planning, (int)(EntityTypeID.Milestone), FeatureID.Milestone, OperationId.Edit ,entityId) == true) //4 is milestone type id
                //{
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + "ewr", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    // Business logic of milestone
                    var parentEntityID = entityattributedata.Where(a => a.ID == Convert.ToInt32(SystemDefinedAttributes.MilestoneEntityID)).FirstOrDefault();
                    var baseEntityId = GetBaseEntityID(milestoneTypeId, name, tx, (int)parentEntityID.Value);
                    if (entityattributedata != null)
                    {
                        var result = InsertEntityAttributes(tx, entityattributedata, baseEntityId, milestoneTypeId);
                    }
                    tx.Commit();
                    // attrResult.First().Attributes[SystemDefinedAttributes.DueDate].ToString()

                    //Adding to the Search Engine
                    System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => AddEntityAsync(proxy, baseEntityId, name, parentEntityID.Value));
                    taskforaddentityforsearch.Start();

                    try
                    {
                        FeedNotificationServer fs = new FeedNotificationServer();
                        NotificationFeedObjects obj = new NotificationFeedObjects();

                        obj.EntityId = (int)baseEntityId;
                        obj.action = "milestoneadded";
                        obj.AttributeName = name;

                        obj.ToValue = (from tt in entityattributedata where tt.TypeID == 5 select tt.Value).FirstOrDefault();
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        fs.AsynchronousNotify(obj);
                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }
                    return baseEntityId;

                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Gets the milestone.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns>
        /// <exception cref="System.NotImplementedException"></exception>
        public IMilestone GetMilestone(long id)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the milestone.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="milestoneTypeID">The MilestoneTypID</param>
        /// <param name="milestoneName">The MilestoneName</param>
        /// <param name="milestoneObj">The List of Milstone AttributeData</param>
        /// <param name="entityId">The EntityID</param>
        /// <returns>bool</returns>
        public bool UpdateMilestone(PlanningManagerProxy proxy, int milestoneTypeID, string milstoneName, IList<IAttributeData> milestoneObj, int entityId)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityId, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FeedNotificationServer fs = new FeedNotificationServer();


                    var milestonedetails = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>() where item.Id == entityId select item).FirstOrDefault();

                    if (milestonedetails.Name != milstoneName)
                    {
                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.action = "milestoneupdated";
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.EntityId = milestonedetails.Parentid;
                        obj.AttributeName = "Name";
                        obj.ToValue = milstoneName;
                        obj.FromValue = milestonedetails.Name;
                        fs.AsynchronousNotify(obj);
                    }
                    //used to get old data for feed for milestone update
                    string entityName = "AttributeRecord" + milestonedetails.Typeid + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    var milestoneattrdetails = (from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName) where item.Id == entityId select item).ToList();
                    if (milestoneattrdetails[0].Attributes.Contains("56") == true)
                    {
                        var NewDuedate = milestoneObj.Where(s => s.ID == 56).Select(s => s.Value).FirstOrDefault();
                        if (NewDuedate != null && NewDuedate != "")
                        {
                            if (Convert.ToDateTime(milestoneattrdetails[0].Attributes["56"]).ToString("yyyy-MM-dd") != NewDuedate)
                            {
                                NotificationFeedObjects objDue = new NotificationFeedObjects();
                                objDue.action = "milestoneupdated";
                                objDue.Actorid = proxy.MarcomManager.User.Id;
                                objDue.EntityId = milestonedetails.Parentid;
                                objDue.AttributeName = "Due date";
                                objDue.ToValue = NewDuedate;
                                objDue.FromValue = Convert.ToDateTime(milestoneattrdetails[0].Attributes["56"]).ToString("yyyy-MM-dd");
                                fs.AsynchronousNotify(objDue);
                            }
                        }
                    }

                    if (milestoneattrdetails[0].Attributes.Contains("2") == true)
                    {
                        var NewDescription = milestoneObj.Where(s => s.ID == 2).Select(s => s.Value).FirstOrDefault();
                        if (NewDescription != null)
                        {

                            if (milestoneattrdetails[0].Attributes["2"].ToString() != NewDescription)
                            {
                                NotificationFeedObjects objDes = new NotificationFeedObjects();
                                objDes.action = "milestoneupdated";
                                objDes.Actorid = proxy.MarcomManager.User.Id;
                                objDes.EntityId = milestonedetails.Parentid;
                                objDes.AttributeName = "Description";
                                objDes.ToValue = NewDescription == "" ? "-" : NewDescription;
                                objDes.FromValue = milestoneattrdetails[0].Attributes["2"].ToString();
                                fs.AsynchronousNotify(objDes);
                            }
                        }
                    }
                    tx.Commit();


                }
                using (ITransaction tx1 = proxy.MarcomManager.GetTransaction())
                {
                    string milestoneUpdateName = "Update PM_Entity set Name= ?  where ID =  ?";
                    tx1.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(milestoneUpdateName, HttpUtility.HtmlEncode(milstoneName), entityId);
                    var result = InsertEntityAttributes(tx1, milestoneObj, entityId, milestoneTypeID);
                    tx1.Commit();
                    //Adding to the Search Engine
                    System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => UpdateEntityforSearchAsync(proxy, entityId, milstoneName, entityId));
                    taskforaddentityforsearch.Start();
                }
                return true;
                //
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return false;

        }

        /// <summary>
        /// Updates the milestone.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Id">The id.</param>
        /// <param name="Entityid">The entityid.</param>
        /// <param name="Name">The name.</param>
        /// <param name="Description">The description.</param>
        /// <param name="Status">The status.</param>
        /// <param name="DueDate">The due date.</param>
        /// <returns>bool</returns>
        public bool UpdateMilestone(PlanningManagerProxy proxy, int Id, int Entityid, string Name, string Description, int Status, DateTimeOffset DueDate)
        {
            try
            {
                IMilestone IM = new Milestone();
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        MilestoneDao dao = new MilestoneDao();
                        dao.Id = Id;
                        dao.Status = Status;
                        tx.PersistenceManager.PlanningRepository.Save<MilestoneDao>(dao);
                        tx.Commit();
                        IM.Id = dao.Id;
                        IM.Status = dao.Status;
                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }


        }

        /// <summary>
        /// Deletes the mile stone.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns>
        /// <exception cref="System.NotImplementedException"></exception>
        public bool DeleteMileStone(PlanningManagerProxy proxy, int id)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                string milestoneDynamicQuery = string.Empty;

                //string query = "select * from pm_entity where id=" + id + "";
                //var milestonedetails= tx.PersistenceManager.PlanningRepository.ExecuteQuery(query).Cast<Hashtable>().ToList();

                var milestoneEntityResult = tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>().Where(a => a.Id == id).Select(a => new { EntityID = a.Parentid, MilestoneName = a.Name }).FirstOrDefault();
                milestoneDynamicQuery = "Delete from MM_AttributeRecord_" + Convert.ToInt32(EntityTypeList.Milestone) + " where id= ?";
                tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(milestoneDynamicQuery, id);
                string milestoneRecordQuery = "update PM_Entity set Active = 0 where ID = ? ";
                tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(milestoneDynamicQuery, id);
                tx.Commit();

                //Adding to the Search Engine
                System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => RemoveEntityAsync(proxy, id));
                taskforaddentityforsearch.Start();

                try
                {
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    //fs.AddNewsFeed( 11, 0, "milestone delete", "", "", "", 0, id);
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.EntityId = (int)milestoneEntityResult.EntityID;
                    obj.AttributeId = id;
                    obj.AttributeName = (string)milestoneEntityResult.MilestoneName; //milestonedetails[0]["Name"].ToString();
                    obj.action = "milestone delete";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    fs.AsynchronousNotify(obj);
                }
                catch (Exception ex)
                {
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                }
            }

            return true;
        }

        //Financials
        /// <summary>
        /// Adds the cost center.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="costcenterId">The costcenter id.</param>
        /// <param name="plannedAmount">The planned amount.</param>
        /// <param name="requestedAmount">The requested amount.</param>
        /// <param name="approvedallocatedAmount">The approvedallocated amount.</param>
        /// <param name="approvedBudget">The approved budget.</param>
        /// <param name="commited">The commited.</param>
        /// <param name="spent">The spent.</param>
        /// <param name="approvedbudgetDate">The approvedbudget date.</param>
        /// <returns>int</returns>
        public int AddCostCenter(PlanningManagerProxy proxy, int entityId, int costcenterId, decimal plannedAmount, decimal requestedAmount, decimal approvedallocatedAmount, decimal approvedBudget, decimal commited, decimal spent, DateTimeOffset approvedbudgetDate)
        {
            try
            {
                IFinancial _financial = new Financial();
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        FinancialDao dao = new FinancialDao();
                        dao.Entityid = entityId;
                        dao.CostCenterid = costcenterId;
                        dao.PlannedAmount = plannedAmount;
                        dao.RequestedAmount = requestedAmount;
                        dao.ApprovedAllocatedAmount = approvedallocatedAmount;
                        dao.ApprovedBudget = approvedBudget;
                        dao.Commited = commited;
                        dao.Spent = spent;
                        dao.ApprovedBudgetDate = approvedbudgetDate;
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(dao);
                        tx.Commit();
                        _financial.Id = dao.Id;
                        _financial.Entityid = entityId;
                        _financial.CostCenterid = dao.CostCenterid;
                        _financial.PlannedAmount = dao.PlannedAmount;
                        _financial.RequestedAmount = dao.RequestedAmount;
                        _financial.ApprovedAllocatedAmount = dao.ApprovedAllocatedAmount;
                        _financial.ApprovedBudget = dao.ApprovedBudget;
                        _financial.Commited = dao.Commited;
                        _financial.Spent = dao.Spent;
                        _financial.ApprovedBudgetDate = dao.ApprovedBudgetDate;
                        return _financial.Id;

                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        /// <summary>
        /// Deletes the cost center.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="costcenterId">The costcenter id.</param>
        /// <returns>bool</returns>
        public bool DeleteCostCenter(PlanningManagerProxy proxy, int ID)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.CostCenter, OperationId.Delete);
                IFinancial _financial = new Financial();
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FinancialDao dao = new FinancialDao();
                    dao.Id = ID;
                    //dao.Entityid = entityId;
                    //dao.CostCenterid = costcenterId;
                    tx.PersistenceManager.PlanningRepository.Delete<FinancialDao>(dao);
                    tx.Commit();
                    //_financial.Entityid = dao.Entityid;
                    //_financial.CostCenterid = dao.CostCenterid;
                    //_financial.PlannedAmount = dao.PlannedAmount;
                    //_financial.RequestedAmount = dao.RequestedAmount;
                    //_financial.ApprovedAllocatedAmount = dao.ApprovedAllocatedAmount;
                    //_financial.ApprovedBudget = dao.ApprovedBudget;
                    //_financial.Commited = dao.Commited;
                    //_financial.Spent = dao.Spent;
                    //_financial.ApprovedBudgetDate = dao.ApprovedBudgetDate;

                }
                return true;
                //}
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }


        }

        /// <summary>
        /// Creates the funding request.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="costcenterId">The costcenter id.</param>
        /// <param name="amount">The amount.</param>
        /// <returns>last inserted id</returns>
        public int CreateFundingRequest(PlanningManagerProxy proxy, int entityId, int costcenterId, decimal amount, string duedate, string comment)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityId, Modules.Planning);
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                IFundingRequest _CreateFundingRequest = new FundingRequest();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FundingRequestDao dao = new FundingRequestDao();
                    dao.Entityid = entityId;
                    dao.CostCenterid = costcenterId;
                    dao.LastUpdatedOn = DateTimeOffset.Now;
                    dao.RequestedBy = 12772;
                    tx.PersistenceManager.PlanningRepository.Delete<FundingRequestDao>(dao);
                    tx.Commit();
                    _CreateFundingRequest.Id = dao.Id;


                }
                return _CreateFundingRequest.Id;
                //}
                return 0;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        /// <summary>
        /// Updates the funding request.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="costcenterId">The costcenter id.</param>
        /// <param name="state">The state.</param>
        /// <returns>bool</returns>
        public bool UpdateFundingRequest(PlanningManagerProxy proxy, int entityId, int costcenterId, int state)
        {
            try
            {
                IFundingRequest _UpdateFundingRequest = new FundingRequest();

                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        FundingRequestDao dao = new FundingRequestDao();
                        dao.Entityid = entityId;
                        dao.CostCenterid = costcenterId;
                        tx.PersistenceManager.PlanningRepository.Save<FundingRequestDao>(dao);
                        tx.Commit();
                        _UpdateFundingRequest.Entityid = dao.Entityid;
                        _UpdateFundingRequest.CostCenterid = dao.CostCenterid;
                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }


        /// <summary>
        /// get funding request.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>IFundingRequests</returns>
        public IList<IFundingRequest> getfundingRequestsByEntityID(PlanningManagerProxy proxy, int EntityId)
        {
            try
            {
                IList<IFundingRequest> _attachmentsList = new List<IFundingRequest>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<FundingRequestDao> dao = new List<FundingRequestDao>();
                    string CostcenterentityName = "AttributeRecord5_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    string FundingRequestentityName = "AttributeRecord7_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    dao = (from item in tx.PersistenceManager.UserRepository.Query<FundingRequestDao>()
                           where item.Entityid == EntityId
                           select item).OrderBy(a => a.FundRequestSTATUS).ToList<FundingRequestDao>();
                    foreach (var val in dao)
                    {
                        IFundingRequest _attachments = new FundingRequest();
                        _attachments.Id = val.Id;
                        _attachments.Entityid = val.Entityid;
                        _attachments.CostCenterid = val.CostCenterid;
                        _attachments.CostCentreOwnerID = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                                          join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                                          where item.Entityid == val.CostCenterid && EntityTypeRole.EntityRoleID == 1
                                                          select item.Userid).FirstOrDefault();
                        var CentityName = GetEntityName(tx, val.CostCenterid);
                        var OwnerDetails = (from entityrole in tx.PersistenceManager.UserRepository.Query<EntityRoleUserDao>()
                                            join user in tx.PersistenceManager.UserRepository.Query<UserDao>() on entityrole.Userid equals user.Id
                                            join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on entityrole.Roleid equals EntityTypeRole.ID
                                            where entityrole.Entityid == val.CostCenterid && EntityTypeRole.EntityRoleID == 1
                                            select new
                                            {
                                                username = user.FirstName + " " + user.LastName,
                                                OwnerID = user.Id
                                            }).FirstOrDefault();
                        _attachments.CostCenterName = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == val.CostCenterid select item.Name).FirstOrDefault().ToString();
                        _attachments.CostCenterOwnerName = OwnerDetails.username;
                        _attachments.FundRequestSTATUS = val.FundRequestSTATUS;
                        _attachments.RequestAmount = (from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(FundingRequestentityName) where item.Id == val.Id select item.Attributes["20"]).FirstOrDefault().ToString();
                        _attachments.Status = Convert.ToInt32((from item in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where item.Entityid == EntityId && item.CostCenterid == val.CostCenterid select item.Status).FirstOrDefault().ToString());
                        DateTime duedateval = Convert.ToDateTime((from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(FundingRequestentityName) where item.Id == val.Id select item.Attributes["56"]).FirstOrDefault());
                        _attachments.DueDate = duedateval.ToString("yyyy-MM-dd");
                        _attachments.RequestedBy = val.RequestedBy;
                        _attachments.RequestUser = (from item in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where item.Id == val.RequestedBy select item.FirstName + " " + item.LastName).FirstOrDefault().ToString();
                        DateTime Reqdateval = Convert.ToDateTime(val.LastUpdatedOn.ToString());
                        _attachments.RequestDate = Reqdateval.ToString("yyyy-MM-dd");
                        DateTime d1 = duedateval;
                        DateTime d2 = DateTime.Now;
                        TimeSpan t = d1 - d2;
                        _attachments.Duedates = (int)t.TotalDays;
                        if (_attachments.Duedates == 0)
                            _attachments.Duedates = 1;
                        _attachments.Description = (from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(FundingRequestentityName) where item.Id == val.Id select item.Attributes["3"]).FirstOrDefault().ToString();
                        var sbMain = new StringBuilder();
                        sbMain.Append("DECLARE @CostAmount INT ");
                        sbMain.Append("DECLARE @EntityVal INT  ");
                        sbMain.Append("DECLARE @EntityBeforeApprovedAmount INT  ");
                        sbMain.Append("DECLARE @EntityID INT = " + val.Entityid + " ");
                        sbMain.Append("DECLARE @CostCenterID INT = " + val.CostCenterid + " ");
                        sbMain.Append("SET @EntityVal = ( ");
                        sbMain.Append("        SELECT SUM(ApprovedAllocatedAmount) ");
                        sbMain.Append("        FROM   PM_Financial ps ");
                        sbMain.Append("               INNER ");
                        sbMain.Append("        JOIN PM_Entity pe ");
                        sbMain.Append("                    ON  pe.ID = ps.EntityID ");
                        sbMain.Append("                   AND pe.Level = 1 ");
                        sbMain.Append("        WHERE  CostCenterID = @CostCenterID ");
                        sbMain.Append("    )  ");
                        sbMain.Append("SET @CostAmount = ( ");
                        sbMain.Append("        SELECT Attr_59 ");
                        sbMain.Append("        FROM   MM_AttributeRecord_5 ");
                        sbMain.Append("        WHERE  Id = @CostCenterID ");
                        sbMain.Append("    ) ");
                        sbMain.Append("SET @EntityBeforeApprovedAmount = ( ");
                        sbMain.Append("         SELECT SUM(ApprovedAllocatedAmount) ");
                        sbMain.Append("        FROM   PM_Financial ");
                        sbMain.Append("       WHERE  EntityID = @EntityID AND CostCenterID=@CostCenterID ");
                        sbMain.Append("    ) ");
                        sbMain.Append("SELECT @CostAmount                    AS AllocatedAmount, ");
                        sbMain.Append("       @EntityVal                     AS PreviousAllApprovedAmount, ");
                        sbMain.Append("       @EntityBeforeApprovedAmount    AS EntityBeforeApprovedAmount, ");
                        sbMain.Append("       SUM(@CostAmount - @EntityVal)  AS BeforeApproval ");
                        IList ccdetails = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sbMain.ToString());
                        if (ccdetails.Count > 0)
                        {
                            _attachments.CCTotalApprovedAmountThisLevel = (int)((System.Collections.Hashtable)(ccdetails)[0])["EntityBeforeApprovedAmount"];
                            _attachments.CCAvailableAmount = (int)((System.Collections.Hashtable)(ccdetails)[0])["BeforeApproval"];
                            _attachments.CCPreviousAllApprovedAmount = (int)((System.Collections.Hashtable)(ccdetails)[0])["PreviousAllApprovedAmount"];
                            _attachments.CCAssignedAmount = (int)((System.Collections.Hashtable)(ccdetails)[0])["AllocatedAmount"];
                        }
                        _attachmentsList.Add(_attachments);
                    }


                }
                return _attachmentsList;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes the funding request.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Id">The id.</param>
        /// <returns>bool</returns>
        public bool DeleteFundingRequest(PlanningManagerProxy proxy, int Id)
        {
            try
            {
                IFundingRequest _DeleteFundingRequest = new FundingRequest();

                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        FundingRequestDao dao = new FundingRequestDao();
                        dao.Id = Id;

                        var entityDao = tx.PersistenceManager.PlanningRepository.Get<EntityDao>(Id);
                        entityDao.Id = Id;
                        entityDao.Active = false;
                        tx.PersistenceManager.PlanningRepository.Save<EntityDao>(entityDao);
                        tx.PersistenceManager.PlanningRepository.Save<FundingRequestDao>(dao);
                        tx.Commit();
                        _DeleteFundingRequest.Id = dao.Id;
                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        //Objective Cration

        /// <summary>
        /// Creates the objective.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="typeId">The type id.</param>
        /// <param name="name">The name.</param>
        /// <param name="isEnableFeedback">The is enable feedback.</param>
        /// <param name="startDate">The start date.</param>
        /// <param name="endDate">The end date.</param>
        /// <param name="dateRule">The date rule.</param>
        /// <param name="isMandatory">The is mandatory.</param>
        /// <param name="numeric">The numeric.</param>
        /// <param name="ratings">The ratings.</param>
        /// <param name="conditions">The conditions.</param>
        /// <returns>Last inserted Objective ID</returns>
        // public int CreateObjective(PlanningManagerProxy proxy, int typeId, String name, IObjectiveNumeric numeric, IList<IObjectiveRating> ratings, IList<IObjectiveCondition> conditions, IList<IEntityRoleUser> entityMembers, IList<IAttributeData> entityattributedata)
        //{
        //    return CreateObjective(proxy, typeId, name, numeric, ratings, conditions,entityMembers,entityattributedata,null);
        // }

        /// <summary>
        /// Creates the objective.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="typeId">The type id.</param>
        /// <param name="name">The name.</param>
        /// <param name="instruction">The instruction.</param>
        /// <param name="isEnableFeedback">The is enable feedback.</param>
        /// <param name="startDate">The start date.</param>
        /// <param name="endDate">The end date.</param>
        /// <param name="dateRule">The date rule.</param>
        /// <param name="isMandatory">The is mandatory.</param>
        /// <param name="numeric">The numeric.</param>
        /// <param name="ratings">The ratings.</param>
        /// <param name="conditions">The conditions.</param>
        /// <returns>Last inserted Objective ID</returns>
        //public int CreateObjective(PlanningManagerProxy proxy, int typeId, String name, IObjectiveNumeric numeric, IList<IObjectiveRating> ratings, IList<IObjectiveCondition> conditions,IList<IEntityRoleUser> entityMembers, IList<IAttributeData> entityattributedata)
        //{
        //    return CreateObjective(proxy, typeId, name, numeric, ratings, conditions,entityMembers,entityattributedata,null);
        // }

        /// <summary>
        /// Creates the objective.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="typeId">The type id.</param>
        /// <param name="name">The name.</param>
        /// <param name="objDescription">The Description.</param>
        /// <param name="instruction">The instruction.</param>
        /// <param name="isEnableFeedback">The is enable feedback.</param>
        /// <param name="startDate">The start date.</param>
        /// <param name="endDate">The end date.</param>
        /// <param name="dateRule">The date rule.</param>
        /// <param name="isMandatory">The is mandatory.</param>
        /// <param name="objNumeric">The objNumeric.</param>
        /// <param name="objRatings">The objRatings.</param>
        /// <param name="ratingObjArr">The Ratings Caption List</param>
        /// <param name="objFullfilConditions">The objFullfilConditions.</param>
        /// <param name="objEntityMembers">The MembersList.</param>
        /// <returns>Last inserted Objective ID</returns>
        public int CreateObjective(PlanningManagerProxy proxy, int typeId, String name, bool objStatus, string objDescription, string objInstruction, bool objIsEnableFeedback, DateTime objStartDate, DateTime objEndDate, int objDateRule, bool objMandatory, IObjectiveNumeric objNumeric, IObjectiveNumeric objNonNumeric, IList<IObjectiveRating> objRatings, List<string> ratingObjArr, IList<IObjectiveFulfillCondtions> objFullfilConditions, IList<IEntityRoleUser> objEntityMembers)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.Objective, OperationId.Create);
                int objectiveId = 0;
                ObjectiveDao dao = new ObjectiveDao();
                IObjective objval = new Objective();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    // Business logic of Objective

                    objectiveId = GetBaseEntityID(10, name, tx, 0, true);
                    //Adding Admin Task to the objective
                    System.Threading.Tasks.Task taskforaddtaskContenttosearch = new System.Threading.Tasks.Task(() => GettingPredefineTemplatesForEntityMetadata(proxy, null, (int)EntityTypeList.Objective, objectiveId));
                    taskforaddtaskContenttosearch.Start();

                    ObjectiveDao objDao = new ObjectiveDao();
                    objDao.Id = objectiveId;
                    objDao.Typeid = typeId;
                    objDao.Name = HttpUtility.HtmlEncode(name);
                    objDao.Description = HttpUtility.HtmlEncode(objDescription);
                    objDao.Instruction = HttpUtility.HtmlEncode(objInstruction);
                    objDao.IsEnableFeedback = objIsEnableFeedback;
                    objDao.StartDate = objStartDate;
                    objDao.EndDate = objEndDate;
                    objDao.DateRule = objDateRule;
                    objDao.IsMandatory = objMandatory;
                    objDao.ObjectiveStatus = objStatus;
                    tx.PersistenceManager.PlanningRepository.Save<ObjectiveDao>(objDao);

                    IList<IAttributeData> listattr = new List<IAttributeData>();
                    IAttributeData attrData = new AttributeData();
                    //attrData.ID = 58;
                    //attrData.Caption = "Name";
                    //attrData.TypeID = 1;
                    //attrData.Value = name;
                    //listattr.Add(attrData);
                    var result = InsertEntityAttributes(tx, listattr, objectiveId, 10);
                    if (objNumeric != null)
                    {
                        ObjectiveNumericDao objnumdao = new ObjectiveNumericDao();
                        objnumdao.ObjectiveId = objectiveId;
                        objnumdao.GlobalBaseLine = objNumeric.GlobalBaseLine;
                        objnumdao.GlobalTarget = objNumeric.GlobalTarget;
                        objnumdao.Unitid = objNumeric.Unitid;
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveNumericDao>(objnumdao);
                    }
                    if (objNonNumeric != null)
                    {
                        ObjectiveNumericDao objnumdao = new ObjectiveNumericDao();
                        objnumdao.ObjectiveId = objectiveId;
                        objnumdao.GlobalBaseLine = objNonNumeric.GlobalBaseLine;
                        objnumdao.GlobalTarget = objNonNumeric.GlobalTarget;
                        objnumdao.Unitid = objNonNumeric.Unitid;
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveNumericDao>(objnumdao);
                    }
                    if (objRatings != null)
                    {
                        int sortOrder = 0;
                        IList<ObjectiveRatingDao> Ilistobjratdao = new List<ObjectiveRatingDao>();
                        foreach (var a in ratingObjArr)
                        {
                            ObjectiveRatingDao objratdao = new ObjectiveRatingDao();
                            objratdao.Objectiveid = objectiveId;
                            objratdao.Caption = Convert.ToString(a);
                            objratdao.SortOrder = sortOrder + 1;
                            Ilistobjratdao.Add(objratdao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveRatingDao>(Ilistobjratdao);
                    }
                    if (objFullfilConditions != null)
                    {
                        IList<ObjectiveConditionDao> Iobjcondao = new List<ObjectiveConditionDao>();
                        IList<ObjectiveConditionValueDao> listObjfulfullValue = new List<ObjectiveConditionValueDao>();
                        foreach (var ab in objFullfilConditions)
                        {
                            ObjectiveConditionDao objCon = new ObjectiveConditionDao();
                            objCon.Objectiveid = objectiveId;
                            objCon.EntityTypeid = ab.EntityTypeid;
                            objCon.Attributeid = ab.Attributeid;
                            objCon.ConditionType = ab.ConditionType;
                            objCon.AttributeLevel = ab.AttributeLevel;
                            objCon.SortOrder = 1;
                            tx.PersistenceManager.PlanningRepository.Save<ObjectiveConditionDao>(objCon);

                            var conditionId = objCon.Id;
                            if (ab.ObjectiveConditionValue != null)
                            {
                                var conditionValueObj = ab.ObjectiveConditionValue;
                                foreach (var objew in conditionValueObj)
                                {
                                    ObjectiveConditionValueDao conditionDao = new ObjectiveConditionValueDao();
                                    conditionDao.Conditionid = conditionId;
                                    conditionDao.Value = Convert.ToInt32(objew);
                                    listObjfulfullValue.Add(conditionDao);
                                }
                            }
                            else
                            {
                                ObjectiveConditionValueDao conditionDao = new ObjectiveConditionValueDao();
                                conditionDao.Conditionid = conditionId;
                                listObjfulfullValue.Add(conditionDao);
                            }
                            tx.PersistenceManager.PlanningRepository.Save<ObjectiveConditionValueDao>(listObjfulfullValue);

                        }
                    }
                    if (objMandatory == true && objFullfilConditions.Count > 0)
                    {
                        InsertingMandatoryObjectiveEntities(tx, objectiveId, objStartDate.ToString("MM/dd/yyyy"), objEndDate.ToString("MM/dd/yyyy"), objDateRule);
                    }


                    string objectivecriteria = "";
                    objectivecriteria = InsertingObjectiveConditionQuery(tx, objectiveId, objStartDate.ToString("MM/dd/yyyy"), objEndDate.ToString("MM/dd/yyyy"), objDateRule);

                    objDao.ObjectiveCriteria = objectivecriteria;
                    //tx.PersistenceManager.PlanningRepository.Save<ObjectiveDao>(objDao);

                    if (objEntityMembers != null)
                    {
                        IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                        foreach (var a in objEntityMembers)
                        {

                            EntityRoleUserDao entityroledao = new EntityRoleUserDao();


                            int RoleID = a.Roleid;

                            if (a.Roleid == 1)
                            {
                                var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == 10 && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                RoleID = NewObj.ID;
                            }

                            entityroledao.Entityid = objectiveId;
                            entityroledao.Roleid = RoleID;
                            entityroledao.Userid = a.Userid;
                            entityroledao.IsInherited = a.IsInherited;
                            entityroledao.InheritedFromEntityid = a.InheritedFromEntityid;
                            Ientitroledao.Add(entityroledao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientitroledao);
                    }
                    tx.Commit();

                    //Adding to the Search Engine
                    System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => AddEntityAsync(proxy, objectiveId.ToString(), name));
                    taskforaddentityforsearch.Start();

                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    //fs.AddNewsFeed( 1, entityId, entityTypeName, "", name, "", 0);
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "create entity";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = objectiveId;
                    obj.EntityTypeId = typeId;
                    obj.AttributeName = name;
                    obj.TypeName = "Objective";
                    obj.CreatedOn = DateTimeOffset.Now;
                    obj.ParentId = 0;
                    fs.AsynchronousNotify(obj);

                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Updated the Feeds", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs1 = new Utility.FeedNotificationServer();
                    NotificationFeedObjects obj1 = new NotificationFeedObjects();
                    obj1.action = "entity member added";
                    obj1.Actorid = proxy.MarcomManager.User.Id;
                    obj1.EntityId = objectiveId;
                    obj1.EntityTypeId = typeId;
                    obj1.AttributeName = name;
                    obj1.TypeName = "Objective";
                    obj1.CreatedOn = DateTimeOffset.Now;
                    obj1.ParentId = 0;
                    obj1.obj3 = tx.PersistenceManager.AccessRepository.ExecuteQuery("select * from AM_Entity_Role_User where EntityID='" + objectiveId + "' or EntityID='" + 0 + "'");

                    fs1.AsynchronousNotify(obj1);

                }
                InsertUpdateGanttEntitySortorder(proxy, objectiveId);
                return objectiveId;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        /// <summary>
        /// Selects the objective by ID.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="ID">The ID.</param>
        /// <returns>IObjective</returns>
        public IObjective SelectObjectiveByID(PlanningManagerProxy proxy, int objectiveId)
        {
            try
            {
                Objective objdata = new Objective();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    ObjectiveDao dao = new ObjectiveDao();
                    dao = tx.PersistenceManager.PlanningRepository.Get<ObjectiveDao>(objectiveId);
                    ObjectiveNumeric objnum = new ObjectiveNumeric();
                    if (dao.Numeric != null)
                    {
                        objnum.ObjectiveId = dao.Numeric.ObjectiveId;
                        objnum.GlobalBaseLine = dao.Numeric.GlobalBaseLine;
                        objnum.GlobalTarget = dao.Numeric.GlobalTarget;
                        objnum.Unitid = dao.Numeric.Unitid;
                        objdata.Numeric = objnum;
                    }
                    IList<ObjectiveRating> Iobj = new List<ObjectiveRating>();
                    ObjectiveRating objrat = new ObjectiveRating();
                    if (dao.Ratings != null)
                    {
                        foreach (var a in dao.Ratings)
                        {
                            objrat.Id = a.Id;
                            objrat.Objectiveid = a.Objectiveid;
                            objrat.Caption = a.Caption;
                            objrat.SortOrder = a.SortOrder;
                            Iobj.Add(objrat);
                        }
                        objdata.Ratings = Iobj.ToArray();
                    }
                    if (dao.Conditions != null)
                    {
                        IList<ObjectiveCondition> Iobjcon = new List<ObjectiveCondition>();
                        ObjectiveCondition objcon = new ObjectiveCondition();
                        foreach (var a in dao.Conditions)
                        {
                            objcon.Id = a.Id;
                            objcon.Objectiveid = a.Objectiveid;
                            objcon.EntityTypeid = a.EntityTypeid;
                            objcon.Attributeid = a.Attributeid;
                            objcon.ConditionType = a.ConditionType;
                            objcon.SortOrder = a.SortOrder;
                            Iobjcon.Add(objcon);
                        }
                        objdata.Conditions = Iobjcon.ToArray();
                    }

                    if (dao.Value != null)
                    {
                        IList<IObjectiveEntityValue> listObjentval = new List<IObjectiveEntityValue>();
                        foreach (var obj in dao.Value)
                        {
                            ObjectiveEntityValue objenval = new ObjectiveEntityValue();
                            objenval.Objectiveid = obj.Objectiveid;
                            objenval.Entityid = obj.Entityid;
                            objenval.PlannedTarget = obj.PlannedTarget;
                            objenval.TargetOutcome = obj.TargetOutcome;
                            objenval.RatingObjective = obj.RatingObjective;
                            objenval.Comments = obj.Comments;
                            objenval.Status = obj.Status;
                            objenval.Fulfilment = obj.Fulfilment;
                            listObjentval.Add(objenval);
                        }
                        objdata.Value = listObjentval;
                    }
                    IList<IAttributeData> listattributes = new List<IAttributeData>();
                    var entityattr = GetDynamictAttributeDetails(tx, objectiveId);
                    if (entityattr != null)
                    {
                        objdata.ObjectiveAttributes = entityattr;
                    }
                    tx.Commit();
                }

                return objdata;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        /// <summary>
        /// Updates the objective.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveData">The objective data.</param>
        /// <returns>bool</returns>
        public bool UpdateObjective(PlanningManagerProxy proxy, IObjective objectiveData)
        {
            try
            {
                var objectivId = objectiveData.Id;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    int objectiveId = objectiveData.Id;

                    if (objectiveData.Numeric != null)
                    {
                        ObjectiveNumericDao objnumdao = new ObjectiveNumericDao();
                        objnumdao.ObjectiveId = objectiveId;
                        objnumdao.GlobalBaseLine = objectiveData.Numeric.GlobalBaseLine;
                        objnumdao.GlobalTarget = objectiveData.Numeric.GlobalTarget;
                        objnumdao.Unitid = objectiveData.Numeric.Unitid;
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveNumericDao>(objnumdao);
                    }
                    if (objectiveData.Ratings != null)
                    {
                        IList<ObjectiveRatingDao> Ilistobjratdao = new List<ObjectiveRatingDao>();
                        foreach (var a in objectiveData.Ratings)
                        {
                            ObjectiveRatingDao objratdao = new ObjectiveRatingDao();
                            objratdao.Objectiveid = a.Objectiveid;
                            objratdao.Caption = a.Caption;
                            objratdao.SortOrder = a.SortOrder;
                        }
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveRatingDao>(Ilistobjratdao);
                    }
                    if (objectiveData.Conditions != null)
                    {
                        IList<ObjectiveConditionDao> Iobjcondao = new List<ObjectiveConditionDao>();
                        foreach (var ab in objectiveData.Conditions)
                        {
                            ObjectiveConditionDao objCon = new ObjectiveConditionDao();
                            objCon.Objectiveid = ab.Objectiveid;
                            objCon.EntityTypeid = ab.EntityTypeid;
                            objCon.Attributeid = ab.Attributeid;
                            objCon.ConditionType = ab.ConditionType;
                            objCon.SortOrder = ab.SortOrder;
                            Iobjcondao.Add(objCon);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveConditionDao>(Iobjcondao);
                    }
                    if (objectiveData.Value != null)
                    {
                        IList<ObjectiveEntityValueDao> listObjentitydao = new List<ObjectiveEntityValueDao>();
                        ObjectiveEntityValueDao obendao = new ObjectiveEntityValueDao();
                        foreach (var obj in objectiveData.Value)
                        {
                            obendao.Objectiveid = obj.Objectiveid;
                            obendao.Entityid = obj.Entityid;
                            obendao.PlannedTarget = obj.PlannedTarget;
                            obendao.TargetOutcome = obj.TargetOutcome;
                            obendao.RatingObjective = obj.RatingObjective;
                            obendao.Comments = obj.Comments;
                            obendao.Status = obj.Status;
                            obendao.Fulfilment = obj.Fulfilment;
                        }
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveEntityValueDao>(listObjentitydao);
                    }
                    if (objectiveData.ObjectiveAttributes != null)
                    {
                        var result = UpdateAttributeData(tx, objectiveData.ObjectiveAttributes, objectiveId);
                    }

                    tx.Commit();
                }

                return true;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Deletes the objective.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objective">The objective.</param>
        /// <returns>bool</returns>
        public bool DeleteObjective(PlanningManagerProxy proxy, int objectiveId)
        {
            try
            {

                ObjectiveDao dao = new ObjectiveDao();
                BaseEntityDao entdao = new BaseEntityDao();
                ObjectiveNumericDao objnumdao = new ObjectiveNumericDao();
                ObjectiveRatingDao objratdao = new ObjectiveRatingDao();
                ObjectiveConditionDao objcondao = new ObjectiveConditionDao();
                ObjectiveEntityValueDao objentdao = new ObjectiveEntityValueDao();



                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    dao = tx.PersistenceManager.PlanningRepository.Get<ObjectiveDao>(objectiveId);
                    objnumdao = dao.Numeric;
                    entdao = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(objectiveId);

                    if (dao.Numeric != null)
                    {
                        tx.PersistenceManager.PlanningRepository.DeleteByID<ObjectiveNumericDao>(objectiveId);
                    }
                    if (dao.Ratings != null)
                    {
                        tx.PersistenceManager.PlanningRepository.DeleteByID<ObjectiveRatingDao>(objectiveId);
                    }
                    if (dao.Conditions != null)
                    {
                        tx.PersistenceManager.PlanningRepository.DeleteByID<ObjectiveConditionDao>(objectiveId);
                    }
                    if (dao.Value != null)
                    {
                        tx.PersistenceManager.PlanningRepository.DeleteByID<ObjectiveEntityValueDao>(objectiveId);
                    }

                    tx.PersistenceManager.PlanningRepository.Delete<BaseEntityDao>(entdao);
                    DeleteEntitySortOrder(tx, objectiveId);
                    tx.Commit();
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        //Objective-Units creation

        /// <summary>
        /// Creates the units.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="caption">The caption.</param>
        /// <returns>last inserted id</returns>
        public int CreateUnits(PlanningManagerProxy proxy, int id, string caption)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        ObjectiveUnitDao objUnitsdao = new ObjectiveUnitDao();
                        objUnitsdao.Id = id;
                        objUnitsdao.Caption = caption;
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveUnitDao>(objUnitsdao);
                        tx.Commit();
                        IObjectiveUnit objunits = new ObjectiveUnit();
                        objunits.Id = objUnitsdao.Id;
                        objunits.Caption = objUnitsdao.Caption;
                        return objunits.Id;
                    }

                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        /// <summary>
        /// Selects the units by id.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>IObjectiveUnit</returns>
        public IObjectiveUnit SelectUnitsById(PlanningManagerProxy proxy, int id)
        {

            try
            {
                IObjectiveUnit _objunits = new ObjectiveUnit();
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        ObjectiveUnitDao dao = new ObjectiveUnitDao();
                        dao = tx.PersistenceManager.PlanningRepository.Get<ObjectiveUnitDao>(id);
                        tx.Commit();
                        _objunits.Id = dao.Id;
                        _objunits.Caption = dao.Caption;
                    }
                    return _objunits;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes the units by id.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>bool</returns>
        public bool DeleteUnitsById(PlanningManagerProxy proxy, int id)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        IObjectiveUnit units = new ObjectiveUnit();
                        ObjectiveUnitDao objunitDeldao = new ObjectiveUnitDao();
                        objunitDeldao.Id = units.Id;
                        objunitDeldao.Caption = units.Caption;
                        tx.PersistenceManager.PlanningRepository.DeleteByID<ObjectiveUnitDao>(id);
                        tx.Commit();

                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Updates the units.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="units">The units.</param>
        /// <returns>IObjectiveUnit</returns>
        public bool UpdateUnits(PlanningManagerProxy proxy, IObjectiveUnit units)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        ObjectiveUnitDao dao = new ObjectiveUnitDao();
                        dao.Id = units.Id;
                        dao.Caption = units.Caption;
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveUnitDao>(dao);
                        tx.Commit();
                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        //Objective-Ratings

        /// <summary>
        /// Creates the ratings.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveid">The objectiveid.</param>
        /// <param name="caption">The caption.</param>
        /// <param name="sortOrder">The sort order.</param>
        /// <returns>last inserted id</returns>
        public int CreateRatings(PlanningManagerProxy proxy, int objectiveid, String caption, int sortOrder)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        ObjectiveRatingDao dao = new ObjectiveRatingDao();
                        dao.Objectiveid = objectiveid;
                        dao.Caption = caption;
                        dao.SortOrder = sortOrder;
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveRatingDao>(dao);
                        tx.Commit();
                        IObjectiveRating objRatings = new ObjectiveRating();
                        objRatings.Objectiveid = dao.Objectiveid;
                        objRatings.Caption = dao.Caption;
                        objRatings.SortOrder = dao.SortOrder;
                        return objRatings.Id;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        /// <summary>
        /// Selects the ratings.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>IObjectiveRating</returns>
        public IObjectiveRating SelectRatings(PlanningManagerProxy proxy, int id)
        {
            try
            {
                IObjectiveRating _objratings = new ObjectiveRating();
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        ObjectiveRatingDao dao = new ObjectiveRatingDao();
                        dao = tx.PersistenceManager.PlanningRepository.Get<ObjectiveRatingDao>(id);
                        tx.Commit();
                        _objratings.Id = dao.Id;
                        _objratings.Objectiveid = dao.Objectiveid;
                        _objratings.Caption = dao.Caption;
                        _objratings.SortOrder = dao.SortOrder;
                    }
                    return _objratings;

                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        /// <summary>
        /// Deletes the ratings.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>bool</returns>
        public bool DeleteRatings(PlanningManagerProxy proxy, int id)
        {
            if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IObjectiveRating objratings = new ObjectiveRating();
                    ObjectiveRatingDao dao = new ObjectiveRatingDao();
                    dao.Id = objratings.Id;
                    dao.Objectiveid = objratings.Objectiveid;
                    dao.Caption = objratings.Caption;
                    dao.SortOrder = objratings.SortOrder;
                    tx.PersistenceManager.PlanningRepository.DeleteByID<ObjectiveRatingDao>(id);
                    tx.Commit();
                }

                return true;
            }
            return false;
        }

        //Presentation

        /// <summary>
        /// Selects the EntityPresentation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityID.</param>
        /// <returns>IEntityPresentation</returns>
        public IEntityPresentation GetPresentationByEntityId(PlanningManagerProxy proxy, int id)
        {
            try
            {
                IEntityPresentation _objentityPresentation = new EntityPresentation();
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityPresentationDao dao = new EntityPresentationDao();
                    dao = tx.PersistenceManager.PlanningRepository.Get<EntityPresentationDao>(id);
                    tx.Commit();
                    _objentityPresentation.EntityId = dao.EntityId;
                    _objentityPresentation.PublishedOn = dao.PublishedOn;
                    _objentityPresentation.Content = dao.Content;
                }
                return _objentityPresentation;

                //}
                //return null;
            }
            catch (Exception ex)
            {
                return null;
            }

        }



        /// <summary>
        /// Creates the presentation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="PublishedOn">The published on.</param>
        /// <param name="Content">The content.</param>
        /// <returns>last inserted id</returns>
        public int CreatePresentation(PlanningManagerProxy proxy, int entityId, DateTimeOffset PublishedOn, int[] entityList, String Content = null)
        {

            try
            {
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    // Business logic of Presentation
                    EntityPresentationDao dao = new EntityPresentationDao();
                    dao.EntityId = entityId;
                    dao.PublishedOn = PublishedOn;
                    dao.Content = Content;
                    tx.PersistenceManager.PlanningRepository.Save<EntityPresentationDao>(dao);

                    for (int i = 0; i < entityList.Count(); i++)
                    {
                        if (entityList[i] != entityId)
                        {
                            dao = null;
                            dao = new EntityPresentationDao();
                            dao.EntityId = entityList[i];
                            dao.PublishedOn = PublishedOn;
                            dao.Content = null;
                            tx.PersistenceManager.PlanningRepository.Save<EntityPresentationDao>(dao);
                        }
                    }
                    tx.Commit();
                    IEntityPresentation presentation = new EntityPresentation();
                    presentation.PublishedOn = dao.PublishedOn;
                    presentation.Content = dao.Content;
                    presentation.EntityId = dao.EntityId;
                    return presentation.EntityId;
                }

                //}
                //return 0;
            }
            catch (Exception)
            {
                IEntityPresentation presentation = new EntityPresentation();
                return 0;
            }
        }

        /// <summary>
        /// Updates the presentation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="presentation">The presentation.</param>
        /// <returns>bool</returns>
        public bool UpdatePresentation(PlanningManagerProxy proxy, IEntityPresentation presentation)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityPresentationDao dao = new EntityPresentationDao();
                        dao.PublishedOn = presentation.PublishedOn;
                        dao.Content = presentation.Content;
                        tx.PersistenceManager.PlanningRepository.Save<EntityPresentationDao>(dao);
                        tx.Commit();
                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Updates the presentation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="EntityId">The entity id.</param>
        /// <param name="PublishedOn">The published on.</param>
        /// <param name="Content">The content.</param>
        /// <returns>bool</returns>
        public bool UpdatePresentation(PlanningManagerProxy proxy, int EntityId, DateTimeOffset PublishedOn, string Content)
        {
            try
            {
                IEntityPresentation ep = new EntityPresentation();
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityPresentationDao dao = new EntityPresentationDao();
                        dao.PublishedOn = PublishedOn;
                        dao.Content = Content;
                        tx.PersistenceManager.PlanningRepository.Save<EntityPresentationDao>(dao);
                        tx.Commit();
                        ep.EntityId = dao.EntityId;
                        ep.PublishedOn = dao.PublishedOn;
                        ep.Content = dao.Content;
                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Publishes the this level.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="PublishedOn">The published on.</param>
        /// <returns>bool</returns>
        public bool PublishThisLevel(PlanningManagerProxy proxy, int entityId, DateTimeOffset PublishedOn)
        {

            try
            {
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    // Business logic of Presentation PublishThisLevel
                    EntityPresentationDao dao = new EntityPresentationDao();
                    dao.EntityId = entityId;
                    dao.PublishedOn = PublishedOn;
                    tx.PersistenceManager.PlanningRepository.Save<EntityPresentationDao>(dao);
                    tx.Commit();
                    IEntityPresentation presentation = new EntityPresentation();
                    presentation.EntityId = dao.EntityId;
                    presentation.PublishedOn = dao.PublishedOn;
                    return true;
                }

                //}
                //        return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        //Attachments

        /// <summary>
        /// Creates the attachments.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Entityid">The entityid.</param>
        /// <param name="Name">The name.</param>
        /// <param name="ActiveVersionNo">The active version no.</param>
        /// <param name="ActiveFileid">The active fileid.</param>
        /// <returns>last inserted id</returns>
        public int CreateAttachments(PlanningManagerProxy proxy, int Entityid, String Name, int ActiveVersionNo, int ActiveFileid)
        {
            //Check access 
            //will come Access check one will say true or false , other will come Exception. 
            //After this check whter it is a hhibrite,users or system define ,
            //Start Transaction

            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        // Business logic of Attachements
                        AttachmentsDao dao = new AttachmentsDao();
                        dao.Entityid = Entityid;
                        dao.Name = Name;
                        dao.ActiveVersionNo = ActiveVersionNo;
                        dao.ActiveFileid = ActiveFileid;
                        IList<AttachmentsDao> attachments;
                        attachments = tx.PersistenceManager.PlanningRepository.GetAll<AttachmentsDao>();
                        tx.Commit();
                        var z = from t in attachments where t.Entityid == Entityid && t.Name == Name && t.ActiveVersionNo == ActiveVersionNo select t;
                        if (z.Count() > 0)
                        {
                            dao.Id = z.ElementAt(0).Id;
                        }
                        using (ITransaction tx1 = proxy.MarcomManager.GetTransaction())
                        {
                            tx1.PersistenceManager.PlanningRepository.Save<AttachmentsDao>(dao);
                            tx1.Commit();
                        }
                        IAttachments Attachments = new Attachments();
                        Attachments.Entityid = dao.Entityid;
                        Attachments.Name = dao.Name;
                        Attachments.ActiveVersionNo = dao.ActiveVersionNo;
                        Attachments.ActiveFileid = dao.ActiveFileid;
                        return Attachments.Id;
                    }

                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }


        }

        /// <summary>
        /// Gets the attachments by id.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>IList<IAttachments></returns>
        public IList<IAttachments> GetAttachmentsById(PlanningManagerProxy proxy, int id)
        {
            try
            {
                IList<IAttachments> _attachmentsList = new List<IAttachments>();
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        IList<AttachmentsDao> dao = new List<AttachmentsDao>();

                        dao = tx.PersistenceManager.PlanningRepository.GetAll<AttachmentsDao>(AttachmentsDao.MappingNames.Entityid, id);
                        tx.Commit();
                        foreach (var val in dao)
                        {
                            Attachments _attachments = new Attachments();
                            _attachments.Id = val.Id;
                            _attachments.Entityid = val.Entityid;
                            _attachments.Name = val.Name;
                            _attachments.ActiveVersionNo = val.ActiveVersionNo;
                            _attachments.ActiveFileid = val.ActiveFileid;
                            _attachmentsList.Add(_attachments);
                        }


                    }
                    return _attachmentsList;
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        /// <summary>
        /// Deletes the attachments.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Attachments">The attachments.</param>
        /// <returns>bool</returns>
        public bool DeleteAttachments(PlanningManagerProxy proxy, IAttachments Attachments)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        AttachmentsDao dao = new AttachmentsDao();
                        dao.Id = Attachments.Id;
                        dao.Entityid = Attachments.Entityid;
                        dao.Name = Attachments.Name;
                        dao.ActiveFileid = Attachments.ActiveFileid;
                        dao.ActiveVersionNo = Attachments.ActiveVersionNo;
                        tx.PersistenceManager.PlanningRepository.Delete<AttachmentsDao>(dao);
                        tx.Commit();
                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Deletes the attachments.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Id">The id.</param>
        /// <param name="Entityid">The entityid.</param>
        /// <param name="Name">The name.</param>
        /// <param name="ActiveVersionNo">The active version no.</param>
        /// <param name="ActiveFileid">The active fileid.</param>
        /// <returns>bool</returns>
        public bool DeleteAttachments(PlanningManagerProxy proxy, int Id, int Entityid, string Name, int ActiveVersionNo, int ActiveFileid)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        AttachmentsDao dao = new AttachmentsDao();
                        dao.Id = Id;
                        dao.Entityid = Entityid;
                        dao.Name = Name;
                        dao.ActiveFileid = ActiveFileid;
                        dao.ActiveVersionNo = ActiveVersionNo;
                        tx.PersistenceManager.PlanningRepository.Delete<AttachmentsDao>(dao);
                        tx.Commit();

                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        //Entity Period

        /// <summary>
        /// Creates the entity period.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Entityid">The entityid.</param>
        /// <param name="Startdate">The startdate.</param>
        /// <param name="EndDate">The end date.</param>
        /// <param name="Description">The description.</param>
        /// <param name="SortOrder">The sort order.</param>
        /// <returns>int</returns>
        public int CreateEntityPeriod(PlanningManagerProxy proxy, int Entityid, DateTime Startdate, DateTime EndDate, string Description, int SortOrder)
        {
            //Check access 
            // will come Access check one will say true or false , other will come Exception. 
            //After this check whter it is a hhibrite,users or system define ,
            //Start Transaction
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {


                    // Business logic of EntityPeriod
                    EntityPeriodDao dao = new EntityPeriodDao();
                    dao.Entityid = Entityid;
                    dao.Startdate = Convert.ToDateTime(Startdate.ToString());
                    dao.EndDate = Convert.ToDateTime(EndDate.ToString());
                    dao.Description = Description;
                    dao.SortOrder = SortOrder;
                    tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(dao);
                    tx.Commit();
                    IEntityPeriod EntityPeriod = new EntityPeriod();
                    EntityPeriod.Id = dao.Id;
                    EntityPeriod.Entityid = dao.Entityid;
                    EntityPeriod.Startdate = Convert.ToDateTime(dao.Startdate.ToString());
                    EntityPeriod.EndDate = Convert.ToDateTime(dao.EndDate.ToString());
                    EntityPeriod.Description = dao.Description;
                    EntityPeriod.SortOrder = dao.SortOrder;
                    //to insert feed when a Add start period
                    string dateformate;
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "added start period";
                    obj.EntityId = Entityid;
                    dateformate = proxy.MarcomManager.GlobalAdditionalSettings[0].SettingValue.ToString().Replace('m', 'M');
                    obj.FromValue = Startdate.ToString(dateformate);
                    obj.ToValue = EndDate.ToString(dateformate);
                    obj.AssociatedEntityId = EntityPeriod.Id;
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    fs.AsynchronousNotify(obj);
                    //end
                    if (Description != "-" && Description != "")
                    {
                        NotificationFeedObjects objcomment = new NotificationFeedObjects();
                        objcomment.action = "add comment for period";
                        objcomment.EntityId = Entityid;
                        objcomment.ToValue = Description;
                        objcomment.AssociatedEntityId = EntityPeriod.Id;
                        objcomment.Actorid = proxy.MarcomManager.User.Id;
                        fs.AsynchronousNotify(objcomment);
                    }
                    //end
                    return EntityPeriod.Id;
                }
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        /// <summary>
        /// Gets the entity period by id.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>IEntityPeriod</returns>
        public IEntityPeriod GetEntityPeriodById(PlanningManagerProxy proxy, int id)
        {
            try
            {
                EntityPeriod _Period = new EntityPeriod();
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityPeriodDao dao = new EntityPeriodDao();

                        dao = tx.PersistenceManager.PlanningRepository.Get<EntityPeriodDao>(id);
                        tx.Commit();
                        _Period.Entityid = dao.Entityid;
                        _Period.Startdate = dao.Startdate;
                        _Period.EndDate = dao.EndDate;
                        _Period.Description = dao.Description;
                        _Period.SortOrder = dao.SortOrder;

                    }
                    return _Period;
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }


        }

        /// <summary>
        /// Updates the entity period.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="EntityPeriod">The entity period.</param>
        /// <returns>bool</returns>
        public bool UpdateEntityPeriod(PlanningManagerProxy proxy, IEntityPeriod EntityPeriod)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    EntityPeriodDao dao = new EntityPeriodDao();
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {

                        dao.Startdate = EntityPeriod.Startdate;
                        dao.EndDate = EntityPeriod.EndDate;
                        tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(dao);

                        tx.Commit();
                    }
                    InsertUpdateGanttEntitySortorder(proxy, dao.Entityid);
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }


        /// <summary>
        /// Updates the entity period.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Entityid">The entityid.</param>
        /// <param name="Startdate">The startdate.</param>
        /// <param name="EndDate">The end date.</param>
        /// <param name="Description">The description.</param>
        /// <param name="SortOrder">The sort order.</param>
        /// <returns>bool</returns>
        public string UpdateEntityPeriod(PlanningManagerProxy proxy, DateTime Startdate, DateTime EndDate, string Description, int Id)
        {
            string XmlReturn = "";
            FeedNotificationServer fs = new FeedNotificationServer();
            try
            {
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                EntityPeriodDao val = new EntityPeriodDao();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    val = tx.PersistenceManager.PlanningRepository.Get<EntityPeriodDao>(Id);

                    string dateformate = proxy.MarcomManager.GlobalAdditionalSettings[0].SettingValue.ToString().Replace('m', 'M');
                    DateTime StartDate = new DateTime();
                    StartDate = Convert.ToDateTime(Startdate.ToString());
                    DateTime Enddate = new DateTime();
                    Enddate = Convert.ToDateTime(EndDate.ToString());

                    if (val.Startdate.ToString(dateformate) != StartDate.ToString(dateformate) || val.EndDate.ToString(dateformate) != Enddate.ToString(dateformate))
                    {
                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.action = "metadata update";
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.EntityId = val.Entityid;
                        obj.Attributetypeid = 10;
                        var attributedetails = (from tt in tx.PersistenceManager.CommonRepository.Query<AttributeDao>() where tt.AttributeTypeID == 10 select tt).FirstOrDefault();
                        obj.AttributeName = attributedetails.Caption;
                        obj.AttributeId = attributedetails.Id;
                        //(2014-03-01 / 2014-03-31) to (2014-03-07 / 2014-03-14)  format as given by amar
                        obj.FromValue = "(" + val.Startdate.ToString(dateformate) + ")" + " / " + "(" + val.EndDate.ToString(dateformate) + ")";
                        obj.ToValue = "(" + Startdate.ToString(dateformate) + ")" + " / " + "(" + Enddate.ToString(dateformate) + ")";
                        fs.AsynchronousNotify(obj);
                    }
                    val.Startdate = Startdate;
                    val.EndDate = EndDate;
                    val.Description = (Description.Length > 0 ? Description : val.Description);
                    tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(val);

                    tx.Commit();
                }
                InsertUpdateGanttEntitySortorder(proxy, val.Entityid);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder EntityPeriodQry = new StringBuilder();
                    EntityPeriodQry.Append(" SELECT(SELECT ( ");
                    EntityPeriodQry.Append(" SELECT CONVERT(NVARCHAR(10), pep.StartDate, 120) '@s', ");
                    EntityPeriodQry.Append("  CONVERT(NVARCHAR(10), pep.EndDate, 120) '@e', ");
                    EntityPeriodQry.Append(" pep.[Description] '@d',ROW_NUMBER() over(ORDER BY pep.Startdate) '@sid', ");
                    EntityPeriodQry.Append(" pep.ID '@o' ");
                    EntityPeriodQry.Append(" FROM   PM_EntityPeriod pep ");
                    EntityPeriodQry.Append(" WHERE  pep.EntityID = ? ORDER BY pep.Startdate FOR XML PATH('p'), TYPE ");
                    EntityPeriodQry.Append(" ) FOR XML PATH('root'))as 'root' ");
                    var entityResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(EntityPeriodQry.ToString(), val.Entityid).Cast<Hashtable>();
                    foreach (var res in entityResult)
                    {
                        XmlReturn = res["root"].ToString();
                    }
                    tx.Commit();
                }

                return XmlReturn;
                //}

            }
            catch (Exception ex)
            {
                return XmlReturn;
            }
            return XmlReturn;
        }

        /// <summary>
        /// Deletes the entity period.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="EntityPeriod">The entity period.</param>
        /// <returns>bool</returns>
        public bool DeleteEntityPeriod(PlanningManagerProxy proxy, IEntityPeriod EntityPeriod)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityPeriodDao dao = new EntityPeriodDao();

                        dao.Entityid = EntityPeriod.Entityid;
                        dao.Startdate = EntityPeriod.Startdate;
                        dao.EndDate = EntityPeriod.EndDate;
                        dao.Description = EntityPeriod.Description;
                        dao.SortOrder = EntityPeriod.SortOrder;
                        tx.PersistenceManager.PlanningRepository.Delete<EntityPeriodDao>(dao);
                        tx.Commit();

                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Deletes the entity period.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Entityid">The entityid.</param>
        /// <param name="Startdate">The startdate.</param>
        /// <param name="EndDate">The end date.</param>
        /// <param name="Description">The description.</param>
        /// <param name="SortOrder">The sort order.</param>
        /// <returns>bool</returns>
        public bool DeleteEntityPeriod(PlanningManagerProxy proxy, int Entityid, DateTime Startdate, DateTime EndDate, string Description, int SortOrder)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityPeriodDao dao = new EntityPeriodDao();

                        dao.Entityid = Entityid;
                        dao.Startdate = Startdate;
                        dao.EndDate = EndDate;
                        dao.Description = Description;
                        dao.SortOrder = SortOrder;
                        tx.PersistenceManager.PlanningRepository.Delete<EntityPeriodDao>(dao);
                        tx.Commit();

                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Gets the entity color code by id.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>IEntityColorCode</returns>
        public IEntityColorCode GetEntityColorCodeById(PlanningManagerProxy proxy, int id)
        {

            EntityColorCode _Colorcode = new EntityColorCode();
            if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self) == true)
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityColorCodeDao dao = new EntityColorCodeDao();

                    dao = tx.PersistenceManager.PlanningRepository.Get<EntityColorCodeDao>(id);
                    tx.Commit();
                    _Colorcode.Id = dao.Id;
                    _Colorcode.EntityTypeid = dao.EntityTypeid;
                    _Colorcode.Attributeid = dao.Attributeid;
                    _Colorcode.Optionid = dao.Optionid;
                    _Colorcode.ColorCode = dao.ColorCode;

                }
                return _Colorcode;
            }
            return null;
        }

        /// <summary>
        /// Updates the entity color code.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="EntityColorCode">The entity color code.</param>
        /// <returns>bool</returns>
        public bool UpdateEntityColorCode(PlanningManagerProxy proxy, IEntityColorCode EntityColorCode)
        {

            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityColorCodeDao dao = new EntityColorCodeDao();
                        dao.EntityTypeid = EntityColorCode.EntityTypeid;
                        dao.Attributeid = EntityColorCode.Attributeid;
                        dao.Optionid = EntityColorCode.Optionid;
                        dao.ColorCode = EntityColorCode.ColorCode;

                        tx.PersistenceManager.PlanningRepository.Save<EntityColorCodeDao>(dao);
                        tx.Commit();
                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }


        }

        /// <summary>
        /// Updates the entity color code.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Id">The id.</param>
        /// <param name="EntityTypeid">The entity typeid.</param>
        /// <param name="Attributeid">The attributeid.</param>
        /// <param name="Optionid">The optionid.</param>
        /// <param name="ColorCode">The color code.</param>
        /// <returns>bool</returns>
        public bool UpdateEntityColorCode(PlanningManagerProxy proxy, int Id, int EntityTypeid, int Attributeid, int Optionid, string ColorCode)
        {

            try
            {
                IEntityColorCode ecolor = new EntityColorCode();
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityColorCodeDao dao = new EntityColorCodeDao();
                        dao.EntityTypeid = EntityTypeid;
                        dao.Attributeid = Attributeid;
                        dao.Optionid = Optionid;
                        dao.ColorCode = ColorCode;
                        tx.PersistenceManager.PlanningRepository.Save<EntityColorCodeDao>(dao);
                        tx.Commit();
                        ecolor.Id = dao.Id;
                        ecolor.EntityTypeid = dao.EntityTypeid;
                        ecolor.Attributeid = dao.Attributeid;
                        ecolor.Optionid = dao.Optionid;
                        ecolor.ColorCode = dao.ColorCode;

                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Deletes the entity color code.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="EntityColorCode">The entity color code.</param>
        /// <returns>bool</returns>
        public bool DeleteEntityColorCode(PlanningManagerProxy proxy, IEntityColorCode EntityColorCode)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityColorCodeDao dao = new EntityColorCodeDao();

                        dao.EntityTypeid = EntityColorCode.EntityTypeid;
                        dao.Attributeid = EntityColorCode.Attributeid;
                        dao.Optionid = EntityColorCode.Optionid;
                        dao.ColorCode = EntityColorCode.ColorCode;
                        tx.PersistenceManager.PlanningRepository.Delete<EntityColorCodeDao>(dao);
                        tx.Commit();
                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Deletes the entity color code.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Id">The id.</param>
        /// <param name="EntityTypeid">The entity typeid.</param>
        /// <param name="Attributeid">The attributeid.</param>
        /// <param name="Optionid">The optionid.</param>
        /// <param name="ColorCode">The color code.</param>
        /// <returns>bool</returns>
        public bool DeleteEntityColorCode(PlanningManagerProxy proxy, int Id, int EntityTypeid, int Attributeid, int Optionid, string ColorCode)
        {

            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityColorCodeDao dao = new EntityColorCodeDao();

                        dao.EntityTypeid = EntityTypeid;
                        dao.Attributeid = Attributeid;
                        dao.Optionid = Optionid;
                        dao.ColorCode = ColorCode;
                        tx.PersistenceManager.PlanningRepository.Delete<EntityColorCodeDao>(dao);
                        tx.Commit();

                    }

                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Gets the milestone by id.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>IList<IAttributeData></returns>
        public IList<IAttributeData> GetMilestoneById(PlanningManagerProxy proxy, int id)
        {
            //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
            //{
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                IList<IAttributeData> milestoneObj = new List<IAttributeData>();
                milestoneObj = GetDynamictAttributeDetails(tx, id);
                //milestoneObj = GetEntityAttributesDetails(proxy, id);
                return milestoneObj;
            }
            //}
            //return null;
        }


        /// <summary>
        /// Deletes the activity releation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="parentactivityTypeId">The parentactivity type id.</param>
        /// <param name="childactivityTypeid">The childactivity typeid.</param>
        /// <param name="sortOrder">The sort order.</param>
        /// <returns>bool</returns>
        public bool DeleteActivityReleation(PlanningManagerProxy proxy, int parentactivityTypeId, int childactivityTypeid, int sortOrder)
        {
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        EntityTypeHierarchyDao dao = new EntityTypeHierarchyDao();
                        dao.ParentActivityTypeID = parentactivityTypeId;
                        dao.ChildActivityTypeID = childactivityTypeid;
                        dao.SortOrder = sortOrder;
                        tx.PersistenceManager.PlanningRepository.Delete<EntityTypeHierarchyDao>(dao);
                        tx.Commit();
                    }
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }


        }

        /// <summary>
        /// Creates the entity color code.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entitytypeId">The entitytype id.</param>
        /// <param name="colorCode">The color code.</param>
        /// <param name="attributeid">The attributeid.</param>
        /// <param name="optionid">The optionid.</param>
        /// <param name="Id">The id.</param>
        /// <returns>last inserted id</returns>
        public int CreateEntityColorCode(PlanningManagerProxy proxy, int entitytypeId, string colorCode, int attributeid, int optionid, int Id)
        {
            //Check access 
            // will come Access check one will say true or false , other will come Exception. 
            //After this check whter it is a hhibrite,users or system define ,
            //Start Transaction
            try
            {
                if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self) == true)
                {
                    if (Id == 0)
                    {
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {
                            // Business logic of EntityColorCode
                            EntityColorCodeDao dao = new EntityColorCodeDao();

                            dao.Id = Id;
                            dao.EntityTypeid = entitytypeId;
                            dao.Attributeid = attributeid;
                            dao.Optionid = optionid;
                            dao.ColorCode = colorCode;
                            tx.PersistenceManager.PlanningRepository.Save<EntityColorCodeDao>(dao);
                            tx.Commit();
                            IEntityColorCode EntityColorCode = new EntityColorCode();
                            EntityColorCode.Id = dao.Id;
                            EntityColorCode.EntityTypeid = dao.EntityTypeid;
                            EntityColorCode.Attributeid = dao.Attributeid;
                            EntityColorCode.Optionid = dao.Optionid;
                            EntityColorCode.ColorCode = dao.ColorCode;
                            return EntityColorCode.Id;

                        }
                    }
                    else if (attributeid == 0 && optionid == 0)
                    {
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {
                            // Business logic of milestone
                            EntityColorCodeDao dao = new EntityColorCodeDao();
                            dao.EntityTypeid = entitytypeId;
                            dao.ColorCode = colorCode;

                            tx.PersistenceManager.PlanningRepository.Save<EntityColorCodeDao>(dao);
                            tx.Commit();

                            IEntityColorCode enitycolorcode = new EntityColorCode();
                            enitycolorcode.EntityTypeid = dao.EntityTypeid;
                            enitycolorcode.ColorCode = dao.ColorCode;
                            return enitycolorcode.Id;

                        }
                    }
                    else
                    {
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {
                            // Business logic of milestone
                            EntityColorCodeDao dao = new EntityColorCodeDao();
                            dao.EntityTypeid = entitytypeId;
                            dao.ColorCode = colorCode;
                            dao.Attributeid = attributeid;
                            dao.Optionid = optionid;
                            tx.PersistenceManager.PlanningRepository.Save<EntityColorCodeDao>(dao);
                            tx.Commit();

                            IEntityColorCode enitycolorcode = new EntityColorCode();
                            enitycolorcode.EntityTypeid = dao.EntityTypeid;
                            enitycolorcode.ColorCode = dao.ColorCode;
                            enitycolorcode.Attributeid = dao.Attributeid;
                            enitycolorcode.Optionid = dao.Optionid;
                            return enitycolorcode.Id;

                        }
                    }

                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }


        }

        /// <summary>
        /// Notification milestone updated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="entityName">Name of the entity.</param>
        /// <param name="entityAttributeId">The entity attribute id.</param>
        /// <param name="entityAttributeOldValue">The entity attribute old value.</param>
        /// <param name="attributeValue">The attribute value.</param>
        /// <param name="parentId">The parent id.</param>
        /// <returns>bool</returns>
        public bool Notification_MilestoneUpdated(PlanningManagerProxy proxy, int entityId = 0, string entityName = "", int entityAttributeId = 0, string entityAttributeOldValue = "", string attributeValue = "", int parentId = 0)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("MilestoneUpdated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscription);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strMilestone = new StringBuilder();
                            StringBuilder strMailMilestone = new StringBuilder();
                            strMilestone.Append(notify.Template);
                            strMilestone.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strMilestone.Replace("<OldValue>", entityAttributeOldValue);
                            strMilestone.Replace("<NewValue>", attributeValue);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = strMailMilestone.ToString();
                            // //userNotify.NotificationText = strMilestone.ToString();
                            userNotify.Typeid = notify.Id;
                            ////return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }

                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }
        /// <summary>
        /// Notification milestone delete.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_MilestoneDelete(PlanningManagerProxy proxy, int entityId = 0)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("MilestoneDeleted");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strMilestone = new StringBuilder();
                            StringBuilder strMailMilestone = new StringBuilder();
                            strMilestone.Append(notify.Template);
                            strMilestone.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = strMailMilestone.ToString();
                            ////userNotify.NotificationText = strMilestone.ToString();
                            userNotify.Typeid = notify.Id;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }

                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Notification milestone create.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_MilestoneCreate(PlanningManagerProxy proxy, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("MilestoneCreated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strMilestone = new StringBuilder();
                            StringBuilder strMailMilestone = new StringBuilder();
                            strMilestone.Append(notify.Template);
                            strMilestone.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            // //userNotify.NotificationMailText = strMailMilestone.ToString();
                            // //userNotify.NotificationText = strMilestone.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Notification additional objective create.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_AdditionalObjectiveCreate(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("AdditionalObjectiveCreated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strAdditionalObjective = new StringBuilder();

                            strAdditionalObjective.Append(notify.Template);
                            strAdditionalObjective.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = 0;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = "";
                            ////userNotify.NotificationText = strAdditionalObjective.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Notification cost center add.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_CostCenterAdd(PlanningManagerProxy proxy, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("CostcenterAdded");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strCostcenter = new StringBuilder();
                            strCostcenter.Append(notify.Template);
                            strCostcenter.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = 0;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = "";
                            ////userNotify.NotificationText = strCostcenter.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Notification entity attachment created.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityAttachmentCreated(PlanningManagerProxy proxy, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityAttachmentCreated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentityattachment = new StringBuilder();
                            StringBuilder strMailstrentityattachment = new StringBuilder();
                            strentityattachment.Append(notify.Template);
                            strentityattachment.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            // //userNotify.NotificationMailText = strMailstrentityattachment.ToString();
                            ////userNotify.NotificationText = strentityattachment.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }


        }

        /// <summary>
        /// Notification entity date insert.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="newval">The newval.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityDateInsert(PlanningManagerProxy proxy, string newval, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityDateInsert");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder stradddateinert = new StringBuilder();
                            StringBuilder strMailstrstradddateinert = new StringBuilder();
                            stradddateinert.Append(notify.Template);
                            stradddateinert.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            stradddateinert.Replace("<NewValue>", newval);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //  //userNotify.NotificationMailText = strMailstrstradddateinert.ToString();
                            ////userNotify.NotificationText = stradddateinert.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }


        }

        /// <summary>
        /// Notification entity date delete.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="newval">The newval.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityDateDelete(PlanningManagerProxy proxy, string newval, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityDateDelete");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder stradddateinert = new StringBuilder();
                            StringBuilder strMailstrstradddateinert = new StringBuilder();
                            stradddateinert.Append(notify.Template);
                            stradddateinert.Replace("<OldValue>", newval);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            // //userNotify.NotificationMailText = strMailstrstradddateinert.ToString();
                            ////userNotify.NotificationText = stradddateinert.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }


        }


        /// <summary>
        /// Notificationn task created.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entitytypename">The entitytypename.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_TaskCreated(PlanningManagerProxy proxy, string entitytypename, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("TaskCreated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strtaskcreated = new StringBuilder();
                            StringBuilder strMailtaskcreated = new StringBuilder();
                            strtaskcreated.Append(notify.Template);
                            strtaskcreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strtaskcreated.Replace("<EntityTypeName>", entitytypename);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            // //userNotify.NotificationMailText = strMailtaskcreated.ToString();
                            ////userNotify.NotificationText = strtaskcreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }


        }
        /// <summary>
        /// Notification entity create.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityCreate(PlanningManagerProxy proxy, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityCreated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strEntity = new StringBuilder();

                            strEntity.Append(notify.Template);
                            strEntity.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = "";
                            //userNotify.NotificationText = strEntity.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Notification entity updated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="oldvalue">The oldvalue.</param>
        /// <param name="newvalue">The newvalue.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="attributeName">Name of the attribute.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityUpdated(PlanningManagerProxy proxy, string oldvalue, string newvalue, int entityId, string attributeName)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityUpdated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strEntity = new StringBuilder();

                            strEntity.Append(notify.Template);
                            strEntity.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strEntity.Replace("<AttibuteName>", attributeName);
                            strEntity.Replace("<OldValue>", oldvalue);
                            strEntity.Replace("<NewValue>", newvalue);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = "";
                            ////userNotify.NotificationText = strEntity.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }


        }

        /// <summary>
        /// Notification entity deleted.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityDeleted(PlanningManagerProxy proxy, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityDeleted");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strtaskcreated = new StringBuilder();
                            StringBuilder strMailtaskcreated = new StringBuilder();
                            strtaskcreated.Append(notify.Template);
                            strtaskcreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            // //userNotify.NotificationMailText = strMailtaskcreated.ToString();
                            ////userNotify.NotificationText = strtaskcreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }

            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification  entity comment added.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="comment">The comment.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityCommentAdded(PlanningManagerProxy proxy, string comment, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityCommentAdded");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strtaskcreated = new StringBuilder();
                            StringBuilder strMailtaskcreated = new StringBuilder();
                            strtaskcreated.Append(notify.Template);
                            strtaskcreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strtaskcreated.Replace("<comment>", comment);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            // //userNotify.NotificationMailText = strMailtaskcreated.ToString();
                            ////userNotify.NotificationText = strtaskcreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }

            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification task metadata updated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="attributename">The attributename.</param>
        /// <param name="oldvalue">The oldvalue.</param>
        /// <param name="newvalue">The newvalue.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_TaskMetadataUpdated(PlanningManagerProxy proxy, string attributename, string oldvalue, string newvalue, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("TaskMetadataUpdated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strtaskcreated = new StringBuilder();
                            StringBuilder strMailtaskcreated = new StringBuilder();
                            strtaskcreated.Append(notify.Template);
                            strtaskcreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strtaskcreated.Replace("<AttributeName>", attributename);
                            strtaskcreated.Replace("<OldValue>", oldvalue);
                            strtaskcreated.Replace("<NewValue>", newvalue);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            // //userNotify.NotificationMailText = strMailtaskcreated.ToString();
                            ////userNotify.NotificationText = strtaskcreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }

            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification task member added.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="EntityTypeName">Name of the entity type.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_TaskMemberAdded(PlanningManagerProxy proxy, string EntityTypeName, int entityId)
        {


            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("TaskMemberAdded");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strtaskcreated = new StringBuilder();
                            StringBuilder strMailtaskcreated = new StringBuilder();
                            strtaskcreated.Append(notify.Template);
                            strtaskcreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strtaskcreated.Replace("<EntityTypeName>", EntityTypeName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //// //userNotify.NotificationMailText = strMailtaskcreated.ToString();
                            // ////userNotify.NotificationText = strtaskcreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }

            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification  task status changed.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="EntityTypeName">Name of the entity type.</param>
        /// <param name="Entitystate">The entitystate.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_TaskStatusChanged(PlanningManagerProxy proxy, string EntityTypeName, string Entitystate, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("TaskStatusChanged");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strtaskcreated = new StringBuilder();
                            StringBuilder strMailtaskcreated = new StringBuilder();
                            strtaskcreated.Append(notify.Template);
                            strtaskcreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strtaskcreated.Replace("<EntityTypeName>", EntityTypeName);
                            strtaskcreated.Replace("<EntityState>", Entitystate);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //// //userNotify.NotificationMailText = strMailtaskcreated.ToString();
                            ////userNotify.NotificationText = strtaskcreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }

            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification entity state changed.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="oldvalue">The oldvalue.</param>
        /// <param name="newvalue">The newvalue.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityStateChanged(PlanningManagerProxy proxy, string oldvalue, string newvalue, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityStateChanged");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strtaskstatuscreated = new StringBuilder();
                            StringBuilder strMailtaskstatuscreated = new StringBuilder();
                            strtaskstatuscreated.Append(notify.Template);
                            strtaskstatuscreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strtaskstatuscreated.Replace("<OldValue>", oldvalue);
                            strtaskstatuscreated.Replace("<NewValue>", newvalue);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = strMailtaskstatuscreated.ToString();
                            // //userNotify.NotificationText = strtaskstatuscreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }

            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification entity member added.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="users">The users.</param>
        /// <param name="role">The role.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityMemberAdded(PlanningManagerProxy proxy, string users, string role, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityMemberAdded");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<Users>", users);
                            strentitymembercreated.Replace("<role>", role);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //  //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);
                        }
                    }
                    tx.Commit();
                }

            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification entity attachment deleted.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityAttachmentDeleted(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityAttachmentDeleted");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName); UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            // //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //  //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }

            }
            catch (Exception ex)
            {

            }
            return false;

        }

        /// <summary>
        /// Notification entity member role updated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="users">The users.</param>
        /// <param name="oldvalue">The oldvalue.</param>
        /// <param name="newvalue">The newvalue.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityMemberRoleUpdated(PlanningManagerProxy proxy, string users, string oldvalue, string newvalue, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityMemberRoleUpdated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<Users>", users);
                            strentitymembercreated.Replace("<OldRole>", oldvalue);
                            strentitymembercreated.Replace("<NewRole>", newvalue);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            ////userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }


            return false;
        }

        /// <summary>
        /// Notification entity member removed.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="users">The users.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityMemberRemoved(PlanningManagerProxy proxy, string users, int entityId)
        {


            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityMemberRemoved");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<Users>", users);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            ////userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Notification entity duplicated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entitytypename">The entitytypename.</param>
        /// <param name="countofnos">The countofnos.</param>
        /// <param name="sublevels">The sublevels.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="entityName">Name of the entity.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityDuplicated(PlanningManagerProxy proxy, string entitytypename, string countofnos, string sublevels, int entityId, string entityName)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityDuplicated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<EntityTypeName>", entitytypename);
                            strentitymembercreated.Replace("<EntityName>", entityName);
                            strentitymembercreated.Replace("<CountOfNumber>", countofnos);
                            strentitymembercreated.Replace("<SubLevels>", sublevels);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            /// //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            // //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification fund request created.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="RequestedAmount">The requested amount.</param>
        /// <param name="CostcenterName">Name of the costcenter.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_FundRequestCreated(PlanningManagerProxy proxy, float RequestedAmount, string CostcenterName, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("FundRequestCreated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<RequestedAmount>", RequestedAmount.ToString());
                            strentitymembercreated.Replace("<CostcenterName>", CostcenterName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            ////userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            ////userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification released funds.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="ReleaseAmount">The release amount.</param>
        /// <param name="PathTemplate">The path template.</param>
        /// <param name="CostcenterName">Name of the costcenter.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_ReleasedFunds(PlanningManagerProxy proxy, float ReleaseAmount, string PathTemplate, string CostcenterName, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("ReleasedFunds");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<ReleaseAmount>", ReleaseAmount.ToString());
                            strentitymembercreated.Replace("<PathTemplate>", PathTemplate);
                            strentitymembercreated.Replace("<CostcenterName>", CostcenterName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification costcenter assigned amount changed.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="oldval">The oldval.</param>
        /// <param name="newval">The newval.</param>
        /// <param name="CostcenterName">Name of the costcenter.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_CostcenterAssignedAmountChanged(PlanningManagerProxy proxy, string oldval, string newval, string CostcenterName, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("CostcenterAssignedAmountChanged");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<OldValue>", oldval);
                            strentitymembercreated.Replace("<NewValue>", newval);
                            strentitymembercreated.Replace("<CostcenterName>", CostcenterName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification  entity plan budget updated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="oldval">The oldval.</param>
        /// <param name="newval">The newval.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityPlanBudgetUpdated(PlanningManagerProxy proxy, string oldval, string newval, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityPlanBudgetUpdated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<OldValue>", oldval);
                            strentitymembercreated.Replace("<NewValue>", newval);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification entity approved allocated updated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="oldval">The oldval.</param>
        /// <param name="newval">The newval.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityApprovedAllocatedUpdated(PlanningManagerProxy proxy, string oldval, string newval, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityApprovedAllocatedUpdated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<OldValue>", oldval);
                            strentitymembercreated.Replace("<NewValue>", newval);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Notification funding request deleted.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="costcentername">The costcentername.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_FundingRequestDeleted(PlanningManagerProxy proxy, string costcentername, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("FundingRequestDeleted");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<CostcenterName>", costcentername);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }
            return false;
        }

        /// <summary>
        /// Notification funding request statechanged.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="FundingRequestState">State of the funding request.</param>
        /// <param name="CostcenterName">Name of the costcenter.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_FundingRequestStatechanged(PlanningManagerProxy proxy, string FundingRequestState, string CostcenterName, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("FundingRequestStatechanged");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<FundingRequestState>", FundingRequestState);
                            strentitymembercreated.Replace("<CostcenterName>", CostcenterName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Notification cost center deleted.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <param name="entityName">Name of the entity.</param>
        /// <returns>bool</returns>
        public bool Notification_CostCenterDeleted(PlanningManagerProxy proxy, int entityId, string entityName)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("CostCenterDeleted");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {

                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<EntityName>", entityName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Notification money transferred.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Amount">The amount.</param>
        /// <param name="FromCostcenterName">Name of from costcenter.</param>
        /// <param name="ToCostCenterName">Name of to cost center.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_MoneyTransferred(PlanningManagerProxy proxy, float Amount, string FromCostcenterName, string ToCostCenterName, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("MoneyTransferred");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<UserName>", proxy.MarcomManager.User.FirstName + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<Amount>", Amount.ToString());
                            strentitymembercreated.Replace("<FromCostcenterName>", FromCostcenterName);
                            strentitymembercreated.Replace("<ToCostCenterName>", ToCostCenterName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Notification insert cost center.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="CostcenterName">Name of the costcenter.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_InsertCostCenter(PlanningManagerProxy proxy, string CostcenterName, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("InsertCostCenter");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<CostcenterName>", CostcenterName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Notification enable disable workflow.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="state">The state.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EnableDisableWorkflow(PlanningManagerProxy proxy, string state, int entityId)
        {


            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EnableDisableWorkflow");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<State>", state);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Notification entity commit budget updated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="OldValue">The old value.</param>
        /// <param name="NewValue">The new value.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntityCommitBudgetUpdated(PlanningManagerProxy proxy, string OldValue, string NewValue, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntityCommitBudgetUpdated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<OldValue>", OldValue);
                            strentitymembercreated.Replace("<NewValue>", NewValue);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Notification entity spent budget updated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="OldValue">The old value.</param>
        /// <param name="NewValue">The new value.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_EntitySpentBudgetUpdated(PlanningManagerProxy proxy, string OldValue, string NewValue, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("EntitySpentBudgetUpdated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<OldValue>", OldValue);
                            strentitymembercreated.Replace("<NewValue>", NewValue);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Notification  cost center approved budget updated.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="CostcenterName">Name of the costcenter.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>bool</returns>
        public bool Notification_CostCenterApprovedBudgetUpdated(PlanningManagerProxy proxy, string CostcenterName, int entityId)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    INotificationType notify = new NotificationType();
                    notify = proxy.MarcomManager.CommonManager.GetNotificationBYType("CostCenterApprovedBudgetUpdated");
                    ISubscriptionType subscription = new SubscriptionType();
                    subscription = notify.SubscriptionTypeid;
                    IList<IUserDefaultSubscription> usersSubscrip = new List<IUserDefaultSubscription>();
                    ISubscriptionType subscripDao = new SubscriptionType();
                    subscripDao = notify.SubscriptionTypeid;
                    usersSubscrip = proxy.MarcomManager.CommonManager.GetUserDefaultSubscription(subscripDao);
                    foreach (var lst in usersSubscrip.ToList())
                    {
                        if (lst.Userid != proxy.MarcomManager.User.Id)
                        {
                            StringBuilder strentitymembercreated = new StringBuilder();
                            StringBuilder strMailentitymembercreated = new StringBuilder();
                            strentitymembercreated.Append(notify.Template);
                            strentitymembercreated.Replace("<ActorName>", proxy.MarcomManager.User.FirstName + " " + proxy.MarcomManager.User.LastName);
                            strentitymembercreated.Replace("<CostcenterName>", CostcenterName);
                            UserNotificationDao userNotify = new UserNotificationDao();
                            userNotify.Actorid = proxy.MarcomManager.User.Id;
                            userNotify.Userid = lst.Userid;
                            userNotify.CreatedOn = DateTimeOffset.Now;
                            userNotify.Entityid = entityId;
                            //userNotify.NotificationMailText = strMailentitymembercreated.ToString();
                            //userNotify.NotificationText = strentitymembercreated.ToString();
                            userNotify.Typeid = notify.Id;
                            userNotify.IsSentInMail = false;
                            userNotify.IsViewed = false;
                            //return proxy.MarcomManager.CommonManager.UserNotification_Insert(userNotify);

                        }
                    }
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {

            }

            return false;
        }

        /// <summary>
        /// Creates the Entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="parentId">The parent id.</param>
        /// <param name="typeId">The type id.</param>
        /// <param name="active">The active.</param>
        /// <param name="uniqueKey">The unique key.</param>
        /// <param name="name">The name.</param>
        /// <param name="entityMembers">The entity members.</param>
        /// <param name="entityCostcenters">The entity costcenters.</param>
        /// <param name="periods">The periods.</param>
        /// <returns>Lastinserted Entity Id value</returns>
        public int CreateEntity(PlanningManagerProxy proxy, int parentId, int typeId, Boolean active, String name, IList<IEntityRoleUser> entityMembers, IList<IEntityCostReleations> entityCostcenters, IList<IEntityPeriod> periods)
        {
            return CreateEntity(proxy, parentId, typeId, active, name, entityMembers, entityCostcenters, periods);
        }
        /// <summary>
        /// Creates the entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="parentId">The parent id.</param>
        /// <param name="typeId">The type id.</param>
        /// <param name="active">The active.</param>
        /// <param name="uniqueKey">The unique key.</param>
        /// <param name="IsLock"> The IsLock</param>
        /// <param name="name">The name.</param>
        /// <param name="entityMembers">The entity members.</param>
        /// <param name="entityCostcenters">The entity costcenters.</param>
        /// <param name="presentation">The presentation.</param>
        /// <param name="periods">The periods.</param>
        /// <returns>Lastinserted Entity Id value</returns>
        public int CreateEntity(PlanningManagerProxy proxy, int parentId, int typeId, Boolean active, Boolean isLock, String name, IList<IEntityRoleUser> entityMembers, IList<IEntityCostReleations> entityCostcenters, IList<IEntityPeriod> periods)
        {
            return CreateEntity(proxy, parentId, typeId, active, isLock, name, entityMembers, entityCostcenters, periods, null, null, null);
        }
        /// <summary>
        /// Creates the Entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="parentId">The parent id.</param>
        /// <param name="typeId">The type id.</param>
        /// <param name="active">The active.</param>
        /// <param name="uniqueKey">The unique key.</param>
        /// <param name="isLock">The is lock.</param>
        /// <param name="name">The name.</param>
        /// <param name="entityMembers">The entity members.</param>
        /// <param name="entityObjectvalues">The entity ObjectiveEntityValues.</param>
        /// <param name="entityCostcenters">The entity costcenters.</param>
        /// <param name="periods">The periods.</param>
        /// <param name="attributes"> The attributes</param>
        /// <returns>Lastinserted Entity Id value</returns>
        public int CreateEntity(PlanningManagerProxy proxy, int parentId, int typeId, Boolean active, Boolean isLock, string name, IList<IEntityRoleUser> entityMembers, IList<IEntityCostReleations> entityCostcentres, IList<IEntityPeriod> entityPeriods, IList<IFundingRequest> listFundrequest, IList<IAttributeData> entityattributedata, int[] assetIdArr = null, IList<IObjectiveEntityValue> entityObjectvalues = null, IList<object> attributes = null)
        {
            int IdExist = 0;
            try
            {
                if (parentId == 0)
                {
                    proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.Plan, OperationId.Create);
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(Modules.Planning, typeId);
                }
                else
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(Modules.Planning, parentId, typeId);

                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Started creating Entity", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                EntityDao dao = new EntityDao();
                EntityRoleUserDao entitymemberdao = new EntityRoleUserDao();
                IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                NotificationFeedObjects obj1 = new NotificationFeedObjects();
                int entityId;
                var ownervalue = entityattributedata.Where(a => a.ID == (int)SystemDefinedAttributes.Owner).Select(a => a).FirstOrDefault();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    // Business logic of EntityCreation 
                    entityId = GetBaseEntityID(typeId, name, tx, parentId, active, isLock, true);
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Entity is saved in PM_Entity with entityid : " + entityId, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    IdExist = tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>().Where(a => a.Id == typeId && a.IsAssociate == false).Select(a => a.Id).FirstOrDefault();

                    if (entityMembers != null)
                    {
                        //IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                        foreach (var a in entityMembers)
                        {
                            //var distinctCount = 0;
                            //if (Ientitroledao.Count() > 0)
                            //    distinctCount = Ientitroledao.Where(i => i.Roleid == a.Roleid && i.Userid == a.Userid).Count();
                            //if (distinctCount == 0)
                            //{
                            EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                            entityroledao.Entityid = entityId;
                            int RoleID = a.Roleid;
                            if (IdExist != 0)
                            {
                                int CurrenttypeRoleID = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(ax => ax.ID == a.Roleid).Select(ax => ax.EntityRoleID).First();
                                if (CurrenttypeRoleID == 1)
                                {
                                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                    RoleID = NewObj.ID;
                                }
                                else if (CurrenttypeRoleID == 8)
                                {
                                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.BudgerApprover).SingleOrDefault();
                                    RoleID = NewObj.ID;
                                }

                            }
                            else
                            {
                                if (a.Roleid == 1)
                                {
                                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                    RoleID = NewObj.ID;
                                }
                                else if (a.Roleid == 8)
                                {
                                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.BudgerApprover).SingleOrDefault();
                                    RoleID = NewObj.ID;
                                }
                            }
                            entityroledao.Roleid = RoleID;
                            entityroledao.Userid = a.Userid;
                            entityroledao.IsInherited = a.IsInherited;
                            entityroledao.InheritedFromEntityid = a.InheritedFromEntityid;
                            Ientitroledao.Add(entityroledao);
                            //}

                        }
                    }
                    if (parentId != 0)
                    {
                        var GlobalMembers = from item in tx.PersistenceManager.UserRepository.Query<EntityRoleUserDao>() where item.Entityid == parentId select item;
                        foreach (var item in GlobalMembers)
                        {
                            if (IdExist != 0)
                            {
                                int CurrenttypeRoleID = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(ax => ax.ID == item.Roleid).Select(ax => ax.EntityRoleID).First();
                                if ((CurrenttypeRoleID != 1 || ownervalue.Value != item.Userid))
                                {

                                    EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                                    entityroledao.Entityid = entityId;
                                    if (CurrenttypeRoleID == 1)
                                        entityroledao.Roleid = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(ay => ay.EntityTypeID == typeId && ay.EntityRoleID == 2).Select(ay => ay.ID).First();
                                    else
                                        entityroledao.Roleid = item.Roleid;
                                    entityroledao.Userid = item.Userid;
                                    entityroledao.IsInherited = true;
                                    entityroledao.InheritedFromEntityid = parentId;
                                    Ientitroledao.Add(entityroledao);
                                    obj1.ToValue = entityroledao.Roleid.ToString();
                                }
                            }
                            else
                            {
                                if ((item.Roleid != 1 || ownervalue.Value != item.Userid))
                                {

                                    EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                                    entityroledao.Entityid = entityId;
                                    if (item.Roleid == 1)
                                        entityroledao.Roleid = 2;
                                    else
                                        entityroledao.Roleid = item.Roleid;
                                    entityroledao.Userid = item.Userid;
                                    entityroledao.IsInherited = true;
                                    entityroledao.InheritedFromEntityid = parentId;
                                    Ientitroledao.Add(entityroledao);
                                    obj1.ToValue = entityroledao.Roleid.ToString();
                                }
                            }
                        }
                    }
                    if (Ientitroledao.Count > 0)
                    {
                        tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientitroledao);
                        obj1.obj2 = Ientitroledao.ToList<Object>();
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Entity Role Users", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    if (listFundrequest != null)
                    {
                        IList<FundingRequestDao> IfundRequestdao = new List<FundingRequestDao>();
                        foreach (var a in listFundrequest)
                        {
                            FundingRequestDao fundrequestdao = new FundingRequestDao();
                            fundrequestdao.Id = entityId;
                            fundrequestdao.RequestedBy = a.RequestedBy;
                            fundrequestdao.CostCenterid = a.CostCenterid;
                            fundrequestdao.Entityid = a.Entityid;
                            fundrequestdao.LastUpdatedOn = a.LastUpdatedOn;
                            fundrequestdao.FundRequestSTATUS = 0;
                            IfundRequestdao.Add(fundrequestdao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<FundingRequestDao>(IfundRequestdao);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Funding Request", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    IList<FinancialDao> Ifinancial = new List<FinancialDao>();

                    if (entityCostcentres != null)
                    {
                        IList<EntityCostReleationsDao> Ientitycostcenterdao = new List<EntityCostReleationsDao>();
                        foreach (var a in entityCostcentres)
                        {
                            EntityCostReleationsDao entitycostcenterdao = new EntityCostReleationsDao();
                            entitycostcenterdao.EntityId = entityId;
                            entitycostcenterdao.CostcenterId = a.CostcenterId;
                            entitycostcenterdao.Sortorder = a.Sortorder;
                            entitycostcenterdao.Isassociate = a.Isassociate;
                            entitycostcenterdao.Isactive = a.Isactive;
                            Ientitycostcenterdao.Add(entitycostcenterdao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<EntityCostReleationsDao>(Ientitycostcenterdao);

                        foreach (var a in entityCostcentres)
                        {
                            FinancialDao financialdao = new FinancialDao();
                            financialdao.Entityid = entityId;
                            financialdao.CostCenterid = a.CostcenterId;
                            financialdao.ApprovedAllocatedAmount = 0;
                            financialdao.ApprovedBudget = 0;
                            financialdao.Commited = 0;
                            financialdao.LastUpdateOn = DateTimeOffset.UtcNow;
                            financialdao.PlannedAmount = 0;
                            financialdao.RequestedAmount = 0;
                            financialdao.Spent = 0;
                            financialdao.Status = 0;
                            Ifinancial.Add(financialdao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Financial", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    //for inserting data into dynamic table
                    IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                    DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                    foreach (var val in Ifinancial)
                    {
                        dynamicdao = new DynamicAttributesDao();
                        dynamicdao.Id = val.Id;
                        idynObj.Add(dynamicdao);

                    }
                    if (idynObj.Count > 0)
                        tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("FundingCostCentreRecords", idynObj);

                    if (entityPeriods != null)
                    {
                        IList<EntityPeriodDao> Ientityper = new List<EntityPeriodDao>();
                        EntityPeriodDao perioddao = new EntityPeriodDao();
                        int sortOrder = 1;
                        foreach (var a in entityPeriods)
                        {
                            perioddao = null;
                            perioddao = new EntityPeriodDao();
                            perioddao.Entityid = entityId;
                            perioddao.Startdate = a.Startdate;
                            perioddao.EndDate = a.EndDate;
                            perioddao.Description = a.Description;
                            perioddao.SortOrder = sortOrder;
                            sortOrder = sortOrder + 1;
                            Ientityper.Add(perioddao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(Ientityper);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Entity Period", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                    }
                    if (entityObjectvalues != null)
                    {
                        IList<ObjectiveEntityValueDao> listObjentityvaluesdao = new List<ObjectiveEntityValueDao>();
                        foreach (var objent in entityObjectvalues)
                        {
                            ObjectiveEntityValueDao objentityvalues = new ObjectiveEntityValueDao();
                            objentityvalues.Objectiveid = objent.Objectiveid;
                            objentityvalues.Entityid = entityId;
                            objentityvalues.PlannedTarget = objent.PlannedTarget;
                            objentityvalues.TargetOutcome = objent.TargetOutcome;
                            objentityvalues.RatingObjective = objent.RatingObjective;
                            objentityvalues.Comments = objent.Comments;
                            objentityvalues.Status = objent.Status;
                            objentityvalues.Fulfilment = objent.Fulfilment;
                            listObjentityvaluesdao.Add(objentityvalues);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveEntityValueDao>(listObjentityvaluesdao);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Objectives", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }
                    if (entityattributedata != null)
                    {
                        var result = InsertEntityAttributes(tx, entityattributedata, entityId, typeId);
                    }

                    IList<BrandSystems.Marcom.Core.Metadata.Interface.IEntityTypeStatusOptions> _iEntityStatus = proxy.MarcomManager.MetadataManager.GetEntityStatus(typeId, false);

                    if (_iEntityStatus.Count > 0)
                    {
                        EntityStatusDao entitystatusvalues = new EntityStatusDao();
                        entitystatusvalues.EntityID = entityId;
                        entitystatusvalues.StatusID = _iEntityStatus[0].ID;
                        entitystatusvalues.IntimeStatus = 0;

                        tx.PersistenceManager.PlanningRepository.Save<EntityStatusDao>(entitystatusvalues);
                    }

                    tx.Commit();

                    string versionXmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(MarcomManagerFactory.ActiveMetadataVersionNumber);
                    var xDoc = XDocument.Load(versionXmlPath);
                    string entityTypeName = Convert.ToString(xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(typeId)).Select(a => a.Element("Caption").Value).First());
                    try
                    {
                        BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.action = "create entity";
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.EntityId = entityId;
                        obj.EntityTypeId = typeId;
                        obj.AttributeName = name;
                        obj.TypeName = entityTypeName;
                        obj.CreatedOn = DateTimeOffset.Now;
                        obj.ParentId = parentId;
                        fs.AsynchronousNotify(obj);

                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Updated the Feeds", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                        //notification for adding memebrs while creating entity in wizard
                        BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs1 = new Utility.FeedNotificationServer();

                        obj1.action = "entity member added";
                        obj1.Actorid = proxy.MarcomManager.User.Id;
                        obj1.EntityId = entityId;
                        obj1.EntityTypeId = typeId;
                        obj1.AttributeName = name;
                        obj1.TypeName = entityTypeName;
                        obj1.CreatedOn = DateTimeOffset.Now;
                        obj1.ParentId = parentId;

                        fs1.AsynchronousNotify(obj1);
                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }


                }
                try
                {
                    //Adding to the Search Engine
                    System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => AddEntityAsync(proxy, entityId.ToString(), name, "Productions"));
                    taskforaddentityforsearch.Start();

                    //Adding Admin Task to the entity
                    int[] attrTypeIdforTask = { 3, 4, 6 };
                    IList<IAttributeData> itaskAttributedata = entityattributedata.Where(a => attrTypeIdforTask.Contains(a.TypeID) && a.IsSpecial == false).Select(a => a).ToList<IAttributeData>();
                    System.Threading.Tasks.Task taskforaddtaskContenttosearch = new System.Threading.Tasks.Task(() => GettingPredefineTemplatesForEntityMetadata(proxy, itaskAttributedata, typeId, entityId));
                    taskforaddtaskContenttosearch.Start();

                    //Linking assets to the entity
                    try
                    {
                        if (assetIdArr != null)
                            LinkAssettoEntity(entityId, assetIdArr);
                    }
                    catch
                    {

                    }


                }
                catch (Exception ex)
                {
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Mail sending error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                }
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Successully created entity with ID: " + entityId, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------" + entityId, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                if (IdExist != 0)
                {
                    InsertUpdateGanttEntitySortorder(proxy, entityId);
                }
                return entityId;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogError("Failed to create entity", ex);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                return 0;
            }

        }

        public void LinkAssettoEntity(int entityId, int[] assetIdArr)
        {
            try
            {
                Guid systemSession = MarcomManagerFactory.GetSystemSession();
                IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(systemSession);
                System.Threading.Tasks.Task taskforLinkAssets = new System.Threading.Tasks.Task(() => managers.DigitalAssetManager.AttachAssetsEntityCreation(entityId, assetIdArr));
                taskforLinkAssets.Start();
            }
            catch (Exception e)
            {

            }
        }

        public Dictionary<int, int> DuplicateAssettoEntity(PlanningManagerProxy proxy, ITransaction tx, int sourceentityID, int entityId, int[] assetIdArr, int[] folderIdArr)
        {
            Dictionary<int, int> Assetmappingdict = new Dictionary<int, int>();
            try
            {

                //Guid systemSession = MarcomManagerFactory.GetSystemSession();
                //IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(systemSession);
                //System.Threading.Tasks.Task taskforDuplicateAssetsEntitys = new System.Threading.Tasks.Task(() => managers.DigitalAssetManager.DuplicateAssetsEntityCreation(sourceentityID, entityId, assetIdArr, folderIdArr));
                ////System.Threading.Tasks.Task<int> nt = new System.Threading.Tasks.Task.Run(() => managers.DigitalAssetManager.DuplicateAssetsEntityCreation(sourceentityID, entityId, assetIdArr, folderIdArr));
                //taskforDuplicateAssetsEntitys.Start();
                Assetmappingdict = DuplicateAssetsEntityCreation(proxy, tx, sourceentityID, entityId, assetIdArr, folderIdArr);
            }
            catch (Exception e)
            {

            }
            return Assetmappingdict;
        }

        /// <summary>
        /// Creates the Entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="parentId">The parent id.</param>
        /// <param name="typeId">The type id.</param>
        /// <param name="active">The active.</param>
        /// <param name="uniqueKey">The unique key.</param>
        /// <param name="isLock">The is lock.</param>
        /// <param name="name">The name.</param>
        /// <param name="attributes"> The attributes</param>
        /// <returns>Lastinserted Entity Id value</returns>
        public int CreateFundRequest(PlanningManagerProxy proxy, int parentId, int typeId, Boolean active, Boolean isLock, string name, IList<IFundingRequest> listFundrequest, IList<IFundingRequestHolder> entityattributedata)
        {

            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(parentId, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    // Business logic of EntityCreation 
                    int entityId = 0;
                    string versionXmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(MarcomManagerFactory.ActiveMetadataVersionNumber);
                    var xDoc = XDocument.Load(versionXmlPath);
                    string entityTypeName = Convert.ToString(xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(b => Convert.ToInt32(b.Element("ID").Value) == Convert.ToInt32(typeId)).Select(b => b.Element("Caption").Value).First());
                    var Level = Convert.ToInt32((from item in tx.PersistenceManager.UserRepository.Query<EntityDao>() where item.Id == parentId select item.Level).FirstOrDefault().ToString());
                    if (Level == 0)
                    {

                        var Level1Entities = from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                                             where item.Parentid == parentId && item.Level == 1
                                             select item;
                        foreach (var obj in Level1Entities)
                        {
                            using (ITransaction txInner = proxy.MarcomManager.GetTransaction())
                            {
                                var CostCentresRelation = from item in txInner.PersistenceManager.UserRepository.Query<EntityCostReleationsDao>() where item.EntityId == obj.Id select item;
                                tx.Commit();
                                txInner.Commit();

                                if (CostCentresRelation.Count() >= 0)
                                {


                                    foreach (var cost in CostCentresRelation)
                                    {
                                        var Fundrequestarray = (from item in entityattributedata where item.CostCenterID == cost.CostcenterId select item).FirstOrDefault();

                                        if (Fundrequestarray != null)
                                        {

                                            using (ITransaction txInnerloop = proxy.MarcomManager.GetTransaction())
                                            {
                                                var alreadyRequested = (from item in txInner.PersistenceManager.UserRepository.Query<FundingRequestDao>() where item.Entityid == obj.Id && item.CostCenterid == cost.CostcenterId && item.FundRequestSTATUS == 1 select item).ToList();
                                                string planStatusQry = "UPDATE PM_Planning SET STATUS=" + (int)PlanningStates.Requested + " WHERE EntityID IN (" + obj.Id + ") AND CostCentreID IN (" + cost.CostcenterId + ") AND status = 0";
                                                txInnerloop.PersistenceManager.PlanningRepository.ExecuteQuery(planStatusQry);

                                                if (alreadyRequested.Count() == 0)
                                                {
                                                    FinancialDao finDao = new FinancialDao();
                                                    finDao = txInnerloop.PersistenceManager.AccessRepository.Query<FinancialDao>().Where(a => a.Entityid == obj.Id && a.CostCenterid == cost.CostcenterId).FirstOrDefault();
                                                    if (finDao.PlannedAmount > 0)
                                                    {
                                                        entityId = GetBaseEntityID(typeId, name, txInnerloop, obj.Id, active, isLock);
                                                        IList<FundingRequestDao> IfundRequestdao;
                                                        IfundRequestdao = new List<FundingRequestDao>();
                                                        FundingRequestDao fundrequestdao = new FundingRequestDao();
                                                        fundrequestdao.Id = entityId;
                                                        fundrequestdao.RequestedBy = proxy.MarcomManager.User.Id;
                                                        fundrequestdao.CostCenterid = cost.CostcenterId;
                                                        fundrequestdao.Entityid = obj.Id;
                                                        fundrequestdao.LastUpdatedOn = DateTimeOffset.UtcNow;
                                                        fundrequestdao.FundRequestSTATUS = 1;

                                                        IfundRequestdao.Add(fundrequestdao);
                                                        txInnerloop.PersistenceManager.PlanningRepository.Save<FundingRequestDao>(IfundRequestdao);

                                                        // update financial table request amount


                                                        finDao.RequestedAmount = finDao.PlannedAmount - finDao.ApprovedAllocatedAmount;
                                                        finDao.Status = 1;
                                                        txInnerloop.PersistenceManager.PlanningRepository.Save<FinancialDao>(finDao);


                                                        var currentWorkFlowStepID = (from item in txInnerloop.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == obj.Id select item).FirstOrDefault();

                                                        //create new task
                                                        IList<TaskDao> iTask = new List<TaskDao>();

                                                        TaskDao taskdao = new TaskDao();
                                                        taskdao.ID = entityId;
                                                        taskdao.Name = name;
                                                        taskdao.StepID = currentWorkFlowStepID.ActiveEntityStateID;
                                                        taskdao.Description = Fundrequestarray.Comment;
                                                        taskdao.DueDate = Convert.ToDateTime(Fundrequestarray.DueDate);
                                                        taskdao.EntityId = obj.Id;
                                                        taskdao.PredefinedTaskID = 0;
                                                        taskdao.TaskStatus = 8;
                                                        iTask.Add(taskdao);

                                                        txInner.PersistenceManager.PlanningRepository.Save<TaskDao>(iTask);
                                                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);


                                                        IList<TaskMemberDao> ientityRole = new List<TaskMemberDao>();
                                                        TaskMemberDao entroledao = new TaskMemberDao();
                                                        entroledao.Roleid = 1;
                                                        entroledao.TaskID = entityId;
                                                        entroledao.Userid = proxy.MarcomManager.User.Id;
                                                        entroledao.ApprovalRount = 1;
                                                        entroledao.ApprovalStatus = false;
                                                        ientityRole.Add(entroledao);

                                                        IList<EntityRoleUserDao> ccMembers = new List<EntityRoleUserDao>();
                                                        ccMembers = (from item in txInner.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                                                     join newitem in txInner.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>()
                                                                     on item.Roleid equals newitem.ID
                                                                     where (newitem.EntityRoleID == 1 || newitem.EntityRoleID == 2) && item.Entityid == cost.CostcenterId
                                                                     select item).ToList();

                                                        foreach (var val in ccMembers)
                                                        {
                                                            entroledao = new TaskMemberDao();
                                                            entroledao.Roleid = 4;
                                                            entroledao.TaskID = entityId;
                                                            entroledao.Userid = val.Userid;
                                                            entroledao.ApprovalRount = 1;
                                                            entroledao.ApprovalStatus = false;
                                                            ientityRole.Add(entroledao);
                                                        }

                                                        txInner.PersistenceManager.PlanningRepository.Save<TaskMemberDao>(ientityRole);
                                                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task Members", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                                                        //// insert values into funding request dynamic table
                                                        if (entityattributedata != null)
                                                        {

                                                            IList<IAttributeData> dynamicdata;
                                                            dynamicdata = new List<IAttributeData>();
                                                            IAttributeData data;

                                                            data = new AttributeData();
                                                            data.ID = 3;
                                                            data.TypeID = 2;
                                                            data.Caption = "Description";
                                                            data.Value = Fundrequestarray.Comment;
                                                            dynamicdata.Add(data);

                                                            data = new AttributeData();
                                                            data.ID = 56;
                                                            data.TypeID = 5;
                                                            data.Caption = "Due Date";
                                                            data.Value = Fundrequestarray.DueDate;
                                                            dynamicdata.Add(data);

                                                            data = new AttributeData();
                                                            data.ID = 20;
                                                            data.TypeID = 1;
                                                            data.Caption = "Amount Rerquested";
                                                            data.Value = (finDao.PlannedAmount - finDao.ApprovedAllocatedAmount).ToString();
                                                            dynamicdata.Add(data);

                                                            data = new AttributeData();
                                                            data.ID = 72;
                                                            data.TypeID = 3;
                                                            data.Caption = "Status";
                                                            data.Value = 1;
                                                            dynamicdata.Add(data);
                                                            var result = InsertEntityAttributes(txInnerloop, dynamicdata, entityId, typeId);

                                                            try
                                                            {
                                                                BrandSystems.Marcom.Core.Utility.FeedNotificationServer fns = new Utility.FeedNotificationServer();
                                                                NotificationFeedObjects obj1 = new NotificationFeedObjects();
                                                                obj1.action = "fundingrequest";
                                                                obj1.Actorid = proxy.MarcomManager.User.Id;

                                                                obj1.EntityId = entityId;
                                                                obj1.FinancialPlannedAmount = Convert.ToInt32(finDao.PlannedAmount);
                                                                obj1.AttributeName = cost.CostcenterId.ToString();
                                                                obj1.AssociatedEntityId = cost.CostcenterId;
                                                                fns.AsynchronousNotify(obj1);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                                                            }

                                                        }
                                                    }
                                                    txInnerloop.Commit();
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                    else if (Level == 1)
                    {
                        // level >0 start
                        int entityidchild = 0;
                        var currentWorkFlowStepID = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == parentId select item).FirstOrDefault();
                        var CostCentresRelation = from item in tx.PersistenceManager.UserRepository.Query<EntityCostReleationsDao>() where item.EntityId == parentId select item;
                        tx.Commit();
                        if (CostCentresRelation.Count() > 0)
                        {

                            foreach (var cost in CostCentresRelation)
                            {
                                var Fundrequestarray = (from item in entityattributedata where item.CostCenterID == cost.CostcenterId select item).FirstOrDefault();
                                if (Fundrequestarray != null)
                                {
                                    using (ITransaction txInner = proxy.MarcomManager.GetTransaction())
                                    {
                                        var alreadyRequested = (from item in txInner.PersistenceManager.UserRepository.Query<FundingRequestDao>() where item.Entityid == parentId && item.CostCenterid == cost.CostcenterId && item.FundRequestSTATUS == 1 select item).ToList();

                                        string planStatusQry = "UPDATE PM_Planning SET STATUS=" + (int)PlanningStates.Requested + " WHERE EntityID IN (" + parentId + ") AND CostCentreID IN (" + cost.CostcenterId + ") AND status = 0";
                                        txInner.PersistenceManager.PlanningRepository.ExecuteQuery(planStatusQry);


                                        if (alreadyRequested.Count() == 0)
                                        {
                                            FinancialDao finDao = new FinancialDao();
                                            finDao = txInner.PersistenceManager.AccessRepository.Query<FinancialDao>().Where(a => a.Entityid == parentId && a.CostCenterid == cost.CostcenterId).FirstOrDefault();
                                            if (finDao.PlannedAmount > 0)
                                            {
                                                entityidchild = GetBaseEntityID(typeId, name, txInner, parentId, active, isLock);
                                                IList<FundingRequestDao> IfundRequestdao = new List<FundingRequestDao>();
                                                FundingRequestDao fundrequestdao = new FundingRequestDao();
                                                fundrequestdao.Id = entityidchild;
                                                fundrequestdao.RequestedBy = proxy.MarcomManager.User.Id;
                                                fundrequestdao.CostCenterid = cost.CostcenterId;
                                                fundrequestdao.Entityid = parentId;
                                                fundrequestdao.LastUpdatedOn = DateTimeOffset.UtcNow;
                                                fundrequestdao.FundRequestSTATUS = 1;
                                                IfundRequestdao.Add(fundrequestdao);
                                                txInner.PersistenceManager.PlanningRepository.Save<FundingRequestDao>(IfundRequestdao);


                                                //create new task
                                                IList<TaskDao> iTask = new List<TaskDao>();

                                                TaskDao taskdao = new TaskDao();
                                                taskdao.ID = entityidchild;
                                                taskdao.Name = name;
                                                taskdao.StepID = currentWorkFlowStepID.ActiveEntityStateID;
                                                taskdao.Description = Fundrequestarray.Comment;
                                                taskdao.DueDate = Convert.ToDateTime(Fundrequestarray.DueDate);
                                                taskdao.EntityId = parentId;
                                                taskdao.PredefinedTaskID = 0;
                                                taskdao.TaskStatus = 8;
                                                iTask.Add(taskdao);

                                                txInner.PersistenceManager.PlanningRepository.Save<TaskDao>(iTask);
                                                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);


                                                IList<TaskMemberDao> ientityRole = new List<TaskMemberDao>();
                                                TaskMemberDao entroledao = new TaskMemberDao();
                                                entroledao.Roleid = 1;
                                                entroledao.TaskID = entityidchild;
                                                entroledao.Userid = proxy.MarcomManager.User.Id;
                                                entroledao.ApprovalRount = 1;
                                                entroledao.ApprovalStatus = false;
                                                ientityRole.Add(entroledao);


                                                var costcentreOwner = (from item in txInner.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                                                       join newitem in txInner.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>()
                                                                       on item.Roleid equals newitem.ID
                                                                       where (newitem.EntityRoleID == 1 || newitem.EntityRoleID == 2) && item.Entityid == cost.CostcenterId
                                                                       select item).ToList();


                                                foreach (var val in costcentreOwner)
                                                {
                                                    entroledao = new TaskMemberDao();
                                                    entroledao.Roleid = 4;
                                                    entroledao.TaskID = entityidchild;
                                                    entroledao.Userid = val.Userid;
                                                    entroledao.ApprovalRount = 1;
                                                    entroledao.ApprovalStatus = false;
                                                    ientityRole.Add(entroledao);
                                                }



                                                txInner.PersistenceManager.PlanningRepository.Save<TaskMemberDao>(ientityRole);
                                                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task Members", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                                                // update financial table request amount
                                                finDao.RequestedAmount = finDao.PlannedAmount - finDao.ApprovedAllocatedAmount;
                                                finDao.Status = 1;
                                                txInner.PersistenceManager.PlanningRepository.Save<FinancialDao>(finDao);
                                                //// insert values into funding request dynamic table
                                                if (entityattributedata != null)
                                                {

                                                    IList<IAttributeData> dynamicdata = new List<IAttributeData>();
                                                    IAttributeData data = new AttributeData();
                                                    data.ID = 3;
                                                    data.TypeID = 2;
                                                    data.Caption = "Description";
                                                    data.Value = Fundrequestarray.Comment;
                                                    dynamicdata.Add(data);

                                                    data = new AttributeData();
                                                    data.ID = 56;
                                                    data.TypeID = 5;
                                                    data.Caption = "Due Date";
                                                    data.Value = Fundrequestarray.DueDate;
                                                    dynamicdata.Add(data);

                                                    data = new AttributeData();
                                                    data.ID = 20;
                                                    data.TypeID = 1;
                                                    data.Caption = "Amount Rerquested";
                                                    data.Value = (finDao.PlannedAmount - finDao.ApprovedAllocatedAmount).ToString();
                                                    dynamicdata.Add(data);

                                                    data = new AttributeData();
                                                    data.ID = 72;
                                                    data.TypeID = 3;
                                                    data.Caption = "Status";
                                                    data.Value = 2;
                                                    dynamicdata.Add(data);

                                                    var result = InsertEntityAttributes(txInner, dynamicdata, entityidchild, typeId);
                                                }

                                                try
                                                {

                                                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                                                    NotificationFeedObjects obj = new NotificationFeedObjects();
                                                    obj.action = "fundingrequest";
                                                    obj.Actorid = proxy.MarcomManager.User.Id;
                                                    obj.EntityId = entityidchild;
                                                    obj.FinancialPlannedAmount = Convert.ToInt32(finDao.PlannedAmount);
                                                    obj.AttributeName = cost.CostcenterId.ToString();
                                                    obj.AssociatedEntityId = cost.CostcenterId;
                                                    fs.AsynchronousNotify(obj);
                                                }
                                                catch (Exception ex)
                                                {
                                                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                                                }

                                            }
                                        }
                                        txInner.Commit();
                                    }
                                }
                            }
                        }
                        //level >0 end

                    }
                }
                return 1;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }
        /// <summary>
        /// Getting all children and parent Entities based on Unique-key.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="typeId">The type id.</param>
        /// <returns>IList<IEntity></returns>

        public IList<IEntity> SelectAllchildeEtities(PlanningManagerProxy proxy, int id)
        {
            try
            {
                Entity obj = new Entity();
                IList<IEntity> entitylistObj = new List<IEntity>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityDao dao = new EntityDao();
                    IList<EntityDao> entdao = new List<EntityDao>();
                    entdao = tx.PersistenceManager.PlanningRepository.GetEquals<EntityDao>(EntityDao.PropertyNames.Id, id);
                    var result = entdao.Where(a => a.Typeid == Convert.ToInt32(entdao.ElementAt(0).Typeid)).Where(a => a.Id == id).Select(a => a);
                    var uniresult = result.Select(a => new { UniqueKeys = a.UniqueKey });
                    var uniquekey = uniresult.ElementAt(0).ToString().Split('.')[0].Split('=')[1];

                    var parentNode = from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                                     where item.Id == id
                                     select item;
                    var childNode = from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                                    where item.Parentid == id
                                    select item;
                    uniquekey = parentNode.First().UniqueKey;

                    int[] typeids = { 7, 1, 30, };

                    var alllevelEntities = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                            join associatetype in tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>()
                                               on item.Typeid equals associatetype.Id
                                            where item.Parentid == id && item.Active == true && associatetype.IsAssociate == false
                                            select item).OrderBy(a => a.UniqueKey).ToList<EntityDao>();

                    //var alllevelEntities = (from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                    //                        where item.Parentid == id && !typeids.Contains(item.Typeid)
                    //                        select item).ToList<EntityDao>();

                    //var alllevelEntities = tx.PersistenceManager.PlanningRepository.GetAllColumnsByUniquekey<EntityDao>(EntityDao.PropertyNames.UniqueKey, uniquekey);

                    foreach (var entityresult in alllevelEntities)
                    {
                        Entity entityObj = new Entity();
                        entityObj.Id = entityresult.Id;
                        entityObj.Parentid = entityresult.Parentid;
                        entityObj.Typeid = entityresult.Typeid;
                        entityObj.Active = entityresult.Active;
                        entityObj.UniqueKey = entityresult.UniqueKey;
                        entityObj.IsLock = entityresult.IsLock;
                        entityObj.Name = entityresult.Name;

                        if (entityresult.EntityMembers != null)
                        {
                            IList<IEntityRoleUser> ientityMembers = new List<IEntityRoleUser>();
                            IEntityRoleUser entityMembers = new EntityRoleUser();
                            foreach (var entmem in entityresult.EntityMembers)
                            {
                                entityMembers.Entityid = entmem.Entityid;
                                entityMembers.Roleid = entmem.Roleid;
                                entityMembers.Userid = entmem.Userid;
                                entityMembers.IsInherited = entmem.IsInherited;
                                entityMembers.InheritedFromEntityid = entmem.InheritedFromEntityid;
                                ientityMembers.Add(entityMembers);
                            }
                            entityObj.EntityMembers = ientityMembers;
                        }
                        if (entityresult.EntityCostcenters != null)
                        {
                            IList<IEntityCostReleations> ientitycostrel = new List<IEntityCostReleations>();
                            IEntityCostReleations entitycostrel = new EntityCostReleations();
                            foreach (var entcost in entityresult.EntityCostcenters)
                            {
                                entitycostrel.Id = entcost.Id;
                                entitycostrel.EntityId = entcost.EntityId;
                                entitycostrel.CostcenterId = entcost.CostcenterId;
                                entitycostrel.Sortorder = entcost.Sortorder;
                                entitycostrel.Isassociate = entcost.Isassociate;
                                entitycostrel.Isactive = entcost.Isactive;
                                ientitycostrel.Add(entitycostrel);
                            }
                            entityObj.EntityCostcenters = ientitycostrel;
                        }
                        if (entityresult.Presentation != null)
                        {
                            IEntityPresentation entitypresen = new EntityPresentation();
                            entitypresen.EntityId = dao.Presentation.EntityId;
                            entitypresen.PublishedOn = dao.Presentation.PublishedOn;
                            entitypresen.Content = dao.Presentation.Content;
                            entityObj.Presentation = entitypresen;
                        }

                        if (entityresult.Periods != null)
                        {
                            IList<IEntityPeriod> ientityperiods = new List<IEntityPeriod>();
                            IEntityPeriod entityperiods = new EntityPeriod();
                            foreach (var period in entityresult.Periods)
                            {
                                entityperiods.Entityid = period.Entityid;
                                entityperiods.Startdate = period.Startdate;
                                entityperiods.EndDate = period.EndDate;
                                entityperiods.Description = period.Description;
                                entityperiods.SortOrder = period.SortOrder;
                                ientityperiods.Add(entityperiods);
                            }
                            entityObj.Periods = ientityperiods;
                        }
                        if (entityresult.Financials != null)
                        {
                            IList<IFinancial> ifinancial = new List<IFinancial>();
                            IFinancial financ = new Financial();
                            foreach (var fin in entityresult.Financials)
                            {
                                financ.Entityid = fin.Entityid;
                                financ.CostCenterid = fin.CostCenterid;
                                financ.PlannedAmount = fin.PlannedAmount;
                                financ.RequestedAmount = fin.RequestedAmount;
                                financ.ApprovedAllocatedAmount = fin.ApprovedAllocatedAmount;
                                financ.ApprovedBudget = fin.ApprovedBudget;
                                financ.Commited = fin.Commited;
                                financ.Spent = fin.Spent;
                                financ.ApprovedBudgetDate = fin.ApprovedBudgetDate;
                                ifinancial.Add(financ);
                            }
                            entityObj.Financials = ifinancial;
                        }
                        if (entityresult.FundingRequests != null)
                        {
                            IList<IFundingRequest> ifundreq = new List<IFundingRequest>();
                            IFundingRequest funreq = new FundingRequest();
                            foreach (var freq in entityresult.FundingRequests)
                            {
                                funreq.Id = freq.Id;
                                funreq.RequestedBy = freq.RequestedBy;
                                funreq.CostCenterid = freq.CostCenterid;
                                funreq.Entityid = freq.Entityid;
                                funreq.LastUpdatedOn = freq.LastUpdatedOn;
                                ifundreq.Add(funreq);

                            }
                            entityObj.FundingRequests = ifundreq;
                        }
                        if (entityresult.Objectives != null)
                        {
                            IList<IObjectiveEntityValue> listObjentval = new List<IObjectiveEntityValue>();
                            foreach (var entobjval in entityresult.Objectives.Value)
                            {
                                ObjectiveEntityValue objent = new ObjectiveEntityValue();
                                objent.Objectiveid = entobjval.Objectiveid;
                                objent.Entityid = entobjval.Objectiveid;
                                objent.PlannedTarget = entobjval.PlannedTarget;
                                objent.TargetOutcome = entobjval.TargetOutcome;
                                objent.RatingObjective = entobjval.RatingObjective;
                                objent.Comments = entobjval.Comments;
                                objent.Status = entobjval.Status;
                                objent.Fulfilment = entobjval.Fulfilment;
                                listObjentval.Add(objent);
                            }
                            entityObj.Objectives.Value = listObjentval;

                        }
                        IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                        entityAttrVal = GetEntityAttributesDetails(proxy, id);
                        if (entityAttrVal != null)
                        {
                            entityObj.AttributeData = entityAttrVal;
                        }
                        entitylistObj.Add(entityObj);
                    }

                }
                return entitylistObj;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        /// <summary>
        /// Gets the Entity descendants.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IEntity</returns>
        public string GetEntitydescendants(PlanningManagerProxy proxy, int attributeID)
        {
            try
            {
                IList<IEntity> _iiEntity = new List<IEntity>();
                IList<EntityDao> dao = new List<EntityDao>();
                string tree = string.Empty;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var parentNode = from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                                     where item.Id == attributeID && item.Active == true
                                     select item;

                    var childNode = from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                                    join associatetype in tx.PersistenceManager.UserRepository.Query<EntityTypeDao>()
                                      on item.Typeid equals associatetype.Id
                                    where item.Parentid == attributeID && item.Active == true && associatetype.IsAssociate == false
                                    select item;

                    string uniquekey = parentNode.First().UniqueKey;
                    dao = (from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                           join associatetype in tx.PersistenceManager.UserRepository.Query<EntityTypeDao>()
                              on item.Typeid equals associatetype.Id
                           where item.UniqueKey.StartsWith("" + uniquekey + ".") && item.Active == true && associatetype.IsAssociate == false
                           select item).ToList<EntityDao>();
                    UIEntitydescendants uiNode = new UIEntitydescendants();
                    uiNode.name = parentNode.First().Name;
                    uiNode.id = parentNode.First().Id;
                    uiNode.checked1 = false;
                    uiNode.children = new List<UIEntitydescendants>();
                    RecursionEntitydescendantsSerialization(uiNode, childNode.ToList<EntityDao>(), dao, attributeID);
                    tree = JsonConvert.SerializeObject(uiNode);
                    tx.Commit();
                }
                return tree;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="uiParentNode">Node to add Children (Parent Object)</param>
        /// <param name="nodes">Children to be added (Children of parent)</param>
        /// <param name="allNode">Full Dao node list</param>
        /// <param name="attributeID">Atribute ID</param>
        public void RecursionEntitydescendantsSerialization(UIEntitydescendants uiParentNode, IList<EntityDao> nodes, IList<EntityDao> allNode, int attributeID)
        {
            foreach (EntityDao node in nodes)
            {
                UIEntitydescendants uiNode = new UIEntitydescendants();
                uiNode.name = node.Name;
                uiNode.id = node.Id;
                uiNode.checked1 = false;
                uiNode.children = new List<UIEntitydescendants>();
                uiParentNode.children.Add(uiNode);
                var children = from nodeChildren in allNode
                               where nodeChildren.Parentid == node.Id
                               select nodeChildren;
                if (children.Count() > 0)
                    RecursionEntitydescendantsSerialization(uiNode, children.ToList<EntityDao>(), allNode, attributeID);
            }

        }

        /// <summary>
        /// Getting Entity based on Id and typeId.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="typeId">The type id.</param>
        /// <returns>IEntity</returns>

        public IEntity SelectEntityByID(PlanningManagerProxy proxy, int id, Dictionary<string, bool> duplicateitems = null)
        {

            try
            {
                IEntity entityObj = new Entity();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityDao dao = new EntityDao();
                    EntityDao entityresult = new EntityDao();
                    entityresult = (from item in tx.PersistenceManager.UserRepository.Query<EntityDao>() where item.Id == id select item).FirstOrDefault();
                    entityObj.Id = entityresult.Id;
                    entityObj.Parentid = entityresult.Parentid;
                    entityObj.Typeid = entityresult.Typeid;
                    entityObj.Active = entityresult.Active;
                    entityObj.UniqueKey = entityresult.UniqueKey;
                    entityObj.IsLock = entityresult.IsLock;
                    entityObj.Name = entityresult.Name;

                    if (entityresult.EntityMembers != null)
                    {
                        if (duplicateitems.FirstOrDefault(a => a.Key == "IsMember").Value == true)
                        {
                            var OwnerObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == entityObj.Typeid && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                            var BudgetApproverObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == entityObj.Typeid && (EntityRoles)t.EntityRoleID == EntityRoles.BudgerApprover).SingleOrDefault();

                            IList<IEntityRoleUser> ientityMembers = new List<IEntityRoleUser>();
                            IEntityRoleUser entityMembers;
                            foreach (var entmem in entityresult.EntityMembers)
                            {
                                if (duplicateitems.FirstOrDefault(a => a.Key == "IsCostcentre").Value == false)
                                {

                                    if (entmem.Roleid != OwnerObj.ID && entmem.Roleid != BudgetApproverObj.ID)
                                    {
                                        entityMembers = new EntityRoleUser();
                                        entityMembers.Entityid = entmem.Entityid;
                                        entityMembers.Roleid = entmem.Roleid;
                                        entityMembers.Userid = entmem.Userid;
                                        entityMembers.IsInherited = entmem.IsInherited;
                                        entityMembers.InheritedFromEntityid = entmem.InheritedFromEntityid;
                                        ientityMembers.Add(entityMembers);
                                    }
                                }
                                else
                                {
                                    if (entmem.Roleid != OwnerObj.ID)
                                    {
                                        entityMembers = new EntityRoleUser();
                                        entityMembers.Entityid = entmem.Entityid;
                                        entityMembers.Roleid = entmem.Roleid;
                                        entityMembers.Userid = entmem.Userid;
                                        entityMembers.IsInherited = entmem.IsInherited;
                                        entityMembers.InheritedFromEntityid = entmem.InheritedFromEntityid;
                                        ientityMembers.Add(entityMembers);
                                    }
                                }
                            }
                            entityObj.EntityMembers = ientityMembers;
                        }
                    }
                    if (entityresult.EntityCostcenters != null)
                    {
                        if (duplicateitems.FirstOrDefault(a => a.Key == "IsCostcentre").Value == true)
                        {
                            IList<IEntityCostReleations> ientitycostrel = new List<IEntityCostReleations>();
                            IEntityCostReleations entitycostrel;
                            foreach (var entcost in entityresult.EntityCostcenters)
                            {
                                entitycostrel = new EntityCostReleations();
                                entitycostrel.Id = entcost.Id;
                                entitycostrel.EntityId = entcost.EntityId;
                                entitycostrel.CostcenterId = entcost.CostcenterId;
                                entitycostrel.Sortorder = entcost.Sortorder;
                                entitycostrel.Isassociate = entcost.Isassociate;
                                entitycostrel.Isactive = entcost.Isactive;
                                ientitycostrel.Add(entitycostrel);
                            }
                            entityObj.EntityCostcenters = ientitycostrel;
                        }
                    }
                    if (entityresult.Presentation != null)
                    {
                        IEntityPresentation entitypresen = new EntityPresentation();
                        entitypresen.EntityId = dao.Presentation.EntityId;
                        entitypresen.PublishedOn = dao.Presentation.PublishedOn;
                        entitypresen.Content = dao.Presentation.Content;
                        entityObj.Presentation = entitypresen;
                    }

                    if (entityresult.Periods != null)
                    {
                        IList<IEntityPeriod> ientityperiods = new List<IEntityPeriod>();
                        IEntityPeriod entityperiods;
                        foreach (var period in entityresult.Periods)
                        {
                            entityperiods = new EntityPeriod();
                            entityperiods.Entityid = period.Entityid;
                            entityperiods.Startdate = period.Startdate;
                            entityperiods.EndDate = period.EndDate;
                            entityperiods.Description = period.Description;
                            entityperiods.SortOrder = period.SortOrder;
                            ientityperiods.Add(entityperiods);
                        }
                        entityObj.Periods = ientityperiods;
                    }

                    IList<IAttributeData> entityAttVal = new List<IAttributeData>();
                    entityAttVal = GetEntityAttributesDetails(proxy, id);
                    entityObj.AttributeData = entityAttVal;

                    if (entityresult.Financials != null)
                    {
                        if (duplicateitems.FirstOrDefault(a => a.Key == "IsPlannedBudget").Value == true)
                        {
                            IList<IFinancial> ifinancial = new List<IFinancial>();
                            IFinancial financ;
                            foreach (var fin in entityresult.Financials)
                            {
                                financ = new Financial();
                                financ.Entityid = fin.Entityid;
                                financ.CostCenterid = fin.CostCenterid;
                                financ.PlannedAmount = fin.PlannedAmount;
                                financ.RequestedAmount = fin.RequestedAmount;
                                financ.ApprovedAllocatedAmount = fin.ApprovedAllocatedAmount;
                                financ.ApprovedBudget = fin.ApprovedBudget;
                                financ.Commited = fin.Commited;
                                financ.Spent = fin.Spent;
                                financ.ApprovedBudgetDate = fin.ApprovedBudgetDate;
                                ifinancial.Add(financ);
                            }
                            entityObj.Financials = ifinancial;
                        }
                    }
                    if (entityresult.FundingRequests != null)
                    {
                        IList<IFundingRequest> ifundreq = new List<IFundingRequest>();
                        IFundingRequest funreq;
                        foreach (var freq in entityresult.FundingRequests)
                        {
                            funreq = new FundingRequest();
                            funreq.Id = freq.Id;
                            funreq.RequestedBy = freq.RequestedBy;
                            funreq.CostCenterid = freq.CostCenterid;
                            funreq.Entityid = freq.Entityid;
                            funreq.LastUpdatedOn = freq.LastUpdatedOn;
                            ifundreq.Add(funreq);

                        }
                        entityObj.FundingRequests = ifundreq;
                    }
                    if (entityresult.Objectives != null)
                    {
                        if (entityresult.Objectives.Value != null)
                        {
                            IList<IObjectiveEntityValue> listObjentval = new List<IObjectiveEntityValue>();
                            foreach (var entobjval in entityresult.Objectives.Value)
                            {
                                ObjectiveEntityValue objent = new ObjectiveEntityValue();
                                objent.Objectiveid = entobjval.Objectiveid;
                                objent.Entityid = entobjval.Objectiveid;
                                objent.PlannedTarget = entobjval.PlannedTarget;
                                objent.TargetOutcome = entobjval.TargetOutcome;
                                objent.RatingObjective = entobjval.RatingObjective;
                                objent.Comments = entobjval.Comments;
                                objent.Status = entobjval.Status;
                                objent.Fulfilment = entobjval.Fulfilment;
                                listObjentval.Add(objent);
                            }
                            entityObj.Objectives.Value = listObjentval;
                        }
                    }
                }
                return entityObj;
            }

            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Getting PM_Entity table inserted ID values.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="typeId">The TypeID.</param>
        /// <param name="name">The Name.</param>
        /// <param name="tx">The Transaction</param>
        /// <param name="parentId">The ParentID as Optional.</param>
        /// <param name="active">The Active as optional</param>
        /// <param name="uniqueKey">The UniqueKey as optional.</param>
        /// <param name="isLock">The Islock as optional.</param>
        /// <param name="assignedAmount">The Assignedamount for costcentre.</param>
        /// <returns>ICostCenter</returns>
        public int GetBaseEntityID(int typeId, string name, ITransaction tx, int parentId = 0, Boolean active = false, Boolean isLock = false, bool enableDisableWorkflow = false)
        {
            try
            {
                StringBuilder newUniqueKey = new StringBuilder();
                StringBuilder activestepQuery = new StringBuilder();
                StringBuilder parentStateQuery = new StringBuilder();
                newUniqueKey.Append("SELECT ISNULL((SELECT TOP 1 UniqueKey FROM PM_Entity as pe where  pe.ID = ?) + '.'  + CAST(ISNULL(max([EntityID]), 0) + 1 as nvarchar(10)) , ISNULL(max([EntityID]), 0) + 1) as UniqueKey, ISNULL(max([EntityID]), 0) + 1 as EntityID FROM PM_Entity as pe  where  pe.ParentID =  ? ");
                IList uniqueKeyVal = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(newUniqueKey.ToString(), parentId, parentId);
                string uniqueKey = (string)((System.Collections.Hashtable)(uniqueKeyVal)[0])["UniqueKey"];
                int entityKeyID = (int)((System.Collections.Hashtable)(uniqueKeyVal)[0])["EntityID"];
                activestepQuery.Append("SELECT TOP 1 ISNULL( mwfs.id , 0) AS StepID FROM MM_WorkFlow_Steps mwfs WHERE mwfs.WorkFlowID = (SELECT met.WorkFlowID FROM MM_EntityType met WHERE met.ID= ? ) ORDER BY mwfs.ID asc");
                IList activeStepUniqueRes = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(activestepQuery.ToString(), Convert.ToInt32(typeId));
                int activeStepID = 0;
                if (activeStepUniqueRes.Count > 0)
                {
                    activeStepID = (int)((System.Collections.Hashtable)(activeStepUniqueRes)[0])["StepID"];
                }
                parentStateQuery.Append("SELECT pe.ActiveEntityStateID as EntityState FROM PM_Entity pe WHERE pe.id=  ? ");
                IList parentStateRes = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(parentStateQuery.ToString(), parentId);
                int parentStateID = 0;
                if (parentStateRes.Count > 0 && parentId != 0)
                {
                    parentStateID = (int)((System.Collections.Hashtable)(parentStateRes)[0])["EntityState"];
                }
                BaseEntityDao basentdao = new BaseEntityDao();
                basentdao.Typeid = typeId;
                basentdao.Name = HttpUtility.HtmlEncode(name);
                basentdao.Parentid = parentId;
                basentdao.Active = active;
                basentdao.UniqueKey = uniqueKey;
                basentdao.EntityID = entityKeyID;
                basentdao.EntityStateID = parentStateID;
                basentdao.IsLock = isLock;
                basentdao.Level = (uniqueKey.Split('.').Length - 1);
                basentdao.Version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                //basentdao.ActiveEntityStateID = activeStepID;
                basentdao.ActiveEntityStateID = 0;
                basentdao.EnableDisableWorkflow = enableDisableWorkflow;
                tx.PersistenceManager.PlanningRepository.Save<BaseEntityDao>(basentdao);
                return basentdao.Id;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }



        /// <summary>
        /// Updates the Entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entitydata">The entitydata.</param>
        /// <returns>True (or) False</returns>
        public bool UpdateEntity(PlanningManagerProxy proxy, IEntity entitydata)
        {
            EntityDao dao = new EntityDao();
            EntityRoleUserDao entitymemberdao = new EntityRoleUserDao();

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                // Business logic of EntityUpdation 
                dao.Id = entitydata.Id;
                dao.Parentid = entitydata.Parentid;
                dao.Typeid = entitydata.Typeid;
                dao.Active = entitydata.Active;
                dao.UniqueKey = entitydata.UniqueKey;
                dao.IsLock = entitydata.IsLock;
                dao.Name = entitydata.Name;
                tx.PersistenceManager.PlanningRepository.Save<EntityDao>(dao);
                if (entitydata.EntityMembers != null)
                {
                    IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                    EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                    foreach (var a in entitydata.EntityMembers)
                    {
                        entityroledao.Entityid = a.Entityid;
                        entityroledao.Roleid = a.Roleid;
                        entityroledao.Userid = a.Userid;
                        entityroledao.IsInherited = a.IsInherited;
                        entityroledao.InheritedFromEntityid = a.InheritedFromEntityid;
                        Ientitroledao.Add(entityroledao);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientitroledao);
                }
                if (entitydata.EntityCostcenters != null)
                {
                    IList<EntityCostReleationsDao> Ientitycostcenterdao = new List<EntityCostReleationsDao>();
                    EntityCostReleationsDao entitycostcenterdao = new EntityCostReleationsDao();
                    foreach (var a in entitydata.EntityCostcenters)
                    {
                        entitycostcenterdao.EntityId = a.EntityId;
                        entitycostcenterdao.CostcenterId = a.CostcenterId;
                        entitycostcenterdao.Sortorder = a.Sortorder;
                        entitycostcenterdao.Isassociate = a.Isassociate;
                        entitycostcenterdao.Isactive = a.Isactive;
                        Ientitycostcenterdao.Add(entitycostcenterdao);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<EntityCostReleationsDao>(Ientitycostcenterdao);
                }

                if (entitydata.Periods != null)
                {
                    IList<EntityPeriodDao> Ientityper = new List<EntityPeriodDao>();
                    EntityPeriodDao perioddao = new EntityPeriodDao();
                    foreach (var a in entitydata.Periods)
                    {
                        perioddao.Entityid = entitydata.Id;
                        perioddao.Startdate = a.Startdate;
                        perioddao.EndDate = a.EndDate;
                        perioddao.Description = a.Description;
                        perioddao.SortOrder = a.SortOrder;
                        Ientityper.Add(perioddao);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(Ientityper);
                }
                if (entitydata.Objectives != null)
                {
                    if (entitydata.Objectives.Value.Count() > 0)
                    {
                        IList<ObjectiveEntityValueDao> listObjentityvaluesdao = new List<ObjectiveEntityValueDao>();
                        ObjectiveEntityValueDao objentityvalues = new ObjectiveEntityValueDao();
                        foreach (var objent in entitydata.Objectives.Value)
                        {
                            objentityvalues.Objectiveid = objent.Objectiveid;
                            objentityvalues.Entityid = objent.Entityid;
                            objentityvalues.PlannedTarget = objent.PlannedTarget;
                            objentityvalues.TargetOutcome = objent.TargetOutcome;
                            objentityvalues.RatingObjective = objent.RatingObjective;
                            objentityvalues.Comments = objent.Comments;
                            objentityvalues.Status = objent.Status;
                            objentityvalues.Fulfilment = objent.Fulfilment;
                            listObjentityvaluesdao.Add(objentityvalues);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveEntityValueDao>(listObjentityvaluesdao);
                    }
                }
                if (entitydata.AttributeData != null)
                {
                    var result = UpdateAttributeData(tx, entitydata.AttributeData, entitydata.Id);
                }
                tx.Commit();
            }
            return true;
        }

        /// <summary>
        /// Creating Costcentre entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="name">The Name.</param>
        /// <param name="assignedAmount">The Assignedamount for costcentre.</param>
        /// <param name="entityattributedata">The IList<IAttributeData> AttributeData</param>
        /// <param name="entityMembers">The EntityMembers.</param>
        /// <returns>Last Inserted Costcentre ID</returns>
        public int CreateCostcentre(PlanningManagerProxy proxy, int typeId, string name, int assignedAmount, IList<IAttributeData> entityattributedata, IList<IEntityRoleUser> entityMembers)
        {
            int entityId = 0;
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.CostCenter, OperationId.Create);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    try
                    {
                        entityId = GetBaseEntityID(typeId, name, tx, 0, true, false);
                        //Adding Admin Task to the cost centre
                        System.Threading.Tasks.Task taskforaddtaskContenttosearch = new System.Threading.Tasks.Task(() => GettingPredefineTemplatesForEntityMetadata(proxy, null, (int)EntityTypeList.CostCentre, entityId));
                        taskforaddtaskContenttosearch.Start();

                        if (entityMembers != null)
                        {
                            IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                            EntityRoleUserDao entityroledao;
                            foreach (var a in entityMembers)
                            {
                                entityroledao = new EntityRoleUserDao();
                                entityroledao.Entityid = entityId;
                                int RoleID = a.Roleid;
                                if (a.Roleid == 1)
                                {
                                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                    RoleID = NewObj.ID;
                                }
                                entityroledao.Roleid = RoleID;
                                entityroledao.Userid = a.Userid;
                                entityroledao.IsInherited = a.IsInherited;
                                entityroledao.InheritedFromEntityid = a.InheritedFromEntityid;
                                Ientitroledao.Add(entityroledao);
                            }
                            tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientitroledao);
                        }
                        IList<IAttributeData> listattributevalues = new List<IAttributeData>();
                        if (entityattributedata != null)
                        {
                            IAttributeData entityAttr = new AttributeData();
                            entityAttr.ID = Convert.ToInt32(SystemDefinedAttributes.ApproveTime);
                            entityAttr.Caption = Enum.GetName(typeof(SystemDefinedAttributes), Convert.ToInt32(SystemDefinedAttributes.ApproveTime));
                            entityAttr.TypeID = Convert.ToInt32(EntityTypeList.CostCentre);
                            entityAttr.Level = 0;
                            entityAttr.Value = DateTime.UtcNow.ToString();
                            entityattributedata.Add(entityAttr);
                        }

                        if (entityattributedata != null)
                        {
                            var result = InsertEntityAttributes(tx, entityattributedata, entityId, typeId);
                        }
                        FinancialDao finDao = new FinancialDao();
                        finDao.Entityid = entityId;
                        finDao.CostCenterid = 0;
                        finDao.PlannedAmount = 0;
                        finDao.RequestedAmount = 0;
                        finDao.ApprovedAllocatedAmount = assignedAmount;
                        finDao.ApprovedBudget = 0;
                        finDao.Commited = 0;
                        finDao.Spent = 0;
                        finDao.Status = 0;
                        finDao.LastUpdateOn = DateTime.Now;
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(finDao);

                        IList<BrandSystems.Marcom.Core.Metadata.Interface.IEntityTypeStatusOptions> _iEntityStatus = proxy.MarcomManager.MetadataManager.GetEntityStatus(typeId, false);

                        if (_iEntityStatus.Count > 0)
                        {
                            EntityStatusDao entitystatusvalues = new EntityStatusDao();
                            entitystatusvalues.EntityID = entityId;
                            entitystatusvalues.StatusID = _iEntityStatus[0].ID;
                            entitystatusvalues.IntimeStatus = 0;

                            tx.PersistenceManager.PlanningRepository.Save<EntityStatusDao>(entitystatusvalues);
                        }

                        tx.Commit();


                        //Adding to the Search Engine
                        System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => AddEntityAsync(proxy, entityId.ToString(), name));
                        taskforaddentityforsearch.Start();

                        //  int feedInsertResult = proxy.MarcomManager.CommonManager.SaveUpdateFeed(proxy.MarcomManager.User.Id, 8, entityId, "", name, "", "");
                        // BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Updated the Feeds", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                        //  proxy.MarcomManager.CommonManager.UserNotification_Insert(entityId, proxy.MarcomManager.User.Id, DateTimeOffset.Now, Convert.ToInt32(NotificationTypeID.CostcenterAdded), false, false, "", name, "", "");
                        //  BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Updated the Notifications", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                        try
                        {
                            BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();

                            NotificationFeedObjects obj = new NotificationFeedObjects();
                            obj.action = "create entity";
                            obj.Actorid = proxy.MarcomManager.User.Id;
                            obj.EntityId = entityId;
                            obj.EntityTypeId = typeId;
                            obj.AttributeName = name;
                            obj.TypeName = "Cost Center";
                            obj.CreatedOn = DateTimeOffset.Now;
                            obj.ParentId = 0;
                            fs.AsynchronousNotify(obj);

                            BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Updated the Feeds", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                            //notification for adding memebrs while creating entity in wizard
                            BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs1 = new Utility.FeedNotificationServer();
                            NotificationFeedObjects obj1 = new NotificationFeedObjects();
                            obj1.action = "entity member added";
                            obj1.Actorid = proxy.MarcomManager.User.Id;
                            obj1.EntityId = entityId;
                            obj1.EntityTypeId = typeId;
                            obj1.AttributeName = name;
                            obj1.TypeName = "Cost Center";
                            obj1.CreatedOn = DateTimeOffset.Now;
                            obj1.ParentId = 0;
                            obj1.obj3 = tx.PersistenceManager.AccessRepository.ExecuteQuerywithMinParam("select * from AM_Entity_Role_User where EntityID= ?  or EntityID= ? ", entityId, 0);

                            fs1.AsynchronousNotify(obj1);
                        }
                        catch (Exception ex)
                        {
                            BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                        }

                    }
                    catch (Exception ex)
                    {
                        tx.Rollback();
                        entityId = 0;
                    }
                }
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            InsertUpdateGanttEntitySortorder(proxy, entityId);
            return entityId;
        }
        /// <summary>
        /// Getting Costcentre 
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>ICostCentreData</returns>
        public ICostCentreData GetCostcentre(PlanningManagerProxy proxy, int id)
        {
            try
            {
                ICostCentreData costcentreObj = new CostCenterData();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<EntityRoleUserDao> costcenterMemberdao = new List<EntityRoleUserDao>();
                    costcenterMemberdao = tx.PersistenceManager.PlanningRepository.GetEquals<EntityRoleUserDao>("Entityid", id);
                    IList<IEntityRoleUser> ientityMembers = new List<IEntityRoleUser>();
                    foreach (var entmem in costcenterMemberdao)
                    {
                        IEntityRoleUser entityMembers = new EntityRoleUser();
                        entityMembers.Entityid = entmem.Entityid;
                        entityMembers.Roleid = entmem.Roleid;
                        entityMembers.Userid = entmem.Userid;
                        entityMembers.IsInherited = entmem.IsInherited;
                        entityMembers.InheritedFromEntityid = entmem.InheritedFromEntityid;
                        ientityMembers.Add(entityMembers);
                    }
                    costcentreObj.EntityMembers = ientityMembers;
                    var costcentreAttr = GetDynamictAttributeDetails(tx, id);
                    if (costcentreAttr != null)
                    {
                        costcentreObj.EntityAttributeData = costcentreAttr;
                    }
                }
                return costcentreObj;
            }

            catch (Exception ex)
            {
                return null;
            }
        }
        /// <summary>
        /// Updating Costcentre 
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="costcentredata">The CostcentreData.</param>
        /// <returns>True (or) False</returns>
        public bool UpdateCostcentre(PlanningManagerProxy proxy, ICostCentreData costcentredata)
        {
            CostCenterDao dao = new CostCenterDao();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                int costcentreId = costcentredata.Id;
                if (costcentredata.EntityMembers != null)
                {
                    IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                    EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                    foreach (var a in costcentredata.EntityMembers)
                    {
                        entityroledao.Entityid = dao.Id;
                        entityroledao.Roleid = a.Roleid;
                        entityroledao.Userid = a.Userid;
                        entityroledao.IsInherited = a.IsInherited;
                        entityroledao.InheritedFromEntityid = a.InheritedFromEntityid;
                        Ientitroledao.Add(entityroledao);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientitroledao);
                }
                if (costcentredata.EntityAttributeData != null)
                {
                    var result = UpdateAttributeData(tx, costcentredata.EntityAttributeData, costcentreId);
                }
                tx.Commit();
            }
            return true;
        }
        public ICostCentreData CostcentreDataservice()
        {
            return new CostCenterData();
        }
        /// <summary>
        /// Deleting Costcentre entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>true (or) False</returns>
        public bool DeleteCostcentreentity(PlanningManagerProxy proxy, int costcenterId)
        {
            BaseEntityDao entdao = new BaseEntityDao();
            CostCenterDao costdao = new CostCenterDao();
            FinancialDao findao = new FinancialDao();
            FundingRequestDao fundreqdao = new FundingRequestDao();
            CostCenter costent = new CostCenter();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                tx.PersistenceManager.PlanningRepository.DeleteByID<CostCenterDao>(costcenterId);
                tx.PersistenceManager.PlanningRepository.DeleteByID<BaseEntityDao>(costcenterId);
                DeleteEntitySortOrder(tx, costcenterId);
                tx.Commit();
            }
            return true;
        }

        /// <summary>
        /// Deleting Costcentre Relation in Financial.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The Entityid.</param>
        /// <param name="id">The CostCenterid.</param>
        /// <returns>true (or) False</returns>
        public bool DeleteCostcentreFinancial(PlanningManagerProxy proxy, int entityID, int costcenterId)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FinancialDao findao = new FinancialDao();
                    EntityRoleUserDao entRoleDao = new EntityRoleUserDao();
                    IList<EntityRoleUserDao> ientityRoleDao = new List<EntityRoleUserDao>();
                    IList<EntityDao> entitydao = new List<EntityDao>();
                    IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                    EntityCostReleationsDao EntCostReldao = new EntityCostReleationsDao();
                    IList<EntityCostReleationsDao> IEntityCostReleations = new List<EntityCostReleationsDao>();
                    IList<MultiProperty> prpFinanciallst = new List<MultiProperty>();
                    prpFinanciallst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prpFinanciallst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = costcenterId });
                    findao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prpFinanciallst)).FirstOrDefault();
                    Ifinancial.Add(findao);
                    IList<MultiProperty> prpRelationlst = new List<MultiProperty>();
                    prpRelationlst.Add(new MultiProperty { propertyName = EntityCostReleationsDao.PropertyNames.EntityId, propertyValue = entityID });
                    prpRelationlst.Add(new MultiProperty { propertyName = EntityCostReleationsDao.PropertyNames.CostcenterId, propertyValue = costcenterId });
                    EntCostReldao = (tx.PersistenceManager.AccessRepository.GetEquals<EntityCostReleationsDao>(prpRelationlst)).FirstOrDefault();
                    IEntityCostReleations.Add(EntCostReldao);
                    var uniqueKey = (from item in tx.PersistenceManager.UserRepository.Query<EntityDao>() where item.Id == entityID select item.UniqueKey).FirstOrDefault().ToString();
                    entitydao = (from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                                 where (item.UniqueKey).StartsWith(uniqueKey + ".")
                                 select item).ToList<EntityDao>();
                    List<int> idObj = entitydao.Select(a => a.Id).ToList();
                    idObj.Add(entityID);


                    //Deleting Budget Approver Logic Goes here
                    // var ccOwnerDao = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(c => c.Entityid == costcenterId && c.Roleid == 1).FirstOrDefault();
                    var ccOwnerDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                      join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                      where item.Entityid == costcenterId && EntityTypeRole.EntityRoleID == 1
                                      select item).FirstOrDefault();
                    var entireCCRelation = tx.PersistenceManager.PlanningRepository.Query<EntityCostReleationsDao>().Where(c => c.EntityId == entityID && c.CostcenterId != costcenterId).Select(a => a.CostcenterId).ToList();
                    //  var ccMemberRelation = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(c => entireCCRelation.Contains(c.Entityid) && c.Roleid == 1).Select(a => a).ToList();
                    var ccMemberRelation = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                            join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                            where entireCCRelation.Contains(item.Entityid) && EntityTypeRole.EntityRoleID == 1
                                            select item).ToList();

                    var isDeleteBudAppr = ccMemberRelation.Where(a => a.Userid == ccOwnerDao.Userid).Select(a => a).Count();
                    if (isDeleteBudAppr == 0)
                    {
                        entRoleDao = new EntityRoleUserDao();
                        //   entRoleDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where item.Entityid == entityID && item.Roleid == 8 && item.Userid == ccOwnerDao.Userid select item).FirstOrDefault();
                        entRoleDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                      join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                      where item.Entityid == entityID && EntityTypeRole.EntityRoleID == 8 && item.Userid == ccOwnerDao.Userid
                                      select item).FirstOrDefault();
                        if (entRoleDao != null)
                            ientityRoleDao.Add(entRoleDao);

                    }

                    foreach (var val in entitydao)
                    {
                        findao = new FinancialDao();
                        EntCostReldao = new EntityCostReleationsDao();
                        prpFinanciallst = new List<MultiProperty>();
                        prpFinanciallst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = val.Id });
                        prpFinanciallst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = costcenterId });
                        findao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prpFinanciallst)).FirstOrDefault();
                        if (findao != null)
                            Ifinancial.Add(findao);
                        prpRelationlst = new List<MultiProperty>();
                        prpRelationlst.Add(new MultiProperty { propertyName = EntityCostReleationsDao.PropertyNames.EntityId, propertyValue = val.Id });
                        prpRelationlst.Add(new MultiProperty { propertyName = EntityCostReleationsDao.PropertyNames.CostcenterId, propertyValue = costcenterId });
                        EntCostReldao = (tx.PersistenceManager.AccessRepository.GetEquals<EntityCostReleationsDao>(prpRelationlst)).FirstOrDefault();
                        if (EntCostReldao != null)
                            IEntityCostReleations.Add(EntCostReldao);
                        //Deleting Budget Approver Logic Goes here
                        //ccOwnerDao = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(c => c.Entityid == costcenterId && c.Roleid == 1).FirstOrDefault();
                        ccOwnerDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                      join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                      where item.Entityid == costcenterId && EntityTypeRole.EntityRoleID == 1
                                      select item).FirstOrDefault();
                        entireCCRelation = tx.PersistenceManager.PlanningRepository.Query<EntityCostReleationsDao>().Where(c => c.EntityId == val.Id && c.CostcenterId != costcenterId).Select(a => a.CostcenterId).ToList();
                        // ccMemberRelation = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(c => entireCCRelation.Contains(c.Entityid) && c.Roleid == 1).Select(a => a).ToList();
                        ccMemberRelation = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                            join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                            where entireCCRelation.Contains(item.Entityid) && EntityTypeRole.EntityRoleID == 1
                                            select item).ToList();
                        isDeleteBudAppr = ccMemberRelation.Where(a => a.Userid == ccOwnerDao.Userid).Select(a => a).Count();
                        if (isDeleteBudAppr == 0)
                        {
                            entRoleDao = new EntityRoleUserDao();
                            // entRoleDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where item.Entityid == val.Id && item.Roleid == 8 && item.Userid == ccOwnerDao.Userid select item).FirstOrDefault();
                            entRoleDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                          join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                          where item.Entityid == val.Id && EntityTypeRole.EntityRoleID == 8 && item.Userid == ccOwnerDao.Userid
                                          select item).FirstOrDefault();
                            if (entRoleDao != null)
                                ientityRoleDao.Add(entRoleDao);
                        }
                    }

                    //to insert feed when a cost center is deleted
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "cost center deleted from financial";
                    obj.EntityId = entityID;
                    obj.AssociatedEntityId = costcenterId;

                    obj.AttributeName = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>() where item.Id == costcenterId select item.Name).FirstOrDefault().ToString();
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    fs.AsynchronousNotify(obj);

                    //end
                    if (Ifinancial.Count() > 0)
                        tx.PersistenceManager.PlanningRepository.Delete<FinancialDao>(Ifinancial);
                    if (IEntityCostReleations.Count() > 0)
                        tx.PersistenceManager.PlanningRepository.Delete<EntityCostReleationsDao>(IEntityCostReleations);
                    if (ientityRoleDao.Count() > 0)
                        tx.PersistenceManager.PlanningRepository.Delete<EntityRoleUserDao>(ientityRoleDao);

                    tx.Commit();

                    return true;
                }
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }



        /// <summary>
        /// Getting Costcentre for Entity Creation
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <returns>ICostCentreData</returns>
        public IList GetCostcentreforEntityCreation(PlanningManagerProxy proxy, int EntityTypeID, int fiscalyear = 0, int entityid = 0)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (entityid == 0)
                    {
                        var dynQry = new StringBuilder();
                        if (fiscalyear == 0)
                        {
                            dynQry.Append("select pe.Name as costcentername,da.Id,ent.UserID ,(select top 1 FirstName+' '+LastName from UM_User where ID=ent.UserID) as username,(select top 1 ISNULL( UM_User.Designation,'-') from UM_User where ID=ent.UserID) as Designation,(select top 1 ISNULL( UM_User.Title,'-') from UM_User where ID=ent.UserID) as Title,(select ID from AM_EntityTypeRoleAcl where EntityTypeID=" + EntityTypeID + " and EntityRoleID=8) as RoleID,ent.IsInherited,ent.InheritedFromEntityID, ( SELECT TOP 1 Email FROM   UM_User WHERE  ID = ent.UserID ) AS usermail from MM_AttributeRecord_5 da inner join ");
                            dynQry.Append(" AM_Entity_Role_User ent on da.Attr_1 in (SELECT Id FROM MM_Option WHERE Caption = DATEPART(YYYY,GETDATE())) and ent.EntityID=da.Id and ent.RoleID=1 INNER JOIN PM_Entity pe ON pe.ID=da.Id AND pe.ID=ent.EntityID and pe.ACTIVE=1");
                        }
                        else
                        {
                            string costCentreQury = @"SELECT PM_Entity.Name AS costcentername,
                                                           da.Id,
                                                           ent.UserID ,

                                                      (SELECT top 1 FirstName+' '+LastName
                                                       FROM UM_User
                                                       WHERE ID=ent.UserID) AS username ,
                                                      ( SELECT TOP 1 ISNULL( UM_User.Designation,'-') FROM   UM_User WHERE  ID = ent.UserID ) AS Designation ,
                                                      ( SELECT TOP 1 ISNULL( UM_User.Title,'-') FROM   UM_User WHERE  ID = ent.UserID ) AS Title,
                                                           (select ID from AM_EntityTypeRoleAcl where EntityTypeID=? and EntityRoleID=8) as RoleID,
                                                           ent.IsInherited,
                                                           ent.InheritedFromEntityID,

                                                      (SELECT TOP 1 Email
                                                       FROM UM_User
                                                       WHERE ID = ent.UserID) AS usermail
                                                    FROM MM_AttributeRecord_5 da
                                                    INNER JOIN PM_Entity ON PM_Entity.ID = da.Id and PM_Entity.ACTIVE = 1
                                                    INNER JOIN";
                            dynQry.Append(costCentreQury.ToString());
                            dynQry.Append(" AM_Entity_Role_User ent on da.Attr_1= ? and ent.EntityID=da.Id INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.ID = ent.RoleID AND aetra.EntityRoleID = 1 ");
                        }
                        IList costCentreDao = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(dynQry.ToString(), EntityTypeID, fiscalyear);
                        if (costCentreDao != null)
                            return costCentreDao;
                    }
                    else
                    {
                        string dynResult = "select PMEC.CostCenterID as  Id,(SELECT pe.Name FROM PM_Entity pe WHERE id=PMEC.CostCenterID) as costcentername,";
                        dynResult += " (select top 1 U.FirstName+' '+U.LastName from UM_User U where u.ID in (select TOP 1 ER.UserID from AM_Entity_Role_User ER INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.ID = er.RoleID where ER.EntityID=PMEC.CostCenterID AND aetra.EntityRoleID=1 )) as username, ";
                        dynResult += "  ( SELECT TOP 1 ISNULL( u.Designation,'-') FROM   UM_User U WHERE  u.ID IN (SELECT TOP 1 ER.UserID FROM   AM_Entity_Role_User ER INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.ID = er.RoleID ";
                        dynResult += " WHERE  ER.EntityID = PMEC.CostCenterID AND aetra.EntityRoleID=1 )) AS Designation,";
                        dynResult += "  ( SELECT TOP 1 ISNULL( u.Title,'-') FROM   UM_User U WHERE  u.ID IN (SELECT TOP 1 ER.UserID FROM   AM_Entity_Role_User ER INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.ID = er.RoleID ";
                        dynResult += " WHERE  ER.EntityID = PMEC.CostCenterID AND aetra.EntityRoleID=1)) AS Title,";
                        dynResult += " ( SELECT TOP 1 U.Email FROM   UM_User U WHERE  u.ID = ( SELECT TOP 1 ER.UserID FROM   AM_Entity_Role_User ER INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.ID = er.RoleID WHERE  ER.EntityID = PMEC.CostCenterID AND aetra.EntityRoleID=1 )  )AS usermail, ";
                        dynResult += "(select top 1 ER.UserID from AM_Entity_Role_User ER where ER.EntityID=PMEC.CostCenterID) as UserID ,";
                        dynResult += "( SELECT TOP 1 er.InheritedFromEntityID FROM   AM_Entity_Role_User ER   INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.ID = er.RoleID WHERE  ER.EntityID = PMEC.CostCenterID AND aetra.EntityRoleID=1 ) AS InheritedFromEntityID,";
                        dynResult += "( SELECT TOP 1 er.IsInherited FROM   AM_Entity_Role_User ER  INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.ID = er.RoleID WHERE  ER.EntityID = PMEC.CostCenterID AND aetra.EntityRoleID=1  ) AS IsInherited,";
                        dynResult += "( SELECT TOP 1 er.RoleID FROM   AM_Entity_Role_User ER  INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.ID = er.RoleID WHERE  ER.EntityID = PMEC.CostCenterID  AND aetra.EntityRoleID=1 ) AS RoleID ";
                        dynResult += " from PM_EntityCostReleations PMEC inner join PM_Entity PME on PME.ID=PMEC.EntityID and PME.ID=? ";
                        IList costCentreDao = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(dynResult, entityid);

                        if (costCentreDao != null)
                            return costCentreDao;
                    }
                    return null;
                }
            }

            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Getting Member for Entity Creation
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <returns>IMemberData</returns>
        public IList GetGlobalMembers(PlanningManagerProxy proxy, int entityid = 0)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (entityid == 0)
                    {
                        IList entityMembersList = null;
                        return entityMembersList;
                    }
                    else
                    {
                        var strMember = new StringBuilder();
                        strMember.Append("SELECT AM.UserID, um.FirstName + ' ' + um.LastName AS UserName,um.Email,am.RoleID,am.InheritedFromEntityID,am.IsInherited,ar.Caption,isnull(pe.name,'') as InheritedFromEntityName");
                        strMember.Append(" FROM  AM_Entity_Role_User AM INNER JOIN UM_User UM ON  UM.ID = am.UserID  INNER JOIN AM_Role AR ON  AR.ID = am.RoleID");
                        strMember.Append(" inner JOIN PM_Entity pe on AM.EntityID=pe.id AND am.EntityID = ? ");
                        IList entityMembersList = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strMember.ToString(), entityid);
                        if (entityMembersList != null)
                            return entityMembersList;
                    }
                    return null;
                }
            }

            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Getting Costcentre for Entity Creation
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <returns>ICostCentreData</returns>
        public IList GetCostcentreforFinancial(PlanningManagerProxy proxy, int entityid)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var ParentID = Convert.ToInt32((from item in tx.PersistenceManager.UserRepository.Query<EntityDao>() where item.Id == entityid select item.Parentid).FirstOrDefault().ToString());

                    if (ParentID == 0)
                    {
                        var entityName = GetEntityName(tx, entityid);
                        int FiscalYearValue = Convert.ToInt32((from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName) where item.Id == entityid select item.Attributes["1"]).FirstOrDefault());
                        string dynResult = "select pe.Name as costcentername,da.Id,ent.UserID ,(select top 1 FirstName+' '+LastName from UM_User where ID=ent.UserID) as username from MM_AttributeRecord_5 da inner join" +
                                         " AM_Entity_Role_User ent on da.Attr_1= ? and ent.EntityID=da.Id INNER JOIN AM_EntityTypeRoleAcl aetra  ON ent.RoleID=aetra.ID AND aetra.EntityRoleID = 1 INNER JOIN PM_Entity pe ON pe.ID=da.Id AND pe.ID=ent.EntityID and pe.Active = 1";

                        IList costCentreDao = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(dynResult, FiscalYearValue);

                        if (costCentreDao != null)

                            return costCentreDao;

                    }
                    else
                    {

                        string dynResult = " select PMEC.CostCenterID as  Id,(select top 1 ent.Name from PM_Entity ent where ID=PMEC.CostCenterID) as costcentername,";
                        dynResult += " (select top 1 U.FirstName+' '+U.LastName from UM_User U where u.ID in (select ER.UserID from AM_Entity_Role_User ER where ER.EntityID=PMEC.CostCenterID)) as username, ";
                        dynResult += "(select top 1 ER.UserID from AM_Entity_Role_User ER where ER.EntityID=PMEC.CostCenterID) as UserID ";
                        dynResult += "from PM_EntityCostReleations PMEC inner join PM_Entity PME on PME.ID=PMEC.EntityID and PME.ID= ? and PME.Active = 1";
                        IList costCentreDao = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(dynResult, ParentID);

                        if (costCentreDao != null)

                            return costCentreDao;

                    }
                    return null;
                }

            }

            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// add Costcentre 
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entityid.</param>
        /// <param name="entityCostcentres">The IEntityCostReleations.</param>
        /// <returns>ICostCentreData</returns>
        public bool AddCostCenterForFinancial(PlanningManagerProxy proxy, int entityId, IList<IEntityCostReleations> entityCostcentres, bool isForceful)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityId, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var Level = (from item in tx.PersistenceManager.UserRepository.Query<EntityDao>() where item.Id == entityId select new { item.Level, item.Typeid, item.UniqueKey }).FirstOrDefault();
                    int EntityIds = 0;

                    List<object> ccNotifyObj = new List<object>();
                    int[] ccIdArr = entityCostcentres.Select(a => a.CostcenterId).ToArray();

                    IList<EntityRoleUserDao> entityMembers = new List<EntityRoleUserDao>();
                    IList<EntityRoleUserDao> ccMembers = new List<EntityRoleUserDao>();

                    var CurrentEntityTypeBudgetAcl = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(a => a.EntityTypeID == Level.Typeid && (EntityRoles)a.EntityRoleID == EntityRoles.BudgerApprover).SingleOrDefault();
                    var CurrentEntityTypeOwnerAcl = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(a => (EntityTypeList)a.EntityTypeID == EntityTypeList.CostCentre && (EntityRoles)a.EntityRoleID == EntityRoles.Owner).SingleOrDefault();

                    entityMembers = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(c => c.Entityid == entityId && c.Roleid == CurrentEntityTypeBudgetAcl.ID).ToList();
                    ccMembers = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(c => ccIdArr.Contains(c.Entityid) && c.Roleid == CurrentEntityTypeOwnerAcl.ID).ToList();
                    if (Level.Level == 0)
                    {
                        if (entityCostcentres != null)
                        {
                            IList<EntityCostReleationsDao> Ientitycostcenterdao = new List<EntityCostReleationsDao>();
                            IList<EntityRoleUserDao> Ientityroleuserdao = new List<EntityRoleUserDao>();
                            IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                            foreach (var a in entityCostcentres)
                            {
                                EntityCostReleationsDao entitycostcenterdao = new EntityCostReleationsDao();
                                entitycostcenterdao.EntityId = entityId;
                                entitycostcenterdao.CostcenterId = a.CostcenterId;
                                entitycostcenterdao.Sortorder = a.Sortorder;
                                entitycostcenterdao.Isassociate = a.Isassociate;
                                entitycostcenterdao.Isactive = a.Isactive;

                                Ientitycostcenterdao.Add(entitycostcenterdao);

                                FinancialDao financialdao = new FinancialDao();
                                financialdao.Entityid = entityId;
                                financialdao.CostCenterid = a.CostcenterId;
                                financialdao.ApprovedAllocatedAmount = 0;
                                financialdao.ApprovedBudget = 0;
                                financialdao.Commited = 0;
                                financialdao.LastUpdateOn = DateTimeOffset.UtcNow;
                                financialdao.PlannedAmount = 0;
                                financialdao.RequestedAmount = 0;
                                financialdao.Spent = 0;
                                financialdao.Status = 0;
                                Ifinancial.Add(financialdao);
                                EntityIds = a.CostcenterId;

                                var CurrentCcRoleobj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(ax => (EntityTypeList)ax.EntityTypeID == EntityTypeList.CostCentre && (EntityRoles)ax.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                var ccOwnerDao = ccMembers.Where(c => c.Entityid == a.CostcenterId && c.Roleid == CurrentCcRoleobj.ID).FirstOrDefault();
                                if (ccOwnerDao != null)
                                {
                                    int membercount = entityMembers.Where(c => c.Userid == ccOwnerDao.Userid).Count();
                                    int listmembercount = Ientityroleuserdao.Where(c => c.Userid == ccOwnerDao.Userid).Count();
                                    if (membercount == 0 && ccOwnerDao != null && listmembercount == 0)
                                    {
                                        EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                                        entityroledao.Entityid = entityId;
                                        entityroledao.Roleid = CurrentEntityTypeBudgetAcl.ID;
                                        entityroledao.Userid = ccOwnerDao.Userid;
                                        entityroledao.IsInherited = false;
                                        entityroledao.InheritedFromEntityid = 0;
                                        Ientityroleuserdao.Add(entityroledao);
                                    }
                                }

                            }
                            tx.PersistenceManager.PlanningRepository.Save<EntityCostReleationsDao>(Ientitycostcenterdao);
                            tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                            tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientityroleuserdao);

                            //for funding costcenter dynamic table
                            IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                            DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                            foreach (var val in Ifinancial)
                            {
                                dynamicdao = new DynamicAttributesDao();
                                dynamicdao.Id = val.Id;
                                idynObj.Add(dynamicdao);

                            }
                            if (idynObj.Count > 0)
                                tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("FundingCostCentreRecords", idynObj);

                            //-------------------------------feed----------------------
                            foreach (var costcenter in Ientitycostcenterdao)
                            {
                                var CostCentername = (from ccname in entityCostcentres where ccname.CostcenterId == costcenter.CostcenterId select ccname.CCName).FirstOrDefault().ToString();
                                BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                                NotificationFeedObjects obj = new NotificationFeedObjects();

                                obj.action = "costcenter added";
                                obj.Actorid = proxy.MarcomManager.User.Id;
                                obj.EntityId = entityId;
                                obj.AttributeName = CostCentername;
                                obj.AssociatedEntityId = costcenter.CostcenterId;
                                fs.AsynchronousNotify(obj);

                            }
                            ccNotifyObj.Add(new
                            {
                                CCID = EntityIds,
                                EID = entityId
                            });

                            tx.Commit();
                            //===========================================================================//
                            if (isForceful) // if want to add for children by default logic goes here
                            {


                                addcostcenterforcefullyforchild(proxy, entityId, entityCostcentres, ccNotifyObj);
                            }



                            try
                            {
                                //Adding to the Search Engine
                                System.Threading.Tasks.Task notifyCCOwner = new System.Threading.Tasks.Task(() => NotifyCCOwner(ccNotifyObj, proxy.MarcomManager.User.Id));
                                notifyCCOwner.Start();
                            }
                            catch (Exception ex)
                            {
                                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Mail sending error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                            }
                            return true;
                        }
                    }
                    else if (Level.Level == 1)
                    {

                        if (entityCostcentres != null)
                        {
                            IList<EntityCostReleationsDao> Ientitycostcenterdao = new List<EntityCostReleationsDao>();
                            IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                            IList<EntityRoleUserDao> Ientityroleuserdao = new List<EntityRoleUserDao>();
                            foreach (var a in entityCostcentres)
                            {
                                EntityCostReleationsDao entitycostcenterdao = new EntityCostReleationsDao();
                                entitycostcenterdao.EntityId = entityId;
                                entitycostcenterdao.CostcenterId = a.CostcenterId;
                                entitycostcenterdao.Sortorder = a.Sortorder;
                                entitycostcenterdao.Isassociate = a.Isassociate;
                                entitycostcenterdao.Isactive = a.Isactive;
                                Ientitycostcenterdao.Add(entitycostcenterdao);

                                FinancialDao financialdao = new FinancialDao();
                                financialdao.Entityid = entityId;
                                financialdao.CostCenterid = a.CostcenterId;
                                financialdao.ApprovedAllocatedAmount = 0;
                                financialdao.ApprovedBudget = 0;
                                financialdao.Commited = 0;
                                financialdao.LastUpdateOn = DateTimeOffset.UtcNow;
                                financialdao.PlannedAmount = 0;
                                financialdao.RequestedAmount = 0;
                                financialdao.Spent = 0;
                                financialdao.Status = 0;
                                Ifinancial.Add(financialdao);
                                EntityIds = a.CostcenterId;

                                var CurrentCcRoleobj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(ax => (EntityTypeList)ax.EntityTypeID == EntityTypeList.CostCentre && (EntityRoles)ax.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                var ccOwnerDao = ccMembers.Where(c => c.Entityid == a.CostcenterId && c.Roleid == CurrentCcRoleobj.ID).FirstOrDefault();
                                int membercount = entityMembers.Where(c => c.Userid == ccOwnerDao.Userid).Count();
                                int listmembercount = Ientityroleuserdao.Where(c => c.Userid == ccOwnerDao.Userid).Count();
                                if (membercount == 0 && ccOwnerDao != null && listmembercount == 0)
                                {
                                    EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                                    entityroledao.Entityid = entityId;
                                    entityroledao.Roleid = CurrentEntityTypeBudgetAcl.ID;
                                    entityroledao.Userid = ccOwnerDao.Userid;
                                    entityroledao.IsInherited = false;
                                    entityroledao.InheritedFromEntityid = 0;
                                    Ientityroleuserdao.Add(entityroledao);
                                }
                            }
                            tx.PersistenceManager.PlanningRepository.Save<EntityCostReleationsDao>(Ientitycostcenterdao);
                            tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                            tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientityroleuserdao);

                            //for funding costcenter dynamic table
                            IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                            DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                            foreach (var val in Ifinancial)
                            {
                                dynamicdao = new DynamicAttributesDao();
                                dynamicdao.Id = val.Id;
                                idynObj.Add(dynamicdao);

                            }
                            if (idynObj.Count > 0)
                                tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("FundingCostCentreRecords", idynObj);


                            //-------------------------------feed----------------------
                            try
                            {
                                foreach (var costcenter in Ientitycostcenterdao)
                                {
                                    var CostCentername = (from ccname in entityCostcentres where ccname.CostcenterId == costcenter.CostcenterId select ccname.CCName).FirstOrDefault().ToString();
                                    // int feedInsertResult = proxy.MarcomManager.CommonManager.SaveUpdateFeed(proxy.MarcomManager.User.Id, 8, entityId, "", CostCentername, "", "");
                                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                                    NotificationFeedObjects obj = new NotificationFeedObjects();

                                    obj.action = "costcenter added";
                                    obj.Actorid = proxy.MarcomManager.User.Id;
                                    obj.EntityId = entityId;
                                    obj.AttributeName = CostCentername;
                                    obj.AssociatedEntityId = costcenter.CostcenterId;
                                    fs.AsynchronousNotify(obj);

                                }
                            }
                            catch (Exception ex)
                            {
                                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                            }
                            //===========================================================================//
                        }
                        tx.Commit();


                        addcostcenterforcefullyforchild(proxy, entityId, entityCostcentres, ccNotifyObj);  // costcenter relation to add for sub entities


                        try
                        {
                            //Adding to the Search Engine
                            System.Threading.Tasks.Task notifyCCOwner = new System.Threading.Tasks.Task(() => NotifyCCOwner(ccNotifyObj, proxy.MarcomManager.User.Id));
                            notifyCCOwner.Start();
                        }
                        catch (Exception ex)
                        {
                            BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Mail sending error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                        }

                    }

                    return false;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public void NotifyCCOwner(List<object> ccNotifyObj, int UID)
        {
            try
            {
                foreach (var val in ccNotifyObj)
                {
                    var CCID = val.GetType().GetProperty("CCID").GetValue(val, null);
                    var EID = val.GetType().GetProperty("EID").GetValue(val, null);

                    notificationForBudgetApprover((int)CCID, (int)EID, UID);
                }
            }

            catch
            {

            }
        }


        public List<Object> addcostcenterforcefullyforchild(PlanningManagerProxy proxy, int entityID, IList<IEntityCostReleations> entityCostcentres, List<object> ccNotifyObj)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    int[] systemDefinedtypes = { (int)EntityTypeList.CostCentre, (int)EntityTypeList.FundinngRequest, (int)EntityTypeList.Milestone, (int)EntityTypeList.Objective, (int)EntityTypeList.Task };
                    string IDinClause = "("
                       + String.Join(",", systemDefinedtypes.Select(x => x.ToString()).Distinct().ToArray())
                     + ")"; // should not include system defined entitytypes;


                    var totalchildrenIDarr = new StringBuilder();
                    totalchildrenIDarr.Append(" SELECT pe.ID as 'entityid', pe.[Level] AS 'level' FROM   PM_Entity pe INNER JOIN MM_EntityType met ON  pe.TypeID = met.id AND met.IsAssociate = 0 AND met.Category = 2 AND pe.[Active] = 1  AND met.id NOT IN  " + IDinClause + "  where  pe.UniqueKey LIKE  (SELECT pe1.UniqueKey FROM PM_Entity pe1 WHERE pe1.id= ? )+ '.%'  ORDER BY pe.UniqueKey asc ");
                    IList totalchildrenIDobj = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(totalchildrenIDarr.ToString(), entityID);
                    Dictionary<int, int> Childrens = totalchildrenIDobj.Cast<Hashtable>().ToDictionary(p => (int)p["entityid"], p => (int)p["level"]);
                    int[] ccIdArr = entityCostcentres.Select(a => a.CostcenterId).ToArray();
                    int[] eIdArr = Childrens.Select(a => a.Key).ToArray();

                    IList<EntityRoleUserDao> entityMembers = new List<EntityRoleUserDao>();
                    IList<EntityRoleUserDao> ccMembers = new List<EntityRoleUserDao>();

                    //entityMembers = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(c => eIdArr.Contains(c.Entityid) && c.Roleid == 8).ToList();
                    entityMembers = (from data in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                     join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on data.Roleid equals EntityTypeRole.ID
                                     where eIdArr.Contains(data.Entityid) && EntityTypeRole.EntityRoleID == 8
                                     select data).ToList();
                    //ccMembers = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(c => ccIdArr.Contains(c.Entityid) && c.Roleid == 1).ToList();
                    ccMembers = (from data in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                 join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on data.Roleid equals EntityTypeRole.ID
                                 where ccIdArr.Contains(data.Entityid) && EntityTypeRole.EntityRoleID == 1
                                 select data).ToList();


                    foreach (var child in Childrens)
                    {
                        IList<EntityCostReleationsDao> Ientitycostcenterdao = new List<EntityCostReleationsDao>();
                        IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                        EntityCostReleationsDao entitycostcenterdao = new EntityCostReleationsDao();
                        EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                        FinancialDao financialdao;
                        IList<EntityRoleUserDao> Ientityroleuserdao = new List<EntityRoleUserDao>();

                        int entitytypeid = tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>().Where(a => a.Id == child.Key).Select(a => a.Typeid).FirstOrDefault();
                        var CurrentEntityTypeBudgetAcl = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(a => a.EntityTypeID == entitytypeid && (EntityRoles)a.EntityRoleID == EntityRoles.BudgerApprover).SingleOrDefault();
                        var CurrentEntityTypeOwnerAcl = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(a => (EntityTypeList)a.EntityTypeID == EntityTypeList.CostCentre && (EntityRoles)a.EntityRoleID == EntityRoles.Owner).SingleOrDefault();

                        foreach (var a in entityCostcentres)
                        {
                            entitycostcenterdao = new EntityCostReleationsDao();
                            entitycostcenterdao.EntityId = child.Key;
                            entitycostcenterdao.CostcenterId = a.CostcenterId;
                            entitycostcenterdao.Sortorder = a.Sortorder;
                            entitycostcenterdao.Isassociate = a.Isassociate;
                            entitycostcenterdao.Isactive = a.Isactive;
                            Ientitycostcenterdao.Add(entitycostcenterdao);

                            financialdao = new FinancialDao();
                            financialdao.Entityid = child.Key;
                            financialdao.CostCenterid = a.CostcenterId;
                            financialdao.ApprovedAllocatedAmount = 0;
                            financialdao.ApprovedBudget = 0;
                            financialdao.Commited = 0;
                            financialdao.LastUpdateOn = DateTimeOffset.UtcNow;
                            financialdao.PlannedAmount = 0;
                            financialdao.RequestedAmount = 0;
                            financialdao.Spent = 0;
                            financialdao.Status = 1;
                            Ifinancial.Add(financialdao);

                            var ccOwnerDao = ccMembers.Where(c => c.Entityid == a.CostcenterId).FirstOrDefault();
                            if (ccOwnerDao != null)
                            {
                                int membercount = entityMembers.Where(c => c.Userid == ccOwnerDao.Userid).Count();
                                if (membercount == 0)
                                {
                                    entityroledao = new EntityRoleUserDao();
                                    entityroledao.Entityid = child.Key;
                                    entityroledao.Roleid = CurrentEntityTypeBudgetAcl.ID;
                                    entityroledao.Userid = ccOwnerDao.Userid;
                                    entityroledao.IsInherited = false;
                                    entityroledao.InheritedFromEntityid = 0;
                                    Ientityroleuserdao.Add(entityroledao);
                                }

                                if (child.Value == 1)
                                {
                                    ccNotifyObj.Add(new
                                    {
                                        CCID = a.CostcenterId,
                                        EID = child.Key
                                    });
                                }

                            }
                        }
                        tx.PersistenceManager.PlanningRepository.Save<EntityCostReleationsDao>(Ientitycostcenterdao);
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                        tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientityroleuserdao);
                        //for funding costcenter dynamic table
                        IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                        DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                        foreach (var val in Ifinancial)
                        {
                            dynamicdao = new DynamicAttributesDao();
                            dynamicdao.Id = val.Id;
                            idynObj.Add(dynamicdao);

                        }
                        if (idynObj.Count > 0)
                            tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("FundingCostCentreRecords", idynObj);

                    }
                    //-------------------------------feed----------------------

                    foreach (var entityobj in Childrens.Keys)
                    {
                        try
                        {
                            if (Childrens[entityobj] == 1)
                                foreach (var costcenter in entityCostcentres)
                                {
                                    var CostCentername = (from ccname in entityCostcentres where ccname.CostcenterId == costcenter.CostcenterId select ccname.CCName).FirstOrDefault().ToString();
                                    // int feedInsertResult = proxy.MarcomManager.CommonManager.SaveUpdateFeed(proxy.MarcomManager.User.Id, 8, entityId, "", CostCentername, "", "");
                                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                                    NotificationFeedObjects obj = new NotificationFeedObjects();

                                    obj.action = "costcenter added";
                                    obj.Actorid = proxy.MarcomManager.User.Id;
                                    obj.EntityId = entityobj;
                                    obj.AttributeName = CostCentername;
                                    obj.AssociatedEntityId = costcenter.CostcenterId;
                                    fs.AsynchronousNotify(obj);
                                    //notificationForBudgetApprover(proxy, tx, costcenter.CostcenterId, entityobj);
                                }
                        }
                        catch (Exception ex)
                        {
                            BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                        }
                    }
                    tx.Commit();
                    //===========================================================================//
                    return ccNotifyObj;
                }
            }
            catch
            {
                return null;
            }
        }

        public void notificationForAddMember(PlanningManagerProxy proxy, int costcenterid, int entityid)
        {


            using (ITransaction txfornotification = proxy.MarcomManager.GetTransaction())
            {
                var ccOwnerDao = (from e in txfornotification.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where e.Entityid == costcenterid && e.Roleid == 1 select e.Userid).FirstOrDefault();

                //-----------------------------------notification for add new member-------------------------------
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("notification for add new member for  " + entityid, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                UserNotificationDao userNotify = new UserNotificationDao();
                userNotify.Entityid = entityid;
                userNotify.Actorid = proxy.MarcomManager.User.Id;
                userNotify.CreatedOn = DateTimeOffset.Now;
                userNotify.Typeid = 14;
                userNotify.IsViewed = false;
                userNotify.IsSentInMail = false;
                userNotify.TypeName = "";
                userNotify.AttributeName = "";
                userNotify.FromValue = "";
                userNotify.ToValue = "8";
                userNotify.Userid = Convert.ToInt32(ccOwnerDao);
                if (proxy.MarcomManager.User.Id != Convert.ToInt32(ccOwnerDao))
                {
                    txfornotification.PersistenceManager.CommonRepository.Save<UserNotificationDao>(userNotify);
                    txfornotification.Commit();
                }
                else
                    txfornotification.Commit();
                //----------------newsfeed-----
                using (ITransaction txforfeed = proxy.MarcomManager.GetTransaction())
                {
                    IFeed feedList = new Feed();
                    FeedDao feedObj = new FeedDao();
                    feedObj.Actor = proxy.MarcomManager.User.Id;
                    feedObj.Templateid = 3;
                    feedObj.Entityid = entityid;
                    feedObj.TypeName = "MemberAdded";
                    feedObj.HappenedOn = DateTimeOffset.UtcNow;
                    feedObj.CommentedUpdatedOn = DateTimeOffset.MinValue;

                    feedObj.AttributeName = "";
                    feedObj.FromValue = "";
                    feedObj.ToValue = "8";
                    feedObj.UserID = Convert.ToInt32(ccOwnerDao);

                    txforfeed.PersistenceManager.CommonRepository.Save<FeedDao>(feedObj);
                    txforfeed.Commit();
                }
                //-------------------------------------------------------------------------------------------------
            }


        }

        public void notificationForBudgetApprover(int costcenterid, int entityid, int userid)
        {
            Guid userSession = MarcomManagerFactory.GetSystemSession();

            IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(userSession);

            try
            {
                using (ITransaction txfornotification = managers.GetTransaction())
                {
                    var ccOwnerDao = (from e in txfornotification.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where e.Entityid == costcenterid && e.Roleid == 1 select e.Userid).FirstOrDefault();

                    //-----------------------------------notification for add new member-------------------------------
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("notification for add new member for  " + entityid, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    UserNotificationDao userNotify = new UserNotificationDao();
                    userNotify.Entityid = entityid;
                    userNotify.Actorid = userid;
                    userNotify.CreatedOn = DateTimeOffset.Now;
                    userNotify.Typeid = 14;
                    userNotify.IsViewed = false;
                    userNotify.IsSentInMail = false;
                    userNotify.TypeName = "";
                    userNotify.AttributeName = "";
                    userNotify.FromValue = "";
                    userNotify.ToValue = "8";
                    userNotify.Userid = Convert.ToInt32(ccOwnerDao);
                    if (userid != Convert.ToInt32(ccOwnerDao))
                    {
                        txfornotification.PersistenceManager.CommonRepository.Save<UserNotificationDao>(userNotify);
                        txfornotification.Commit();
                    }
                    else
                        txfornotification.Commit();
                    //----------------newsfeed-----
                    using (ITransaction txforfeed = managers.GetTransaction())
                    {
                        IFeed feedList = new Feed();
                        FeedDao feedObj = new FeedDao();
                        feedObj.Actor = userid;
                        feedObj.Templateid = 3;
                        feedObj.Entityid = entityid;
                        feedObj.TypeName = "MemberAdded";
                        feedObj.HappenedOn = DateTimeOffset.UtcNow;
                        feedObj.CommentedUpdatedOn = DateTimeOffset.MinValue;

                        feedObj.AttributeName = "";
                        feedObj.FromValue = "";
                        feedObj.ToValue = "8";
                        feedObj.UserID = Convert.ToInt32(ccOwnerDao);

                        txforfeed.PersistenceManager.CommonRepository.Save<FeedDao>(feedObj);
                        txforfeed.Commit();
                    }
                    //-------------------------------------------------------------------------------------------------
                }

            }
            catch
            {

            }


        }
        /// <summary>
        /// Getting Entity Financial Details 
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <returns>IList</returns>
        public Tuple<IList, IList, IList, IList, IList, int, IList<IFinancialMetadataAttributewithValues>, Tuple<List<object>>> GetEntityFinancialdDetails(PlanningManagerProxy proxy, int entityid, int userID, int startRow, int endRow, bool includedetails)
        {
            try
            {
                using (ITransaction tx1 = proxy.MarcomManager.GetTransaction())
                {
                    var objFinancialData = tx1.PersistenceManager.PlanningRepository.Query<FinancialDao>().Where(ax => ax.Entityid == entityid).SingleOrDefault();
                    //Get Default division calculation  forecast setting
                    IFinancialForecastSettings objfinSettings = new FinancialForecastSettings();
                    var CurrentData = tx1.PersistenceManager.PlanningRepository.Query<FinancialForecastSettingsDao>().SingleOrDefault();
                    var ForeCastresult = CurrentData.ForecastDivision;

                    IList<string> Headings = new List<string>();
                    int year = DateTime.Now.Year;
                    DateTime firstDay = new DateTime(year, 1, 1);

                    StringBuilder sbQuery = new StringBuilder();
                    sbQuery.AppendLine("SELECT ");
                    sbQuery.AppendLine(" PMI.ID,");
                    sbQuery.AppendLine(" pmid.Amount,");
                    sbQuery.AppendLine(" PMID.CostCenterID,");
                    sbQuery.AppendLine(" PMI.CreatedDate");
                    sbQuery.AppendLine(" FROM PM_Invoice PMI");
                    sbQuery.AppendLine(" INNER JOIN PM_InvoiceDetail PMID");
                    sbQuery.AppendLine(" ON PMI.ID = PMID.InvID");
                    sbQuery.AppendLine(" WHERE PMI.EntityID = " + entityid);
                    var data = tx1.PersistenceManager.PlanningRepository.ExecuteQuery(sbQuery.ToString());
                    decimal Q1AcAmount = 0;
                    decimal Q2AcAmount = 0;
                    decimal Q3AcAmount = 0;
                    decimal Q4AcAmount = 0;
                    decimal H1AcAmount = 0;
                    decimal H2AcAmount = 0;
                    decimal M1AcAmount = 0;
                    decimal M2AcAmount = 0;
                    decimal M3AcAmount = 0;
                    decimal M4AcAmount = 0;
                    decimal M5AcAmount = 0;
                    decimal M6AcAmount = 0;
                    decimal M7AcAmount = 0;
                    decimal M8AcAmount = 0;
                    decimal M9AcAmount = 0;
                    decimal M10AcAmount = 0;
                    decimal M11AcAmount = 0;
                    decimal M12AcAmount = 0;
                    decimal YAcAmount = 0;
                    if (data != null)
                    {
                        foreach (var datarow in data)
                        {
                            var temp = datarow;

                            DateTime createdDate = (DateTime)((System.Collections.Hashtable)(datarow))["CreatedDate"];
                            switch ((enumDivisonIds)CurrentData.ForecastDivision)
                            {
                                case enumDivisonIds.Monthly:
                                    int month = DateTime.Now.Month;
                                    DateTime M1LastDate = firstDay.AddMonths(1).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M2LastDate = firstDay.AddMonths(2).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M3LastDate = firstDay.AddMonths(3).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M4LastDate = firstDay.AddMonths(4).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M5LastDate = firstDay.AddMonths(5).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M6LastDate = firstDay.AddMonths(6).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M7LastDate = firstDay.AddMonths(7).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M8LastDate = firstDay.AddMonths(8).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M9LastDate = firstDay.AddMonths(9).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M10LastDate = firstDay.AddMonths(10).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M11LastDate = firstDay.AddMonths(11).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime M12LastDate = firstDay.AddMonths(12).AddDays((int)CurrentData.ForecastDeadlines);

                                    if (createdDate.Date >= firstDay.Date && createdDate.Date <= M1LastDate.Date)
                                    {
                                        M1AcAmount = M1AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate.Date > M1LastDate.Date && createdDate.Date <= M2LastDate.Date)
                                    {
                                        M2AcAmount = M2AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate.Date > M2LastDate.Date && createdDate.Date <= M3LastDate.Date)
                                    {
                                        M3AcAmount = M3AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate.Date > M3LastDate.Date && createdDate.Date <= M4LastDate.Date)
                                    {
                                        M4AcAmount = M4AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }

                                    else if (createdDate.Date > M4LastDate.Date && createdDate.Date <= M5LastDate.Date)
                                    {
                                        M5AcAmount = M5AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate.Date > M5LastDate.Date && createdDate.Date <= M6LastDate.Date)
                                    {
                                        M6AcAmount = M6AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate.Date > M6LastDate.Date && createdDate.Date <= M7LastDate.Date)
                                    {
                                        M7AcAmount = M7AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate.Date > M7LastDate.Date && createdDate.Date <= M8LastDate.Date)
                                    {
                                        M8AcAmount = M8AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }

                                    else if (createdDate.Date > M8LastDate.Date && createdDate.Date <= M9LastDate.Date)
                                    {
                                        M9AcAmount = M9AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate.Date > M9LastDate.Date && createdDate.Date <= M10LastDate.Date)
                                    {
                                        M10AcAmount = M10AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }

                                    else if (createdDate.Date > M10LastDate.Date && createdDate.Date <= M11LastDate.Date)
                                    {
                                        M11AcAmount = M11AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate.Date > M11LastDate.Date && createdDate.Date <= M12LastDate.Date)
                                    {
                                        M12AcAmount = M12AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }

                                    break;
                                case enumDivisonIds.Quaterly:
                                    int currentQuarter = (DateTime.Today.Month - 1) / 3 + 1;
                                    //int currentQuarter = 2;
                                    DateTime Q1LastDate = firstDay.AddMonths(3).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime Q2LastDate = firstDay.AddMonths(6).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime Q3LastDate = firstDay.AddMonths(9).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime Q4LastDate = firstDay.AddMonths(12).AddDays((int)CurrentData.ForecastDeadlines);

                                    if (createdDate >= firstDay && createdDate <= Q1LastDate)
                                    {
                                        Q1AcAmount = Q1AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate > Q1LastDate && createdDate <= Q2LastDate)
                                    {
                                        Q2AcAmount = Q2AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate > Q2LastDate && createdDate <= Q3LastDate)
                                    {
                                        Q3AcAmount = Q3AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate > Q3LastDate && createdDate <= Q4LastDate)
                                    {
                                        Q4AcAmount = Q4AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    break;
                                case enumDivisonIds.Yearly:
                                    int currentYear = DateTime.Now.Year;
                                    DateTime YLastDate = firstDay.AddYears(1).AddDays((int)CurrentData.ForecastDeadlines);


                                    break;
                                case enumDivisonIds.Half_yearly:
                                    int currentHalf = (DateTime.Today.Month - 1) / 6 + 1;
                                    DateTime H1LastDate = firstDay.AddMonths(6).AddDays((int)CurrentData.ForecastDeadlines);
                                    DateTime H2LastDate = firstDay.AddMonths(12).AddDays((int)CurrentData.ForecastDeadlines);


                                    if (createdDate >= firstDay && createdDate <= H1LastDate)
                                    {
                                        H1AcAmount = H1AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    else if (createdDate >= H1LastDate && createdDate <= H2LastDate)
                                    {
                                        H2AcAmount = H2AcAmount + (decimal)((System.Collections.Hashtable)(datarow))["Amount"];
                                    }
                                    break;
                            }
                        }
                    }
                    StringBuilder sbActualSpent = new StringBuilder();
                    sbActualSpent.AppendLine("UPDATE PM_Financial");
                    sbActualSpent.AppendLine("SET   ActualQ1 = " + Q1AcAmount);
                    sbActualSpent.AppendLine(",ActualQ2 = " + Q2AcAmount);
                    sbActualSpent.AppendLine(",ActualQ3 = " + Q3AcAmount);
                    sbActualSpent.AppendLine(",ActualQ4 = " + Q4AcAmount);
                    sbActualSpent.AppendLine(",ActualM1 = " + M1AcAmount);
                    sbActualSpent.AppendLine(",ActualM2 = " + M2AcAmount);
                    sbActualSpent.AppendLine(",ActualM3 = " + M3AcAmount);
                    sbActualSpent.AppendLine(",ActualM4 = " + M4AcAmount);
                    sbActualSpent.AppendLine(",ActualM5 = " + M5AcAmount);
                    sbActualSpent.AppendLine(",ActualM6 = " + M6AcAmount);
                    sbActualSpent.AppendLine(",ActualM7 = " + M7AcAmount);
                    sbActualSpent.AppendLine(",ActualM8 = " + M8AcAmount);
                    sbActualSpent.AppendLine(",ActualM9 = " + M9AcAmount);
                    sbActualSpent.AppendLine(",ActualM10 = " + M10AcAmount);
                    sbActualSpent.AppendLine(",ActualM11 = " + M11AcAmount);
                    sbActualSpent.AppendLine(",ActualM12 = " + M12AcAmount);
                    sbActualSpent.AppendLine(",ActualH1 = " + H1AcAmount);
                    sbActualSpent.AppendLine(",ActualH2 = " + H2AcAmount);
                    sbActualSpent.AppendLine(",ActualY = " + YAcAmount);
                    sbActualSpent.AppendLine("WHERE EntityID = " + entityid);

                    tx1.PersistenceManager.PlanningRepository.ExecuteQuery(sbActualSpent.ToString());

                    tx1.Commit();
                }


                //string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
                //XDocument adminXdoc = XDocument.Load(xmlpath);
                // var ForeCastresult = adminXdoc.Descendants("DivisonIds").ElementAt(0).Value;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var CurrentData = tx.PersistenceManager.PlanningRepository.Query<FinancialForecastSettingsDao>().SingleOrDefault();
                    var ForeCastresult = CurrentData.ForecastDivision;
                    //Get Unique Key for entityid from proxy.MarcomManager.EntitySortorderIdColle
                    var parentEntity = (from item in tx.PersistenceManager.TaskRepository.Query<EntityDao>()
                                        where item.Id == entityid && item.Active == true
                                        select item).FirstOrDefault();
                    var entityfinancialccCount = (from item in tx.PersistenceManager.TaskRepository.Query<FinancialDao>()
                                                  where item.Entityid == entityid
                                                  select item).ToList().Count();

                    //add additional criteria like contain the unique key
                    //var result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.UniqueKey.StartsWith("" + parentEntity.UniqueKey + ".") || a.UniqueKey == parentEntity.UniqueKey).Select(a => a).Skip(startRow - 1).Take(15).ToList();
                    var result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.UniqueKey.StartsWith("" + parentEntity.UniqueKey + ".") || a.UniqueKey == parentEntity.UniqueKey).Select(a => a).ToList();
                    var sbMain = new StringBuilder();
                    sbMain.Append(" DECLARE @RowsPerPage     INT = 30, ");
                    sbMain.Append("@PageNumber      INT = " + startRow + " ");
                    sbMain.Append("	DECLARE @tempTable AS TABLE (Id INT PRIMARY KEY NOT NULL,EntityId INT) ");

                    for (int CurrentIndex = 0; CurrentIndex < result.Count(); CurrentIndex++)
                    {
                        sbMain.Append(" INSERT INTO @tempTable(ID,EntityId) VALUES(" + result[CurrentIndex].Id + "," + result[CurrentIndex].EntityIds + ")");
                    }

                    string inClause = "("
                                        + String.Join(",", result.Select(x => x.EntityIds.ToString()).ToArray())
                                      + ")";

                    IList<IFinancialMetadataAttributewithValues> metadata = new List<IFinancialMetadataAttributewithValues>();

                    var costCenterDetails = new StringBuilder();

                    var financialDetails = new StringBuilder();

                    var spentAmount = new StringBuilder();

                    var EntityCostCenterRelations = new StringBuilder();

                    sbMain.Append("	    DECLARE @EntityID AS INT = " + entityid + "  ");
                    sbMain.Append("	    DECLARE @UserID AS INT = " + userID + " ");
                    sbMain.Append("		DECLARE @ListOfID AS TABLE (ID INT IDENTITY(1, 1) NOT NULL, [Value] INT) ");

                    //-- Entity Level selection

                    sbMain.Append("		DECLARE @ELevel AS INT  ");
                    sbMain.Append("		SELECT @ELevel = LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', '')) ");
                    sbMain.Append("		FROM   PM_Entity pe ");
                    sbMain.Append("		WHERE  pe.ID = @EntityID ");

                    sbMain.Append("		INSERT INTO @ListOfID ");
                    sbMain.Append("		  ( ");
                    sbMain.Append("		    [Value] ");
                    sbMain.Append("		  ) ");
                    sbMain.Append("		SELECT FilterItem.ID ");
                    sbMain.Append("		FROM   ( ");


                    sbMain.Append("		           SELECT DISTINCT pe2.ID, ");
                    sbMain.Append("		                  pe2.UniqueKey ");
                    sbMain.Append("		           FROM   PM_Entity pe2 ");
                    sbMain.Append("		                  INNER JOIN PM_Entity pe ");
                    sbMain.Append("		                        ON  pe2.UniqueKey LIKE pe.UniqueKey + '.%' OR  pe2.UniqueKey = pe.UniqueKey ");
                    sbMain.Append("		                       AND pe2.[Active] = 1 ");
                    sbMain.Append("		                  INNER JOIN MM_EntityType vmet ");
                    sbMain.Append("		                       ON  pe.TypeId = vmet.ID ");
                    sbMain.Append("		                       AND pe.ID = @EntityID ");
                    sbMain.Append("		       ) AS FilterItem ");
                    sbMain.Append("		ORDER BY ");
                    sbMain.Append("		       FilterItem.UniqueKey ASC ");

                    //--financial details
                    financialDetails.Append(sbMain);
                    financialDetails.Append("		SELECT (SELECT top 1 pf.ID FROM PM_Financial pf WHERE pf.EntityID= MasterTable.EntityID AND pf.CostCenterID= MasterTable.CostCenterID) AS 'FinId', MasterTable.EntityID, ");
                    financialDetails.Append("		       Ent.ParentID, ");
                    financialDetails.Append("		       Ent.TypeId, ");
                    financialDetails.Append("		       Ent.UniqueKey, dbo.financialAvailableAmount(MasterTable.EntityID,MasterTable.CostCenterID, Ent.ParentID) AS 'availableamount',");
                    financialDetails.Append("		  ISNULL( ");
                    financialDetails.Append("		           ( ");
                    financialDetails.Append("		              SELECT CONVERT( ");
                    financialDetails.Append("		                          NVARCHAR(22), ");
                    financialDetails.Append("		                          CONVERT(DATETIME, pccab2.ApproveTime, 20), ");
                    financialDetails.Append("		                          20 ");
                    financialDetails.Append("		                      ) ");
                    financialDetails.Append("		               FROM   PM_CostCenterApprovedBudget pccab2 ");
                    financialDetails.Append("		               WHERE  pccab2.CostCentreID = MasterTable.CostCenterID ");
                    financialDetails.Append("		           ), ");
                    financialDetails.Append("		           '' ");
                    financialDetails.Append("		       )               AS CCApprovedBudgetDate, ");
                    financialDetails.Append("		       ent.Level, ");
                    financialDetails.Append("		       (SELECT met.ColorCode FROM MM_EntityType met WHERE met.ID = Ent.TypeId ) AS ColorCode, ");
                    financialDetails.Append("		       (SELECT met.ShortDescription FROM MM_EntityType met WHERE met.ID = Ent.TypeId ) AS ShortDescription, ");
                    financialDetails.Append("		       (SELECT met.ColorCode FROM MM_EntityType met WHERE met.ID = (SELECT TOP 1 pe.TypeID FROM PM_Entity pe WHERE pe.ID=MasterTable.CostCenterID) ) AS CCColorCode, ");
                    financialDetails.Append("		       (SELECT met.ShortDescription FROM MM_EntityType met WHERE met.ID = (SELECT TOP 1 pe.TypeID FROM PM_Entity pe WHERE pe.ID=MasterTable.CostCenterID) ) AS CCShortDescription, ");
                    financialDetails.Append(" CASE WHEN (SELECT COUNT(*) FROM PM_Entity pe2 WHERE pe2.ParentID=ent.ID and pe2.active=1 and pe2.typeid in(SELECT ID FROM MM_EntityType met WHERE met.Category=2 AND met.IsAssociate=0)) =0 THEN 0 ELSE 1 end AS IsChildPresent, ");
                    financialDetails.Append("		       Ent.Name, ");
                    financialDetails.Append("		       MasterTable.CostCenterID, ");
                    financialDetails.Append("		       CC.Name     AS CostCenterName, ");
                    financialDetails.Append("		       MasterTable.PlannedAmount,COUNT(*) OVER()              AS 'Total_COUNT', ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    MasterTable.Y AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    MasterTable.M1 AS M1,");
                        financialDetails.Append("                    MasterTable.M2 AS M2, ");
                        financialDetails.Append("                    MasterTable.M3 AS M3, ");
                        financialDetails.Append("                    MasterTable.M4 AS M4,");
                        financialDetails.Append("                    MasterTable.M5 AS M5,");
                        financialDetails.Append("                    MasterTable.M6 AS M6, ");
                        financialDetails.Append("                    MasterTable.M7 AS M7, ");
                        financialDetails.Append("                    MasterTable.M8 AS M8,");
                        financialDetails.Append("                    MasterTable.M9 AS M9,");
                        financialDetails.Append("                    MasterTable.M10 AS M10, ");
                        financialDetails.Append("                    MasterTable.M11 AS M11, ");
                        financialDetails.Append("                    MasterTable.M12 AS M12,");

                        financialDetails.Append("                    MasterTable.ActualM1 AS ActualM1,");
                        financialDetails.Append("                    MasterTable.ActualM2 AS ActualM2, ");
                        financialDetails.Append("                    MasterTable.ActualM3 AS ActualM3, ");
                        financialDetails.Append("                    MasterTable.ActualM4 AS ActualM4,");
                        financialDetails.Append("                    MasterTable.ActualM5 AS ActualM5,");
                        financialDetails.Append("                    MasterTable.ActualM6 AS ActualM6, ");
                        financialDetails.Append("                    MasterTable.ActualM7 AS ActualM7, ");
                        financialDetails.Append("                    MasterTable.ActualM8 AS ActualM8,");
                        financialDetails.Append("                    MasterTable.ActualM9 AS ActualM9,");
                        financialDetails.Append("                    MasterTable.ActualM10 AS ActualM10, ");
                        financialDetails.Append("                    MasterTable.ActualM11 AS ActualM11, ");
                        financialDetails.Append("                    MasterTable.ActualM12 AS ActualM12,");

                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    MasterTable.Q1 AS Q1,");
                        financialDetails.Append("                    MasterTable.Q2 AS Q2, ");
                        financialDetails.Append("                    MasterTable.Q3 AS Q3, ");
                        financialDetails.Append("                    MasterTable.Q4 AS Q4,");

                        financialDetails.Append("                    MasterTable.ActualQ1 AS ActualQ1,");
                        financialDetails.Append("                    MasterTable.ActualQ2 AS ActualQ2, ");
                        financialDetails.Append("                    MasterTable.ActualQ3 AS ActualQ3, ");
                        financialDetails.Append("                    MasterTable.ActualQ4 AS ActualQ4,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    MasterTable.H1 AS H1,");
                        financialDetails.Append("                    MasterTable.H2 AS H2, ");

                        financialDetails.Append("                    MasterTable.ActualH1 AS ActualH2,");
                        financialDetails.Append("                    MasterTable.ActualH2 AS ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    MasterTable.Y AS Y,");
                        financialDetails.Append("                    MasterTable.ActualY AS ActualY,");
                    }


                    financialDetails.Append("		       MasterTable.SubPlanned, ");
                    financialDetails.Append("		       MasterTable.NonResPlan, ");
                    financialDetails.Append("		       MasterTable.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		       MasterTable.SubAllocated, ");
                    financialDetails.Append("		       MasterTable.NonResAlloc, ");
                    financialDetails.Append("		       MasterTable.ApprovedBudget, ");
                    financialDetails.Append("		       MasterTable.Commited, ");
                    financialDetails.Append("		       MasterTable.Spent, ");
                    financialDetails.Append("		       per.UserID  AS CostCenterOwnerID ");
                    financialDetails.Append("		FROM   ( ");
                    financialDetails.Append("		           SELECT rootlevel.EntityID, ");
                    financialDetails.Append("		                  rootlevel.CostCenterID, ");
                    financialDetails.Append("		                  SUM(rootlevel.PlannedAmount) AS PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(rootlevel.Y) AS Y,");
                        financialDetails.Append("                    SUM(rootlevel.ActualY) AS ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(rootlevel.M1) AS M1,");
                        financialDetails.Append("                    SUM(rootlevel.M2) AS M2, ");
                        financialDetails.Append("                    SUM(rootlevel.M3) AS M3, ");
                        financialDetails.Append("                    SUM(rootlevel.M4) AS M4,");
                        financialDetails.Append("                    SUM(rootlevel.M5) AS M5,");
                        financialDetails.Append("                    SUM(rootlevel.M6) AS M6, ");
                        financialDetails.Append("                    SUM(rootlevel.M7) AS M7, ");
                        financialDetails.Append("                    SUM(rootlevel.M8) AS M8,");
                        financialDetails.Append("                    SUM(rootlevel.M9) AS M9,");
                        financialDetails.Append("                    SUM(rootlevel.M10) AS M10, ");
                        financialDetails.Append("                    SUM(rootlevel.M11) AS M11, ");
                        financialDetails.Append("                    SUM(rootlevel.M12) AS M12,");

                        financialDetails.Append("                    SUM(rootlevel.ActualM1) AS ActualM1,");
                        financialDetails.Append("                    SUM(rootlevel.ActualM2) AS ActualM2, ");
                        financialDetails.Append("                    SUM(rootlevel.ActualM3) AS ActualM3, ");
                        financialDetails.Append("                    SUM(rootlevel.ActualM4) AS ActualM4,");
                        financialDetails.Append("                    SUM(rootlevel.ActualM5) AS ActualM5,");
                        financialDetails.Append("                    SUM(rootlevel.ActualM6) AS ActualM6, ");
                        financialDetails.Append("                    SUM(rootlevel.ActualM7) AS ActualM7, ");
                        financialDetails.Append("                    SUM(rootlevel.ActualM8) AS ActualM8,");
                        financialDetails.Append("                    SUM(rootlevel.ActualM9) AS ActualM9,");
                        financialDetails.Append("                    SUM(rootlevel.ActualM10) AS ActualM10, ");
                        financialDetails.Append("                    SUM(rootlevel.ActualM11) AS ActualM11, ");
                        financialDetails.Append("                    SUM(rootlevel.ActualM12) AS ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                             SUM(rootlevel.Q1) AS Q1, ");
                        financialDetails.Append("		                             SUM(rootlevel.Q2) AS Q2, ");
                        financialDetails.Append("		                             SUM(rootlevel.Q3) AS Q3, ");
                        financialDetails.Append("		                             SUM(rootlevel.Q4) AS Q4, ");

                        financialDetails.Append("		                             SUM(rootlevel.ActualQ1) AS ActualQ1, ");
                        financialDetails.Append("		                             SUM(rootlevel.ActualQ2) AS ActualQ2, ");
                        financialDetails.Append("		                             SUM(rootlevel.ActualQ3) AS ActualQ3, ");
                        financialDetails.Append("		                             SUM(rootlevel.ActualQ4) AS ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(rootlevel.H1) AS H1,");
                        financialDetails.Append("                    SUM(rootlevel.H2) AS H2, ");

                        financialDetails.Append("                    SUM(rootlevel.ActualH1) AS ActualH1,");
                        financialDetails.Append("                    SUM(rootlevel.ActualH2) AS ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    SUM(rootlevel.Y) AS Y,");
                        financialDetails.Append("                    SUM(rootlevel.ActualY) AS ActualY,");
                    }

                    financialDetails.Append("		                  SUM(rootlevel.ApprovedAllocatedAmount) AS  ");
                    financialDetails.Append("		                  ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                  SUM(rootlevel.ApprovedBudget) AS ApprovedBudget, ");
                    financialDetails.Append("		                  ( ");
                    financialDetails.Append("		                      SELECT TOP 1 CONVERT(NVARCHAR(22), CONVERT(DATETIME, pccab.Attr_73, 20), 20) ");
                    financialDetails.Append("		                      FROM   MM_AttributeRecord_5 pccab ");
                    financialDetails.Append("		                      WHERE  pccab.ID = rootlevel.CostCenterID ");
                    financialDetails.Append("		                  )  AS ApprovedBudgetDate, ");
                    financialDetails.Append("		                  ISNULL( ");
                    financialDetails.Append("		                      ( ");
                    financialDetails.Append("		                          SELECT SUM(pefav.Commited) ");
                    financialDetails.Append("		                          FROM   PM_Financial ");
                    financialDetails.Append("		                                 pefav ");
                    financialDetails.Append("		                                 INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                      ON  pe.ID = pefav.EntityID ");
                    financialDetails.Append("		                                      AND pe.[Active] = 1 ");

                    financialDetails.Append("		                                 INNER JOIN PM_Entity pe2 ");
                    financialDetails.Append("		                                      ON  pe.UniqueKey LIKE pe2.UniqueKey  ");
                    financialDetails.Append("		                                          + '.%' ");
                    financialDetails.Append("		                                 INNER JOIN @ListOfID LOI ");
                    financialDetails.Append("		                                      ON  pe.ID = LOI.[Value] ");
                    financialDetails.Append("		                          WHERE  pe2.ID = rootlevel.EntityID ");
                    financialDetails.Append("		                                 AND pefav.CostCenterID = rootlevel.CostCenterID ");
                    financialDetails.Append("		                      ), ");
                    financialDetails.Append("		                      0 ");
                    financialDetails.Append("		                  )  AS Commited, ");
                    financialDetails.Append("		                  ISNULL( ");
                    financialDetails.Append("		                      ( ");
                    financialDetails.Append("		                          SELECT SUM(pefav.Spent) ");
                    financialDetails.Append("		                          FROM   PM_Financial ");
                    financialDetails.Append("		                                 pefav ");
                    financialDetails.Append("		                                 INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                      ON  pe.ID = pefav.EntityID ");
                    financialDetails.Append("		                                      AND pe.[Active] = 1 ");

                    financialDetails.Append("		                                 INNER JOIN PM_Entity pe2 ");
                    financialDetails.Append("		                                      ON  pe.UniqueKey LIKE pe2.UniqueKey  ");
                    financialDetails.Append("		                                          + '.%' ");
                    financialDetails.Append("		                                 INNER JOIN @ListOfID LOI ");
                    financialDetails.Append("		                                      ON  pe.ID = LOI.[Value] ");
                    financialDetails.Append("		                          WHERE  pe2.ID = rootlevel.EntityID ");
                    financialDetails.Append("		                                 AND pefav.CostCenterID = rootlevel.CostCenterID ");
                    financialDetails.Append("		                      ), ");
                    financialDetails.Append("		                      0 ");
                    financialDetails.Append("		                  )  AS Spent, ");
                    financialDetails.Append("		                  SUM(rootlevel.PlannedAmount) AS SubPlanned, ");
                    financialDetails.Append("		                  SUM(rootlevel.ApprovedAllocatedAmount) AS SubAllocated, ");
                    financialDetails.Append("		                  SUM(rootlevel.NonResPlan) AS NonResPlan,	 ");
                    financialDetails.Append("		                  SUM(rootlevel.NonResAlloc) AS NonResAlloc ");
                    financialDetails.Append("		           FROM   ( ");
                    financialDetails.Append("		                      SELECT pefav.EntityID, ");
                    financialDetails.Append("		                             pefav.CostCenterID, ");
                    financialDetails.Append("		                             0  AS PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    0 AS Y,");
                        financialDetails.Append("                    0 AS ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    0 AS M1,");
                        financialDetails.Append("                    0 AS M2, ");
                        financialDetails.Append("                    0 AS M3, ");
                        financialDetails.Append("                    0 AS M4,");
                        financialDetails.Append("                    0 AS M5,");
                        financialDetails.Append("                    0 AS M6, ");
                        financialDetails.Append("                    0 AS M7, ");
                        financialDetails.Append("                    0 AS M8,");
                        financialDetails.Append("                    0 AS M9,");
                        financialDetails.Append("                    0 AS M10, ");
                        financialDetails.Append("                    0 AS M11, ");
                        financialDetails.Append("                    0 AS M12,");

                        financialDetails.Append("                    0 AS ActualM1,");
                        financialDetails.Append("                    0 AS ActualM2, ");
                        financialDetails.Append("                    0 AS ActualM3, ");
                        financialDetails.Append("                    0 AS ActualM4,");
                        financialDetails.Append("                    0 AS ActualM5,");
                        financialDetails.Append("                    0 AS ActualM6, ");
                        financialDetails.Append("                    0 AS ActualM7, ");
                        financialDetails.Append("                    0 AS ActualM8,");
                        financialDetails.Append("                    0 AS ActualM9,");
                        financialDetails.Append("                    0 AS ActualM10, ");
                        financialDetails.Append("                    0 AS ActualM11, ");
                        financialDetails.Append("                    0 AS ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                             0  AS Q1, ");
                        financialDetails.Append("		                             0  AS Q2, ");
                        financialDetails.Append("		                             0  AS Q3, ");
                        financialDetails.Append("		                             0  AS Q4, ");

                        financialDetails.Append("		                             0  AS ActualQ1, ");
                        financialDetails.Append("		                             0  AS ActualQ2, ");
                        financialDetails.Append("		                             0  AS ActualQ3, ");
                        financialDetails.Append("		                             0  AS ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    0 AS H1,");
                        financialDetails.Append("                    0 AS H2, ");

                        financialDetails.Append("                    0 AS ActualH1,");
                        financialDetails.Append("                    0 AS ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    0 AS Y,");
                        financialDetails.Append("                    0 AS ActualY,");
                    }


                    financialDetails.Append("		                             0  AS ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             0  AS ApprovedBudget, ");
                    financialDetails.Append("		                             0  AS Commited, ");
                    financialDetails.Append("		                             0  AS Spent, ");
                    financialDetails.Append("		                             0  AS SubPlanned, ");
                    financialDetails.Append("		                             0  AS SubAllocated, ");
                    financialDetails.Append("		                             0  AS NonResPlan, ");
                    financialDetails.Append("		                             0  AS NonResAlloc ");
                    financialDetails.Append("		                      FROM   PM_Financial pefav ");
                    financialDetails.Append("		                             INNER JOIN @ListOfID ");
                    financialDetails.Append("		                                  tss ");
                    financialDetails.Append("		                                  ON  tss.[Value] = pefav.EntityID ");
                    financialDetails.Append("		                             INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                  ON  pefav.EntityID = pe.ID ");
                    financialDetails.Append("		                      WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                             AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) = 0 ");

                    financialDetails.Append("		                      UNION ALL ");


                    financialDetails.Append("		                      SELECT main.ParentID, ");
                    financialDetails.Append("		                             main.CostCenterID, ");
                    financialDetails.Append("		                             SUM(main.PlannedAmount) AS PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(main.Y) AS Y,");

                        financialDetails.Append("                    SUM(main.ActualY) AS ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(main.M1) AS M1,");
                        financialDetails.Append("                    SUM(main.M2) AS M2, ");
                        financialDetails.Append("                    SUM(main.M3) AS M3, ");
                        financialDetails.Append("                    SUM(main.M4) AS M4,");
                        financialDetails.Append("                    SUM(main.M5) AS M5,");
                        financialDetails.Append("                    SUM(main.M6) AS M6, ");
                        financialDetails.Append("                    SUM(main.M7) AS M7, ");
                        financialDetails.Append("                    SUM(main.M8) AS M8,");
                        financialDetails.Append("                    SUM(main.M9) AS M9,");
                        financialDetails.Append("                    SUM(main.M10) AS M10, ");
                        financialDetails.Append("                    SUM(main.M11) AS M11, ");
                        financialDetails.Append("                    SUM(main.M12) AS M12,");


                        financialDetails.Append("                    SUM(main.ActualM1) AS ActualM1,");
                        financialDetails.Append("                    SUM(main.ActualM2) AS ActualM2, ");
                        financialDetails.Append("                    SUM(main.ActualM3) AS ActualM3, ");
                        financialDetails.Append("                    SUM(main.ActualM4) AS ActualM4,");
                        financialDetails.Append("                    SUM(main.ActualM5) AS ActualM5,");
                        financialDetails.Append("                    SUM(main.ActualM6) AS ActualM6, ");
                        financialDetails.Append("                    SUM(main.ActualM7) AS ActualM7, ");
                        financialDetails.Append("                    SUM(main.ActualM8) AS ActualM8,");
                        financialDetails.Append("                    SUM(main.ActualM9) AS ActualM9,");
                        financialDetails.Append("                    SUM(main.ActualM10) AS ActualM10, ");
                        financialDetails.Append("                    SUM(main.ActualM11) AS ActualM11, ");
                        financialDetails.Append("                    SUM(main.ActualM12) AS ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                             SUM(main.Q1) AS Q1, ");
                        financialDetails.Append("		                             SUM(main.Q2) AS Q2, ");
                        financialDetails.Append("		                             SUM(main.Q3) AS Q3, ");
                        financialDetails.Append("		                             SUM(main.Q4) AS Q4, ");

                        financialDetails.Append("		                             SUM(main.ActualQ1) AS ActualQ1, ");
                        financialDetails.Append("		                             SUM(main.ActualQ2) AS ActualQ2, ");
                        financialDetails.Append("		                             SUM(main.ActualQ3) AS ActualQ3, ");
                        financialDetails.Append("		                             SUM(main.ActualQ4) AS ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(main.H1) AS H1,");
                        financialDetails.Append("                    SUM(main.H2) AS H2, ");

                        financialDetails.Append("                    SUM(main.ActualH1) AS ActualH1,");
                        financialDetails.Append("                    SUM(main.ActualH2) AS ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    SUM(main.Y) AS Y,");

                        financialDetails.Append("                    SUM(main.ActualY) AS ActualY,");

                    }

                    financialDetails.Append("		                             SUM(main.ApprovedAllocatedAmount) AS  ");
                    financialDetails.Append("		                             ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             SUM(main.ApprovedBudget) AS ApprovedBudget, ");
                    financialDetails.Append("		                             SUM(main.Commited) AS Commited, ");
                    financialDetails.Append("		                             SUM(main.Spent) AS Spent, ");
                    financialDetails.Append("		                             SUM(main.SubPlanned) AS SubPlanned, ");
                    financialDetails.Append("		                             SUM(main.SubAllocated) AS SubAllocated, ");
                    financialDetails.Append("		                             SUM(main.PlannedAmount) - SUM(main.SubPlanned) AS  ");
                    financialDetails.Append("		                             NonResPlan, ");
                    financialDetails.Append("		                             SUM(main.ApprovedAllocatedAmount) - SUM(main.SubAllocated) AS  ");
                    financialDetails.Append("		                             NonResAlloc ");
                    financialDetails.Append("		                      FROM   ( ");
                    financialDetails.Append("		                                 SELECT children.EntityID, ");
                    financialDetails.Append("		                                        children.ParentID, ");
                    financialDetails.Append("		                                        children.CostCenterID, ");
                    financialDetails.Append("		                                        children.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.Y,");

                        financialDetails.Append("                    children.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.M1,");
                        financialDetails.Append("                    children.M2, ");
                        financialDetails.Append("                    children.M3, ");
                        financialDetails.Append("                    children.M4,");
                        financialDetails.Append("                    children.M5,");
                        financialDetails.Append("                    children.M6, ");
                        financialDetails.Append("                    children.M7, ");
                        financialDetails.Append("                    children.M8,");
                        financialDetails.Append("                    children.M9,");
                        financialDetails.Append("                    children.M10, ");
                        financialDetails.Append("                    children.M11, ");
                        financialDetails.Append("                    children.M12,");

                        financialDetails.Append("                    children.ActualM1,");
                        financialDetails.Append("                    children.ActualM2, ");
                        financialDetails.Append("                    children.ActualM3, ");
                        financialDetails.Append("                    children.ActualM4,");
                        financialDetails.Append("                    children.ActualM5,");
                        financialDetails.Append("                    children.ActualM6, ");
                        financialDetails.Append("                    children.ActualM7, ");
                        financialDetails.Append("                    children.ActualM8,");
                        financialDetails.Append("                    children.ActualM9,");
                        financialDetails.Append("                    children.ActualM10, ");
                        financialDetails.Append("                    children.ActualM11, ");
                        financialDetails.Append("                    children.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                                        children.Q1, ");
                        financialDetails.Append("		                                        children.Q2, ");
                        financialDetails.Append("		                                        children.Q3, ");
                        financialDetails.Append("		                                        children.Q4, ");

                        financialDetails.Append("		                                        children.ActualQ1, ");
                        financialDetails.Append("		                                        children.ActualQ2, ");
                        financialDetails.Append("		                                        children.ActualQ3, ");
                        financialDetails.Append("		                                        children.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.H1,");
                        financialDetails.Append("                    children.H2, ");

                        financialDetails.Append("                    children.ActualH1,");
                        financialDetails.Append("                    children.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    children.Y,");
                        financialDetails.Append("                    children.ActualY,");
                    }

                    financialDetails.Append("		                                        children.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                        children.ApprovedBudget, ");
                    financialDetails.Append("		                                        children.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                        children.Commited, ");
                    financialDetails.Append("		                                        children.Spent, ");
                    financialDetails.Append("		                                        SUM(children.SubPlanned) AS  ");
                    financialDetails.Append("		                                        SubPlanned, ");
                    financialDetails.Append("		                                        SUM(children.SubAllocated) AS  ");
                    financialDetails.Append("		                                        SubAllocated ");
                    financialDetails.Append("		                                 FROM   ( ");
                    financialDetails.Append("		                                            SELECT tbl.EntityID, ");
                    financialDetails.Append("		                                                   tbl.ParentID, ");
                    financialDetails.Append("		                                                   tbl.CostCenterID, ");
                    financialDetails.Append("		                                                   tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");

                        financialDetails.Append("                    tbl.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");

                        financialDetails.Append("                    tbl.ActualM1,");
                        financialDetails.Append("                    tbl.ActualM2, ");
                        financialDetails.Append("                    tbl.ActualM3, ");
                        financialDetails.Append("                    tbl.ActualM4,");
                        financialDetails.Append("                    tbl.ActualM5,");
                        financialDetails.Append("                    tbl.ActualM6, ");
                        financialDetails.Append("                    tbl.ActualM7, ");
                        financialDetails.Append("                    tbl.ActualM8,");
                        financialDetails.Append("                    tbl.ActualM9,");
                        financialDetails.Append("                    tbl.ActualM10, ");
                        financialDetails.Append("                    tbl.ActualM11, ");
                        financialDetails.Append("                    tbl.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");

                        financialDetails.Append("		              tbl.ActualQ1, ");
                        financialDetails.Append("		              tbl.ActualQ2, ");
                        financialDetails.Append("		              tbl.ActualQ3, ");
                        financialDetails.Append("		              tbl.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");

                        financialDetails.Append("                    tbl.ActualH1,");
                        financialDetails.Append("                    tbl.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                        financialDetails.Append("                    tbl.ActualY,");
                    }

                    financialDetails.Append("		                                                   tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudget, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                   tbl.Commited, ");
                    financialDetails.Append("		                                                   tbl.Spent, ");
                    financialDetails.Append("		                                                   0 AS SubPlanned, ");
                    financialDetails.Append("		                                                   0 AS SubAllocated ");
                    financialDetails.Append("		                                            FROM   ( ");
                    financialDetails.Append("		                                                       SELECT  pefav.EntityID, ");
                    financialDetails.Append("		                                                              pe.ParentID, ");
                    financialDetails.Append("		                                                              pefav.CostCenterID, ");
                    financialDetails.Append("		                                                              pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y AS Y,");
                        financialDetails.Append("                    pefav.ActualY AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");



                        //
                        financialDetails.Append("                    pefav.ActualM1,");
                        financialDetails.Append("                    pefav.ActualM2, ");
                        financialDetails.Append("                    pefav.ActualM3, ");
                        financialDetails.Append("                    pefav.ActualM4,");
                        financialDetails.Append("                    pefav.ActualM5,");
                        financialDetails.Append("                    pefav.ActualM6, ");
                        financialDetails.Append("                    pefav.ActualM7, ");
                        financialDetails.Append("                    pefav.ActualM8,");
                        financialDetails.Append("                    pefav.ActualM9,");
                        financialDetails.Append("                    pefav.ActualM10, ");
                        financialDetails.Append("                    pefav.ActualM11, ");
                        financialDetails.Append("                    pefav.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");

                        financialDetails.Append("		              pefav.ActualQ1, ");
                        financialDetails.Append("		              pefav.ActualQ2, ");
                        financialDetails.Append("		              pefav.ActualQ3, ");
                        financialDetails.Append("		              pefav.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");

                        financialDetails.Append("                    pefav.ActualH1,");
                        financialDetails.Append("                    pefav.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                        financialDetails.Append("                    pefav.ActualY,");
                    }

                    financialDetails.Append("		                                                              pefav.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                              pefav.ApprovedBudget, ");
                    financialDetails.Append("		                                                              CONVERT(NVARCHAR(50), pefav.ApprovedBudgetDate, 20) AS  ");
                    financialDetails.Append("		                                                              ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                              pefav.Commited, ");
                    financialDetails.Append("		                                                              pefav.Spent ");
                    financialDetails.Append("		                                                       FROM    ");
                    financialDetails.Append("		                                                              PM_Financial  ");
                    financialDetails.Append("		                                                              pefav ");
                    financialDetails.Append("		                                                              INNER JOIN  ");
                    financialDetails.Append("		                                                                   @ListOfID ");
                    financialDetails.Append("		                                                                   tss ");
                    financialDetails.Append("		                                                                   ON   ");
                    financialDetails.Append("		                                                                       tss.[Value] =  ");
                    financialDetails.Append("		                                                                       pefav.EntityID ");
                    financialDetails.Append("		                                                              INNER JOIN  ");
                    financialDetails.Append("		                                                                   PM_Entity  ");
                    financialDetails.Append("		                                                                   pe ");
                    financialDetails.Append("		                                                                   ON   ");
                    financialDetails.Append("		                                                                       pefav.EntityID =  ");
                    financialDetails.Append("	                                                                       pe.ID ");
                    financialDetails.Append("		                                                       WHERE  pe.[Active] =  ");
                    financialDetails.Append("		                                                              1 ");
                    financialDetails.Append("		                                                              AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', '')))  ");
                    financialDetails.Append("		                                                                  != 0 ");
                    financialDetails.Append("		                                                   ) AS tbl ");

                    financialDetails.Append("		                                            UNION ALL  ");

                    financialDetails.Append("		                                            SELECT tbl.EntityID, ");
                    financialDetails.Append("		                                                   tbl.ParentID, ");
                    financialDetails.Append("		                                                   tbl.CostCenterID, ");
                    financialDetails.Append("		                                                   tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");

                        financialDetails.Append("                    tbl.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");


                        financialDetails.Append("                    tbl.ActualM1,");
                        financialDetails.Append("                    tbl.ActualM2, ");
                        financialDetails.Append("                    tbl.ActualM3, ");
                        financialDetails.Append("                    tbl.ActualM4,");
                        financialDetails.Append("                    tbl.ActualM5,");
                        financialDetails.Append("                    tbl.ActualM6, ");
                        financialDetails.Append("                    tbl.ActualM7, ");
                        financialDetails.Append("                    tbl.ActualM8,");
                        financialDetails.Append("                    tbl.ActualM9,");
                        financialDetails.Append("                    tbl.ActualM10, ");
                        financialDetails.Append("                    tbl.ActualM11, ");
                        financialDetails.Append("                    tbl.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");

                        financialDetails.Append("		              tbl.ActualQ1, ");
                        financialDetails.Append("		              tbl.ActualQ2, ");
                        financialDetails.Append("		              tbl.ActualQ3, ");
                        financialDetails.Append("		              tbl.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");

                        financialDetails.Append("                    tbl.ActualH1,");
                        financialDetails.Append("                    tbl.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                        financialDetails.Append("                    tbl.ActualY,");
                    }

                    financialDetails.Append("		                                                   tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudget, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                   tbl.Commited, ");
                    financialDetails.Append("		                                                   tbl.Spent, ");
                    financialDetails.Append("		                                                   SUM(ISNULL(tblchildren.PlannedAmount, 0)) AS  ");
                    financialDetails.Append("		                                                   SubPlanned, ");
                    financialDetails.Append("		                                                   SUM(ISNULL(tblchildren.ApprovedAllocatedAmount, 0)) AS  ");
                    financialDetails.Append("		                                                   SubAllocated ");
                    financialDetails.Append("		                                            FROM   ( ");
                    financialDetails.Append("		                                                       SELECT  pe.ParentID, ");
                    financialDetails.Append("		                                                              pefav.EntityID, ");
                    financialDetails.Append("		                                                              pefav.CostCenterID, ");
                    financialDetails.Append("		                                                              pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y AS Y,");
                        financialDetails.Append("                    pefav.ActualY AS ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");

                        financialDetails.Append("                    pefav.ActualM1,");
                        financialDetails.Append("                    pefav.ActualM2, ");
                        financialDetails.Append("                    pefav.ActualM3, ");
                        financialDetails.Append("                    pefav.ActualM4,");
                        financialDetails.Append("                    pefav.ActualM5,");
                        financialDetails.Append("                    pefav.ActualM6, ");
                        financialDetails.Append("                    pefav.ActualM7, ");
                        financialDetails.Append("                    pefav.ActualM8,");
                        financialDetails.Append("                    pefav.ActualM9,");
                        financialDetails.Append("                    pefav.ActualM10, ");
                        financialDetails.Append("                    pefav.ActualM11, ");
                        financialDetails.Append("                    pefav.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");

                        financialDetails.Append("		              pefav.ActualQ1, ");
                        financialDetails.Append("		              pefav.ActualQ2, ");
                        financialDetails.Append("		              pefav.ActualQ3, ");
                        financialDetails.Append("		              pefav.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");

                        financialDetails.Append("                    pefav.ActualH1,");
                        financialDetails.Append("                    pefav.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                        financialDetails.Append("                    pefav.ActualY,");
                    }

                    financialDetails.Append("		                                                              pefav.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                              pefav.ApprovedBudget, ");
                    financialDetails.Append("		                                                              CONVERT(NVARCHAR(50), pefav.ApprovedBudgetDate, 20) AS  ");
                    financialDetails.Append("		                                                              ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                              pefav.Commited, ");
                    financialDetails.Append("		                                                              pefav.Spent, ");
                    financialDetails.Append("		                                                              pe.UniqueKey ");
                    financialDetails.Append("		                                                       FROM    ");
                    financialDetails.Append("		                                                              PM_Financial  ");
                    financialDetails.Append("		                                                              pefav ");
                    financialDetails.Append("		                                                              INNER JOIN  ");
                    financialDetails.Append("		                                                                   @ListOfID ");
                    financialDetails.Append("		                                                                   tss ");
                    financialDetails.Append("		                                                                   ON   ");
                    financialDetails.Append("		                                                                       tss.[Value] =  ");
                    financialDetails.Append("		                                                                       pefav.EntityID ");
                    financialDetails.Append("		                                                              INNER JOIN  ");
                    financialDetails.Append("		                                                                   PM_Entity  ");
                    financialDetails.Append("		                                                                   pe ");
                    financialDetails.Append("		                                                                   ON   ");
                    financialDetails.Append("		                                                                       pefav.EntityID =  ");
                    financialDetails.Append("		                                                                       pe.ID ");
                    financialDetails.Append("		                                                       WHERE  pe.[Active] =  ");
                    financialDetails.Append("		                                                              1 ");
                    financialDetails.Append("		                                                              AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) ");
                    financialDetails.Append("		                                                                  != 0 ");
                    financialDetails.Append("		                                                   ) AS tbl ");
                    financialDetails.Append("		                                                   INNER JOIN ( ");
                    financialDetails.Append("		                                                            SELECT pe.ParentID, ");
                    financialDetails.Append("		                                                                   pefav.EntityID, ");
                    financialDetails.Append("		                                                                   pefav.CostCenterID, ");
                    financialDetails.Append("		                                                                   pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y AS Y,");
                        financialDetails.Append("                    pefav.ActualY AS ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");

                        financialDetails.Append("                    pefav.ActualM1,");
                        financialDetails.Append("                    pefav.ActualM2, ");
                        financialDetails.Append("                    pefav.ActualM3, ");
                        financialDetails.Append("                    pefav.ActualM4,");
                        financialDetails.Append("                    pefav.ActualM5,");
                        financialDetails.Append("                    pefav.ActualM6, ");
                        financialDetails.Append("                    pefav.ActualM7, ");
                        financialDetails.Append("                    pefav.ActualM8,");
                        financialDetails.Append("                    pefav.ActualM9,");
                        financialDetails.Append("                    pefav.ActualM10, ");
                        financialDetails.Append("                    pefav.ActualM11, ");
                        financialDetails.Append("                    pefav.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");

                        financialDetails.Append("		              pefav.ActualQ1, ");
                        financialDetails.Append("		              pefav.ActualQ2, ");
                        financialDetails.Append("		              pefav.ActualQ3, ");
                        financialDetails.Append("		              pefav.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");

                        financialDetails.Append("                    pefav.ActualH1,");
                        financialDetails.Append("                    pefav.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                        financialDetails.Append("                    pefav.ActualY,");
                    }

                    financialDetails.Append("	                                                                   pefav.ApprovedAllocatedAmount ");
                    financialDetails.Append("		                                                            FROM    ");
                    financialDetails.Append("		                                                                   PM_Financial  ");
                    financialDetails.Append("		                                                                   pefav ");
                    financialDetails.Append("		                                                                   INNER JOIN  ");
                    financialDetails.Append("		                                                                        @ListOfID  ");
                    financialDetails.Append("		                                                                        tss ");
                    financialDetails.Append("		                                                                        ON   ");
                    financialDetails.Append("		                                                                            tss.[Value] =  ");
                    financialDetails.Append("		                                                                            pefav.EntityID ");
                    financialDetails.Append("		                                                                   INNER JOIN  ");
                    financialDetails.Append("		                                                                        PM_Entity  ");
                    financialDetails.Append("		                                                                        pe ");
                    financialDetails.Append("		                                                                        ON   ");
                    financialDetails.Append("		                                                                            pefav.EntityID =  ");
                    financialDetails.Append("		                                                                            pe.ID ");
                    financialDetails.Append("		                                                            WHERE  pe.[Active] =  ");
                    financialDetails.Append("		                                                                   1 ");
                    financialDetails.Append("		                                                                   AND  ");
                    financialDetails.Append("		                                                                       (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) ");
                    financialDetails.Append("		                                                                       !=  ");
                    financialDetails.Append("		                                                                       0 ");
                    financialDetails.Append("		                                                        ) AS tblchildren ");
                    financialDetails.Append("		                                                        ON  tbl.EntityID =  ");
                    financialDetails.Append("		                                                            tblchildren.ParentID ");
                    financialDetails.Append("		                                                        AND tbl.CostCenterID =  ");
                    financialDetails.Append("		                                                            tblchildren.CostCenterID ");
                    financialDetails.Append("		                                            GROUP BY ");
                    financialDetails.Append("		                                                   tbl.EntityID, ");
                    financialDetails.Append("		                                                   tbl.ParentID, ");
                    financialDetails.Append("		                                                   tbl.CostCenterID, ");
                    financialDetails.Append("		                                                   tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");

                        financialDetails.Append("                    tbl.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");

                        financialDetails.Append("                    tbl.ActualM1,");
                        financialDetails.Append("                    tbl.ActualM2, ");
                        financialDetails.Append("                    tbl.ActualM3, ");
                        financialDetails.Append("                    tbl.ActualM4,");
                        financialDetails.Append("                    tbl.ActualM5,");
                        financialDetails.Append("                    tbl.ActualM6, ");
                        financialDetails.Append("                    tbl.ActualM7, ");
                        financialDetails.Append("                    tbl.ActualM8,");
                        financialDetails.Append("                    tbl.ActualM9,");
                        financialDetails.Append("                    tbl.ActualM10, ");
                        financialDetails.Append("                    tbl.ActualM11, ");
                        financialDetails.Append("                    tbl.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");

                        financialDetails.Append("		              tbl.ActualQ1, ");
                        financialDetails.Append("		              tbl.ActualQ2, ");
                        financialDetails.Append("		              tbl.ActualQ3, ");
                        financialDetails.Append("		              tbl.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");

                        financialDetails.Append("                    tbl.ActualH1,");
                        financialDetails.Append("                    tbl.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                        financialDetails.Append("                    tbl.ActualY,");
                    }

                    financialDetails.Append("		                                                   tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudget, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                   tbl.Commited, ");
                    financialDetails.Append("		                                                   tbl.Spent, ");
                    financialDetails.Append("		                                                   tbl.UniqueKey ");
                    financialDetails.Append("		                                        ) AS children ");
                    financialDetails.Append("		                                 GROUP BY ");
                    financialDetails.Append("		                                        children.EntityID, ");
                    financialDetails.Append("		                                        children.ParentID, ");
                    financialDetails.Append("		                                        children.CostCenterID, ");
                    financialDetails.Append("		                                        children.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.Y,");

                        financialDetails.Append("                    children.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.M1,");
                        financialDetails.Append("                    children.M2, ");
                        financialDetails.Append("                    children.M3, ");
                        financialDetails.Append("                    children.M4,");
                        financialDetails.Append("                    children.M5,");
                        financialDetails.Append("                    children.M6, ");
                        financialDetails.Append("                    children.M7, ");
                        financialDetails.Append("                    children.M8,");
                        financialDetails.Append("                    children.M9,");
                        financialDetails.Append("                    children.M10, ");
                        financialDetails.Append("                    children.M11, ");
                        financialDetails.Append("                    children.M12,");

                        financialDetails.Append("                    children.ActualM1,");
                        financialDetails.Append("                    children.ActualM2, ");
                        financialDetails.Append("                    children.ActualM3, ");
                        financialDetails.Append("                    children.ActualM4,");
                        financialDetails.Append("                    children.ActualM5,");
                        financialDetails.Append("                    children.ActualM6, ");
                        financialDetails.Append("                    children.ActualM7, ");
                        financialDetails.Append("                    children.ActualM8,");
                        financialDetails.Append("                    children.ActualM9,");
                        financialDetails.Append("                    children.ActualM10, ");
                        financialDetails.Append("                    children.ActualM11, ");
                        financialDetails.Append("                    children.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                                        children.Q1, ");
                        financialDetails.Append("		                                        children.Q2, ");
                        financialDetails.Append("		                                        children.Q3, ");
                        financialDetails.Append("		                                        children.Q4, ");
                        financialDetails.Append("		              children.ActualQ1, ");
                        financialDetails.Append("		              children.ActualQ2, ");
                        financialDetails.Append("		              children.ActualQ3, ");
                        financialDetails.Append("		              children.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.H1,");
                        financialDetails.Append("                    children.H2, ");

                        financialDetails.Append("                    children.ActualH1,");
                        financialDetails.Append("                    children.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    children.Y,");
                        financialDetails.Append("                    children.ActualY,");
                    }

                    financialDetails.Append("		                                        children.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                        children.ApprovedBudget, ");
                    financialDetails.Append("		                                        children.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                        children.Commited, ");
                    financialDetails.Append("		                                        children.Spent ");
                    financialDetails.Append("		                             ) AS main ");
                    financialDetails.Append("		                      GROUP BY ");
                    financialDetails.Append("		                             main.ParentID, ");
                    financialDetails.Append("		                             main.CostCenterID ");
                    financialDetails.Append("		                  )  AS rootlevel ");
                    financialDetails.Append("		                  INNER JOIN @ListOfID  ");
                    financialDetails.Append("		                       tss ");
                    financialDetails.Append("		                       ON  tss.[Value] = rootlevel.EntityID ");
                    financialDetails.Append("		                  INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                       ON  rootlevel.EntityID = pe.ID ");
                    financialDetails.Append("		           WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                  AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) = 0 ");
                    financialDetails.Append("		           GROUP BY ");
                    financialDetails.Append("		                  rootlevel.EntityID, ");
                    financialDetails.Append("		                  rootlevel.CostCenterID ");

                    financialDetails.Append("		           UNION ALL  ");

                    //        --Get financial detail for entities level = 1 or less than 1 along with SubPlanned and SubAllocated
                    financialDetails.Append("		           SELECT  main.EntityID, ");
                    financialDetails.Append("		                  main.CostCenterID, ");
                    financialDetails.Append("		                  main.PlannedAmount, ");


                    //financialDetails.Append("		                  main.Q1, ");
                    //financialDetails.Append("		                  main.Q2, ");
                    //financialDetails.Append("		                  main.Q3, ");
                    //financialDetails.Append("		                  main.Q4, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.Y,");

                        financialDetails.Append("                    main.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.M1,");
                        financialDetails.Append("                    main.M2, ");
                        financialDetails.Append("                    main.M3, ");
                        financialDetails.Append("                    main.M4,");
                        financialDetails.Append("                    main.M5,");
                        financialDetails.Append("                    main.M6, ");
                        financialDetails.Append("                    main.M7, ");
                        financialDetails.Append("                    main.M8,");
                        financialDetails.Append("                    main.M9,");
                        financialDetails.Append("                    main.M10 , ");
                        financialDetails.Append("                    main.M11, ");
                        financialDetails.Append("                    main.M12,");

                        financialDetails.Append("                    main.ActualM1,");
                        financialDetails.Append("                    main.ActualM2, ");
                        financialDetails.Append("                    main.ActualM3, ");
                        financialDetails.Append("                    main.ActualM4,");
                        financialDetails.Append("                    main.ActualM5,");
                        financialDetails.Append("                    main.ActualM6, ");
                        financialDetails.Append("                    main.ActualM7, ");
                        financialDetails.Append("                    main.ActualM8,");
                        financialDetails.Append("                    main.ActualM9,");
                        financialDetails.Append("                    main.ActualM10, ");
                        financialDetails.Append("                    main.ActualM11, ");
                        financialDetails.Append("                    main.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              main.Q1, ");
                        financialDetails.Append("		              main.Q2, ");
                        financialDetails.Append("		              main.Q3, ");
                        financialDetails.Append("		              main.Q4, ");

                        financialDetails.Append("		              main.ActualQ1, ");
                        financialDetails.Append("		              main.ActualQ2, ");
                        financialDetails.Append("		              main.ActualQ3, ");
                        financialDetails.Append("		              main.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.H1,");
                        financialDetails.Append("                    main.H2, ");
                        financialDetails.Append("                    main.ActualH1,");
                        financialDetails.Append("                    main.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    main.Y,");
                        financialDetails.Append("                    main.ActualY,");
                    }


                    financialDetails.Append("		                  main.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                  main.ApprovedBudget, ");
                    financialDetails.Append("		                  main.ApprovedBudgetDate, ");
                    financialDetails.Append("		                  main.Commited, ");
                    financialDetails.Append("		                  main.Spent, ");
                    financialDetails.Append("		                  SUM(main.SubPlanned) AS SubPlanned, ");
                    financialDetails.Append("		                  SUM(main.SubAllocated) AS SubAllocated, ");
                    financialDetails.Append("		                  main.PlannedAmount - SUM(main.SubPlanned) AS  ");
                    financialDetails.Append("		                  NonResPlan, ");
                    financialDetails.Append("		                  main.ApprovedAllocatedAmount - SUM(main.SubAllocated) AS  ");
                    financialDetails.Append("		                  NonResAlloc ");
                    financialDetails.Append("		           FROM   ( ");
                    //--Get financial detail for entities level = 1 or less than 1 along with out SubPlanned and SubAllocated	
                    financialDetails.Append("		                      SELECT tbl.EntityID, ");
                    financialDetails.Append("		                             tbl.CostCenterID, ");
                    financialDetails.Append("		                             tbl.PlannedAmount, ");


                    //financialDetails.Append("		                             tbl.Q1, ");
                    //financialDetails.Append("		                             tbl.Q2, ");
                    //financialDetails.Append("		                             tbl.Q3, ");
                    //financialDetails.Append("		                             tbl.Q4, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");
                        financialDetails.Append("                    tbl.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");

                        financialDetails.Append("                    tbl.ActualM1,");
                        financialDetails.Append("                    tbl.ActualM2, ");
                        financialDetails.Append("                    tbl.ActualM3, ");
                        financialDetails.Append("                    tbl.ActualM4,");
                        financialDetails.Append("                    tbl.ActualM5,");
                        financialDetails.Append("                    tbl.ActualM6, ");
                        financialDetails.Append("                    tbl.ActualM7, ");
                        financialDetails.Append("                    tbl.ActualM8,");
                        financialDetails.Append("                    tbl.ActualM9,");
                        financialDetails.Append("                    tbl.ActualM10, ");
                        financialDetails.Append("                    tbl.ActualM11, ");
                        financialDetails.Append("                    tbl.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");

                        financialDetails.Append("		              tbl.ActualQ1, ");
                        financialDetails.Append("		              tbl.ActualQ2, ");
                        financialDetails.Append("		              tbl.ActualQ3, ");
                        financialDetails.Append("		              tbl.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");

                        financialDetails.Append("                    tbl.ActualH1,");
                        financialDetails.Append("                    tbl.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");

                        financialDetails.Append("                    tbl.ActualY,");
                    }


                    financialDetails.Append("		                             tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             tbl.ApprovedBudget, ");
                    financialDetails.Append("		                             tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                             tbl.Commited, ");
                    financialDetails.Append("		                             tbl.Spent, ");
                    financialDetails.Append("		                             0  AS SubPlanned, ");
                    financialDetails.Append("		                             0  AS SubAllocated ");
                    financialDetails.Append("		                      FROM   ( ");
                    financialDetails.Append("		                                 SELECT pefav.EntityID, ");
                    financialDetails.Append("		                                        pefav.CostCenterID, ");
                    financialDetails.Append("		                                        pefav.PlannedAmount, ");


                    //financialDetails.Append("		                                        pefav.Q1, ");
                    //financialDetails.Append("		                                        pefav.Q2, ");
                    //financialDetails.Append("		                                        pefav.Q3, ");
                    //financialDetails.Append("		                                        pefav.Q4, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y AS Y,");
                        financialDetails.Append("                    pefav.ActualY AS ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");

                        financialDetails.Append("                    pefav.ActualM1,");
                        financialDetails.Append("                    pefav.ActualM2, ");
                        financialDetails.Append("                    pefav.ActualM3, ");
                        financialDetails.Append("                    pefav.ActualM4,");
                        financialDetails.Append("                    pefav.ActualM5,");
                        financialDetails.Append("                    pefav.ActualM6, ");
                        financialDetails.Append("                    pefav.ActualM7, ");
                        financialDetails.Append("                    pefav.ActualM8,");
                        financialDetails.Append("                    pefav.ActualM9,");
                        financialDetails.Append("                    pefav.ActualM10, ");
                        financialDetails.Append("                    pefav.ActualM11, ");
                        financialDetails.Append("                    pefav.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");

                        financialDetails.Append("		              pefav.ActualQ1, ");
                        financialDetails.Append("		              pefav.ActualQ2, ");
                        financialDetails.Append("		              pefav.ActualQ3, ");
                        financialDetails.Append("		              pefav.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");

                        financialDetails.Append("                    pefav.ActualH1,");
                        financialDetails.Append("                    pefav.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");

                        financialDetails.Append("                    pefav.ActualY,");
                    }


                    financialDetails.Append("		                                        pefav.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                        pefav.ApprovedBudget, ");
                    financialDetails.Append("		                                        CONVERT(NVARCHAR(50), pefav.ApprovedBudgetDate, 20) AS  ");
                    financialDetails.Append("		                                        ApprovedBudgetDate, ");
                    financialDetails.Append("		                                        pefav.Commited, ");
                    financialDetails.Append("		                                        pefav.Spent ");
                    financialDetails.Append("		                                 FROM    ");
                    financialDetails.Append("		                                        PM_Financial  ");
                    financialDetails.Append("		                                        pefav ");
                    financialDetails.Append("		                                        INNER JOIN @ListOfID ");
                    financialDetails.Append("		                                             tss ");
                    financialDetails.Append("		                                             ON  tss.[Value] = pefav.EntityID ");
                    financialDetails.Append("		                                        INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                             ON  pefav.EntityID = pe.ID ");
                    financialDetails.Append("		                                 WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                                        AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) != 0 ");
                    financialDetails.Append("		                             )  AS tbl ");

                    financialDetails.Append("		                      UNION ALL  ");

                    //                      --Get financial detail for entities level = 1 or less than 1 along with SubPlanned and SubAllocated	those are having childrens
                    financialDetails.Append("		                      SELECT tbl.EntityID, ");
                    financialDetails.Append("		                             tbl.CostCenterID, ");
                    financialDetails.Append("		                             tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");
                        financialDetails.Append("                    tbl.ActualY,");

                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");

                        financialDetails.Append("                    tbl.ActualM1,");
                        financialDetails.Append("                    tbl.ActualM2, ");
                        financialDetails.Append("                    tbl.ActualM3, ");
                        financialDetails.Append("                    tbl.ActualM4,");
                        financialDetails.Append("                    tbl.ActualM5,");
                        financialDetails.Append("                    tbl.ActualM6, ");
                        financialDetails.Append("                    tbl.ActualM7, ");
                        financialDetails.Append("                    tbl.ActualM8,");
                        financialDetails.Append("                    tbl.ActualM9,");
                        financialDetails.Append("                    tbl.ActualM10, ");
                        financialDetails.Append("                    tbl.ActualM11, ");
                        financialDetails.Append("                    tbl.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");

                        financialDetails.Append("		              tbl.ActualQ1, ");
                        financialDetails.Append("		              tbl.ActualQ2, ");
                        financialDetails.Append("		              tbl.ActualQ3, ");
                        financialDetails.Append("		              tbl.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");

                        financialDetails.Append("                    tbl.ActualH1,");
                        financialDetails.Append("                    tbl.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                        financialDetails.Append("                    tbl.ActualY,");
                    }

                    financialDetails.Append("		                             tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             tbl.ApprovedBudget, ");
                    financialDetails.Append("		                             tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                             tbl.Commited, ");
                    financialDetails.Append("		                             tbl.Spent, ");
                    financialDetails.Append("		                             SUM(ISNULL(tblchildren.PlannedAmount, 0)) AS  ");
                    financialDetails.Append("		                             SubPlanned, ");
                    financialDetails.Append("		                             SUM(ISNULL(tblchildren.ApprovedAllocatedAmount, 0)) AS  ");
                    financialDetails.Append("		                             SubAllocated ");
                    financialDetails.Append("		                      FROM   ( ");
                    financialDetails.Append("		                                 SELECT  pefav.EntityID, ");
                    financialDetails.Append("		                                        pefav.CostCenterID, ");
                    financialDetails.Append("		                                        pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y,");
                        financialDetails.Append("                    pefav.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8 ,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");

                        financialDetails.Append("                    pefav.ActualM1,");
                        financialDetails.Append("                    pefav.ActualM2, ");
                        financialDetails.Append("                    pefav.ActualM3, ");
                        financialDetails.Append("                    pefav.ActualM4,");
                        financialDetails.Append("                    pefav.ActualM5,");
                        financialDetails.Append("                    pefav.ActualM6, ");
                        financialDetails.Append("                    pefav.ActualM7, ");
                        financialDetails.Append("                    pefav.ActualM8,");
                        financialDetails.Append("                    pefav.ActualM9,");
                        financialDetails.Append("                    pefav.ActualM10, ");
                        financialDetails.Append("                    pefav.ActualM11, ");
                        financialDetails.Append("                    pefav.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");

                        financialDetails.Append("		              pefav.ActualQ1, ");
                        financialDetails.Append("		              pefav.ActualQ2, ");
                        financialDetails.Append("		              pefav.ActualQ3, ");
                        financialDetails.Append("		              pefav.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");

                        financialDetails.Append("                    pefav.ActualH1,");
                        financialDetails.Append("                    pefav.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                        financialDetails.Append("                    pefav.ActualY,");
                    }

                    financialDetails.Append("		                                        pefav.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                        pefav.ApprovedBudget, ");
                    financialDetails.Append("		                                        CONVERT(NVARCHAR(50), pefav.ApprovedBudgetDate, 20) AS  ");
                    financialDetails.Append("		                                        ApprovedBudgetDate, ");
                    financialDetails.Append("		                                        pefav.Commited, ");
                    financialDetails.Append("		                                        pefav.Spent, ");
                    financialDetails.Append("		                                        pe.UniqueKey ");
                    financialDetails.Append("		                                 FROM    ");
                    financialDetails.Append("		                                        PM_Financial  ");
                    financialDetails.Append("		                                        pefav ");
                    financialDetails.Append("		                                        INNER JOIN @ListOfID ");
                    financialDetails.Append("		                                             tss ");
                    financialDetails.Append("		                                             ON  tss.[Value] = pefav.EntityID ");
                    financialDetails.Append("		                                        INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                             ON  pefav.EntityID = pe.ID ");
                    financialDetails.Append("		                                 WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                                        AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) != 0 ");
                    financialDetails.Append("		                             ) AS tbl ");
                    financialDetails.Append("		                             INNER JOIN ( ");
                    financialDetails.Append("		                                      SELECT pe.ParentID, ");
                    financialDetails.Append("		                                             pefav.EntityID, ");
                    financialDetails.Append("		                                             pefav.CostCenterID, ");
                    financialDetails.Append("		                                             pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y,");

                        financialDetails.Append("                    pefav.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");

                        financialDetails.Append("                    pefav.ActualM1,");
                        financialDetails.Append("                    pefav.ActualM2, ");
                        financialDetails.Append("                    pefav.ActualM3, ");
                        financialDetails.Append("                    pefav.ActualM4,");
                        financialDetails.Append("                    pefav.ActualM5,");
                        financialDetails.Append("                    pefav.ActualM6, ");
                        financialDetails.Append("                    pefav.ActualM7, ");
                        financialDetails.Append("                    pefav.ActualM8,");
                        financialDetails.Append("                    pefav.ActualM9,");
                        financialDetails.Append("                    pefav.ActualM10, ");
                        financialDetails.Append("                    pefav.ActualM11, ");
                        financialDetails.Append("                    pefav.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");
                        financialDetails.Append("		              pefav.ActualQ1, ");
                        financialDetails.Append("		              pefav.ActualQ2, ");
                        financialDetails.Append("		              pefav.ActualQ3, ");
                        financialDetails.Append("		              pefav.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");
                        financialDetails.Append("                    pefav.ActualH1,");
                        financialDetails.Append("                    pefav.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                        financialDetails.Append("                    pefav.ActualY,");
                    }

                    financialDetails.Append("		                                             pefav.ApprovedAllocatedAmount ");
                    financialDetails.Append("		                                      FROM    ");
                    financialDetails.Append("		                                             PM_Financial  ");
                    financialDetails.Append("		                                             pefav ");
                    financialDetails.Append("		                                             INNER JOIN @ListOfID  ");
                    financialDetails.Append("		                                                  tss ");
                    financialDetails.Append("		                                                  ON  tss.[Value] =  ");
                    financialDetails.Append("		                                                      pefav.EntityID ");
                    financialDetails.Append("		                                             INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                                  ON  pefav.EntityID =  ");
                    financialDetails.Append("		                                                      pe.ID ");
                    financialDetails.Append("		                                      WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                                             AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) != 0 ");
                    financialDetails.Append("		                                  ) AS tblchildren ");
                    financialDetails.Append("		                                  ON  tbl.EntityID = tblchildren.ParentID ");
                    financialDetails.Append("		                                  AND tbl.CostCenterID = tblchildren.CostCenterID ");
                    financialDetails.Append("		                      GROUP BY ");
                    financialDetails.Append("		                              tbl.EntityID, ");
                    financialDetails.Append("		                             tbl.CostCenterID, ");
                    financialDetails.Append("		                             tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");
                        financialDetails.Append("                    tbl.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");

                        financialDetails.Append("                    tbl.ActualM1,");
                        financialDetails.Append("                    tbl.ActualM2, ");
                        financialDetails.Append("                    tbl.ActualM3, ");
                        financialDetails.Append("                    tbl.ActualM4,");
                        financialDetails.Append("                    tbl.ActualM5,");
                        financialDetails.Append("                    tbl.ActualM6, ");
                        financialDetails.Append("                    tbl.ActualM7, ");
                        financialDetails.Append("                    tbl.ActualM8,");
                        financialDetails.Append("                    tbl.ActualM9,");
                        financialDetails.Append("                    tbl.ActualM10, ");
                        financialDetails.Append("                    tbl.ActualM11, ");
                        financialDetails.Append("                    tbl.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");

                        financialDetails.Append("		              tbl.ActualQ1, ");
                        financialDetails.Append("		              tbl.ActualQ2, ");
                        financialDetails.Append("		              tbl.ActualQ3, ");
                        financialDetails.Append("		              tbl.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");

                        financialDetails.Append("                    tbl.ActualH1,");
                        financialDetails.Append("                    tbl.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");

                        financialDetails.Append("                    tbl.ActualY,");
                    }


                    financialDetails.Append("		                             tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             tbl.ApprovedBudget, ");
                    financialDetails.Append("		                             tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                             tbl.Commited, ");
                    financialDetails.Append("		                             tbl.Spent, ");
                    financialDetails.Append("		                             tbl.UniqueKey ");
                    financialDetails.Append("		                  ) AS main ");
                    financialDetails.Append("		           GROUP BY ");
                    financialDetails.Append("		                  main.EntityID, ");
                    financialDetails.Append("		                  main.CostCenterID, ");
                    financialDetails.Append("		                  main.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.Y,");


                        financialDetails.Append("                    main.ActualY,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.M1,");
                        financialDetails.Append("                    main.M2, ");
                        financialDetails.Append("                    main.M3, ");
                        financialDetails.Append("                    main.M4,");
                        financialDetails.Append("                    main.M5,");
                        financialDetails.Append("                    main.M6, ");
                        financialDetails.Append("                    main.M7, ");
                        financialDetails.Append("                    main.M8,");
                        financialDetails.Append("                    main.M9,");
                        financialDetails.Append("                    main.M10 , ");
                        financialDetails.Append("                    main.M11, ");
                        financialDetails.Append("                    main.M12,");

                        financialDetails.Append("                    main.ActualM1,");
                        financialDetails.Append("                    main.ActualM2, ");
                        financialDetails.Append("                    main.ActualM3, ");
                        financialDetails.Append("                    main.ActualM4,");
                        financialDetails.Append("                    main.ActualM5,");
                        financialDetails.Append("                    main.ActualM6, ");
                        financialDetails.Append("                    main.ActualM7, ");
                        financialDetails.Append("                    main.ActualM8,");
                        financialDetails.Append("                    main.ActualM9,");
                        financialDetails.Append("                    main.ActualM10, ");
                        financialDetails.Append("                    main.ActualM11, ");
                        financialDetails.Append("                    main.ActualM12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              main.Q1, ");
                        financialDetails.Append("		              main.Q2, ");
                        financialDetails.Append("		              main.Q3, ");
                        financialDetails.Append("		              main.Q4, ");

                        financialDetails.Append("		              main.ActualQ1, ");
                        financialDetails.Append("		              main.ActualQ2, ");
                        financialDetails.Append("		              main.ActualQ3, ");
                        financialDetails.Append("		              main.ActualQ4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.H1,");
                        financialDetails.Append("                    main.H2, ");

                        financialDetails.Append("                    main.ActualH1,");
                        financialDetails.Append("                    main.ActualH2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    main.Y,");
                        financialDetails.Append("                    main.ActualY,");
                    }

                    financialDetails.Append("		                  main.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                  main.ApprovedBudget, ");
                    financialDetails.Append("		                  main.ApprovedBudgetDate, ");
                    financialDetails.Append("		                  main.Commited, ");
                    financialDetails.Append("	                  main.Spent ");
                    financialDetails.Append("		       )           AS MasterTable ");
                    financialDetails.Append("		       INNER JOIN PM_Entity Ent ");
                    financialDetails.Append("		            ON  Ent.ID = MasterTable.EntityID ");
                    financialDetails.Append("		       INNER JOIN PM_Entity CC ");
                    financialDetails.Append("		            ON  CC.ID = MasterTable.CostCenterID ");
                    financialDetails.Append("		       INNER JOIN AM_Entity_Role_User per ");
                    financialDetails.Append("		            ON  CC.ID = per.EntityID ");
                    financialDetails.Append("  INNER JOIN AM_EntityTypeRoleAcl aetra  ");
                    financialDetails.Append("  ON per.RoleID=aetra.ID ");
                    financialDetails.Append("  AND aetra.EntityRoleID = 1 ");
                    //financialDetails.Append("		            AND per.RoleID = 1 ");

                    if (includedetails)
                    {
                        financialDetails.Append("		       INNER JOIN @ListOfID AS tss ");
                        financialDetails.Append("		            ON  tss.[Value] = MasterTable.EntityID  INNER JOIN PM_Entity_Sort pes on Ent.id = pes.id ");
                        financialDetails.Append("		ORDER BY ");
                        financialDetails.Append("		pes.S1   ASC, ");
                        financialDetails.Append("       pes.L1   ASC, ");
                        financialDetails.Append("       pes.S2   ASC, ");
                        financialDetails.Append("       pes.L2   ASC, ");
                        financialDetails.Append("       pes.S3   ASC, ");
                        financialDetails.Append("       pes.L3   ASC, ");
                        financialDetails.Append("       pes.S4   ASC, ");
                        financialDetails.Append("       pes.L4   ASC, ");
                        financialDetails.Append("       pes.S5   ASC, ");
                        financialDetails.Append("       pes.L5   ASC, ");
                        financialDetails.Append("       pes.S6   ASC, ");
                        financialDetails.Append("       pes.L6   ASC, ");
                        financialDetails.Append("       pes.S7   ASC, ");
                        financialDetails.Append("       pes.L7   ASC, ");
                        financialDetails.Append("       pes.S8   ASC, ");
                        financialDetails.Append("       pes.L8   ASC, ");
                        financialDetails.Append("       pes.S9   ASC, ");
                        financialDetails.Append("       pes.L9   ASC, ");
                        financialDetails.Append("       pes.S10  ASC, ");
                        financialDetails.Append("       pes.L10  ASC  ");
                    }
                    else
                    {
                        financialDetails.Append("	inner join @tempTable temp on MasterTable.EntityID=temp.EntityId ");
                        financialDetails.Append("		            ORDER BY temp.ID ");
                        financialDetails.Append("       OFFSET(@PageNumber - 1) * @RowsPerPage ROWS   ");
                        financialDetails.Append("       FETCH NEXT @RowsPerPage ROWS ONLY  ");
                    }


                    //--cost center details
                    costCenterDetails.Append(sbMain);
                    costCenterDetails.Append("		SELECT tbl.CostCenterID, ");
                    costCenterDetails.Append("		       ISNULL(tblchildren.RequestedAmount, 0) AS RequestedAmount, ");
                    costCenterDetails.Append("		       '' AS      Orders, ");
                    costCenterDetails.Append("		       tbl.[Status] ");
                    costCenterDetails.Append("		FROM   ( ");
                    costCenterDetails.Append("		           SELECT pefav.CostCenterID, ");
                    costCenterDetails.Append("						  pefav.EntityID, ");
                    costCenterDetails.Append("		                  pefav.[Status] ");
                    costCenterDetails.Append("		           FROM   PM_Financial pefav ");
                    costCenterDetails.Append("		                  INNER JOIN PM_Entity pe ");
                    costCenterDetails.Append("		                       ON  pefav.EntityID = pe.ID ");
                    costCenterDetails.Append("		           WHERE  pe.ID = @EntityID ");
                    costCenterDetails.Append("		                  AND pe.Active = 1 ");
                    costCenterDetails.Append("		                  AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) = 0 ");
                    costCenterDetails.Append("		       )       AS tbl ");
                    costCenterDetails.Append("		       LEFT OUTER JOIN ( ");
                    costCenterDetails.Append("		                SELECT pefav.CostCenterID, ");
                    costCenterDetails.Append("		                       SUM(pefav.RequestedAmount) AS RequestedAmount ");
                    costCenterDetails.Append("		                FROM   PM_Financial pefav ");
                    costCenterDetails.Append("		                       INNER JOIN PM_Entity pe ");
                    costCenterDetails.Append("		                            ON  pefav.EntityID = pe.ID ");
                    costCenterDetails.Append("		                WHERE  pe.ParentID = @EntityID ");
                    costCenterDetails.Append("		                       AND pe.Active = 1 ");
                    costCenterDetails.Append("		                GROUP BY ");
                    costCenterDetails.Append("		                       pefav.CostCenterID ");
                    costCenterDetails.Append("		            )  AS tblchildren ");
                    costCenterDetails.Append("		            ON  tblchildren.CostCenterID = tbl.CostCenterID ");

                    costCenterDetails.Append("		UNION ALL ");

                    costCenterDetails.Append("		SELECT pefav.CostCenterID, ");
                    costCenterDetails.Append("		       pefav.RequestedAmount, ");
                    costCenterDetails.Append("		       ISNULL( ");
                    costCenterDetails.Append("		           (1 ");
                    costCenterDetails.Append("		           ), ");
                    costCenterDetails.Append("		           '' ");
                    costCenterDetails.Append("		       ) AS Orders, ");
                    costCenterDetails.Append("		       pefav.[Status] ");
                    costCenterDetails.Append("		FROM   PM_Financial pefav ");
                    costCenterDetails.Append("		       INNER JOIN PM_Entity pe ");
                    costCenterDetails.Append("		            ON  pefav.EntityID = pe.ID ");
                    costCenterDetails.Append("		WHERE  pe.ID = @EntityID ");
                    costCenterDetails.Append("		       AND pe.Active = 1 ");
                    costCenterDetails.Append("		       AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) != 0 ");


                    //--spent amount
                    spentAmount.Append(sbMain);
                    spentAmount.Append("		 SELECT ISNULL( ");
                    spentAmount.Append("		                      ( ");
                    spentAmount.Append("		                          SELECT SUM(pefav.Spent) ");
                    spentAmount.Append("		                          FROM   PM_Financial  ");
                    spentAmount.Append("		                                 pefav ");
                    spentAmount.Append("	                                 INNER JOIN PM_Entity pe3 ");
                    spentAmount.Append("		                                      ON  pe3.ID = pefav.EntityID ");
                    spentAmount.Append("		                                      AND pe3.[Active] = 1 ");
                    spentAmount.Append("		                                 INNER JOIN PM_Entity pe2 ");
                    spentAmount.Append("		                                      ON  pe3.UniqueKey LIKE pe2.UniqueKey  ");
                    spentAmount.Append("		                                          + '%' ");
                    spentAmount.Append("		                                 INNER JOIN @ListOfID LOI ");
                    spentAmount.Append("		                                      ON  pe3.ID = LOI.[Value] ");
                    spentAmount.Append("		                          WHERE  pe2.ID = @EntityID ");
                    // --AND pefav.CostCenterID = rootlevel.CostCenterID
                    spentAmount.Append("		                      ), ");
                    spentAmount.Append("		                      0 ");
                    spentAmount.Append("		                  )  AS Spent ");

                    //-- entity cost center relation Details
                    EntityCostCenterRelations.Append(sbMain);
                    EntityCostCenterRelations.Append("		IF @ELevel = 0 ");
                    EntityCostCenterRelations.Append("		BEGIN ");
                    EntityCostCenterRelations.Append("		    SELECT pefav.EntityID, ");
                    EntityCostCenterRelations.Append("		           pefav.CostCenterID, ");
                    EntityCostCenterRelations.Append("		           pefav.RequestedAmount ");

                    EntityCostCenterRelations.Append("		    FROM   PM_Financial pefav ");
                    EntityCostCenterRelations.Append("		           INNER JOIN PM_Entity pe ");
                    EntityCostCenterRelations.Append("		                ON  pefav.EntityID = pe.ID ");
                    EntityCostCenterRelations.Append("		    WHERE  pe.ParentID = @EntityID ");
                    EntityCostCenterRelations.Append("		           AND pe.Active = 1 ");
                    EntityCostCenterRelations.Append("		           AND pefav.RequestedAmount > 0 ");
                    EntityCostCenterRelations.Append("		END ");

                    //var totalchildrenQry = new StringBuilder();
                    //totalchildrenQry.Append("SELECT ISNULL( COUNT(*),0) AS totalChildren ");
                    //totalchildrenQry.Append(" FROM   PM_Entity pe2 ");
                    //totalchildrenQry.Append("  INNER JOIN PM_Entity pe ");
                    //totalchildrenQry.Append("    ON  pe2.UniqueKey LIKE pe.UniqueKey + '.%' ");
                    //totalchildrenQry.Append("  OR pe2.UniqueKey = pe.UniqueKey ");
                    //totalchildrenQry.Append(" AND pe2.[Active] = 1 INNER JOIN MM_EntityType vmet ON pe2.TypeId =  ");
                    //totalchildrenQry.Append(" vmet.ID AND vmet.IsAssociate=0 AND vmet.Category=2 ");
                    //totalchildrenQry.Append("   AND pe.ID = ? ");
                    //IList totalchildrenobj = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(totalchildrenQry.ToString(), entityid);
                    //int childrenCount = (int)((System.Collections.Hashtable)(totalchildrenobj)[0])["totalChildren"];

                    IList financialResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(financialDetails.ToString());
                    IList CostCenterResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(costCenterDetails.ToString());
                    IList spentAmountResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(spentAmount.ToString());
                    IList EntityCostCenterRelationsResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(EntityCostCenterRelations.ToString());

                    IList<IFinancialCostcentreRelation> iifincostrel = new List<IFinancialCostcentreRelation>();

                    IFinancialCostcentreRelation ifincostrel = new FinancialCostcentreRelation();
                    List<object> commitAmountObj = new List<object>();
                    IList rootLevelFinancialStatus = null;
                    if (financialResult.Count > 0)
                    {
                        var entityLevel = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == entityid select item).FirstOrDefault();
                        if (entityLevel.Level == 0)
                        {
                            var ccArr = financialResult.Cast<Hashtable>().Select(a => (int)a["CostCenterID"]).ToList();
                            var eidArr = financialResult.Cast<Hashtable>().Select(a => (int)a["EntityID"]).ToList();
                            string CCinClause = "("
                                    + String.Join(",", ccArr.Select(x => x.ToString()).Distinct().ToArray())
                                  + ")";
                            string EIDinClause = "("
                                   + String.Join(",", eidArr.Select(x => x.ToString()).Distinct().ToArray())
                                 + ")";

                            string qry = "SELECT pf.CostCenterID  AS 'Costcentreid', pf.EntityID  AS 'EntityID', pf.[Status] AS 'Status' FROM   PM_Financial pf WHERE  pf.EntityID IN " + EIDinClause + " AND pf.CostCenterID IN " + CCinClause + "";

                            rootLevelFinancialStatus = tx.PersistenceManager.PlanningRepository.ExecuteQuery(qry);

                        }
                        metadata = FundingCostcenterMetadataValues(proxy, financialResult, entityfinancialccCount);
                        //commitAmountObj = GetCommitTransactions(proxy, financialResult);
                    }
                    else
                        iifincostrel = null;

                    Tuple<IList, IList, IList, IList, IList, int, IList<IFinancialMetadataAttributewithValues>, Tuple<List<object>>> EntityFinancialDetails = Tuple.Create(financialResult, CostCenterResult, spentAmountResult, EntityCostCenterRelationsResult, rootLevelFinancialStatus, entityfinancialccCount, metadata, commitAmountObj);


                    tx.Commit();
                    return EntityFinancialDetails;
                }
            }
            catch (Exception ex)
            {
                return null;
            }


        }

        public List<object> GetCommitTransactions(PlanningManagerProxy proxy, IList financialResult)
        {
            try
            {
                List<object> commitAmountObj = new List<object>();
                int spentamount = 0;
                int notspentamount = 0;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    foreach (var val in financialResult)
                    {
                        spentamount = 0;
                        notspentamount = 0;
                        IList<MultiProperty> paramList = new List<MultiProperty>();
                        paramList.Add(new MultiProperty { propertyName = "EntityID", propertyValue = (int)((System.Collections.Hashtable)(val))["EntityID"] });
                        paramList.Add(new MultiProperty { propertyName = "CostCenterID", propertyValue = (int)((System.Collections.Hashtable)(val))["CostCenterID"] });
                        var amountqry = new StringBuilder();

                        amountqry.AppendLine("DECLARE @KeyText AS NVARCHAR(100) ");
                        amountqry.AppendLine("DECLARE @Level AS int");
                        amountqry.AppendLine("SET @KeyText = (SELECT pe.UniqueKey FROM PM_Entity pe WHERE pe.ID = :EntityID)");
                        amountqry.AppendLine("SET @Level = (SELECT pe.level FROM PM_Entity pe WHERE pe.id = :EntityID)");
                        amountqry.AppendLine("IF (@Level = 0)");
                        amountqry.AppendLine("BEGIN");
                        amountqry.AppendLine("SELECT ISNULL(CAST(SUM(ppod.Amount)AS INT), 0) AS 'NotSpentAmount'");
                        amountqry.AppendLine("FROM   PM_PurchaseOrder ppo");
                        amountqry.AppendLine("INNER JOIN PM_PurchaseOrderDetail ppod");
                        amountqry.AppendLine("ON  ppo.ID = ppod.POID AND ppo.[Status] NOT IN (5)");
                        amountqry.AppendLine("WHERE  ppo.id NOT IN (SELECT pi1.Ponumber");
                        amountqry.AppendLine("FROM   PM_Invoice pi1");
                        amountqry.AppendLine("INNER JOIN PM_InvoiceDetail pid");
                        amountqry.AppendLine("ON  pi1.ID = pid.InvID AND ppo.[Status] NOT IN (5)");
                        amountqry.AppendLine("AND pi1.EntityID IN (SELECT id FROM PM_Entity pe WHERE (pe.UniqueKey LIKE @KeyText + '.%'  OR pe.UniqueKey = @KeyText) AND pe.[Level] =1   AND pe.[Active]=1)");
                        amountqry.AppendLine("AND pid.CostCenterID = :CostCenterID)");
                        amountqry.AppendLine("AND ppo.EntityID IN (SELECT id FROM PM_Entity pe WHERE (pe.UniqueKey LIKE @KeyText + '.%'  OR pe.UniqueKey = @KeyText) AND pe.[Level] =1  AND pe.[Active]=1)");
                        amountqry.AppendLine("AND ppod.CostCenterID = :CostCenterID");
                        amountqry.AppendLine("END");
                        amountqry.AppendLine("ELSE");
                        amountqry.AppendLine("BEGIN");
                        amountqry.AppendLine("SELECT ISNULL(CAST(SUM(ppod.Amount)AS INT), 0) AS 'NotSpentAmount'");
                        amountqry.AppendLine("FROM   PM_PurchaseOrder ppo");
                        amountqry.AppendLine("INNER JOIN PM_PurchaseOrderDetail ppod");
                        amountqry.AppendLine("ON  ppo.ID = ppod.POID AND ppo.[Status] NOT IN (5)");
                        amountqry.AppendLine("WHERE  ppo.id NOT IN (SELECT pi1.Ponumber");
                        amountqry.AppendLine("FROM   PM_Invoice pi1");
                        amountqry.AppendLine("INNER JOIN PM_InvoiceDetail pid");
                        amountqry.AppendLine("ON  pi1.ID = pid.InvID");
                        amountqry.AppendLine("AND pi1.EntityID = :EntityID");
                        amountqry.AppendLine("AND pid.CostCenterID = :CostCenterID)");
                        amountqry.AppendLine("AND ppo.EntityID = :EntityID");
                        amountqry.AppendLine("AND ppod.CostCenterID = :CostCenterID");
                        amountqry.AppendLine("END");
                        IList notSpentamountVal = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(amountqry.ToString(), paramList);
                        notspentamount = (int)((System.Collections.Hashtable)(notSpentamountVal)[0])["NotSpentAmount"];

                        amountqry = new StringBuilder();
                        amountqry.AppendLine("DECLARE @KeyText AS NVARCHAR(100) ");
                        amountqry.AppendLine("DECLARE @Level AS int");
                        amountqry.AppendLine("SET @KeyText = (SELECT pe.UniqueKey FROM PM_Entity pe WHERE pe.ID = :EntityID)");
                        amountqry.AppendLine("SET @Level = (SELECT pe.level FROM PM_Entity pe WHERE pe.id = :EntityID)");
                        amountqry.AppendLine(" IF (@Level = 0)");
                        amountqry.AppendLine("BEGIN");
                        amountqry.AppendLine("SELECT ISNULL(CAST( SUM(pid.Amount)AS int), 0) AS 'TotalSpentAmount' ");
                        amountqry.AppendLine("FROM   PM_Invoice pi1 ");
                        amountqry.AppendLine("INNER JOIN PM_InvoiceDetail pid ");
                        amountqry.AppendLine("ON  pi1.ID = pid.InvID ");
                        amountqry.AppendLine(" AND pi1.EntityID  IN (SELECT id FROM PM_Entity pe WHERE (pe.UniqueKey LIKE @KeyText + '.%'  OR pe.UniqueKey = @KeyText) AND pe.[Level] =1   AND pe.[Active]=1) ");
                        amountqry.AppendLine("AND pid.CostCenterID= :CostCenterID ");
                        amountqry.AppendLine("END ");
                        amountqry.AppendLine("ELSE ");
                        amountqry.AppendLine("BEGIN ");
                        amountqry.AppendLine("SELECT ISNULL(CAST( SUM(pid.Amount)AS int), 0) AS 'TotalSpentAmount' ");
                        amountqry.AppendLine("FROM   PM_Invoice pi1 ");
                        amountqry.AppendLine("INNER JOIN PM_InvoiceDetail pid ");
                        amountqry.AppendLine("ON  pi1.ID = pid.InvID ");
                        amountqry.AppendLine("AND pi1.EntityID  = :EntityID ");
                        amountqry.AppendLine("AND pid.CostCenterID = :CostCenterID ");
                        amountqry.AppendLine("END ");
                        IList spentamountVal = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(amountqry.ToString(), paramList);
                        spentamount = (int)((System.Collections.Hashtable)(spentamountVal)[0])["TotalSpentAmount"];

                        commitAmountObj.Add(new
                        {
                            CCID = (int)((System.Collections.Hashtable)(val))["CostCenterID"],
                            EID = (int)((System.Collections.Hashtable)(val))["EntityID"],
                            Amount = notspentamount + spentamount,
                            ParenId = (int)((System.Collections.Hashtable)(val))["ParentID"]
                        });

                    }
                    tx.Commit();
                }
                return commitAmountObj;
            }
            catch
            {
                return null;
            }
        }

        public int GetOverviewFinancialAmount(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                int Amount = 0;
                int spentamount = 0;
                int notspentamount = 0;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    spentamount = 0;
                    notspentamount = 0;
                    IList<MultiProperty> paramList = new List<MultiProperty>();
                    paramList.Add(new MultiProperty { propertyName = "EntityID", propertyValue = EntityID });
                    var amountqry = new StringBuilder();

                    amountqry.AppendLine("DECLARE @KeyText AS NVARCHAR(100) ");
                    amountqry.AppendLine("DECLARE @Level AS int");
                    amountqry.AppendLine("SET @KeyText = (SELECT pe.UniqueKey FROM PM_Entity pe WHERE pe.ID = :EntityID)");
                    amountqry.AppendLine("SET @Level = (SELECT pe.level FROM PM_Entity pe WHERE pe.id = :EntityID)");
                    amountqry.AppendLine("IF (@Level = 0)");
                    amountqry.AppendLine("BEGIN");
                    amountqry.AppendLine("SELECT ISNULL(CAST(SUM(ppod.Amount)AS INT), 0) AS 'NotSpentAmount'");
                    amountqry.AppendLine("FROM   PM_PurchaseOrder ppo");
                    amountqry.AppendLine("INNER JOIN PM_PurchaseOrderDetail ppod");
                    amountqry.AppendLine("ON  ppo.ID = ppod.POID AND ppo.[Status] NOT IN (5)");
                    amountqry.AppendLine("WHERE  ppo.id NOT IN (SELECT pi1.Ponumber");
                    amountqry.AppendLine("FROM   PM_Invoice pi1");
                    amountqry.AppendLine("INNER JOIN PM_InvoiceDetail pid");
                    amountqry.AppendLine("ON  pi1.ID = pid.InvID AND ppo.[Status] NOT IN (5)");
                    amountqry.AppendLine("AND pi1.EntityID IN (SELECT id FROM PM_Entity pe WHERE (pe.UniqueKey LIKE @KeyText + '.%'  OR pe.UniqueKey = @KeyText) AND pe.[Level] =1  AND pe.[Active]=1)");
                    amountqry.AppendLine(" ) ");
                    amountqry.AppendLine("AND ppo.EntityID IN (SELECT id FROM PM_Entity pe WHERE (pe.UniqueKey LIKE @KeyText + '.%'  OR pe.UniqueKey = @KeyText) AND pe.[Level] =1 AND pe.[Active]=1)");
                    amountqry.AppendLine("END");
                    amountqry.AppendLine("ELSE");
                    amountqry.AppendLine("BEGIN");
                    amountqry.AppendLine("SELECT ISNULL(CAST(SUM(ppod.Amount)AS INT), 0) AS 'NotSpentAmount'");
                    amountqry.AppendLine("FROM   PM_PurchaseOrder ppo");
                    amountqry.AppendLine("INNER JOIN PM_PurchaseOrderDetail ppod");
                    amountqry.AppendLine("ON  ppo.ID = ppod.POID AND ppo.[Status] NOT IN (5)");
                    amountqry.AppendLine("WHERE  ppo.id NOT IN (SELECT pi1.Ponumber");
                    amountqry.AppendLine("FROM   PM_Invoice pi1");
                    amountqry.AppendLine("INNER JOIN PM_InvoiceDetail pid");
                    amountqry.AppendLine("ON  pi1.ID = pid.InvID");
                    amountqry.AppendLine("AND pi1.EntityID = :EntityID");
                    amountqry.AppendLine(")");
                    amountqry.AppendLine("AND ppo.EntityID = :EntityID");
                    amountqry.AppendLine("END");
                    IList notSpentamountVal = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(amountqry.ToString(), paramList);
                    notspentamount = (int)((System.Collections.Hashtable)(notSpentamountVal)[0])["NotSpentAmount"];

                    amountqry = new StringBuilder();
                    amountqry.AppendLine("DECLARE @KeyText AS NVARCHAR(100) ");
                    amountqry.AppendLine("DECLARE @Level AS int");
                    amountqry.AppendLine("SET @KeyText = (SELECT pe.UniqueKey FROM PM_Entity pe WHERE pe.ID = :EntityID)");
                    amountqry.AppendLine("SET @Level = (SELECT pe.level FROM PM_Entity pe WHERE pe.id = :EntityID)");
                    amountqry.AppendLine(" IF (@Level = 0)");
                    amountqry.AppendLine("BEGIN");
                    amountqry.AppendLine("SELECT ISNULL(CAST( SUM(pid.Amount)AS int), 0) AS 'TotalSpentAmount' ");
                    amountqry.AppendLine("FROM   PM_Invoice pi1 ");
                    amountqry.AppendLine("INNER JOIN PM_InvoiceDetail pid ");
                    amountqry.AppendLine("ON  pi1.ID = pid.InvID ");
                    amountqry.AppendLine(" AND pi1.EntityID  IN (SELECT id FROM PM_Entity pe WHERE (pe.UniqueKey LIKE @KeyText + '.%'  OR pe.UniqueKey = @KeyText) AND pe.[Level] =1 AND pe.[Active]=1 ) ");
                    amountqry.AppendLine("END ");
                    amountqry.AppendLine("ELSE ");
                    amountqry.AppendLine("BEGIN ");
                    amountqry.AppendLine("SELECT ISNULL(CAST( SUM(pid.Amount)AS int), 0) AS 'TotalSpentAmount' ");
                    amountqry.AppendLine("FROM   PM_Invoice pi1 ");
                    amountqry.AppendLine("INNER JOIN PM_InvoiceDetail pid ");
                    amountqry.AppendLine("ON  pi1.ID = pid.InvID ");
                    amountqry.AppendLine("AND pi1.EntityID  = :EntityID ");
                    amountqry.AppendLine("END ");
                    IList spentamountVal = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(amountqry.ToString(), paramList);
                    spentamount = (int)((System.Collections.Hashtable)(spentamountVal)[0])["TotalSpentAmount"];
                    Amount = notspentamount + spentamount;
                    tx.Commit();
                }
                return Amount;
            }
            catch
            {
                return 0;
            }
        }

        /// <summary>
        /// Getting  FinancialMetada attribute details with values
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The financialresult.</param>
        /// <returns>IFinancialMetadataAttributewithValues<</returns>
        public IList<IFinancialMetadataAttributewithValues> FundingCostcenterMetadataValues(PlanningManagerProxy proxy, IList financialResult, int limit)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<IFinancialMetadataAttributewithValues> iifinResult = new List<IFinancialMetadataAttributewithValues>();
                    IList<FinancialAttributeDao> finMetadata = new List<FinancialAttributeDao>();
                    string entityName = "FundingCostCentreRecords";
                    finMetadata = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialAttributeDao>() where item.FinTypeID == (int)FinancialMetadaTypes.FundingCostcenter && item.IsSystemDefined == false select item).OrderBy(a => a.SortOrder).ToList();
                    var dynValue = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Select(a => a).ToList();
                    for (int currentindex = 0; currentindex <= limit - 1; currentindex++)
                    {

                        foreach (var meta in finMetadata)
                        {
                            IFinancialMetadataAttributewithValues ifin = new FinancialMetadataAttributewithValues();
                            ifin.FinTypeID = (int)FinancialMetadaTypes.FundingCostcenter;
                            ifin.FinID = (int)((System.Collections.Hashtable)(financialResult[currentindex]))["FinId"];
                            ifin.EntityID = (int)((System.Collections.Hashtable)(financialResult[currentindex]))["EntityID"];
                            ifin.CostcenterID = (int)((System.Collections.Hashtable)(financialResult[currentindex]))["CostCenterID"];
                            ifin.AttributeTypeID = meta.AttributeTypeID;
                            ifin.ID = meta.ID;
                            ifin.SortOrder = meta.SortOrder;
                            switch ((AttributesList)ifin.AttributeTypeID)
                            {
                                case AttributesList.TextSingleLine:
                                case AttributesList.TextMultiLine:
                                    if (dynValue != null && meta.IsSystemDefined == false)
                                    {
                                        if (dynValue.Count > 0)
                                        {
                                            var result = dynValue.Where(a => a.Id == ifin.FinID).ToList();
                                            if (result.Count > 0)
                                            {
                                                if (result[0].Attributes != null)
                                                {
                                                    var data = result.Select(a => a.Attributes["" + ifin.ID + ""]).FirstOrDefault();
                                                    if (data != null)
                                                        ifin.values = data.ToString();
                                                    else
                                                        ifin.values = "-";
                                                }
                                                else
                                                {
                                                    ifin.values = "-";
                                                }
                                            }
                                            else
                                            {
                                                ifin.values = "-";
                                            }
                                        }
                                        else
                                            ifin.values = "-";
                                    }
                                    else
                                        ifin.values = "-";
                                    break;
                                case AttributesList.ListSingleSelection:
                                    if (dynValue != null && meta.IsSystemDefined == false)
                                    {
                                        if (dynValue.Count > 0)
                                        {
                                            var result = dynValue.Where(a => a.Id == ifin.FinID).ToList();
                                            if (result.Count > 0)
                                            {
                                                if (result[0].Attributes != null)
                                                {
                                                    var data = result.Select(a => a.Attributes["" + ifin.ID + ""]).FirstOrDefault();
                                                    ifin.values = data;
                                                    var optionCaption = tx.PersistenceManager.PlanningRepository.Query<FinancialOptionDao>().Where(a => a.ID == (int)data).Select(a => a.Caption).FirstOrDefault();
                                                    if (optionCaption != null)
                                                        ifin.ValueCaption = optionCaption.ToString();
                                                    else
                                                    {
                                                        ifin.values = "-";
                                                        ifin.ValueCaption = "-";
                                                    }
                                                }
                                                else
                                                {
                                                    ifin.values = "-";
                                                    ifin.ValueCaption = "-";
                                                }
                                            }
                                            else
                                            {
                                                ifin.values = "-";
                                                ifin.ValueCaption = "-";
                                            }
                                        }
                                        else
                                        {
                                            ifin.values = "-";
                                            ifin.ValueCaption = "-";
                                        }
                                    }
                                    else
                                    {
                                        ifin.values = "-";
                                        ifin.ValueCaption = "-";
                                    }
                                    break;
                                case AttributesList.ListMultiSelection:
                                    if (meta.IsSystemDefined == false)
                                    {
                                        var dynOptions = tx.PersistenceManager.PlanningRepository.Query<FinancialMultiSelectDao>().Where(a => a.FinTypeID == (int)FinancialMetadaTypes.FundingCostcenter && a.FinAttributeID == ifin.ID && a.FinID == ifin.FinID).Select(a => a.FinOptionID).ToArray();
                                        if (dynOptions != null)
                                        {
                                            if (dynOptions.Length > 0)
                                                ifin.values = dynOptions;
                                            var optionCaption = tx.PersistenceManager.PlanningRepository.Query<FinancialOptionDao>().Where(a => dynOptions.Contains(a.ID)).Select(a => a.Caption).ToList();
                                            if (optionCaption != null)
                                                ifin.ValueCaption = "" + String.Join(",", optionCaption.Select(x => x.ToString()).ToArray()) + "";
                                            else
                                                ifin.ValueCaption = "-";
                                        }
                                        else
                                        {
                                            ifin.values = "-";
                                            ifin.ValueCaption = "-";
                                        }
                                    }
                                    break;

                            }

                            iifinResult.Add(ifin);

                        }

                    }

                    tx.Commit();
                    return iifinResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Getting  FinancialMetada attribute details with values
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The financialresult.</param>
        /// <returns>IFinancialMetadataAttributewithValues<</returns>
        public IList<IFinancialMetadataAttributewithValues> FinancialTransactionMetadataValues(PlanningManagerProxy proxy, int finId, int entityId, int costcenterId, int metadatatype)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<IFinancialMetadataAttributewithValues> iifinResult = new List<IFinancialMetadataAttributewithValues>();
                    IList<FinancialAttributeDao> finMetadata = new List<FinancialAttributeDao>();
                    string entityName = "";
                    if (metadatatype == (int)FinancialMetadaTypes.PO)
                        entityName = "PORecords";
                    else if (metadatatype == (int)FinancialMetadaTypes.Spent)
                        entityName = "SpentRecords";
                    else if (metadatatype == (int)FinancialMetadaTypes.FundingCostcenter)
                        entityName = "FundingCostCentreRecords";
                    finMetadata = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialAttributeDao>() where item.FinTypeID == metadatatype && item.IsSystemDefined == false select item).OrderBy(a => a.SortOrder).ToList();
                    var dynValue = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Select(a => a).ToList();

                    foreach (var meta in finMetadata)
                    {
                        IFinancialMetadataAttributewithValues ifin = new FinancialMetadataAttributewithValues();
                        ifin.FinTypeID = metadatatype;
                        ifin.FinID = finId;
                        ifin.EntityID = entityId;
                        ifin.CostcenterID = costcenterId;
                        ifin.AttributeTypeID = meta.AttributeTypeID;
                        ifin.ID = meta.ID;
                        ifin.SortOrder = meta.SortOrder;
                        switch ((AttributesList)ifin.AttributeTypeID)
                        {
                            case AttributesList.TextSingleLine:
                            case AttributesList.TextMultiLine:
                                if (dynValue != null && meta.IsSystemDefined == false)
                                {
                                    if (dynValue.Count > 0)
                                    {
                                        var result = dynValue.Where(a => a.Id == ifin.FinID).ToList();
                                        if (result.Count > 0)
                                        {
                                            if (result[0].Attributes != null)
                                            {
                                                var data = result.Select(a => a.Attributes["" + ifin.ID + ""]).FirstOrDefault();
                                                if (data != null)
                                                    ifin.values = data.ToString();
                                                else
                                                    ifin.values = "-";
                                            }
                                            else
                                            {
                                                ifin.values = "-";
                                            }
                                        }
                                        else
                                        {
                                            ifin.values = "-";
                                        }
                                    }
                                    else
                                        ifin.values = "-";
                                }
                                else
                                    ifin.values = "-";
                                break;
                            case AttributesList.ListSingleSelection:
                                if (dynValue != null && meta.IsSystemDefined == false)
                                {
                                    if (dynValue.Count > 0)
                                    {
                                        var result = dynValue.Where(a => a.Id == ifin.FinID).ToList();
                                        if (result.Count > 0)
                                        {
                                            if (result[0].Attributes != null)
                                            {
                                                var data = result.Select(a => a.Attributes["" + ifin.ID + ""]).FirstOrDefault();
                                                ifin.values = data;
                                                var optionCaption = tx.PersistenceManager.PlanningRepository.Query<FinancialOptionDao>().Where(a => a.ID == (int)data).Select(a => a.Caption).FirstOrDefault();
                                                if (optionCaption != null)
                                                    ifin.ValueCaption = optionCaption.ToString();
                                                else
                                                {
                                                    ifin.values = "-";
                                                    ifin.ValueCaption = "-";
                                                }
                                            }
                                            else
                                            {
                                                ifin.values = "-";
                                                ifin.ValueCaption = "-";
                                            }
                                        }
                                        else
                                        {
                                            ifin.values = "-";
                                            ifin.ValueCaption = "-";
                                        }
                                    }
                                    else
                                    {
                                        ifin.values = "-";
                                        ifin.ValueCaption = "-";
                                    }
                                }
                                else
                                {
                                    ifin.values = "-";
                                    ifin.ValueCaption = "-";
                                }
                                break;
                            case AttributesList.ListMultiSelection:
                                if (meta.IsSystemDefined == false)
                                {
                                    var dynOptions = tx.PersistenceManager.PlanningRepository.Query<FinancialMultiSelectDao>().Where(a => a.FinTypeID == (int)FinancialMetadaTypes.FundingCostcenter && a.FinAttributeID == ifin.ID && a.FinID == ifin.FinID).Select(a => a.FinOptionID).ToArray();
                                    if (dynOptions != null)
                                    {
                                        if (dynOptions.Length > 0)
                                            ifin.values = dynOptions;
                                        var optionCaption = tx.PersistenceManager.PlanningRepository.Query<FinancialOptionDao>().Where(a => dynOptions.Contains(a.ID)).Select(a => a.Caption).ToList();
                                        if (optionCaption != null)
                                            ifin.ValueCaption = "" + String.Join(",", optionCaption.Select(x => x.ToString()).ToArray()) + "";
                                        else
                                            ifin.ValueCaption = "-";
                                    }
                                    else
                                    {
                                        ifin.values = "-";
                                        ifin.ValueCaption = "-";
                                    }
                                }
                                break;

                        }


                        iifinResult.Add(ifin);

                    }

                    tx.Commit();
                    return iifinResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Getting  FinancialMetada attribute details
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The financialresult.</param>
        /// <returns>IFinancialMetadataAttributewithValues<</returns>
        public IList<IFinancialMetadataAttributewithValues> GetFundingCostcenterMetadata(PlanningManagerProxy proxy, int metadataType)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<IFinancialMetadataAttributewithValues> iifinResult = new List<IFinancialMetadataAttributewithValues>();
                    IList<FinancialAttributeDao> finMetadata = new List<FinancialAttributeDao>();
                    IList<BrandSystems.Marcom.Core.Metadata.Interface.IFinancialOption> iifinOpt = new List<BrandSystems.Marcom.Core.Metadata.Interface.IFinancialOption>();
                    IList<FinancialOptionDao> ifinDao = new List<FinancialOptionDao>();
                    BrandSystems.Marcom.Core.Metadata.Interface.IFinancialOption ifinOpt = new BrandSystems.Marcom.Core.Metadata.FinancialOption();
                    if (metadataType == (int)FinancialMetadaTypes.FundingCostcenter)
                        finMetadata = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialAttributeDao>() where item.FinTypeID == metadataType select item).OrderBy(a => a.SortOrder).ToList();
                    if (metadataType == (int)FinancialMetadaTypes.PO)
                        finMetadata = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialAttributeDao>() where item.FinTypeID == metadataType select item).OrderBy(a => a.SortOrder).ToList();
                    if (metadataType == (int)FinancialMetadaTypes.Spent)
                        finMetadata = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialAttributeDao>() where item.FinTypeID == metadataType select item).OrderBy(a => a.SortOrder).ToList();

                    foreach (var meta in finMetadata)
                    {
                        IFinancialMetadataAttributewithValues ifin = new FinancialMetadataAttributewithValues();
                        ifin.AttributeTypeID = meta.AttributeTypeID;
                        ifin.ID = meta.ID;
                        ifin.Caption = meta.Caption;
                        ifin.Description = meta.Description;
                        ifin.FinTypeID = meta.FinTypeID;
                        ifin.IsColumn = meta.IsColumn;
                        ifin.IsCommitTooltip = meta.IsCommitTooltip;
                        ifin.IsSystemDefined = meta.IsSystemDefined;
                        ifin.IsTooltip = meta.IsTooltip;
                        ifin.SortOrder = meta.SortOrder;
                        ifinDao = tx.PersistenceManager.PlanningRepository.Query<FinancialOptionDao>().Where(a => a.FinAttributeID == ifin.ID).Select(a => a).OrderBy(a => a.SortOrder).ToList();
                        switch ((AttributesList)ifin.AttributeTypeID)
                        {
                            case AttributesList.ListMultiSelection:
                            case AttributesList.ListSingleSelection:
                                iifinOpt = new List<BrandSystems.Marcom.Core.Metadata.Interface.IFinancialOption>();
                                if (ifinDao != null)
                                {
                                    if (ifinDao.Count > 0)
                                    {
                                        foreach (var opt in ifinDao)
                                        {
                                            ifinOpt = new BrandSystems.Marcom.Core.Metadata.FinancialOption();
                                            ifinOpt.Caption = opt.Caption;
                                            ifinOpt.FinAttributeID = opt.FinAttributeID;
                                            ifinOpt.ID = opt.ID;
                                            ifinOpt.SortOrder = opt.SortOrder;
                                            iifinOpt.Add(ifinOpt);
                                        }
                                        ifin.Options = iifinOpt;
                                    }
                                    else
                                        ifin.Options = iifinOpt;
                                }
                                break;

                        }

                        iifinResult.Add(ifin);

                    }

                    tx.Commit();
                    return iifinResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        /// <summary>
        /// Getting Cost Center Amount  Details 
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The costCenterId.</param>
        /// <returns>IList</returns>
        public IList GetCostcenterBeforeApprovalAmountDetails(PlanningManagerProxy proxy, int costCenterId, int entityID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var sbMain = new StringBuilder();
                    sbMain.Append("DECLARE @CostAmount INT ");
                    sbMain.Append("DECLARE @EntityVal INT  ");
                    sbMain.Append("DECLARE @EntityBeforeApprovedAmount INT  ");
                    sbMain.Append("DECLARE @EntityID INT =? ");
                    sbMain.Append("DECLARE @CostCenterID INT =? ");
                    sbMain.Append("SET @EntityVal = ( ");
                    sbMain.Append("        SELECT SUM(ApprovedAllocatedAmount) ");
                    sbMain.Append("        FROM   PM_Financial ps ");
                    sbMain.Append("               INNER ");
                    sbMain.Append("        JOIN PM_Entity pe ");
                    sbMain.Append("                    ON  pe.ID = ps.EntityID ");
                    sbMain.Append("                   AND pe.Level = 1 ");
                    sbMain.Append("        WHERE  CostCenterID = @CostCenterID ");
                    sbMain.Append("    )  ");
                    sbMain.Append("SET @CostAmount = ( ");
                    sbMain.Append("        SELECT Attr_59 ");
                    sbMain.Append("        FROM   MM_AttributeRecord_5 ");
                    sbMain.Append("        WHERE  Id = @CostCenterID ");
                    sbMain.Append("    ) ");
                    sbMain.Append("SET @EntityBeforeApprovedAmount = ( ");
                    sbMain.Append("         SELECT SUM(ApprovedAllocatedAmount) ");
                    sbMain.Append("        FROM   PM_Financial ");
                    sbMain.Append("       WHERE  EntityID = @EntityID AND CostCenterID=@CostCenterID ");
                    sbMain.Append("    ) ");
                    sbMain.Append("SELECT @CostAmount                    AS AllocatedAmount, ");
                    sbMain.Append("       @EntityVal                     AS PreviousAllApprovedAmount, ");
                    sbMain.Append("       @EntityBeforeApprovedAmount    AS EntityBeforeApprovedAmount, ");
                    sbMain.Append("       SUM(@CostAmount - @EntityVal)  AS BeforeApproval ");
                    IList financialResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(sbMain.ToString(), entityID, costCenterId);
                    return financialResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }


        }

        /// <summary>
        /// Update Planned Amount in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Amount">Planned Amount</param>
        /// <returns>Bool</returns>
        public bool EntityPlannedAmountInsert(PlanningManagerProxy proxy, int entityID, int CostcenterId, Decimal PlannedAmount, int currencyType, string description)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FinancialDao dao = new FinancialDao();
                    IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    var entitydao = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == entityID select item.Level).FirstOrDefault();
                    dao = tx.PersistenceManager.AccessRepository.Query<FinancialDao>().Where(a => a.Entityid == entityID && a.CostCenterid == CostcenterId).FirstOrDefault();
                    //new object added to hold old planned amount for news feed no new query run
                    var oldplannedamount = dao.PlannedAmount;
                    //end

                    if (dao.Status == 0)
                    {
                        decimal transactionAmt = 0;
                        transactionAmt = (PlannedAmount - dao.PlannedAmount);

                        dao.PlannedAmount = PlannedAmount;
                        Ifinancial.Add(dao);
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);

                        //save transaction history
                        PlanningDao pDao = new PlanningDao();
                        pDao.CostCentreID = CostcenterId;
                        pDao.CurrencyType = currencyType;
                        pDao.Description = description;
                        pDao.EntityID = entityID;
                        pDao.PlanAmount = transactionAmt;
                        pDao.PlanDate = DateTime.Now;
                        pDao.Status = dao.Status;
                        pDao.IsActive = true;
                        pDao.UserID = proxy.MarcomManager.User.Id;

                        tx.PersistenceManager.PlanningRepository.Save<PlanningDao>(pDao);

                        tx.Commit();


                        // int feedInsertResult = proxy.MarcomManager.CommonManager.SaveUpdateFeed(proxy.MarcomManager.User.Id, 7, entityID, "", "", "", PlannedAmount.ToString());
                        try
                        {
                            BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                            NotificationFeedObjects obj = new NotificationFeedObjects();
                            obj.action = "Planned amount update";
                            obj.Actorid = proxy.MarcomManager.User.Id;
                            obj.EntityId = entityID;
                            obj.AttributeId = CostcenterId;
                            obj.ToValue = Convert.ToString(Convert.ToInt32(PlannedAmount));
                            obj.FromValue = Convert.ToString(Convert.ToInt32(oldplannedamount));
                            obj.AssociatedEntityId = CostcenterId;
                            fs.AsynchronousNotify(obj);
                        }
                        catch (Exception ex)
                        {
                            BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                        }

                        return true;

                    }
                    else
                    {
                        if (entitydao >= 2)
                        {
                            decimal transactionAmt = 0;
                            transactionAmt = (PlannedAmount - dao.PlannedAmount);
                            dao.Status = 0;
                            dao.PlannedAmount = PlannedAmount;
                            Ifinancial.Add(dao);
                            tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);

                            //save transaction history
                            PlanningDao pDao = new PlanningDao();
                            pDao.CostCentreID = CostcenterId;
                            pDao.CurrencyType = currencyType;
                            pDao.Description = description;
                            pDao.EntityID = entityID;
                            pDao.PlanAmount = transactionAmt;
                            pDao.PlanDate = DateTime.Now;
                            pDao.Status = null;
                            pDao.UserID = proxy.MarcomManager.User.Id;
                            pDao.IsActive = true;
                            tx.PersistenceManager.PlanningRepository.Save<PlanningDao>(pDao);

                            tx.Commit();

                            // int feedInsertResult = proxy.MarcomManager.CommonManager.SaveUpdateFeed(proxy.MarcomManager.User.Id, 7, entityID, "", "", "", PlannedAmount.ToString());
                            try
                            {
                                BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                                NotificationFeedObjects obj = new NotificationFeedObjects();
                                obj.action = "Planned amount update";
                                obj.Actorid = proxy.MarcomManager.User.Id;
                                obj.EntityId = entityID;
                                obj.AttributeId = CostcenterId;
                                obj.ToValue = Convert.ToString(Convert.ToInt32(PlannedAmount));
                                obj.FromValue = Convert.ToString(Convert.ToInt32(oldplannedamount));
                                obj.AssociatedEntityId = CostcenterId;

                                fs.AsynchronousNotify(obj);
                            }
                            catch (Exception ex)
                            {
                                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                            }

                            return true;
                        }

                        else if (PlannedAmount >= dao.ApprovedAllocatedAmount)
                        {
                            decimal transactionAmt = 0;
                            transactionAmt = (PlannedAmount - dao.PlannedAmount);
                            dao.Status = 0;
                            dao.PlannedAmount = PlannedAmount;
                            Ifinancial.Add(dao);
                            tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);

                            //save transaction history
                            PlanningDao pDao = new PlanningDao();
                            pDao.CostCentreID = CostcenterId;
                            pDao.CurrencyType = currencyType;
                            pDao.Description = description;
                            pDao.EntityID = entityID;
                            pDao.PlanAmount = transactionAmt;
                            pDao.PlanDate = DateTime.Now;
                            pDao.Status = dao.Status;
                            pDao.IsActive = true;
                            pDao.UserID = proxy.MarcomManager.User.Id;

                            tx.PersistenceManager.PlanningRepository.Save<PlanningDao>(pDao);

                            tx.Commit();

                            // int feedInsertResult = proxy.MarcomManager.CommonManager.SaveUpdateFeed(proxy.MarcomManager.User.Id, 7, entityID, "", "", "", PlannedAmount.ToString());
                            try
                            {
                                BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                                NotificationFeedObjects obj = new NotificationFeedObjects();
                                obj.action = "Planned amount update";
                                obj.Actorid = proxy.MarcomManager.User.Id;
                                obj.EntityId = entityID;
                                obj.AttributeId = CostcenterId;
                                obj.ToValue = Convert.ToString(Convert.ToInt32(PlannedAmount));
                                obj.FromValue = Convert.ToString(Convert.ToInt32(oldplannedamount));
                                obj.AssociatedEntityId = CostcenterId;
                                fs.AsynchronousNotify(obj);
                            }
                            catch (Exception ex)
                            {
                                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                            }

                            return true;
                        }
                    }
                    return false;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Update Status  in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Status">the Status</param>
        /// <returns>Bool</returns>
        public bool UpdateFundRequestStatus(PlanningManagerProxy proxy, int entityID, int CostcenterId, int FundRequestID, int status)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FundingRequestDao dao = new FundingRequestDao();

                    IList<FundingRequestDao> Ifinancial = new List<FundingRequestDao>();
                    FinancialDao findao = new FinancialDao();
                    IList<FinancialDao> Ifinancialdao = new List<FinancialDao>();
                    IList<MultiProperty> prplst = new List<MultiProperty>();

                    prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                    findao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();

                    var costCentreAssignedAmount = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where item.Entityid == CostcenterId select item.ApprovedAllocatedAmount).FirstOrDefault();
                    int[] costcentreListID = { CostcenterId };

                    var sumOfAllApprovedAmountobj = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where costcentreListID.Contains(item.CostCenterid) select item).ToList();

                    int sumofAmount = Convert.ToInt32(costCentreAssignedAmount);

                    int sumOfAllApprovedAmount = Convert.ToInt32(sumOfAllApprovedAmountobj.Sum(item => item.ApprovedAllocatedAmount));

                    if (sumofAmount >= (sumOfAllApprovedAmount + (findao.ApprovedAllocatedAmount + findao.RequestedAmount)))
                    {

                        prplst.Add(new MultiProperty { propertyName = FundingRequestDao.PropertyNames.Id, propertyValue = FundRequestID });
                        //prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Id, propertyValue = CostcenterId });
                        dao = (tx.PersistenceManager.AccessRepository.GetEquals<FundingRequestDao>(prplst)).FirstOrDefault();
                        dao.FundRequestSTATUS = status;
                        tx.PersistenceManager.PlanningRepository.Save<FundingRequestDao>(Ifinancial);

                        if (status == 2)
                        {
                            findao.ApprovedAllocatedAmount = findao.ApprovedAllocatedAmount + findao.RequestedAmount;
                            findao.RequestedAmount = 0;
                            findao.Status = status;
                            Ifinancialdao.Add(findao);
                            tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancialdao);
                        }
                        else if (status == 3)
                        {
                            prplst = new List<MultiProperty>();
                            prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                            prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                            findao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                            findao.RequestedAmount = 0;
                            findao.Status = status;
                            Ifinancialdao.Add(findao);
                            tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancialdao);
                        }
                        tx.Commit();
                        AdjustApproveAllocation(proxy, entityID);
                        return true;

                    }
                    else
                    {
                        return false;
                    }

                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Update Approve Planned Amount in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Amount">Approve Planned</param>
        /// <returns>Bool</returns>
        public bool EntityApprovePlannedAmountInsert(PlanningManagerProxy proxy, int entityID, int CostcenterId, Decimal AvailablePlannedAmount, Decimal PlannedAmount, Decimal ApprovedAllocatedAmount, int currencyType)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (AvailablePlannedAmount >= PlannedAmount)
                    {
                        IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                        FinancialDao dao = new FinancialDao();
                        IList<MultiProperty> prplst = new List<MultiProperty>();
                        prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                        prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                        dao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                        dao.ApprovedAllocatedAmount = PlannedAmount;
                        Ifinancial.Add(dao);
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);

                        //save Commited history
                        ApprovedAllocatedDetailsDao aDao = new ApprovedAllocatedDetailsDao();
                        aDao.Amount = PlannedAmount;
                        aDao.CostCentreID = CostcenterId;
                        aDao.CurrencyType = currencyType;
                        aDao.Date = DateTime.Now;
                        aDao.Description = "";
                        aDao.EntityID = entityID;
                        aDao.UserID = proxy.MarcomManager.User.Id;

                        tx.PersistenceManager.PlanningRepository.Save<ApprovedAllocatedDetailsDao>(aDao);

                        if (PlannedAmount != ApprovedAllocatedAmount)
                        {
                            BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                            NotificationFeedObjects obj = new NotificationFeedObjects();
                            obj.action = "Approved allocations";
                            obj.Actorid = proxy.MarcomManager.User.Id;
                            obj.AssociatedEntityId = CostcenterId;
                            obj.EntityId = entityID;
                            obj.FromValue = PlannedAmount.ToString(); ;
                            obj.ToValue = ApprovedAllocatedAmount.ToString();
                            fs.AsynchronousNotify(obj);
                        }
                        tx.Commit();
                    }
                    return true;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// AdjustApprove Allocation Amount
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="Amount">Approve Planned Updation</param>
        /// <returns>Bool</returns>
        public bool AdjustApproveAllocation(PlanningManagerProxy proxy, int entityID)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var sbMain = new StringBuilder();

                    var IsChildAvailable = new StringBuilder();

                    var updateChildApproveAmount = new StringBuilder();

                    IsChildAvailable.Append("declare @EntityID INT = ? ");
                    IsChildAvailable.Append("	SELECT COUNT(1) AS Totalchildren");
                    IsChildAvailable.Append("		                            FROM   PM_Financial  ");
                    IsChildAvailable.Append("		                                   pf ");
                    IsChildAvailable.Append("		                            WHERE  pf.CostCenterID NOT IN (SELECT a.CostCenterID ");
                    IsChildAvailable.Append("		                                                              FROM   ( ");
                    IsChildAvailable.Append("		                                                                         SELECT  ");
                    IsChildAvailable.Append("		                                                                                pf.CostCenterID, ");
                    IsChildAvailable.Append("		                                                                                pe2.ID, ");
                    IsChildAvailable.Append("		                                                                                COUNT(1) AS  ");
                    IsChildAvailable.Append("		                                                                                counts ");
                    IsChildAvailable.Append("		                                                                         FROM    ");
                    IsChildAvailable.Append("		                                                                                PM_Financial  ");
                    IsChildAvailable.Append("		                                                                                pf2 ");
                    IsChildAvailable.Append("		                                                                                INNER JOIN  ");
                    IsChildAvailable.Append("		                                                                                     PM_Entity  ");
                    IsChildAvailable.Append("		                                                                                     pe ");
                    IsChildAvailable.Append("		                                                                                     ON   ");
                    IsChildAvailable.Append("		                                                                                         pe.ID =  ");
                    IsChildAvailable.Append("		                                                                                         pf2.EntityID ");
                    IsChildAvailable.Append("		                                                                                INNER JOIN  ");
                    IsChildAvailable.Append("		                                                                                     PM_Entity  ");
                    IsChildAvailable.Append("		                                                                                     pe2 ");
                    IsChildAvailable.Append("		                                                                                     ON   ");
                    IsChildAvailable.Append("		                                                                                         pe.UniqueKey  ");
                    IsChildAvailable.Append("		                                                                                         LIKE  ");
                    IsChildAvailable.Append("		                                                                                         pe2.UniqueKey  ");
                    IsChildAvailable.Append("		                                                                                         +  ");
                    IsChildAvailable.Append("		                                                                                         '%' ");
                    IsChildAvailable.Append("		                                                                         WHERE   ");
                    IsChildAvailable.Append("		                                                                                pe2.ID =  ");
                    IsChildAvailable.Append("		                                                                                @EntityID ");
                    IsChildAvailable.Append("		                                                                                AND  ");
                    IsChildAvailable.Append("		                                                                                    (select count(1) from PM_FundingRequest pfr ");
                    IsChildAvailable.Append("																							where pfr.EntityID = pe2.ID AND pfr.FundRequestSTATUS= 1) = 0 ");
                    IsChildAvailable.Append("		                                                                                AND  ");
                    IsChildAvailable.Append("		                                                                                    pf2.PlannedAmount  ");
                    IsChildAvailable.Append("		                                                                                    <  ");
                    IsChildAvailable.Append("																							( ");
                    IsChildAvailable.Append("																		select sum(pf3.PlannedAmount) from  ");
                    IsChildAvailable.Append("	                                PM_Financial pf3 ");
                    IsChildAvailable.Append("																					inner join PM_Entity pe3 ");
                    IsChildAvailable.Append("																					on pf3.EntityID = pe3.ID ");
                    IsChildAvailable.Append("														where pe3.ParentID = pf2.EntityID and pf3.CostCenterID =  pf2.CostCenterID AND pe3.[Active] = 1 ");
                    IsChildAvailable.Append("														)												 ");
                    IsChildAvailable.Append("		                                                                         GROUP BY ");
                    IsChildAvailable.Append("		                                                                                pf2.CostCenterID, ");
                    IsChildAvailable.Append("		                                                                                pe2.ID ");
                    IsChildAvailable.Append("		                                                                     ) AS  ");
                    IsChildAvailable.Append("		                                                                     a) ");
                    IsChildAvailable.Append("		                                   AND pf.EntityID = @EntityID AND ");
                    IsChildAvailable.Append("										   ( ");
                    IsChildAvailable.Append("															select sum(pf3.PlannedAmount) from PM_Financial pf3 ");
                    IsChildAvailable.Append("																			inner join PM_Entity pe3 ");
                    IsChildAvailable.Append("																			on pf3.EntityID = pe3.ID ");
                    IsChildAvailable.Append("															where pe3.ParentID = pf.EntityID and pf3.CostCenterID =  pf.CostCenterID and pe3.[Active] = 1");
                    IsChildAvailable.Append("																							)	 ");
                    IsChildAvailable.Append("										    <= pf.ApprovedAllocatedAmount ");

                    var availableCountObj = (tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(IsChildAvailable.ToString(), entityID)).Cast<Hashtable>().FirstOrDefault();
                    if ((int)availableCountObj["Totalchildren"] > 0)
                    {
                        updateChildApproveAmount.Append("declare @EntityID INT = ? ");
                        updateChildApproveAmount.Append("		UPDATE PM_Financial  ");
                        updateChildApproveAmount.Append("		SET    ApprovedAllocatedAmount = PlannedAmount  ");
                        updateChildApproveAmount.Append("		WHERE  EntityID IN (SELECT pe.ID  ");
                        updateChildApproveAmount.Append("		                    FROM   PM_Entity pe  ");
                        updateChildApproveAmount.Append("		                           INNER JOIN PM_Entity pe2  ");
                        updateChildApproveAmount.Append("		                                ON  pe.UniqueKey LIKE pe2.UniqueKey +   ");
                        updateChildApproveAmount.Append("		                                    '.%'  ");
                        updateChildApproveAmount.Append("		                    WHERE  pe2.ID = @EntityID  ");
                        updateChildApproveAmount.Append("		                           AND (select count(1) from PM_FundingRequest pfr  ");
                        updateChildApproveAmount.Append("																			inner join PM_Financial PMFU  ");
                        updateChildApproveAmount.Append("																			 ON  pfr.ID = PMFU.EntityID AND PMFU.[Status] = 1  ");
                        updateChildApproveAmount.Append("																				where pfr.EntityID = pe2.ID ) = 0)  ");
                        updateChildApproveAmount.Append("		       AND CostCenterID IN (SELECT pf.CostCenterID  ");
                        updateChildApproveAmount.Append("		                            FROM   PM_Financial   ");
                        updateChildApproveAmount.Append("		                                   pf  ");
                        updateChildApproveAmount.Append("		                            WHERE  pf.CostCenterID NOT IN (SELECT a.CostCenterID  ");
                        updateChildApproveAmount.Append("		                                                              FROM   (  ");
                        updateChildApproveAmount.Append("		                                                                         SELECT   ");
                        updateChildApproveAmount.Append("		                                                                                pf2.CostCenterID,  ");
                        updateChildApproveAmount.Append("		                                                                                pe2.ID,  ");
                        updateChildApproveAmount.Append("		                                                                                COUNT(1) AS   ");
                        updateChildApproveAmount.Append("		                                                                                counts  ");
                        updateChildApproveAmount.Append("		                                                                         FROM     ");
                        updateChildApproveAmount.Append("		                                                                                PM_Financial   ");
                        updateChildApproveAmount.Append("		                                                                                pf2  ");
                        updateChildApproveAmount.Append("		                                                                                INNER JOIN   ");
                        updateChildApproveAmount.Append("		                                                                                     PM_Entity   ");
                        updateChildApproveAmount.Append("		                                                                                     pe  ");
                        updateChildApproveAmount.Append("		                                                                                     ON    ");
                        updateChildApproveAmount.Append("		                                                                                         pe.ID =   ");
                        updateChildApproveAmount.Append("		                                                                                         pf2.EntityID  ");
                        updateChildApproveAmount.Append("		                                                                                INNER JOIN   ");
                        updateChildApproveAmount.Append("		                                                                                     PM_Entity   ");
                        updateChildApproveAmount.Append("		                                                                                     pe2  ");
                        updateChildApproveAmount.Append("		                                                                                     ON    ");
                        updateChildApproveAmount.Append("		                                                                                         pe.UniqueKey   ");
                        updateChildApproveAmount.Append("		                                                                                         LIKE   ");
                        updateChildApproveAmount.Append("		                                                                                         pe2.UniqueKey   ");
                        updateChildApproveAmount.Append("		                                                                                         +   ");
                        updateChildApproveAmount.Append("		                                                                                         '%'  ");
                        updateChildApproveAmount.Append("		                                                                         WHERE    ");
                        updateChildApproveAmount.Append("		                                                                                pe2.ID =   ");
                        updateChildApproveAmount.Append("		                                                                                @EntityID  ");
                        updateChildApproveAmount.Append("		                                                                                AND   ");
                        updateChildApproveAmount.Append("		                                                                      (select count(1) from PM_FundingRequest pfr  ");
                        updateChildApproveAmount.Append("																		where pfr.EntityID = pe2.ID AND pfr.FundRequestSTATUS=1) = 0  ");
                        updateChildApproveAmount.Append("		                                                                                AND   ");
                        updateChildApproveAmount.Append("		                                                                                    pf2.PlannedAmount   ");
                        updateChildApproveAmount.Append("		                                                                                    <   ");
                        updateChildApproveAmount.Append("		                                                                                    (  ");
                        updateChildApproveAmount.Append("														select sum(pf3.PlannedAmount) from PM_Financial pf3  ");
                        updateChildApproveAmount.Append("																							inner join PM_Entity pe3  ");
                        updateChildApproveAmount.Append("																							on pf3.EntityID = pe3.ID  ");
                        updateChildApproveAmount.Append("									where pe3.ParentID = pf2.EntityID and pf3.CostCenterID =  pf2.CostCenterID AND pe3.[Active]  = 1)  ");
                        updateChildApproveAmount.Append("		                                                                         GROUP BY  ");
                        updateChildApproveAmount.Append("		                                                                                pf2.CostCenterID,  ");
                        updateChildApproveAmount.Append("		                                                                                pe2.ID  ");
                        updateChildApproveAmount.Append("		                                                                     ) AS   ");
                        updateChildApproveAmount.Append("		                                                                     a)  ");
                        updateChildApproveAmount.Append("		                                   AND pf.EntityID = @EntityID AND  (  ");
                        updateChildApproveAmount.Append("															select sum(pf3.PlannedAmount) from PM_Financial pf3  ");
                        updateChildApproveAmount.Append("																							inner join PM_Entity pe3  ");
                        updateChildApproveAmount.Append("																							on pf3.EntityID = pe3.ID  ");
                        updateChildApproveAmount.Append("						where pe3.ParentID = pf.EntityID and pf3.CostCenterID =  pf.CostCenterID AND pe3.[Active]  = 1 ");
                        updateChildApproveAmount.Append("							) <= pf.ApprovedAllocatedAmount)  ");

                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(updateChildApproveAmount.ToString(), entityID);

                        //BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                        //NotificationFeedObjects obj = new NotificationFeedObjects();
                        //obj.action = "CostCentre adjust approved allocation";
                        //obj.Actorid = proxy.MarcomManager.User.Id;
                        //obj.EntityId = entityID;
                        //fs.AsynchronousNotify(obj);
                        tx.Commit();

                        return true;
                    }
                    return false;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Update Approved Allocated Amount in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Amount">Release Amount</param>
        /// <returns>True (or) False</returns>
        public bool ReleaseAmount(PlanningManagerProxy proxy, int entityID, int CostcenterId, Decimal ReleaseAmount)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FinancialDao dao = new FinancialDao();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                    dao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                    dao.ApprovedAllocatedAmount = dao.ApprovedAllocatedAmount - ReleaseAmount;
                    tx.Commit();



                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "Release funds";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.AttributeName = CostcenterId.ToString();
                    obj.AssociatedEntityId = CostcenterId;
                    obj.EntityId = entityID;
                    obj.ToValue = Convert.ToString(ReleaseAmount.ToString());
                    fs.AsynchronousNotify(obj);

                    return true;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Transfer Money from one entityCostcenter into another costcenter in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The FromCostCenter ID</param>
        /// <param name="CostCenterId">The ToCostCenter ID</param>
        /// <param name="Amount">Transfer Amount</param>
        /// <returns>True (or) False</returns>
        public bool EntityMoneyTransfer(PlanningManagerProxy proxy, int entityID, int FromCostcenterId, int ToCostCenterId, Decimal TransferAmount)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FinancialDao Fromdao = new FinancialDao();
                    FinancialDao Todao = new FinancialDao();
                    FinancialDao fromcostcenterdao = new FinancialDao();
                    FinancialDao Tocostcenterdao = new FinancialDao();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = FromCostcenterId });
                    Fromdao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();

                    prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = ToCostCenterId });
                    Todao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();

                    prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = FromCostcenterId });
                    fromcostcenterdao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();

                    prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = ToCostCenterId });
                    Tocostcenterdao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                    if (TransferAmount != 0)
                    {
                        if (Todao.PlannedAmount <= (Todao.ApprovedAllocatedAmount + TransferAmount))
                        {
                            Todao.PlannedAmount = (Todao.ApprovedAllocatedAmount + TransferAmount);
                            Fromdao.ApprovedAllocatedAmount = Fromdao.ApprovedAllocatedAmount - TransferAmount;
                            Todao.ApprovedAllocatedAmount = Todao.ApprovedAllocatedAmount + TransferAmount;
                            fromcostcenterdao.ApprovedAllocatedAmount = fromcostcenterdao.ApprovedAllocatedAmount - TransferAmount;
                            Tocostcenterdao.ApprovedAllocatedAmount = Tocostcenterdao.ApprovedAllocatedAmount + TransferAmount;
                        }
                        else if (Todao.PlannedAmount >= (Todao.ApprovedAllocatedAmount + TransferAmount))
                        {
                            Fromdao.ApprovedAllocatedAmount = Fromdao.ApprovedAllocatedAmount - TransferAmount;
                            Todao.ApprovedAllocatedAmount = Todao.ApprovedAllocatedAmount + TransferAmount;
                            fromcostcenterdao.ApprovedAllocatedAmount = fromcostcenterdao.ApprovedAllocatedAmount - TransferAmount;
                            Tocostcenterdao.ApprovedAllocatedAmount = Tocostcenterdao.ApprovedAllocatedAmount + TransferAmount;
                        }
                    }

                    tx.Commit();

                    try
                    {
                        BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.action = "money transfer";
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.AttributeName = TransferAmount.ToString();
                        obj.EntityId = entityID;
                        obj.FromValue = Convert.ToString(FromCostcenterId);
                        obj.ToValue = Convert.ToString(ToCostCenterId);

                        fs.AsynchronousNotify(obj);
                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    return true;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Update Request Amount in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Amount">Request Amount</param>
        /// <returns>Bool</returns>
        public bool EntityRequestAmountInsert(PlanningManagerProxy proxy, int entityID, int CostcenterId, Decimal RequestAmount)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FinancialDao dao = new FinancialDao();


                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                    dao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                    dao.RequestedAmount = RequestAmount;
                    tx.Commit();
                    return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Creating Objective entityvalues.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveId.</param>
        /// <param name="entityId">The EntityId.</param>
        /// <param name="plannedTarget">The PlannedTarget.</param>
        /// <param name="targetOutcome">The TargetOutcome.</param>
        /// <param name="ratingObjective">The RatingObjective.</param>
        /// <param name="comments">The Comments.</param>
        /// <param name="status">The Status.</param>
        /// <param name="fullfilment">The Fulfilment.</param>
        /// <returns>IObjectiveEntityValue</returns>
        public IObjectiveEntityValue Objectiveentityvalues(PlanningManagerProxy proxy, int objectiveId, int entityId, int plannedTarget, int targetOutcome, int ratingObjective, string comments, int status, int fullfilment)
        {
            ObjectiveEntityValueDao dao = new ObjectiveEntityValueDao();
            ObjectiveEntityValue objentval = new ObjectiveEntityValue();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                dao.Objectiveid = objectiveId;
                dao.Entityid = entityId;
                dao.PlannedTarget = plannedTarget;
                dao.TargetOutcome = targetOutcome;
                dao.RatingObjective = ratingObjective;
                dao.Comments = comments;
                dao.Status = status;
                dao.Fulfilment = fullfilment;
                tx.PersistenceManager.PlanningRepository.Save<ObjectiveEntityValueDao>(dao);
                tx.Commit();
                objentval.Objectiveid = dao.Objectiveid;
                objentval.Entityid = dao.Entityid;
                objentval.PlannedTarget = dao.PlannedTarget;
                objentval.TargetOutcome = dao.TargetOutcome;
                objentval.RatingObjective = dao.RatingObjective;
                objentval.Comments = dao.Comments;
                objentval.Status = dao.Status;
                objentval.Fulfilment = dao.Fulfilment;

            }
            return objentval;
        }
        /// <summary>
        /// Creating Objective Condition.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objCondition">The TotalObjectiveCondition.</param>
        /// <returns>IList<IObjectiveCondition></returns>
        public IList<IObjectiveCondition> ObjectiveConditionvalues(PlanningManagerProxy proxy, IList<IObjectiveCondition> objCondition)
        {
            ObjectiveConditionDao dao = new ObjectiveConditionDao();
            IList<ObjectiveConditionDao> listdao = new List<ObjectiveConditionDao>();
            IList<IObjectiveCondition> listobjconditionval = new List<IObjectiveCondition>();
            ObjectiveCondition objconditionval = new ObjectiveCondition();

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                foreach (var obj in objCondition)
                {
                    dao.Objectiveid = obj.Objectiveid;
                    dao.EntityTypeid = obj.EntityTypeid; ;
                    dao.Attributeid = obj.Attributeid; ;
                    dao.ConditionType = obj.ConditionType; ;
                    dao.SortOrder = obj.SortOrder;
                    listdao.Add(dao);
                }
                tx.PersistenceManager.PlanningRepository.Save<ObjectiveConditionDao>(listdao);
                tx.Commit();
                foreach (var daoobj in listdao)
                {
                    objconditionval.Objectiveid = daoobj.Objectiveid;
                    objconditionval.EntityTypeid = daoobj.EntityTypeid;
                    objconditionval.Attributeid = daoobj.Attributeid;
                    objconditionval.ConditionType = daoobj.ConditionType;
                    objconditionval.SortOrder = daoobj.SortOrder;
                    listobjconditionval.Add(objconditionval);
                }
            }
            return listobjconditionval;
        }

        /// <summary>
        /// Deleting Entity
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID</param>
        /// <returns>True (or) False</returns>
        public bool DeleteEntity(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    int entitytypeid = tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>().Where(a => a.Id == entityId).Select(a => a.Typeid).FirstOrDefault();

                    if (entitytypeid == 5)
                        proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.CostCenter, OperationId.Delete);
                    else if (entitytypeid == 10)
                        proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.Objective, OperationId.Delete);
                    else
                        proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.Plan, OperationId.Delete);

                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "delete entity";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = entityId;
                    obj.EntityTypeId = entitytypeid;
                    fs.AsynchronousNotify(obj);
                    string entityUniqueKey = tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>().Where(a => a.Id == entityId).Select(a => a.UniqueKey).FirstOrDefault();
                    DeleteEntitySortOrder(tx, entityId);
                    //tx.PersistenceManager.PlanningRepository.DeleteByID<EntityRoleUserDao>(entityId);
                    //tx.PersistenceManager.PlanningRepository.DeleteByID<EntityPresentationDao>(entityId);
                    //tx.PersistenceManager.PlanningRepository.DeleteByID<EntityPeriodDao>(entityId);
                    //tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.MultiSelectDao>(entityId);
                    //tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.TreeValueDao>(entityId);
                    tx.PersistenceManager.PlanningRepository.DeleteByID<ObjectiveEntityValueDao>(entityId);
                    //Updating EntityCostRelations table IsActive column as zero for particular EntityID
                    var entitycostcentreQuery = "update PM_EntityCostReleations set IsActive = 0 where EntityID = ?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(entitycostcentreQuery, entityId);
                    //Updating Entity table Active column as zero for particular EntityID

                    StringBuilder entityQuery = new StringBuilder();
                    IList<MultiProperty> entityQuery_parLIST = new List<MultiProperty>();
                    entityQuery_parLIST.Add(new MultiProperty { propertyName = "entityId", propertyValue = entityId });
                    entityQuery.Append(" update PM_Entity set Active = 0 WHERE ID = :entityId");
                    entityQuery_parLIST.Add(new MultiProperty { propertyName = "entityUniqueKey", propertyValue = entityUniqueKey + ".%" });
                    entityQuery.Append(" update PM_Entity set Active = 0 WHERE  UniqueKey LIKE  :entityUniqueKey");
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(entityQuery.ToString(), entityQuery_parLIST);

                    IList<MultiProperty> ChildEntityid_parLIST = new List<MultiProperty>();
                    ChildEntityid_parLIST.Add(new MultiProperty { propertyName = "entityUniqueKey", propertyValue = entityUniqueKey + ".%" });
                    var strChildEntityid = "select ID from PM_Entity where UniqueKey LIKE  :entityUniqueKey";
                    var getChildEntityIds = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(strChildEntityid, ChildEntityid_parLIST);
                    tx.Commit();

                    //deleteentity from search
                    RemoveEntityAsync(proxy, entityId);
                    //System.Threading.Tasks.Task taskforremoveentityforsearch = new System.Threading.Tasks.Task(() => RemoveEntityAsync(proxy, entityId));
                    //taskforremoveentityforsearch.Start();
                    foreach (var item in getChildEntityIds)
                    {
                        //System.Threading.Tasks.Task taskForRemoveChildEntityForSearch = new System.Threading.Tasks.Task(() => RemoveEntityAsync(proxy, (int)((System.Collections.Hashtable)(item))["ID"]));
                        //taskForRemoveChildEntityForSearch.Start();
                        RemoveEntityAsync(proxy, (int)((System.Collections.Hashtable)(item))["ID"]);
                    }
                }
                return true;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
        }

        ///// <summary>
        ///// Deleting Entity
        ///// </summary>
        ///// <param name="proxy">The proxy.</param>
        ///// <param name="entityvalue">The Entity</param>
        ///// <returns>True (or) False</returns>
        //public bool DeleteEntity(PlanningManagerProxy proxy, IEntity entityvalue)
        //{
        //    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
        //    {
        //        EntityDao dao = new EntityDao();
        //        dao.Id = entityvalue.Id;
        //        dao.Parentid = entityvalue.Parentid;
        //        dao.Typeid = entityvalue.Typeid;
        //        dao.Active = entityvalue.Active;
        //        dao.UniqueKey = entityvalue.UniqueKey;
        //        dao.IsLock = entityvalue.IsLock;
        //        dao.Name = entityvalue.Name;

        //        if (entityvalue.EntityMembers != null)
        //        {
        //            IList<EntityRoleUserDao> ientityMembers = new List<EntityRoleUserDao>();
        //            EntityRoleUserDao entityMembers = new EntityRoleUserDao();
        //            foreach (var entmem in entityvalue.EntityMembers)
        //            {
        //                entityMembers.Entityid = entmem.Entityid;
        //                entityMembers.Roleid = entmem.Roleid;
        //                entityMembers.Userid = entmem.Userid;
        //                entityMembers.IsInherited = entmem.IsInherited;
        //                entityMembers.InheritedFromEntityid = entmem.InheritedFromEntityid;
        //                ientityMembers.Add(entityMembers);
        //            }
        //            tx.PersistenceManager.PlanningRepository.Delete<EntityRoleUserDao>(ientityMembers);
        //        }
        //        if (entityvalue.EntityCostcenters != null)
        //        {
        //            IList<EntityCostReleationsDao> ientitycostrel = new List<EntityCostReleationsDao>();
        //            EntityCostReleationsDao entitycostrel = new EntityCostReleationsDao();
        //            foreach (var entcost in entityvalue.EntityCostcenters)
        //            {
        //                entitycostrel.Id = entcost.Id;
        //                entitycostrel.EntityId = entcost.EntityId;
        //                entitycostrel.CostcenterId = entcost.CostcenterId;
        //                entitycostrel.Sortorder = entcost.Sortorder;
        //                entitycostrel.Isassociate = entcost.Isassociate;
        //                entitycostrel.Isactive = entcost.Isactive;
        //                ientitycostrel.Add(entitycostrel);
        //            }
        //            tx.PersistenceManager.PlanningRepository.Delete<EntityCostReleationsDao>(ientitycostrel);
        //        }
        //        if (entityvalue.Presentation != null)
        //        {
        //            EntityPresentationDao entitypresendao = new EntityPresentationDao();
        //            entitypresendao.EntityId = dao.Presentation.EntityId;
        //            entitypresendao.PublishedOn = dao.Presentation.PublishedOn;
        //            entitypresendao.Content = dao.Presentation.Content;
        //            tx.PersistenceManager.PlanningRepository.Delete<EntityPresentationDao>(entitypresendao);
        //        }

        //        if (entityvalue.Periods != null)
        //        {
        //            IList<EntityPeriodDao> ientityperiodsdao = new List<EntityPeriodDao>();
        //            EntityPeriodDao entityperiods = new EntityPeriodDao();
        //            foreach (var period in entityvalue.Periods)
        //            {
        //                entityperiods.Entityid = period.Entityid;
        //                entityperiods.Startdate = period.Startdate;
        //                entityperiods.EndDate = period.EndDate;
        //                entityperiods.Description = period.Description;
        //                entityperiods.SortOrder = period.SortOrder;
        //                ientityperiodsdao.Add(entityperiods);
        //            }
        //            tx.PersistenceManager.PlanningRepository.Delete<EntityPeriodDao>(ientityperiodsdao);
        //        }
        //        if (entityvalue.Financials != null)
        //        {
        //            IList<FinancialDao> ifinancialdao = new List<FinancialDao>();
        //            FinancialDao financ = new FinancialDao();
        //            foreach (var fin in entityvalue.Financials)
        //            {
        //                financ.Entityid = fin.Entityid;
        //                financ.CostCenterid = fin.CostCenterid;
        //                financ.PlannedAmount = fin.PlannedAmount;
        //                financ.RequestedAmount = fin.RequestedAmount;
        //                financ.ApprovedAllocatedAmount = fin.ApprovedAllocatedAmount;
        //                financ.ApprovedBudget = fin.ApprovedBudget;
        //                financ.Commited = fin.Commited;
        //                financ.Spent = fin.Spent;
        //                financ.ApprovedBudgetDate = fin.ApprovedBudgetDate;
        //                ifinancialdao.Add(financ);
        //            }
        //            tx.PersistenceManager.PlanningRepository.Delete<FinancialDao>(ifinancialdao);
        //        }
        //        if (entityvalue.FundingRequests != null)
        //        {
        //            IList<FundingRequestDao> ifundreqdao = new List<FundingRequestDao>();
        //            FundingRequestDao funreq = new FundingRequestDao();
        //            foreach (var freq in entityvalue.FundingRequests)
        //            {
        //                funreq.Id = freq.Id;
        //                funreq.Amount = freq.Amount;
        //                funreq.DueDate = freq.DueDate;
        //                funreq.Comment = freq.Comment;
        //                funreq.RequestedBy = freq.RequestedBy;
        //                funreq.CostCenterid = freq.CostCenterid;
        //                funreq.Entityid = freq.Entityid;
        //                funreq.State = freq.State;
        //                funreq.LastUpdatedOn = freq.LastUpdatedOn;
        //                ifundreqdao.Add(funreq);

        //            }
        //            tx.PersistenceManager.PlanningRepository.Delete<FundingRequestDao>(ifundreqdao);
        //        }
        //        tx.PersistenceManager.PlanningRepository.Delete<EntityDao>(dao);
        //        tx.Commit();
        //    }
        //    return true;
        //}
        /// <summary>
        /// Getting EntityAttribute values By Entityname
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityTypeId">The EntityTypeID</param>
        /// <returns>IList<IDynamicAttributes></returns>
        public IList<IDynamicAttributes> GetEntityAttributes(PlanningManagerProxy proxy, int entityId)
        {
            EntityDao dao = new EntityDao();
            IList<IDynamicAttributes> listAttributes = new List<IDynamicAttributes>();
            DynamicAttributes dyt = new DynamicAttributes();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                var entityresult = tx.PersistenceManager.PlanningRepository.Get<EntityDao>(entityId);
                int entityTypeId = entityresult.Typeid;
                string entityName = "AttributeRecord" + entityTypeId;
                var result = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName);
                var te = result.Where(a => a.Id == entityId);
                tx.Commit();
                foreach (var obj in te)
                {
                    dyt.Id = obj.Id;
                    dyt.Attributes = obj.Attributes;
                    listAttributes.Add(dyt);
                }
            }
            return listAttributes;
        }

        /// <summary>
        /// Inserting EntityAttribute values By Entityname
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityTypeId">The EntityTypeID</param>
        /// <returns>int</returns>
        public int InsertEntityAttributes(PlanningManagerProxy proxy, IList<IAttributeData> attributes, int entityTypeId)
        {
            string entityName = "AttributeRecord" + entityTypeId;
            IList<IDynamicAttributes> listdynamicattributes = new List<IDynamicAttributes>();
            Dictionary<string, object> attr = new Dictionary<string, object>();
            foreach (var ab in attributes)
            {
                string key = (string)ab.Caption;
                object value = (object)ab.Value;
                attr.Add(key, value);
            }
            DynamicAttributesDao dynamicdao = new DynamicAttributesDao();

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                dynamicdao.Id = GetBaseEntityID(entityTypeId, "", tx);
                dynamicdao.Attributes = attr;
                tx.PersistenceManager.PlanningRepository.SaveByentity<DynamicAttributesDao>(entityName, dynamicdao);
                tx.Commit();
            }
            return dynamicdao.Id;
        }

        #region Instance of Classes In ServiceLayer reference
        /// <summary>
        /// Returns EntityRolesUser class.
        /// </summary>
        public IEntityRoleUser Entityrolesservice()
        {
            return new EntityRoleUser();
        }
        /// <summary>
        /// Returns PurchaseOrder class.
        /// </summary>
        public IPurchaseOrder PurchaseOrderservice()
        {
            return new PurchaseOrder();
        }


        /// <summary>
        /// Returns PurchaseOrderDetail class.
        /// </summary>
        public IPurchaseOrderDetail PurchaseOrderDetailservice()
        {
            return new PurchaseOrderDetail();
        }



        /// <summary>
        /// Returns PurchaseOrder class.
        /// </summary>
        public IInvoice Invoiceservice()
        {
            return new Invoice();
        }


        /// <summary>
        /// Returns PurchaseOrderDetail class.
        /// </summary>
        public IInvoiceDetail InvoiceDetailservice()
        {
            return new InvoiceDetail();
        }
        /// <summary>
        /// Returns EntityCostcentrerelation class.
        /// </summary>
        public IEntityCostReleations EntityCostcentrerelationservice()
        {
            return new EntityCostReleations();
        }

        /// <summary>
        /// Returns EntityCostcentrerelation class.
        /// </summary>
        public ISupplier Supplierservice()
        {
            return new Supplier();
        }
        /// <summary>
        /// Returns Entitypresentation class.
        /// </summary>
        public IEntityPresentation Entitypresentationservice()
        {
            return new EntityPresentation();
        }
        /// <summary>
        /// Returns Entityperiod class.
        /// </summary>
        public IEntityPeriod Entityperiodservice()
        {
            return new EntityPeriod();
        }
        /// <summary>
        /// Returns Financial class.
        /// </summary>
        public IFinancial Entityfinanicalservice()
        {
            return new Financial();
        }
        /// <summary>
        /// Returns FundingRequest class.
        /// </summary>
        public IFundingRequest EntityFundingrequestservice()
        {
            return new FundingRequest();
        }
        /// <summary>
        /// Returns Objective class.
        /// </summary>
        public IObjective Objectiveservice()
        {
            return new Objective();
        }
        /// <summary>
        /// Returns Costcentre class.
        /// </summary>
        public ICostCenter Costcentreservice()
        {
            return new CostCenter();
        }
        /// <summary>
        /// Returns AttributeData class.
        /// </summary>
        public IAttributeData AttributeDataservice()
        {
            return new AttributeData();
        }

        /// <summary>
        /// Returns AttributeData class.
        /// </summary>
        public IFundingRequestHolder FundingRequestHolderservice()
        {
            return new FundingRequestHolder();
        }
        /// <summary>
        /// Returns ObjectiveNumeric class.
        /// </summary>
        public IObjectiveNumeric ObjNumericservice()
        {
            return new ObjectiveNumeric();
        }
        /// <summary>
        /// Returns ObjectiveRating class.
        /// </summary>
        public IObjectiveRating ObjRatingservice()
        {
            return new ObjectiveRating();
        }
        /// <summary>
        /// Returns ObjectiveCondition class.
        /// </summary>
        public IObjectiveCondition Objectiveconditionservice()
        {
            return new ObjectiveCondition();
        }
        /// <summary>
        /// Returns ObjectiveEntityValues class.
        /// </summary>
        public IObjectiveEntityValue ObjEnityvalservice()
        {
            return new ObjectiveEntityValue();
        }
        /// <summary>
        /// Returns BaseEntity class.
        /// </summary>
        public IBaseEntity Baseentityservice()
        {
            return new BaseEntity();
        }

        public IEntity EntityService()
        {
            return new Entity();
        }
        /// <summary>
        /// Returns IFiltersettingsValues class.
        /// </summary>
        public IFiltersettingsValues FilterSettingsValuesService()
        {
            return new FiltersettingsValues();
        }
        /// <summary>
        /// Returns IObjectiveFulfillCondition class.
        /// </summary>
        public IObjectiveFulfillCondtions ObjectiveFulfillmentCondtionValuesService()
        {
            return new ObjectiveFulfillCondtions();
        }


        public ICalenderFulfillCondtions CalenderFulfillmentCondtionValuesService()
        {
            return new CalenderFulfillCondtions();
        }
        /// <summary>
        /// Returns Task class.
        /// </summary>
        public ITask TasksService()
        {
            return new BrandSystems.Marcom.Core.Planning.Task();
        }

        /// <summary>
        /// Returns TaskAttachment class.
        /// </summary>
        public ITaskAttachment TasksAttachmentService()
        {
            return new TaskAttachment();
        }
        #endregion
        /// <summary>
        /// Updating EntityAttribute values
        /// </summary>
        /// <param name="Transaction">The Transaction.</param>
        /// <param name="IList<IAttributeData> attributes">The AttributesData</param>
        /// <param name="enityId">The EnityID</param>
        /// <returns>True (or) False</returns>
        public bool UpdateAttributeData(ITransaction tx, IList<IAttributeData> attributes, int entityId)
        {

            if (attributes != null)
            {
                var entityresult = tx.PersistenceManager.PlanningRepository.Get<EntityDao>(entityId);
                var entityTypeId = entityresult.Typeid;
                string entityName = "AttributeRecord" + entityTypeId + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                IList<IDynamicAttributes> listDynamicAttributes = new List<IDynamicAttributes>();
                Dictionary<string, object> dictAttr = new Dictionary<string, object>();
                IList<Marcom.Dal.Metadata.Model.MultiSelectDao> listMultiselect = new List<Marcom.Dal.Metadata.Model.MultiSelectDao>();
                IList<Marcom.Dal.Metadata.Model.TreeValueDao> listTreeval = new List<Marcom.Dal.Metadata.Model.TreeValueDao>();
                DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                ArrayList entityids = new ArrayList();
                foreach (var obj in attributes)
                {
                    entityids.Add(obj.ID);
                }
                var result = from item in tx.PersistenceManager.MetadataRepository.Query<Marcom.Dal.Metadata.Model.AttributeDao>() where entityids.Contains(item.Id) select item;
                var multiAttrResult = result.Where(a => a.AttributeTypeID == 4);
                //var dynamicAttResult = result.Where(a => a.IsSystemDefined == false && a.AttributeTypeID != 7 && a.AttributeTypeID != 4 && a.AttributeTypeID != 6);
                var dynamicAttResult = result.Where(a => a.AttributeTypeID == 1 || a.AttributeTypeID == 2 || a.AttributeTypeID == 3 || a.AttributeTypeID == 5 || a.AttributeTypeID == 8 || a.AttributeTypeID == 9 || a.AttributeTypeID == 11);
                var treeValResult = result.Where(a => a.AttributeTypeID == 7);
                var treeNodeResult = result.Where(a => a.AttributeTypeID == 6);

                if (multiAttrResult != null)
                {
                    tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.MultiSelectDao>(entityId);
                    var query = attributes.Join(multiAttrResult,
                             post => post.ID,
                             meta => meta.Id,
                             (post, meta) => new { databaseval = post, attrappval = meta });
                    foreach (var at in query)
                    {
                        foreach (var et in at.databaseval.Value)
                        {
                            Marcom.Dal.Metadata.Model.MultiSelectDao mt = new Marcom.Dal.Metadata.Model.MultiSelectDao();
                            mt.Attributeid = at.databaseval.ID;
                            mt.Entityid = entityId;
                            mt.Optionid = Convert.ToInt32(et.databaseval.AttributeID);
                            listMultiselect.Add(mt);
                        }

                    }
                    tx.PersistenceManager.MetadataRepository.Save<Marcom.Dal.Metadata.Model.MultiSelectDao>(listMultiselect);
                }
                if (treeValResult != null)
                {
                    tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.TreeValueDao>(entityId);
                    var query2 = attributes.Join(treeValResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post, attrappval = meta });
                    foreach (var et in query2)
                    {
                        foreach (var objet in et.databaseval.Value)
                        {
                            Marcom.Dal.Metadata.Model.TreeValueDao tre = new Marcom.Dal.Metadata.Model.TreeValueDao();
                            tre.Attributeid = et.databaseval.ID;
                            tre.Entityid = entityId;
                            tre.Nodeid = Convert.ToInt32(objet.databaseval.AttributeValue);
                            listTreeval.Add(tre);
                        }
                    }
                    tx.PersistenceManager.MetadataRepository.Save<Marcom.Dal.Metadata.Model.TreeValueDao>(listTreeval);
                }
                if (treeNodeResult != null)
                {
                    var treenodequery = attributes.Join(treeNodeResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post, attrappval = meta });
                    foreach (var et in treenodequery)
                    {
                        foreach (var objet in et.databaseval.Value)
                        {
                            Marcom.Dal.Metadata.Model.TreeValueDao tre = new Marcom.Dal.Metadata.Model.TreeValueDao();
                            tre.Attributeid = et.databaseval.ID;
                            tre.Entityid = entityId;
                            tre.Nodeid = Convert.ToInt32(objet.databaseval.Value);
                            listTreeval.Add(tre);
                        }
                    }
                    tx.PersistenceManager.MetadataRepository.Save<Marcom.Dal.Metadata.Model.TreeValueDao>(listTreeval);
                }
                //if (dynamicAttResult != null)
                //{
                //    var query3 = attributes.Join(dynamicAttResult,
                //                post => post.ID,
                //                meta => meta.Id,
                //                (post, meta) => new { databaseval = post, attrappval = meta });
                //    foreach (var ab in query3)
                //    {
                //        string key = (string)ab.databaseval.Caption;
                //        int attributedataType = ab.databaseval.TypeID;
                //        object value = "";
                //        switch (attributedataType)
                //        {
                //            case 1:
                //            case 2:
                //                {
                //                    value = Convert.ToString((object)ab.databaseval.Value);
                //                    break;
                //                }
                //            case 3:
                //            case 6:
                //            case 7:
                //                {
                //                    value = Convert.ToInt32((object)ab.databaseval.Value);
                //                    break;
                //                }
                //            case 5:
                //                {
                //                    value = Convert.ToDateTime((object)ab.databaseval.Value);
                //                    break;
                //                }

                //        }
                //        dictAttr.Add(key, value);
                //    }
                //    dynamicdao.Id = entityId;
                //    dynamicdao.Attributes = dictAttr;
                //    tx.PersistenceManager.PlanningRepository.SaveByentity<DynamicAttributesDao>(entityName, dynamicdao);
                //}

                if (dynamicAttResult.Count() > 0)
                {
                    Dictionary<string, dynamic> attr = new Dictionary<string, dynamic>();

                    var dynamicAttrQuery = attributes.Join(dynamicAttResult,
                                post => post.ID,
                                meta => meta.Id,
                                (post, meta) => new { databaseval = post });
                    foreach (var ab in dynamicAttrQuery)
                    {
                        if (ab.databaseval.IsSpecial == true)
                        {
                            BaseEntityDao basedao = new BaseEntityDao();
                            basedao.Id = entityId;
                            basedao = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(entityId);
                            basedao.Name = ab.databaseval.Value;
                            tx.PersistenceManager.PlanningRepository.Save<BaseEntityDao>(basedao);
                        }
                        else
                        {
                            string key = Convert.ToString((int)ab.databaseval.ID);
                            int attributedataType = ab.databaseval.TypeID;
                            // dynamic value = ab.databaseval.Value;
                            dynamic value = null;
                            switch (attributedataType)
                            {
                                case 1:
                                case 2:
                                case 11:
                                    {
                                        value = Convert.ToString((string)ab.databaseval.Value);
                                        break;
                                    }
                                case 3:
                                    {
                                        value = Convert.ToString((int)ab.databaseval.Value);
                                        break;
                                    }
                                case 5:
                                    {
                                        //value = DateTime.ParseExact((string)ab.databaseval.Value, "dd/MM/yyyy", null);
                                        //value = DateTime.Parse((string)ab.databaseval.Value);
                                        value = DateTime.Parse(ab.databaseval.Value != null ? (string)ab.databaseval.Value : "");
                                        break;
                                    }
                                case 8:
                                    {
                                        value = double.Parse((string)ab.databaseval.Value);
                                        break;
                                    }
                                case 9:
                                    {
                                        value = Convert.ToBoolean((int)ab.databaseval.Value);
                                        break;
                                    }

                            }
                            attr.Add(key, value);
                        }
                    }
                    dictAttr = attr;
                    dynamicdao.Id = entityId;
                    dynamicdao.Attributes = dictAttr;
                    tx.PersistenceManager.PlanningRepository.SaveByentity<DynamicAttributesDao>(entityName, dynamicdao);
                }
            }
            return true;
        }

        /// <summary>
        /// Updating EntityAttribute values
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="IList<IAttributeData> attributes">The AttributesData</param>
        /// <param name="enityId">The EnityID</param>
        /// <returns>True (or) False</returns>
        public bool UpdateAttributeData(PlanningManagerProxy proxy, IList<IAttributeData> attributes, int entityId)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                if (attributes != null)
                {
                    var entityresult = tx.PersistenceManager.PlanningRepository.Get<EntityDao>(entityId);
                    var entityTypeId = entityresult.Typeid;
                    string entityName = "AttributeRecord" + entityTypeId;
                    IList<IDynamicAttributes> listDynamicAttributes = new List<IDynamicAttributes>();
                    Dictionary<string, object> dictAttr = new Dictionary<string, object>();
                    IList<Marcom.Dal.Metadata.Model.MultiSelectDao> listMultiselect = new List<Marcom.Dal.Metadata.Model.MultiSelectDao>();
                    IList<Marcom.Dal.Metadata.Model.TreeValueDao> listTreeval = new List<Marcom.Dal.Metadata.Model.TreeValueDao>();
                    DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                    ArrayList entityids = new ArrayList();
                    foreach (var obj in attributes)
                    {
                        entityids.Add(obj.ID);
                    }
                    var result = from item in tx.PersistenceManager.MetadataRepository.Query<Marcom.Dal.Metadata.Model.AttributeDao>() where entityids.Contains(item.Id) select item;
                    var multiAttrResult = result.Where(a => a.AttributeTypeID == 4);
                    var dynamicAttResult = result.Where(a => a.AttributeTypeID == 1 || a.AttributeTypeID == 2 || a.AttributeTypeID == 3 || a.AttributeTypeID == 5 || a.AttributeTypeID == 8 || a.AttributeTypeID == 9);
                    var treeValResult = result.Where(a => a.AttributeTypeID == 7);
                    var treeNodeResult = result.Where(a => a.AttributeTypeID == 6);

                    if (multiAttrResult != null)
                    {
                        tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.MultiSelectDao>(entityId);
                        var query = attributes.Join(multiAttrResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post, attrappval = meta });
                        foreach (var at in query)
                        {
                            foreach (var et in at.databaseval.Value)
                            {
                                Marcom.Dal.Metadata.Model.MultiSelectDao mt = new Marcom.Dal.Metadata.Model.MultiSelectDao();
                                mt.Attributeid = at.databaseval.ID;
                                mt.Entityid = entityId;
                                mt.Optionid = Convert.ToInt32(et.databaseval.AttributeID);
                                listMultiselect.Add(mt);
                            }

                        }
                        tx.PersistenceManager.MetadataRepository.Save<Marcom.Dal.Metadata.Model.MultiSelectDao>(listMultiselect);
                    }
                    if (treeValResult != null)
                    {
                        tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.TreeValueDao>(entityId);
                        var query2 = attributes.Join(treeValResult,
                                     post => post.ID,
                                     meta => meta.Id,
                                     (post, meta) => new { databaseval = post, attrappval = meta });
                        foreach (var et in query2)
                        {
                            foreach (var objet in et.databaseval.Value)
                            {
                                Marcom.Dal.Metadata.Model.TreeValueDao tre = new Marcom.Dal.Metadata.Model.TreeValueDao();
                                tre.Attributeid = et.databaseval.ID;
                                tre.Entityid = entityId;
                                tre.Nodeid = Convert.ToInt32(objet.databaseval.AttributeValue);
                                listTreeval.Add(tre);
                            }
                        }
                        tx.PersistenceManager.MetadataRepository.Save<Marcom.Dal.Metadata.Model.TreeValueDao>(listTreeval);
                    }
                    if (treeNodeResult != null)
                    {
                        var treenodequery = attributes.Join(treeNodeResult,
                                     post => post.ID,
                                     meta => meta.Id,
                                     (post, meta) => new { databaseval = post, attrappval = meta });
                        foreach (var et in treenodequery)
                        {
                            foreach (var objet in et.databaseval.Value)
                            {
                                Marcom.Dal.Metadata.Model.TreeValueDao tre = new Marcom.Dal.Metadata.Model.TreeValueDao();
                                tre.Attributeid = et.databaseval.ID;
                                tre.Entityid = entityId;
                                tre.Nodeid = Convert.ToInt32(objet.databaseval.Value);
                                listTreeval.Add(tre);
                            }
                        }
                        tx.PersistenceManager.MetadataRepository.Save<Marcom.Dal.Metadata.Model.TreeValueDao>(listTreeval);
                    }
                    if (dynamicAttResult != null)
                    {
                        var query3 = attributes.Join(dynamicAttResult,
                                    post => post.ID,
                                    meta => meta.Id,
                                    (post, meta) => new { databaseval = post, attrappval = meta });
                        foreach (var ab in query3)
                        {
                            string key = (string)ab.databaseval.Caption;
                            int attributedataType = ab.databaseval.TypeID;
                            object value = "";
                            switch (attributedataType)
                            {
                                case 1:
                                case 2:
                                    {
                                        value = Convert.ToString((object)ab.databaseval.Value);
                                        break;
                                    }
                                case 3:
                                    {
                                        value = (int)ab.databaseval.Value;
                                        break;
                                    }
                                case 5:
                                    {
                                        value = Convert.ToDateTime((object)ab.databaseval.Value);
                                        break;
                                    }
                                case 8:
                                    {
                                        value = Convert.ToDouble((object)ab.databaseval.Value);
                                        break;
                                    }
                                case 9:
                                    {
                                        value = Convert.ToBoolean((object)ab.databaseval.Value);
                                        break;
                                    }

                            }
                            dictAttr.Add(key, value);
                        }
                        dynamicdao.Id = entityId;
                        dynamicdao.Attributes = dictAttr;
                        tx.PersistenceManager.PlanningRepository.SaveByentity<DynamicAttributesDao>(entityName, dynamicdao);
                    }

                }
                tx.Commit();
            }
            return true;
        }
        /// <summary>
        /// Gets the attributes details by entityID.
        /// </summary>
        /// <param name="Id">The entityId.</param>
        /// <returns>
        /// Ilist
        /// </returns>
        public IList<IAttributeData> GetEntityAttributesDetails(PlanningManagerProxy proxy, int entityId)
        {

            IList<IAttributeData> attributesWithValues = new List<IAttributeData>();
            IList<ITreeDropDownLabel> droplabel;
            IList<ITreeDropDownCaption> itreeCaption = new List<ITreeDropDownCaption>();
            AttributeData attributedate;
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    //var allattributes = tx.PersistenceManager.PlanningRepository.GetAll<BrandSystems.Marcom.Dal.Metadata.Model.AttributeDao>();
                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == entityId
                                     select item).FirstOrDefault();
                    IList<EntityPeriod> listentPeriods = new List<EntityPeriod>();
                    foreach (var aobe in entityObj.Periods)
                    {
                        EntityPeriod entpr = new EntityPeriod();
                        entpr.Id = aobe.Id;
                        entpr.Entityid = aobe.Entityid;
                        entpr.Startdate = aobe.Startdate;
                        entpr.EndDate = aobe.EndDate;
                        entpr.Description = aobe.Description != "" ? aobe.Description : "-";
                        entpr.SortOrder = aobe.SortOrder;
                        listentPeriods.Add(entpr);
                    }
                    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    XDocument docx = XDocument.Load(xmlpath);
                    int[] notAllowedAttrs = { (int)SystemDefinedAttributes.Name, 81, 82, 83, 84 };
                    var rddd = (from EntityAttrRel in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation")
                                join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute") on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) equals Convert.ToInt32(Attr.Element("ID").Value)
                                where Convert.ToInt32(EntityAttrRel.Element("EntityTypeID").Value) == entityObj.Typeid && !notAllowedAttrs.Contains(Convert.ToInt32(Attr.Element("ID").Value))
                                orderby Convert.ToInt32(EntityAttrRel.Element("SortOrder").Value)
                                select new
                                {
                                    ID = Convert.ToInt16(Attr.Element("ID").Value),
                                    Caption = EntityAttrRel.Element("Caption").Value,
                                    AttributeTypeID = Convert.ToInt16(Attr.Element("AttributeTypeID").Value),
                                    Description = Attr.Element("Description").Value,
                                    IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSystemDefined").Value)),
                                    IsSpecial = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSpecial").Value)),
                                    InheritFromParent = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("InheritFromParent").Value)),
                                    ChooseFromParent = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("ChooseFromParentOnly").Value)),
                                    IsReadOnly = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("IsReadOnly").Value))
                                }).ToList();

                    var attributesdetails = rddd;
                    //var multiSelectValuedao = (from item in tx.PersistenceManager.PlanningRepository.Query<MultiSelectDao>()
                    //                           where item.Entityid == entityId
                    //                           select item).ToList();

                    List<TreeValueDao> treevaluedao = new List<TreeValueDao>();
                    List<int> treevalues = new List<int>();

                    List<TreeValueDao> multiselecttreevalues = new List<TreeValueDao>();
                    List<int> temptreevalues = new List<int>();

                    var entityName = GetEntityName(tx, entityId, entityObj.Version);
                    var dynamicvalues = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => a.Id == entityId).Select(a => a.Attributes).SingleOrDefault();

                    IList<IAttributeData> entityUserAttrVal = new List<IAttributeData>();
                    entityUserAttrVal = GetEntityAttributesDetailsUserDetails(proxy, proxy.MarcomManager.User.Id);

                    foreach (var val in attributesdetails)
                    {


                        AttributesList attypeid = (AttributesList)val.AttributeTypeID;
                        if (Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID || Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID)
                        {
                            treevaluedao = new List<TreeValueDao>();
                            treevaluedao = tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>().Where(a => a.Entityid == entityId && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                            treevalues = new List<int>();
                            treevalues = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                        }
                        if (Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID || Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID || Convert.ToInt32(AttributesList.DropDownTreePricing) == val.AttributeTypeID || Convert.ToInt32(AttributesList.DropDownTreePricing) == val.AttributeTypeID)
                        {
                            multiselecttreevalues = new List<TreeValueDao>();
                            multiselecttreevalues = tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>().Where(a => a.Entityid == entityId && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                            temptreevalues = new List<int>();
                            temptreevalues = (from treevalue in multiselecttreevalues where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                        }
                        switch (attypeid)
                        {
                            case AttributesList.TextSingleLine:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                if (val.IsSpecial == true && val.ID == Convert.ToInt32(SystemDefinedAttributes.Name))
                                {
                                    attributedate.Caption = Enum.GetName(typeof(SystemDefinedAttributes), Convert.ToInt32(SystemDefinedAttributes.Name)) == "" ? "-" : Enum.GetName(typeof(SystemDefinedAttributes), Convert.ToInt32(SystemDefinedAttributes.Name));
                                    attributedate.Value = (string)entityObj.Name;
                                }
                                else
                                {
                                    attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                                    attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];
                                }
                                attributedate.IsSpecial = val.IsSpecial;

                                if ((entityUserAttrVal.Where(a => a.ID == val.ID).Select(a => a.Value).ToList().Count) > 0)
                                    attributedate.IsReadOnly = (bool)entityUserAttrVal.Where(a => a.ID == val.ID).Select(a => a.IsReadOnly).FirstOrDefault();
                                else
                                    attributedate.IsReadOnly = val.IsReadOnly;

                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.TextMultiLine:
                                attributedate = new AttributeData();
                                attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];
                                attributedate.IsSpecial = val.IsSpecial;

                                if ((entityUserAttrVal.Where(a => a.ID == val.ID).Select(a => a.Value).ToList().Count) > 0)
                                    attributedate.IsReadOnly = (bool)entityUserAttrVal.Where(a => a.ID == val.ID).Select(a => a.IsReadOnly).FirstOrDefault();
                                else
                                    attributedate.IsReadOnly = val.IsReadOnly;

                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.ListSingleSelection:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.IsSpecial = val.IsSpecial;
                                if (val.IsSpecial == true)
                                {
                                    if (val.AttributeTypeID == 3)
                                    {
                                        //attributedate.Value = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>() where item.EntityTypeID == entityObj.Typeid && item.Roleid == 1 select item.Userid).First();
                                        var currentRole = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == entityObj.Typeid && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                        attributedate.Value = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where item.Entityid == entityId && item.Roleid == currentRole.ID select item.Userid).First();
                                        int value = Convert.ToInt32(attributedate.Value);
                                        var singleCaption = (from item in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where item.Id == value select item.FirstName + " " + item.LastName);
                                        attributedate.Caption = singleCaption;
                                    }
                                }
                                else if (val.IsSpecial == false)
                                {
                                    if (dynamicvalues == null)
                                    {
                                        attributedate.Value = 0;
                                        attributedate.Caption = "";
                                    }
                                    else
                                    {
                                        attributedate.Value = dynamicvalues[val.ID.ToString()] == null ? 0 : (dynamic)dynamicvalues[val.ID.ToString()];

                                        var singleCaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where item.Id == Convert.ToInt32(dynamicvalues[val.ID.ToString()]) select item.Caption).ToList();
                                        attributedate.Caption = singleCaption;
                                    }
                                }
                                if ((entityUserAttrVal.Where(a => a.ID == val.ID).Select(a => a.Value).ToList().Count) > 0)
                                    attributedate.IsReadOnly = (bool)entityUserAttrVal.Where(a => a.ID == val.ID).Select(a => a.IsReadOnly).FirstOrDefault();
                                else
                                    attributedate.IsReadOnly = val.IsReadOnly;
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.ListMultiSelection:
                                var multiSelectValuedao = (from item in tx.PersistenceManager.PlanningRepository.Query<MultiSelectDao>()
                                                           where item.Entityid == entityId
                                                           select item).ToList();
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.TypeID = val.AttributeTypeID;
                                var optionIDs = (from multiValues in multiSelectValuedao where multiValues.Attributeid == val.ID select multiValues.Optionid).ToArray();
                                var optioncaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where optionIDs.Contains(item.Id) select item.Caption).ToList();
                                string Multicaptionresults = string.Join<string>(", ", optioncaption);
                                attributedate.Caption = Multicaptionresults;
                                attributedate.Value = optionIDs;
                                if ((entityUserAttrVal.Where(a => a.ID == val.ID).Select(a => a.Value).ToList().Count) > 0)
                                    attributedate.IsReadOnly = (bool)entityUserAttrVal.Where(a => a.ID == val.ID).Select(a => a.IsReadOnly).FirstOrDefault();
                                else
                                    attributedate.IsReadOnly = val.IsReadOnly;

                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.DateTime:
                                attributedate = new AttributeData();
                                attributedate.Caption = val.Caption.Trim();
                                attributedate.ID = val.ID;
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Value = null;

                                if (dynamicvalues != null)
                                    if ((object)dynamicvalues[val.ID.ToString()] != null)
                                        attributedate.Value = (object)dynamicvalues[val.ID.ToString()];

                                attributedate.IsReadOnly = val.IsReadOnly;

                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.DropDownTree:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.IsSpecial = val.IsSpecial;
                                droplabel = new List<ITreeDropDownLabel>();

                                var treeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();
                                List<int> dropdownResults = new List<int>();
                                if (treevaluedao.Count > 0)
                                {
                                    foreach (var lvlObj in treevaluedao)
                                    {
                                        treeLevelList.Remove(treeLevelList.Where(a => a.Level == lvlObj.Level).FirstOrDefault());
                                    }
                                    var entityTreeLevelList = treevaluedao.Select(a => a.Level).ToList();
                                    dropdownResults = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                                    var nodes = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where dropdownResults.Contains(item.Id) select item.Level);
                                    var distinctNodes = nodes.Distinct();
                                    int lastRow = 0;
                                    foreach (var dropnode in distinctNodes)
                                    {
                                        ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                        ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                        var nodelevels = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>() where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                        treecaption.Level = nodelevels.Level;
                                        dropdownlabel.Level = nodelevels.Level;
                                        dropdownlabel.Label = nodelevels.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                        if (lastRow == distinctNodes.Count() - 1)
                                        {
                                            foreach (var levelObj in treeLevelList)
                                            {
                                                ITreeDropDownLabel dropdownlabel2 = new TreeDropDownLabel();
                                                ITreeDropDownCaption treecaption2 = new TreeDropDownCaption();
                                                treecaption2.Level = levelObj.Level;
                                                dropdownlabel2.Level = levelObj.Level;
                                                dropdownlabel2.Label = levelObj.LevelName.Trim();
                                                itreeCaption.Add(treecaption2);
                                                droplabel.Add(dropdownlabel2);
                                            }
                                        }
                                        lastRow++;
                                    }
                                    attributedate.Lable = droplabel;
                                    var captionlist = from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where treevalues.Contains(item.Id) orderby item.Level select item.Caption;
                                    string result = string.Join<string>(",", captionlist);
                                    attributedate.Caption = result;
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = treevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                else
                                {
                                    foreach (var levelObj in treeLevelList)
                                    {
                                        ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                        ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                        treecaption.Level = levelObj.Level;
                                        dropdownlabel.Level = levelObj.Level;
                                        dropdownlabel.Label = levelObj.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                    }
                                    attributedate.Lable = droplabel;
                                    attributedate.Caption = "-";
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = treevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.Tree:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.IsSpecial = val.IsSpecial;
                                var treeCaptionList = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where treevalues.Contains(item.Id) select item.Caption).ToList();
                                string treeCaptionResult = string.Join<string>(", ", treeCaptionList);
                                attributedate.Caption = treeCaptionResult;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Value = treevalues;
                                attributedate.IsReadOnly = val.IsReadOnly;
                                if (!val.ChooseFromParent)
                                    attributedate.tree = proxy.MarcomManager.MetadataManager.GetAttributeTreeNode(val.ID, entityId);
                                else
                                    attributedate.tree = proxy.MarcomManager.MetadataManager.GetDetailAttributeTreeNodeFromParent(val.ID, entityId, val.ChooseFromParent);
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.DropDownTreePricing:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Value = treevalues;
                                attributedate.IsReadOnly = val.IsReadOnly;
                                if (val.ChooseFromParent)
                                    attributedate.DropDownPricing = proxy.MarcomManager.MetadataManager.GetDropDownTreePricingObjectFromParentDetail(val.ID, val.InheritFromParent, true, entityId, entityObj.Parentid);
                                else
                                    attributedate.DropDownPricing = proxy.MarcomManager.MetadataManager.GetDropDownTreePricingObjectDetail(val.ID, val.InheritFromParent, false, entityId, 0);
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.Period:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.Caption = val.Caption;
                                attributedate.Lable = val.Caption;
                                var periods = listentPeriods;
                                //var periods = entityObj.Periods;
                                if (periods.Count() > 0)
                                    attributedate.Value = periods.ToList();
                                else
                                    attributedate.Value = "-";
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.Uploader:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.IsSpecial = val.IsSpecial;

                                if (dynamicvalues != null)
                                {
                                    attributedate.Caption = dynamicvalues[val.ID.ToString()] == null ? "No thumnail present" : (dynamic)dynamicvalues[val.ID.ToString()];
                                    attributedate.Value = dynamicvalues[val.ID.ToString()] == null ? "" : (dynamic)dynamicvalues[val.ID.ToString()];
                                }
                                else
                                {
                                    attributedate.Caption = "No thumnail present";
                                    attributedate.Value = "";
                                }
                                attributedate.Lable = val.Caption.Trim();

                                attributedate.IsReadOnly = val.IsReadOnly;

                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.TreeMultiSelection:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.IsReadOnly = val.IsReadOnly;

                                droplabel = new List<ITreeDropDownLabel>();

                                //var multiselecttreeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();

                                var multiselecttreeLevelList = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).Where(a => a.AttributeID == val.ID).ToList();


                                List<int> multiselectdropdownResults = new List<int>();
                                if (multiselecttreevalues.Count > 0)
                                {
                                    foreach (var lvlObj in multiselecttreevalues)
                                    {
                                        multiselecttreeLevelList.Remove(multiselecttreeLevelList.Where(a => a.Level == lvlObj.Level).FirstOrDefault());
                                    }
                                    var entityTreeLevelList = multiselecttreevalues.Select(a => a.Level).ToList();
                                    multiselectdropdownResults = (from treevalue in multiselecttreevalues where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                                    //var nodes = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where multiselectdropdownResults.Contains(item.Id) select item.Level);
                                    var nodes = (from item in tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath) where multiselectdropdownResults.Contains(item.Id) select item.Level);
                                    var distinctNodes = nodes.Distinct();
                                    int lastRow = 0;
                                    foreach (var dropnode in distinctNodes)
                                    {
                                        ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                        ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                        //var nodelevels = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>() where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                        var nodelevels = (from item in tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath) where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                        treecaption.Level = nodelevels.Level;
                                        dropdownlabel.Level = nodelevels.Level;
                                        dropdownlabel.Label = nodelevels.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                        if (lastRow == distinctNodes.Count() - 1)
                                        {
                                            foreach (var levelObj in multiselecttreeLevelList)
                                            {
                                                ITreeDropDownLabel dropdownlabel2 = new TreeDropDownLabel();
                                                ITreeDropDownCaption treecaption2 = new TreeDropDownCaption();
                                                treecaption2.Level = levelObj.Level;
                                                dropdownlabel2.Level = levelObj.Level;
                                                dropdownlabel2.Label = levelObj.LevelName.Trim();
                                                itreeCaption.Add(treecaption2);
                                                droplabel.Add(dropdownlabel2);
                                            }
                                        }
                                        lastRow++;
                                    }
                                    attributedate.Lable = droplabel;
                                    //attributedate.Caption = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where temptreevalues.Contains(item.Id) orderby item.Level select item.Caption).ToList();
                                    attributedate.Caption = (from item in tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath) where temptreevalues.Contains(item.Id) orderby item.Level select item.Caption).ToList();
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = multiselecttreevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                else
                                {
                                    foreach (var levelObj in multiselecttreeLevelList)
                                    {
                                        ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                        ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                        treecaption.Level = levelObj.Level;
                                        dropdownlabel.Level = levelObj.Level;
                                        dropdownlabel.Label = levelObj.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                    }
                                    attributedate.Lable = droplabel;
                                    attributedate.Caption = "-";
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = multiselecttreevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.TextMoney:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                                attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];

                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.IsReadOnly = val.IsReadOnly;

                                attributesWithValues.Add(attributedate);
                                break;

                            default:

                                break;
                        }
                    }
                    tx.Commit();
                }

                return attributesWithValues;
            }
            catch (Exception ex)
            {

            }
            return null;
        }

        /// <summary>
        /// Gets the attributes details by entityID.
        /// </summary>
        /// <param name="Id">The entityId.</param>
        /// <returns>
        /// Ilist
        /// </returns>
        public IList<IAttributeData> GetGeneralEntityAttributesDetails(PlanningManagerProxy proxy, ITransaction tx, int entityId)
        {

            IList<IAttributeData> attributesWithValues = new List<IAttributeData>();
            IList<ITreeDropDownLabel> droplabel;
            IList<ITreeDropDownCaption> itreeCaption = new List<ITreeDropDownCaption>();
            AttributeData attributedate;
            try
            {



                //var allattributes = tx.PersistenceManager.PlanningRepository.GetAll<BrandSystems.Marcom.Dal.Metadata.Model.AttributeDao>();
                var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                 where item.Id == entityId
                                 select item).FirstOrDefault();
                IList<EntityPeriod> listentPeriods = new List<EntityPeriod>();
                foreach (var aobe in entityObj.Periods)
                {
                    EntityPeriod entpr = new EntityPeriod();
                    entpr.Id = aobe.Id;
                    entpr.Entityid = aobe.Entityid;
                    entpr.Startdate = aobe.Startdate;
                    entpr.EndDate = aobe.EndDate;
                    entpr.Description = aobe.Description != "" ? aobe.Description : "-";
                    entpr.SortOrder = aobe.SortOrder;
                    listentPeriods.Add(entpr);
                }
                string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                XDocument docx = XDocument.Load(xmlpath);
                int[] notAllowedAttrs = { (int)SystemDefinedAttributes.Name, 81, 82, 83, 84 };
                var rddd = (from EntityAttrRel in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation")
                            join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute") on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) equals Convert.ToInt32(Attr.Element("ID").Value)
                            where Convert.ToInt32(EntityAttrRel.Element("EntityTypeID").Value) == entityObj.Typeid && !notAllowedAttrs.Contains(Convert.ToInt32(Attr.Element("ID").Value))
                            orderby Convert.ToInt32(EntityAttrRel.Element("SortOrder").Value)
                            select new
                            {
                                ID = Convert.ToInt16(Attr.Element("ID").Value),
                                Caption = EntityAttrRel.Element("Caption").Value,
                                AttributeTypeID = Convert.ToInt16(Attr.Element("AttributeTypeID").Value),
                                Description = Attr.Element("Description").Value,
                                IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSystemDefined").Value)),
                                IsSpecial = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSpecial").Value)),
                                InheritFromParent = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("InheritFromParent").Value)),
                                ChooseFromParent = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("ChooseFromParentOnly").Value)),
                                IsReadOnly = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("IsReadOnly").Value))
                            }).ToList();

                var attributesdetails = rddd;


                List<TreeValueDao> treevaluedao = new List<TreeValueDao>();
                List<int> treevalues = new List<int>();

                List<TreeValueDao> multiselecttreevalues = new List<TreeValueDao>();
                List<int> temptreevalues = new List<int>();

                var entityName = GetEntityName(tx, entityId, entityObj.Version);
                var dynamicvalues = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => a.Id == entityId).Select(a => a.Attributes).SingleOrDefault();


                foreach (var val in attributesdetails)
                {


                    AttributesList attypeid = (AttributesList)val.AttributeTypeID;
                    if (Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID || Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID)
                    {
                        treevaluedao = new List<TreeValueDao>();
                        treevaluedao = tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>().Where(a => a.Entityid == entityId && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                        treevalues = new List<int>();
                        treevalues = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                    }
                    if (Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID || Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID || Convert.ToInt32(AttributesList.DropDownTreePricing) == val.AttributeTypeID || Convert.ToInt32(AttributesList.DropDownTreePricing) == val.AttributeTypeID)
                    {
                        multiselecttreevalues = new List<TreeValueDao>();
                        multiselecttreevalues = tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>().Where(a => a.Entityid == entityId && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                        temptreevalues = new List<int>();
                        temptreevalues = (from treevalue in multiselecttreevalues where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                    }
                    switch (attypeid)
                    {
                        case AttributesList.TextSingleLine:
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.TypeID = val.AttributeTypeID;
                            attributedate.Lable = val.Caption.Trim();
                            if (val.IsSpecial == true && val.ID == Convert.ToInt32(SystemDefinedAttributes.Name))
                            {
                                attributedate.Caption = Enum.GetName(typeof(SystemDefinedAttributes), Convert.ToInt32(SystemDefinedAttributes.Name)) == "" ? "-" : Enum.GetName(typeof(SystemDefinedAttributes), Convert.ToInt32(SystemDefinedAttributes.Name));
                                attributedate.Value = (string)entityObj.Name;
                            }
                            else
                            {
                                attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                                attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];
                            }
                            attributedate.IsSpecial = val.IsSpecial;



                            attributesWithValues.Add(attributedate);
                            break;

                        case AttributesList.TextMultiLine:
                            attributedate = new AttributeData();
                            attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                            attributedate.ID = val.ID;
                            attributedate.TypeID = val.AttributeTypeID;
                            attributedate.Lable = val.Caption.Trim();
                            attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];
                            attributedate.IsSpecial = val.IsSpecial;


                            attributesWithValues.Add(attributedate);
                            break;

                        case AttributesList.ListSingleSelection:
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.TypeID = val.AttributeTypeID;
                            attributedate.Lable = val.Caption.Trim();
                            attributedate.IsSpecial = val.IsSpecial;
                            if (val.IsSpecial == true)
                            {
                                if (val.AttributeTypeID == 3)
                                {
                                    var currentRole = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == entityObj.Typeid && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                    attributedate.Value = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where item.Entityid == entityId && item.Roleid == currentRole.ID select item.Userid).First();
                                    int value = Convert.ToInt32(attributedate.Value);
                                    var singleCaption = (from item in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where item.Id == value select item.FirstName + " " + item.LastName);
                                    attributedate.Caption = singleCaption;
                                }
                            }
                            else if (val.IsSpecial == false)
                            {
                                if (dynamicvalues == null)
                                {
                                    attributedate.Value = 0;
                                    attributedate.Caption = "";
                                }
                                else
                                {
                                    attributedate.Value = dynamicvalues[val.ID.ToString()] == null ? 0 : (dynamic)dynamicvalues[val.ID.ToString()];

                                    var singleCaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where item.Id == Convert.ToInt32(dynamicvalues[val.ID.ToString()]) select item.Caption).ToList();
                                    attributedate.Caption = singleCaption;
                                }
                            }

                            attributesWithValues.Add(attributedate);
                            break;

                        case AttributesList.ListMultiSelection:
                            var multiSelectValuedao = (from item in tx.PersistenceManager.PlanningRepository.Query<MultiSelectDao>()
                                                       where item.Entityid == entityId
                                                       select item).ToList();
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.Lable = val.Caption.Trim();
                            attributedate.IsSpecial = val.IsSpecial;
                            attributedate.TypeID = val.AttributeTypeID;
                            var optionIDs = (from multiValues in multiSelectValuedao where multiValues.Attributeid == val.ID select multiValues.Optionid).ToArray();
                            var optioncaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where optionIDs.Contains(item.Id) select item.Caption).ToList();
                            string Multicaptionresults = string.Join<string>(", ", optioncaption);
                            attributedate.Caption = Multicaptionresults;
                            attributedate.Value = optionIDs;

                            attributesWithValues.Add(attributedate);
                            break;

                        case AttributesList.DateTime:
                            attributedate = new AttributeData();
                            attributedate.Caption = val.Caption.Trim();
                            attributedate.ID = val.ID;
                            attributedate.IsSpecial = val.IsSpecial;
                            attributedate.TypeID = val.AttributeTypeID;
                            attributedate.Lable = val.Caption.Trim(); ;
                            if ((object)dynamicvalues[val.ID.ToString()] != null)
                                attributedate.Value = (object)dynamicvalues[val.ID.ToString()];
                            else
                                attributedate.Value = null;
                            attributedate.IsReadOnly = val.IsReadOnly;

                            attributesWithValues.Add(attributedate);
                            break;

                        case AttributesList.DropDownTree:
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.IsSpecial = val.IsSpecial;
                            droplabel = new List<ITreeDropDownLabel>();

                            var treeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();
                            List<int> dropdownResults = new List<int>();
                            if (treevaluedao.Count > 0)
                            {
                                foreach (var lvlObj in treevaluedao)
                                {
                                    treeLevelList.Remove(treeLevelList.Where(a => a.Level == lvlObj.Level).FirstOrDefault());
                                }
                                var entityTreeLevelList = treevaluedao.Select(a => a.Level).ToList();
                                dropdownResults = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                                var nodes = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where dropdownResults.Contains(item.Id) select item.Level);
                                var distinctNodes = nodes.Distinct();
                                int lastRow = 0;
                                foreach (var dropnode in distinctNodes)
                                {
                                    ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                    ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                    var nodelevels = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>() where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                    treecaption.Level = nodelevels.Level;
                                    dropdownlabel.Level = nodelevels.Level;
                                    dropdownlabel.Label = nodelevels.LevelName.Trim();
                                    itreeCaption.Add(treecaption);
                                    droplabel.Add(dropdownlabel);
                                    if (lastRow == distinctNodes.Count() - 1)
                                    {
                                        foreach (var levelObj in treeLevelList)
                                        {
                                            ITreeDropDownLabel dropdownlabel2 = new TreeDropDownLabel();
                                            ITreeDropDownCaption treecaption2 = new TreeDropDownCaption();
                                            treecaption2.Level = levelObj.Level;
                                            dropdownlabel2.Level = levelObj.Level;
                                            dropdownlabel2.Label = levelObj.LevelName.Trim();
                                            itreeCaption.Add(treecaption2);
                                            droplabel.Add(dropdownlabel2);
                                        }
                                    }
                                    lastRow++;
                                }
                                attributedate.Lable = droplabel;
                                var captionlist = from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where treevalues.Contains(item.Id) orderby item.Level select item.Caption;
                                string result = string.Join<string>(",", captionlist);
                                attributedate.Caption = result;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Value = treevalues;
                                attributedate.IsInheritFromParent = val.InheritFromParent;
                                attributedate.IsChooseFromParent = val.ChooseFromParent;
                            }
                            else
                            {
                                foreach (var levelObj in treeLevelList)
                                {
                                    ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                    ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                    treecaption.Level = levelObj.Level;
                                    dropdownlabel.Level = levelObj.Level;
                                    dropdownlabel.Label = levelObj.LevelName.Trim();
                                    itreeCaption.Add(treecaption);
                                    droplabel.Add(dropdownlabel);
                                }
                                attributedate.Lable = droplabel;
                                attributedate.Caption = "-";
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Value = treevalues;
                                attributedate.IsInheritFromParent = val.InheritFromParent;
                                attributedate.IsChooseFromParent = val.ChooseFromParent;
                            }
                            attributedate.IsReadOnly = val.IsReadOnly;
                            attributesWithValues.Add(attributedate);
                            break;

                        case AttributesList.Tree:
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.TypeID = val.AttributeTypeID;
                            attributedate.IsSpecial = val.IsSpecial;
                            var treeCaptionList = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where treevalues.Contains(item.Id) select item.Caption).ToList();
                            string treeCaptionResult = string.Join<string>(", ", treeCaptionList);
                            attributedate.Caption = treeCaptionResult;
                            attributedate.Lable = val.Caption.Trim();
                            attributedate.Value = treevalues;
                            attributedate.IsReadOnly = val.IsReadOnly;
                            if (!val.ChooseFromParent)
                                attributedate.tree = proxy.MarcomManager.MetadataManager.GetAttributeTreeNode(val.ID, entityId);
                            else
                                attributedate.tree = proxy.MarcomManager.MetadataManager.GetDetailAttributeTreeNodeFromParent(val.ID, entityId, val.ChooseFromParent);
                            attributesWithValues.Add(attributedate);
                            break;

                        case AttributesList.DropDownTreePricing:
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.TypeID = val.AttributeTypeID;
                            attributedate.IsSpecial = val.IsSpecial;
                            attributedate.Lable = val.Caption.Trim();
                            attributedate.Value = treevalues;
                            attributedate.IsReadOnly = val.IsReadOnly;
                            if (val.ChooseFromParent)
                                attributedate.DropDownPricing = proxy.MarcomManager.MetadataManager.GetDropDownTreePricingObjectFromParentDetail(val.ID, val.InheritFromParent, true, entityId, entityObj.Parentid);
                            else
                                attributedate.DropDownPricing = proxy.MarcomManager.MetadataManager.GetDropDownTreePricingObjectDetail(val.ID, val.InheritFromParent, false, entityId, 0);
                            attributesWithValues.Add(attributedate);
                            break;

                        case AttributesList.Period:
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.TypeID = val.AttributeTypeID;
                            attributedate.IsSpecial = val.IsSpecial;
                            attributedate.Caption = val.Caption;
                            attributedate.Lable = val.Caption;
                            var periods = listentPeriods;
                            //var periods = entityObj.Periods;
                            if (periods.Count() > 0)
                                attributedate.Value = periods.ToList();
                            else
                                attributedate.Value = "-";
                            attributedate.IsReadOnly = val.IsReadOnly;
                            attributesWithValues.Add(attributedate);
                            break;
                        case AttributesList.Uploader:
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.TypeID = val.AttributeTypeID;
                            attributedate.IsSpecial = val.IsSpecial;

                            if (dynamicvalues != null)
                            {
                                attributedate.Caption = dynamicvalues[val.ID.ToString()] == null ? "No thumnail present" : (dynamic)dynamicvalues[val.ID.ToString()];
                                attributedate.Value = dynamicvalues[val.ID.ToString()] == null ? "" : (dynamic)dynamicvalues[val.ID.ToString()];
                            }
                            else
                            {
                                attributedate.Caption = "No thumnail present";
                                attributedate.Value = "";
                            }
                            attributedate.Lable = val.Caption.Trim();

                            attributedate.IsReadOnly = val.IsReadOnly;

                            attributesWithValues.Add(attributedate);
                            break;
                        case AttributesList.TreeMultiSelection:
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.IsSpecial = val.IsSpecial;
                            attributedate.IsReadOnly = val.IsReadOnly;

                            droplabel = new List<ITreeDropDownLabel>();

                            //var multiselecttreeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();

                            var multiselecttreeLevelList = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).Where(a => a.AttributeID == val.ID).ToList();


                            List<int> multiselectdropdownResults = new List<int>();
                            if (multiselecttreevalues.Count > 0)
                            {
                                foreach (var lvlObj in multiselecttreevalues)
                                {
                                    multiselecttreeLevelList.Remove(multiselecttreeLevelList.Where(a => a.Level == lvlObj.Level).FirstOrDefault());
                                }
                                var entityTreeLevelList = multiselecttreevalues.Select(a => a.Level).ToList();
                                multiselectdropdownResults = (from treevalue in multiselecttreevalues where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                                //var nodes = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where multiselectdropdownResults.Contains(item.Id) select item.Level);
                                var nodes = (from item in tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath) where multiselectdropdownResults.Contains(item.Id) select item.Level);
                                var distinctNodes = nodes.Distinct();
                                int lastRow = 0;
                                foreach (var dropnode in distinctNodes)
                                {
                                    ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                    ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                    //var nodelevels = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>() where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                    var nodelevels = (from item in tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath) where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                    treecaption.Level = nodelevels.Level;
                                    dropdownlabel.Level = nodelevels.Level;
                                    dropdownlabel.Label = nodelevels.LevelName.Trim();
                                    itreeCaption.Add(treecaption);
                                    droplabel.Add(dropdownlabel);
                                    if (lastRow == distinctNodes.Count() - 1)
                                    {
                                        foreach (var levelObj in multiselecttreeLevelList)
                                        {
                                            ITreeDropDownLabel dropdownlabel2 = new TreeDropDownLabel();
                                            ITreeDropDownCaption treecaption2 = new TreeDropDownCaption();
                                            treecaption2.Level = levelObj.Level;
                                            dropdownlabel2.Level = levelObj.Level;
                                            dropdownlabel2.Label = levelObj.LevelName.Trim();
                                            itreeCaption.Add(treecaption2);
                                            droplabel.Add(dropdownlabel2);
                                        }
                                    }
                                    lastRow++;
                                }
                                attributedate.Lable = droplabel;
                                //attributedate.Caption = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where temptreevalues.Contains(item.Id) orderby item.Level select item.Caption).ToList();
                                attributedate.Caption = (from item in tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath) where temptreevalues.Contains(item.Id) orderby item.Level select item.Caption).ToList();
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Value = multiselecttreevalues;
                                attributedate.IsInheritFromParent = val.InheritFromParent;
                                attributedate.IsChooseFromParent = val.ChooseFromParent;
                            }
                            else
                            {
                                foreach (var levelObj in multiselecttreeLevelList)
                                {
                                    ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                    ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                    treecaption.Level = levelObj.Level;
                                    dropdownlabel.Level = levelObj.Level;
                                    dropdownlabel.Label = levelObj.LevelName.Trim();
                                    itreeCaption.Add(treecaption);
                                    droplabel.Add(dropdownlabel);
                                }
                                attributedate.Lable = droplabel;
                                attributedate.Caption = "-";
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Value = multiselecttreevalues;
                                attributedate.IsInheritFromParent = val.InheritFromParent;
                                attributedate.IsChooseFromParent = val.ChooseFromParent;
                            }
                            attributesWithValues.Add(attributedate);
                            break;

                        case AttributesList.TextMoney:
                            attributedate = new AttributeData();
                            attributedate.ID = val.ID;
                            attributedate.TypeID = val.AttributeTypeID;
                            attributedate.Lable = val.Caption.Trim();
                            attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                            attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];

                            attributedate.IsSpecial = val.IsSpecial;
                            attributedate.IsReadOnly = val.IsReadOnly;

                            attributesWithValues.Add(attributedate);
                            break;

                        default:

                            break;
                    }
                }

                return attributesWithValues;
            }
            catch (Exception ex)
            {

            }
            return null;
        }

        /// <summary>
        /// Gets the EntityName  by entityID.
        /// </summary>
        /// <param name="Id">The entityId.</param>
        /// <returns>
        /// EntityName
        /// </returns>
        public string GetEntityName(ITransaction tx, int entityId, int mappingFileVersion = 0)
        {
            string entityName = string.Empty;
            EntityDao dao = new EntityDao();
            var result = tx.PersistenceManager.PlanningRepository.Get<EntityDao>(entityId);
            if (mappingFileVersion == 0)
                entityName = "AttributeRecord" + result.Typeid + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
            else
                entityName = "AttributeRecord" + result.Typeid + "_V" + mappingFileVersion.ToString();
            return entityName;
        }
        public bool InsertEntityAttributes(ITransaction tx, IList<IAttributeData> attributeData, int entityId, int typeId)
        {
            if (attributeData != null)
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Started inseting values into Dynamic tables", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                string entityName = "AttributeRecord" + typeId + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                IList<IDynamicAttributes> listdynamicattributes = new List<IDynamicAttributes>();
                Dictionary<string, object> dictAttr = new Dictionary<string, object>();
                IList<MultiSelectDao> listMultiselect = new List<MultiSelectDao>();
                IList<TreeValueDao> listreeval = new List<TreeValueDao>();
                listreeval.Clear();
                DynamicAttributesDao dynamicdao = new DynamicAttributesDao();

                ArrayList entityids = new ArrayList();
                foreach (var obj in attributeData)
                {
                    entityids.Add(obj.ID);
                }
                var result = from item in tx.PersistenceManager.PlanningRepository.Query<AttributeDao>() where entityids.Contains(item.Id) select item;
                //var removingOwner = result.Where(a => a.Id != Convert.ToInt32(SystemDefinedAttributes.Owner));
                var entityTypeCategory = tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>().Where(a => a.Id == typeId).Select(a => a.Category).FirstOrDefault();
                var dynamicAttResult = result.Where(a => ((a.Id != 69) && (a.AttributeTypeID == 1 || a.AttributeTypeID == 2 || a.AttributeTypeID == 3 || a.AttributeTypeID == 5 || a.AttributeTypeID == 8 || a.AttributeTypeID == 9 || a.AttributeTypeID == 11)));
                var treenodeResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.Tree)));
                var treevalResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.DropDownTree)));
                var multiAttrResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.ListMultiSelection)));
                var systemDefinedResults = result.Where(a => a.IsSpecial == true);
                var multiselecttreevalResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.TreeMultiSelection)));
                var multiselectPricingtreevalResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.DropDownTreePricing)));

                if (systemDefinedResults.Count() > 0)
                {

                    foreach (var val in systemDefinedResults)
                    {
                        SystemDefinedAttributes systemType = (SystemDefinedAttributes)val.Id;
                        var dataResult = attributeData.Join(systemDefinedResults,
                                post => post.ID,
                                meta => meta.Id,
                                (post, meta) => new { databaseval = post }).Where(a => a.databaseval.ID == Convert.ToInt32(SystemDefinedAttributes.Owner));
                        switch (systemType)
                        {
                            case SystemDefinedAttributes.Owner:
                                IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                                if (dataResult.Count() > 0)
                                {
                                    foreach (var ownerObj in dataResult)
                                    {
                                        EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                                        entityroledao.Entityid = entityId;
                                        var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                        int RoleID = NewObj.ID;
                                        entityroledao.Roleid = RoleID;
                                        entityroledao.Userid = ownerObj.databaseval.Value;
                                        entityroledao.IsInherited = false;
                                        entityroledao.InheritedFromEntityid = 0;
                                        Ientitroledao.Add(entityroledao);

                                    }
                                    tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientitroledao);
                                }
                                break;
                        }
                    }
                }

                if (treevalResult.Count() > 0)
                {
                    var treeValQuery = attributeData.Join(treevalResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    if (treeValQuery.Count() > 0)
                    {
                        foreach (var treeattr in treeValQuery)
                        {
                            foreach (var treevalobj in treeattr.databaseval.Value)
                            {
                                TreeValueDao tre = new TreeValueDao();
                                tre.Attributeid = treeattr.databaseval.ID;
                                tre.Entityid = entityId;
                                tre.Nodeid = treevalobj;
                                tre.Level = treeattr.databaseval.Level;
                                tre.Value = "";
                                listreeval.Add(tre);
                            }
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.TreeValueDao>(listreeval);
                    }
                }
                if (multiselecttreevalResult.Count() > 0)
                {
                    var multiselecttreeValQuery = attributeData.Join(multiselecttreevalResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    if (multiselecttreeValQuery.Count() > 0)
                    {
                        foreach (var treeattr in multiselecttreeValQuery)
                        {
                            foreach (var treevalobj in treeattr.databaseval.Value)
                            {
                                TreeValueDao tre = new TreeValueDao();
                                tre.Attributeid = treeattr.databaseval.ID;
                                tre.Entityid = entityId;
                                tre.Nodeid = treevalobj;
                                tre.Level = treeattr.databaseval.Level;
                                tre.Value = "";
                                listreeval.Add(tre);
                            }
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.TreeValueDao>(listreeval);
                    }
                }

                if (multiselectPricingtreevalResult.Count() > 0)
                {
                    var multiselecttreeValQuery = attributeData.Join(multiselectPricingtreevalResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    if (multiselecttreeValQuery.Count() > 0)
                    {
                        foreach (var treeattr in multiselecttreeValQuery)
                        {
                            foreach (var treevalobj in treeattr.databaseval.Value)
                            {
                                TreeValueDao tre = new TreeValueDao();
                                tre.Attributeid = treeattr.databaseval.ID;
                                tre.Entityid = entityId;
                                tre.Nodeid = treevalobj;
                                tre.Level = treeattr.databaseval.Level;
                                tre.Value = treeattr.databaseval.SpecialValue;
                                listreeval.Add(tre);
                            }
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.TreeValueDao>(listreeval);
                    }
                }
                if (multiAttrResult.Count() > 0)
                {

                    tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.MultiSelectDao>(entityId);

                    string deletequery = "DELETE FROM MM_MultiSelect WHERE EntityID = ? ";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(deletequery.ToString(), Convert.ToInt32(entityId));

                    var query = attributeData.Join(multiAttrResult,
                             post => post.ID,
                             meta => meta.Id,
                             (post, meta) => new { databaseval = post, attrappval = meta });
                    foreach (var at in query)
                    {
                        Marcom.Dal.Metadata.Model.MultiSelectDao mt = new Marcom.Dal.Metadata.Model.MultiSelectDao();
                        mt.Attributeid = at.databaseval.ID;
                        mt.Entityid = entityId;
                        mt.Optionid = Convert.ToInt32(at.databaseval.Value);
                        listMultiselect.Add(mt);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.MultiSelectDao>(listMultiselect);
                }
                if (treenodeResult.Count() > 0)
                {
                    var treenodequery = attributeData.Join(treenodeResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    foreach (var et in treenodequery)
                    {
                        foreach (var treenodeobj in et.databaseval.Value)
                        {
                            Marcom.Dal.Metadata.Model.TreeValueDao tre = new Marcom.Dal.Metadata.Model.TreeValueDao();
                            tre.Attributeid = et.databaseval.ID;
                            tre.Entityid = entityId;
                            tre.Nodeid = treenodeobj;
                            tre.Level = et.databaseval.Level;
                            listreeval.Add(tre);
                        }
                    }
                    tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.TreeValueDao>(listreeval);
                }
                if (dynamicAttResult.Count() > 0 || entityTypeCategory != 1)
                {
                    Dictionary<string, dynamic> attr = new Dictionary<string, dynamic>();


                    var dynamicAttrQuery = attributeData.Join(dynamicAttResult,
                                post => post.ID,
                                meta => meta.Id,
                                (post, meta) => new { databaseval = post });
                    foreach (var ab in dynamicAttrQuery)
                    {

                        string key = Convert.ToString((int)ab.databaseval.ID);
                        int attributedataType = ab.databaseval.TypeID;
                        // dynamic value = ab.databaseval.Value;
                        dynamic value = null;
                        switch (attributedataType)
                        {
                            case 1:
                            case 2:
                            case 11:
                                {
                                    value = Convert.ToString(ab.databaseval.Value == null ? "" : HttpUtility.HtmlEncode((string)ab.databaseval.Value));
                                    break;
                                }
                            case 3:
                                {
                                    value = Convert.ToString((Convert.ToString(ab.databaseval.Value) == null || Convert.ToString(ab.databaseval.Value) == "") ? 0 : (int)ab.databaseval.Value);
                                    break;
                                }
                            case 5:
                                {
                                    if (ab.databaseval.Value != null && ab.databaseval.Value != "")
                                        value = DateTime.Parse(ab.databaseval.Value == null || ab.databaseval.Value == "" ? "" : (string)ab.databaseval.Value.ToString());
                                    else
                                        value = null;
                                    break;
                                }
                            case 8:
                                {
                                    value = 0;
                                    int n;
                                    if (ab.databaseval.Value != null)
                                    {
                                        if (int.TryParse(Convert.ToString(ab.databaseval.Value), out n))
                                        {
                                            value = Convert.ToInt32(ab.databaseval.Value);
                                        }
                                    }
                                    break;
                                }
                            case 9:
                                {
                                    if (ab.databaseval.Value != 0 && ab.databaseval.Value != 1)
                                    {
                                        value = Convert.ToBoolean(ab.databaseval.Value == null || ab.databaseval.Value == "" ? false : ab.databaseval.Value);
                                    }
                                    else if (ab.databaseval.Value == 0 || ab.databaseval.Value == 1)
                                    {
                                        value = (ab.databaseval.Value == 0) ? false : true;
                                    }
                                    break;
                                }
                        }
                        attr.Add(key, value);
                    }
                    dictAttr = attr != null ? attr : null;
                    dynamicdao.Id = entityId;
                    dynamicdao.Attributes = dictAttr;

                    tx.PersistenceManager.PlanningRepository.SaveByentity<DynamicAttributesDao>(entityName, dynamicdao);
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Succesfully into Dynamic tables", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                }
            }
            return true;
        }
        public IList<IAttributeData> GetDynamictAttributeDetails(ITransaction tx, int entityId)
        {
            IList<IAttributeData> listAttr = new List<IAttributeData>();
            string entityName = GetEntityName(tx, entityId);
            List<int> attrIds = new List<int>();
            var attrResult = tx.PersistenceManager.PlanningRepository.Query<DynamicAttributesDao>().Where(a => a.Id == entityId).Select(a => a.Attributes).ToList();
            foreach (var atr in attrResult)
            {
                attrIds.Add(Convert.ToInt32(atr));
            }
            var attributeresult = tx.PersistenceManager.PlanningRepository.Query<AttributeDao>().Where(a => attrIds.Contains(Convert.ToInt32(a))).Select(a => new { AttributeId = a.Id, AttributeName = a.Caption, AttributeTypeId = a.AttributeTypeID });

            foreach (DictionaryEntry at in attrResult[0])
            {
                AttributeData attre = new AttributeData();
                var id = at.Key;
                attre.ID = attributeresult.Select(a => a.AttributeId).First();
                attre.Caption = attributeresult.Select(a => a.AttributeName).First();
                attre.TypeID = attributeresult.Select(a => a.AttributeTypeId).First();
                attre.Value = at.Value;
                listAttr.Add(attre);
            }
            return listAttr;
        }

        public IList Get_EntityIDs(PlanningManagerProxy proxy, int ActivityListID, int CostCenterID = 0, int ObjectiveID = 0, bool IsGlobalAdmin = false, int FilterID = 0, string PublishDate = null, int UserID = 0)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entity = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(n => n.Id == ActivityListID);
                    var uniqueKey = entity.ToList().ElementAt(0).UniqueKey.ToString();
                    string strquery = "select *,isnull((SELECT	COUNT(pe2.ParentID) FROM PM_Entity pe2 WHERE pe2.ParentID=pe.ID AND pe2.TypeID!=7 AND pe2.[Active]=1 GROUP BY pe2.ParentID),0) 'TotalChildCount'  from PM_Entity pe WHERE  pe.UniqueKey  like ?  AND pe.TypeID!=7 AND pe.[Active]=1";
                    //var entityDao = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(n => n.UniqueKey.Contains(entity.ToList().ElementAt(0).UniqueKey.ToString()) && n.Typeid > 7);
                    IList entityDao = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strquery, uniqueKey + "%"); //.Where(n => n.UniqueKey.StartsWith(entity.ToList().ElementAt(0).UniqueKey.ToString()));
                    //var entityResult = entityDao.ToList().Where(a => System.Text.RegularExpressions.Regex.IsMatch (a.UniqueKey,uniqueKey));
                    tx.Commit();
                    if (entityDao != null)
                    {

                        return entityDao;
                        //foreach (var val in entityDao)
                        //{
                        //    //IEntity ent = new Entity();
                        //    //ent.Id = val.Id;
                        //    //ent.Name = val.Name;
                        //    //ent.Active = val.Active;
                        //    //ent.Parentid = val.Parentid;
                        //    //ent.Typeid = val.Typeid;
                        //    //ent.UniqueKey = val.UniqueKey;
                        //    //ent.Version = val.Version;
                        //    //lstentity.Add(ent);
                        //}
                    }
                }
            }
            catch
            {

            }

            return null;
        }

        /// <summary>
        /// GetChildTreeNodes.
        /// </summary>
        /// <param name="Id">The ParentID.</param>
        /// <returns>
        /// IList
        /// </returns>
        public IList GetChildTreeNodes(PlanningManagerProxy proxy, int ParentID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder strquery = new StringBuilder();
                    strquery.Append("SELECT pe.ID,pe.Name,pe.ParentID,pe.UniqueKey,pe.[Active],(SELECT	COUNT(pe2.ParentID) FROM PM_Entity pe2 WHERE pe2.ParentID=pe.ID AND pe2.[Active]=1 AND pe2.TypeID!=7 GROUP BY pe2.ParentID) 'TotalChildCount' FROM PM_Entity pe WHERE pe.ParentID=?  AND pe.[Active]=1 AND pe.TypeID!=7");
                    IList treeResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strquery.ToString(), ParentID); //.Where(n => n.UniqueKey.StartsWith(entity.ToList().ElementAt(0).UniqueKey.ToString()));
                    tx.Commit();
                    if (treeResult != null)
                    {
                        return treeResult;

                    }
                }
            }
            catch
            {

            }
            return null;
        }

        /// <summary>
        /// GetParentTreeNodes.
        /// </summary>
        /// <param name="IdArr">The IdArr.</param>
        /// <returns>
        /// IList
        /// </returns>
        public IList GetParentTreeNodes(PlanningManagerProxy proxy, int[] IdArr)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder strquery = new StringBuilder();
                    strquery.Append("SELECT pe.ID,pe.Name,pe.ParentID,pe.UniqueKey,pe.[Active],(SELECT	COUNT(pe2.ParentID) FROM PM_Entity pe2 WHERE pe2.ParentID=pe.ID AND pe2.[Active]=1 AND pe2.TypeID!=7 GROUP BY pe2.ParentID) 'TotalChildCount' FROM PM_Entity pe ");

                    string str = "";
                    for (var i = 0; i < IdArr.Length; i++)
                    {
                        str = str + IdArr[i] + ",";

                    }
                    str = str.Remove(str.ToString().Length - 1, 1);
                    strquery.Append(" WHERE pe.ParentID in(" + str + ") AND pe.[Active]=1 AND pe.TypeID!=7");
                    strquery.Append("  OR pe.ID in(" + str + " )   order by pe.ParentID,pe.ID");
                    IList treeResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(strquery.ToString()); //.Where(n => n.UniqueKey.StartsWith(entity.ToList().ElementAt(0).UniqueKey.ToString()));
                    tx.Commit();
                    if (treeResult != null)
                    {
                        return treeResult;

                    }
                }
            }
            catch
            {

            }
            return null;
        }

        /// <summary>
        /// Inserting FilterSettings
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="filterName">The FilterName</param>
        /// <param name="keyword">The Keyword</param>
        /// <param name="userId">The UserID</param>
        /// <param name="entityTypeId">The EntityTypeID</param>
        /// <param name="startDate">The StartDate</param>
        /// <param name="endDate">The EndDate</param>
        /// <param name="whereCondition">The WhereCondition</param>
        /// <returns>int</returns>
        public int InsertFilterSettings(PlanningManagerProxy proxy, string filterName, string keyword, int userId, int typeId, string entityTypeId, int IsDetailFilter, string startDate, string endDate, string whereCondition, IList<IFiltersettingsValues> filterAttributes, int filterId = 0)
        {
            try
            {
                int userid = proxy.MarcomManager.User.Id;
                if (filterId != 0)
                {
                    IList<FiltersettingsValuesDao> listFiltersettingsValuedao = new List<FiltersettingsValuesDao>();
                    FilterSettingsDao filtersettingsObj = new FilterSettingsDao();
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        bool delteFilter = DeleteFilterSettingValues(tx, filterId);
                        filtersettingsObj.FilterID = filterId;
                        filtersettingsObj.FilterName = filterName;
                        filtersettingsObj.Keyword = keyword;
                        filtersettingsObj.UserID = userid;
                        filtersettingsObj.TypeID = typeId;
                        filtersettingsObj.EntityTypeID = entityTypeId;
                        filtersettingsObj.StartDate = startDate;
                        filtersettingsObj.EndDate = endDate;
                        filtersettingsObj.WhereCondition = whereCondition;
                        filtersettingsObj.IsDetailFilter = IsDetailFilter;
                        tx.PersistenceManager.PlanningRepository.Save<FilterSettingsDao>(filtersettingsObj);
                        foreach (var filterVal in filterAttributes)
                        {
                            FiltersettingsValuesDao filtersettingsValuedao = new FiltersettingsValuesDao();
                            filtersettingsValuedao.FilterId = filtersettingsObj.FilterID;
                            filtersettingsValuedao.AttributeId = filterVal.AttributeId;
                            filtersettingsValuedao.Level = filterVal.Level;
                            filtersettingsValuedao.Value = filterVal.Value;
                            filtersettingsValuedao.AttributeTypeId = filterVal.AttributeTypeId;
                            listFiltersettingsValuedao.Add(filtersettingsValuedao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<FiltersettingsValuesDao>(listFiltersettingsValuedao);
                        tx.Commit();
                    }
                    return filtersettingsObj.FilterID;
                }
                else
                {
                    IList<FiltersettingsValuesDao> listFiltersettingsValuedao = new List<FiltersettingsValuesDao>();
                    FilterSettingsDao filtersettingsObj = new FilterSettingsDao();
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        filtersettingsObj.FilterName = filterName;
                        filtersettingsObj.Keyword = keyword;
                        filtersettingsObj.UserID = userid;
                        filtersettingsObj.TypeID = typeId;
                        filtersettingsObj.EntityTypeID = entityTypeId;
                        filtersettingsObj.StartDate = startDate;
                        filtersettingsObj.EndDate = endDate;
                        filtersettingsObj.WhereCondition = whereCondition;
                        filtersettingsObj.IsDetailFilter = IsDetailFilter;
                        tx.PersistenceManager.PlanningRepository.Save<FilterSettingsDao>(filtersettingsObj);
                        foreach (var filterVal in filterAttributes)
                        {
                            FiltersettingsValuesDao filtersettingsValuedao = new FiltersettingsValuesDao();
                            filtersettingsValuedao.FilterId = filtersettingsObj.FilterID;
                            filtersettingsValuedao.AttributeId = filterVal.AttributeId;
                            filtersettingsValuedao.Level = filterVal.Level;
                            filtersettingsValuedao.Value = filterVal.Value;
                            filtersettingsValuedao.AttributeTypeId = filterVal.AttributeTypeId;
                            listFiltersettingsValuedao.Add(filtersettingsValuedao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<FiltersettingsValuesDao>(listFiltersettingsValuedao);
                        tx.Commit();
                    }
                    return filtersettingsObj.FilterID;
                }
            }

            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// GetFilterSettings.
        /// </summary>
        /// <returns>
        /// IList<FilterSettings>
        /// </returns>
        public IList<IFilterSettings> GetFilterSettings(PlanningManagerProxy proxy, int typeId)
        {
            try
            {
                IList<IFilterSettings> listFiltersettings = new List<IFilterSettings>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    int userid = proxy.MarcomManager.User.Id;

                    var filterResult = tx.PersistenceManager.PlanningRepository.GetAll<FilterSettingsDao>().Where(a => a.TypeID == typeId && a.IsDetailFilter == 0 && a.UserID == userid);
                    foreach (var obj in filterResult)
                    {
                        FilterSettings filterVal = new FilterSettings();
                        filterVal.FilterID = obj.FilterID;
                        filterVal.FilterName = obj.FilterName;
                        filterVal.Keyword = obj.Keyword;
                        filterVal.UserID = obj.UserID;
                        filterVal.TypeID = obj.TypeID;
                        filterVal.EntityTypeID = obj.EntityTypeID;
                        filterVal.StartDate = obj.StartDate;//.ToString("MM/dd/yyyy");
                        filterVal.EndDate = obj.EndDate;//.ToString("MM/dd/yyyy");
                        listFiltersettings.Add(filterVal);
                    }
                }
                return listFiltersettings;
            }
            catch
            {

            }
            return null;
        }
        public IList<IFilterSettings> GetFilterSettingsForDetail(PlanningManagerProxy proxy, int typeId)
        {
            try
            {
                int userid = proxy.MarcomManager.User.Id;
                IList<IFilterSettings> listFiltersettings = new List<IFilterSettings>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    int[] qry = new int[2];
                    qry[0] = 1;
                    if (typeId == 5)
                        qry[1] = 6;
                    else
                        qry[1] = 5;

                    var filterResult = tx.PersistenceManager.PlanningRepository.GetAll<FilterSettingsDao>().Where(a => a.TypeID == typeId && qry.Contains(a.IsDetailFilter) && a.UserID == userid);
                    foreach (var obj in filterResult)
                    {
                        FilterSettings filterVal = new FilterSettings();
                        filterVal.FilterID = obj.FilterID;
                        filterVal.FilterName = obj.FilterName;
                        filterVal.Keyword = obj.Keyword;
                        filterVal.UserID = obj.UserID;
                        filterVal.TypeID = obj.TypeID;
                        filterVal.EntityTypeID = obj.EntityTypeID;
                        filterVal.StartDate = obj.StartDate;//.ToString("MM/dd/yyyy");
                        filterVal.EndDate = obj.EndDate;//.ToString("MM/dd/yyyy");
                        filterVal.IsDetailFilter = obj.IsDetailFilter;
                        listFiltersettings.Add(filterVal);
                    }
                }
                return listFiltersettings;
            }
            catch
            {

            }
            return null;
        }
        /// <summary>
        /// GetFilterSettingsValues.
        /// </summary>
        /// <returns>
        /// IFilterSettings
        /// </returns>
        public IFilterSettings GetFilterSettingValuesByFilertId(PlanningManagerProxy proxy, int filterId)
        {
            try
            {
                IFilterSettings listFiltersettings = new FilterSettings();
                IList<IFiltersettingsValues> listFilterValus = new List<IFiltersettingsValues>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var filterResult = tx.PersistenceManager.PlanningRepository.Get<FilterSettingsDao>(filterId);
                    var attributeTypedao = tx.PersistenceManager.PlanningRepository.GetAll<AttributeTypeDao>();
                    var filterValResult = tx.PersistenceManager.PlanningRepository.GetEquals<FiltersettingsValuesDao>(FiltersettingsValuesDao.PropertyNames.FilterId, filterId);
                    var se = filterValResult.GroupBy(a => a.Level);
                    var attributedao = tx.PersistenceManager.PlanningRepository.GetAll<AttributeDao>();

                    var difList = filterValResult.Join(attributedao, a => a.AttributeId, b => b.Id, (a, b) => new { a, b }).Select(a => a).Distinct();
                    listFiltersettings.FilterID = filterResult.FilterID;
                    listFiltersettings.FilterName = filterResult.FilterName;
                    listFiltersettings.Keyword = filterResult.Keyword;
                    listFiltersettings.UserID = filterResult.UserID;
                    listFiltersettings.TypeID = filterResult.TypeID;
                    listFiltersettings.EntityTypeID = filterResult.EntityTypeID;
                    //listFiltersettings.StartDate = filterResult.StartDate;
                    listFiltersettings.StartDate = filterResult.StartDate;//.ToString("MM/dd/yyyy");
                    listFiltersettings.EndDate = filterResult.EndDate;//.ToString("MM/dd/yyyy");
                    listFiltersettings.FilterValues = null;
                    foreach (var obj in filterValResult)
                    {
                        FiltersettingsValues filtervalues = new FiltersettingsValues();
                        filtervalues.FilterId = obj.FilterId;
                        filtervalues.AttributeId = obj.AttributeId;
                        filtervalues.AttributeTypeId = attributedao.Where(a => a.Id == obj.AttributeId).Select(a => a.AttributeTypeID).First();
                        filtervalues.Level = obj.Level;
                        filtervalues.Value = obj.Value;
                        filtervalues.TreeValues = Marcom.Core.Managers.MetadataManager.Instance.GetAttributeTreeNodesForFilter(tx, obj.AttributeId, obj.FilterId);
                        filtervalues.DropdowntreePricingData = proxy.MarcomManager.MetadataManager.PricingValues(obj.FilterId, obj.AttributeId, obj.AttributeTypeId);
                        listFilterValus.Add(filtervalues);
                    }
                    listFiltersettings.FilterValues = listFilterValus;
                }
                return listFiltersettings;
            }
            catch
            {

            }
            return null;
        }
        /// <summary>
        /// Delete FilterSettings and Values.
        /// </summary>
        /// <returns>
        /// True or False
        /// </returns>
        public bool DeleteFilterSettings(PlanningManagerProxy proxy, int filterId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.PlanningRepository.DeleteByID<FilterSettingsDao>(filterId);
                    tx.Commit();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return true;
        }
        /// <summary>
        /// Delete FilterSettingValues.
        /// </summary>
        /// <returns>
        /// True or False
        /// </returns>
        public bool DeleteFilterSettingValues(ITransaction tx, int filterId)
        {
            try
            {
                string deleteFilterValuesQuery = "Delete from PM_FilterValues where FilterID = ? ";
                tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(deleteFilterValuesQuery, filterId);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return true;
        }
        /// <summary>
        /// Get member.
        /// </summary>
        /// <param name="ID">The ID.</param>
        /// <returns>IList of IEntityRoleUser</returns>
        public IList<IEntityRoleUser> GetMember(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                IList<IEntityRoleUser> ientityMembers = new List<IEntityRoleUser>();
                IList<EntityRoleUserDao> entityroleuserdao = new List<EntityRoleUserDao>();
                IUser users = new BrandSystems.Marcom.Core.User.User();
                UserDao userval = new UserDao();
                EntityTypeRoleAclDao roleval = new EntityTypeRoleAclDao();
                EntityDao entityVal = new EntityDao();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityroleuserdao1 = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                              join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                              where item.Entityid == EntityID
                                              select new
                                              {
                                                  Userid = item.Userid,
                                                  Id = item.Id,
                                                  Entityid = item.Entityid,
                                                  IsInherited = item.IsInherited,
                                                  InheritedFromEntityid = item.InheritedFromEntityid,
                                                  roleCaption = EntityTypeRole.Caption,
                                                  Roleid = EntityTypeRole.ID
                                              }).ToList();


                    foreach (var entmem in entityroleuserdao1)
                    {
                        //var budgetApprover = ientityMembers.Where(a => a.Roleid == 8 && a.Userid == entmem.Userid).ToList();
                        IEntityRoleUser entityMembers = new EntityRoleUser();
                        userval = tx.PersistenceManager.UserRepository.Get<UserDao>(entmem.Userid);
                        roleval = tx.PersistenceManager.UserRepository.Get<EntityTypeRoleAclDao>(entmem.Roleid);
                        //roleval = tx.PersistenceManager.UserRepository.Get<RoleDao>(entmem.Roleid);
                        entityMembers.Id = entmem.Id;
                        entityMembers.Entityid = entmem.Entityid;
                        entityMembers.Roleid = roleval.ID;
                        entityMembers.BackendRoleID = roleval.EntityRoleID;
                        entityMembers.Userid = entmem.Userid;
                        entityMembers.IsInherited = entmem.IsInherited;
                        entityMembers.InheritedFromEntityid = entmem.InheritedFromEntityid;
                        if (userval != null)
                        {
                            entityMembers.UserName = userval.FirstName + ' ' + userval.LastName;
                            entityMembers.UserEmail = userval.Email;
                        }
                        else
                        {
                            entityMembers.UserName = " ";
                            entityMembers.UserEmail = " ";
                        }
                        entityMembers.DepartmentName = (userval.Designation == null ? "-" : userval.Designation);
                        entityMembers.Role = roleval.Caption;
                        entityMembers.Title = (userval.Title == null ? "-" : userval.Title);
                        entityVal = tx.PersistenceManager.PlanningRepository.Get<EntityDao>(EntityDao.PropertyNames.Id, (entmem.InheritedFromEntityid == 0 ? EntityID : entmem.InheritedFromEntityid));
                        entityMembers.InheritedFromEntityName = "";
                        if (entityVal != null)
                        {
                            entityMembers.InheritedFromEntityName = entityVal.Name;
                            var CurrentEntityType = tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>().Where(a => a.Id == entityVal.Typeid).SingleOrDefault();
                            if (CurrentEntityType != null)
                            {
                                entityMembers.ColorCode = CurrentEntityType.ColorCode;
                                entityMembers.ShortText = CurrentEntityType.ShortDescription;
                            }

                            //roleval = tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>().Where(a => a.EntityTypeID == entityVal.Typeid && a.EntityRoleID == entmem.Roleid).SingleOrDefault();
                            //entityMembers.Roleid = roleval.ID;
                            //entityMembers.Role = roleval.Caption;

                        }

                        var userresult = from itemRes in tx.PersistenceManager.PlanningRepository.Query<UserVisibleInfoDao>() select itemRes;

                        ArrayList arryAttributeids = new ArrayList();
                        foreach (var obj in userresult)
                        {
                            arryAttributeids.Add(obj.AttributeId);
                        }
                        var result = proxy.MarcomManager.MetadataManager.GetUserDetailsAttributes(12, entmem.Userid);
                        if (result != null)
                        {
                            if (result.Count > 0)
                            {
                                var result1 = from item in result where arryAttributeids.Contains(item.AttributeID) select item;

                                if (result1 != null)
                                {
                                    int i = 0;
                                    int attrvalid = 0;
                                    foreach (var obj in result1)
                                    {
                                        if (obj.AttributeTypeID == 3)
                                        {
                                            if (obj.AttributeValue != null)
                                            {
                                                if (obj.AttributeValue.ToString() == "")
                                                {
                                                    if (i == 0)
                                                    {
                                                        entityMembers.QuickInfo1 = "-";
                                                        entityMembers.QuickInfo1AttributeCaption = (string)obj.AttributeCaption;
                                                    }
                                                    else
                                                    {
                                                        entityMembers.QuickInfo2 = "-";
                                                        entityMembers.QuickInfo2AttributeCaption = (string)obj.AttributeCaption;
                                                    }
                                                }
                                                else
                                                {
                                                    attrvalid = (int)obj.AttributeValue;
                                                    var singleCaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where item.Id == attrvalid select item.Caption).ToList();
                                                    if (i == 0)
                                                    {
                                                        entityMembers.QuickInfo1 = singleCaption[0].ToString();
                                                        entityMembers.QuickInfo1AttributeCaption = (string)obj.AttributeCaption;
                                                    }
                                                    else
                                                    {
                                                        entityMembers.QuickInfo2 = singleCaption[0].ToString();
                                                        entityMembers.QuickInfo2AttributeCaption = (string)obj.AttributeCaption;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (i == 0)
                                                {
                                                    entityMembers.QuickInfo1 = "-";
                                                    entityMembers.QuickInfo1AttributeCaption = (string)obj.AttributeCaption;
                                                }
                                                else
                                                {
                                                    entityMembers.QuickInfo2 = "-";
                                                    entityMembers.QuickInfo2AttributeCaption = (string)obj.AttributeCaption;
                                                }
                                            }
                                        }
                                        else if (obj.AttributeTypeID == 4)
                                        {
                                            var multiselectResult = tx.PersistenceManager.PlanningRepository.Query<Marcom.Dal.User.Model.UserDetailsMultiSelectDao>().Where(a => a.UserID == entmem.Userid && a.Attributeid == Convert.ToInt32(obj.AttributeID)).Select(a => a.Optionid).ToList();

                                            var singleCaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where multiselectResult.Contains(item.Id) select item.Caption).ToList();
                                            if (singleCaption.Count > 0)
                                            {
                                                if (i == 0)
                                                {
                                                    entityMembers.QuickInfo1 = String.Join(",", singleCaption).ToString();
                                                    entityMembers.QuickInfo1AttributeCaption = (string)obj.AttributeCaption;
                                                }
                                                else
                                                {
                                                    entityMembers.QuickInfo2 = String.Join(",", singleCaption).ToString();
                                                    entityMembers.QuickInfo2AttributeCaption = (string)obj.AttributeCaption;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (i == 0)
                                            {
                                                entityMembers.QuickInfo1 = (string)obj.AttributeValue;
                                                entityMembers.QuickInfo1AttributeCaption = (string)obj.AttributeCaption;
                                            }
                                            else
                                            {
                                                entityMembers.QuickInfo2 = (string)obj.AttributeValue;
                                                entityMembers.QuickInfo2AttributeCaption = (string)obj.AttributeCaption;
                                            }
                                        }
                                        i++;
                                    }

                                }
                            }
                        }
                        ientityMembers.Add(entityMembers);
                    }
                }
                return ientityMembers;
            }
            catch
            {

            }
            return null;
        }

        /// <summary>
        /// Insert member
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="int EntityID">The EntityID</param>
        /// <param name="int RoleID">The RoleID</param>
        /// <param name="int Assignee">The Assignee</param>
        /// <param name="bool IsInherited">The IsInherited</param>
        /// <param name="int InheritedFromEntityid">The InheritedFromEntityid</param>
        /// <returns>int</returns>
        public int InsertMember(PlanningManagerProxy proxy, int EntityID, int RoleID, int Assignee, bool IsInherited, int InheritedFromEntityid)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                IEntityRoleUser _entityroleuser = new EntityRoleUser();
                IList<EntityRoleUserDao> iroleUser = new List<EntityRoleUserDao>();
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityRoleUserDao dao = new EntityRoleUserDao();
                    dao.Entityid = EntityID;
                    dao.Roleid = RoleID;
                    dao.Userid = Assignee;
                    dao.IsInherited = IsInherited;
                    dao.InheritedFromEntityid = InheritedFromEntityid;
                    iroleUser.Add(dao);

                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == EntityID select item).FirstOrDefault();

                    //var alllevelEntities = (from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                    //                        join enityType in tx.PersistenceManager.UserRepository.Query<EntityTypeDao>() on item.Typeid equals enityType.Id
                    //                        where item.UniqueKey.StartsWith("" + entityObj.UniqueKey + ".") && enityType.IsAssociate == false
                    //                        select item).ToList<EntityDao>();

                    IList<MultiProperty> enityIDs_parLIST = new List<MultiProperty>();
                    enityIDs_parLIST.Add(new MultiProperty { propertyName = "entityObj_UniqueKey", propertyValue = entityObj.UniqueKey + ".%" });
                    string query = @"select PM_Entity.id from PM_Entity 
                                    inner join  MM_EntityType on PM_Entity.TypeID = MM_EntityType.ID 
                                    where PM_Entity.UniqueKey like :entityObj_UniqueKey and MM_EntityType.IsAssociate = 0";



                    var enityIDs = (tx.PersistenceManager.CommonRepository.ExecuteQuerywithParam(query, enityIDs_parLIST).Cast<Hashtable>().ToList());
                    foreach (var enityID in enityIDs)
                    {
                        dao = new EntityRoleUserDao();
                        dao.Entityid = Convert.ToInt32(enityID["id"]);
                        dao.Roleid = RoleID;
                        dao.Userid = Assignee;
                        dao.IsInherited = true;
                        dao.InheritedFromEntityid = EntityID;
                        iroleUser.Add(dao);
                    }

                    //foreach (var val in alllevelEntities)
                    //{
                    //    dao = new EntityRoleUserDao();
                    //    dao.Entityid = val.Id;
                    //    dao.Roleid = RoleID;
                    //    dao.Userid = Assignee;
                    //    dao.IsInherited = true;
                    //    dao.InheritedFromEntityid = EntityID;
                    //    iroleUser.Add(dao);
                    //}

                    tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(iroleUser);

                    tx.Commit();

                    _entityroleuser.Id = dao.Id;
                    _entityroleuser.Entityid = dao.Entityid;
                    _entityroleuser.Roleid = dao.Roleid;
                    _entityroleuser.Userid = dao.Userid;
                    _entityroleuser.IsInherited = dao.IsInherited;
                    _entityroleuser.InheritedFromEntityid = dao.InheritedFromEntityid;

                    //Adding to the Search Engine
                    System.Threading.Tasks.Task addtaskforsearch = new System.Threading.Tasks.Task(() => PlanningManager.Instance.UpdateEntityforSearchAsync(proxy, EntityID.ToString(), entityObj.Name, "Productions"));
                    addtaskforsearch.Start();
                }

                FeedNotificationServer fs = new FeedNotificationServer();
                NotificationFeedObjects obj = new NotificationFeedObjects();
                obj.action = "member added";
                obj.Actorid = proxy.MarcomManager.User.Id;
                obj.EntityId = EntityID;
                obj.ToValue = Convert.ToString(RoleID);
                obj.Userid = Assignee;
                obj.obj2 = iroleUser.ToList<object>();
                obj.memberisinherited = IsInherited;
                fs.AsynchronousNotify(obj);

                return _entityroleuser.Id;
                return 0;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        /// <summary>
        /// Deleting Entity
        /// </summary>
        /// <param name="entityId">The EntityID</param>
        /// <param name="Assignee">The Assignee</param>
        /// <returns>True (or) False</returns>
        public bool DeleteMember(PlanningManagerProxy proxy, int ID)
        {
            try
            {
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                using (ITransaction txnotify = proxy.MarcomManager.GetTransaction())
                {
                    EntityRoleUserDao entityRoleDao = new EntityRoleUserDao();
                    entityRoleDao = txnotify.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(a => a.Id == ID).FirstOrDefault();

                    //-----------------------------------notification & news feed-------------------------------
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "member removed";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = entityRoleDao.Entityid;
                    obj.CreatedOn = DateTime.UtcNow;
                    obj.Userid = entityRoleDao.Userid;
                    obj.ToValue = entityRoleDao.Roleid.ToString();
                    fs.AsynchronousNotify(obj);
                    //------------------------------------------------------------//
                }
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityRoleUserDao entityRoleDao = new EntityRoleUserDao();
                    entityRoleDao = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(a => a.Id == ID).FirstOrDefault();
                    tx.PersistenceManager.PlanningRepository.Delete<EntityRoleUserDao>(entityRoleDao);
                    IList<MultiProperty> prpListmain = new List<MultiProperty>();
                    prpListmain.Add(new MultiProperty { propertyName = EntityRoleUserDao.PropertyNames.InheritedFromEntityid, propertyValue = entityRoleDao.Entityid });
                    prpListmain.Add(new MultiProperty { propertyName = EntityRoleUserDao.PropertyNames.Userid, propertyValue = entityRoleDao.Userid });
                    prpListmain.Add(new MultiProperty { propertyName = EntityRoleUserDao.PropertyNames.Roleid, propertyValue = entityRoleDao.Roleid });
                    prpListmain.Add(new MultiProperty { propertyName = EntityRoleUserDao.PropertyNames.IsInherited, propertyValue = true });
                    tx.PersistenceManager.PlanningRepository.DeleteByID<EntityRoleUserDao>(prpListmain);

                    tx.Commit();


                    //Adding to the Search Engine
                    EntityDao entDao = new EntityDao();
                    entDao = tx.PersistenceManager.TaskRepository.Query<EntityDao>().Where(a => a.Id == entityRoleDao.Entityid).Select(a => a).FirstOrDefault();
                    System.Threading.Tasks.Task addtaskforsearch = new System.Threading.Tasks.Task(() => PlanningManager.Instance.UpdateEntityforSearchAsync(proxy, ID, entDao.Name, "Productions"));
                    addtaskforsearch.Start();
                }

                return true;

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Updating member
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="int EntityID">The EntityID</param>
        /// <param name="int RoleID">The RoleID</param>
        /// <param name="int Assignee">The Assignee</param>
        /// <param name="bool IsInherited">The IsInherited</param>
        /// <param name="int InheritedFromEntityid">The InheritedFromEntityid</param>
        /// <returns>int</returns>
        public bool UpdateMember(PlanningManagerProxy proxy, int ID, int EntityID, int RoleID, int Assignee, bool IsInherited, int InheritedFromEntityid, bool IsPlanEntity = false)
        {
            try
            {
                if (IsPlanEntity)
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {



                    EntityRoleUserDao dao = new EntityRoleUserDao();
                    EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                    entityroledao.Id = ID;
                    entityroledao.Entityid = EntityID;
                    entityroledao.Roleid = RoleID;
                    entityroledao.Userid = Assignee;
                    entityroledao.IsInherited = IsInherited;
                    entityroledao.InheritedFromEntityid = InheritedFromEntityid;
                    tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(entityroledao);
                    tx.Commit();

                    //  ------------

                    //-----------------------------------notification for add new member-------------------------------
                    //BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("notification for add new member for  " + EntityID, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    //UserNotificationDao userNotify = new UserNotificationDao();
                    //userNotify.Entityid = EntityID;
                    //userNotify.Actorid = proxy.MarcomManager.User.Id;
                    //userNotify.CreatedOn = DateTime.UtcNow;
                    //userNotify.Typeid = 14;
                    //userNotify.IsViewed = false;
                    //userNotify.IsSentInMail = false;
                    //userNotify.TypeName = "";
                    //userNotify.AttributeName = "";
                    //userNotify.FromValue = "";
                    //userNotify.ToValue = Convert.ToString(RoleID);
                    //userNotify.Userid = Assignee;


                    //using (ITransaction tx1 = proxy.MarcomManager.GetTransaction())
                    //{
                    //    tx1.PersistenceManager.CommonRepository.Save<UserNotificationDao>(userNotify);
                    //    tx1.Commit();
                    //}
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "member added";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = EntityID;
                    obj.ToValue = Convert.ToString(RoleID);
                    obj.Userid = Assignee;
                    obj.obj2 = new List<EntityRoleUserDao>().ToList<object>();
                    obj.obj2.Add(entityroledao);

                    obj.memberisinherited = IsInherited;
                    fs.AsynchronousNotify(obj);
                    ////-------------------------------------------------------------------------------------------------
                }
                return true;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }


        ///// <summary>
        ///// Get all the milestones.
        ///// </summary>
        ///// <param name="proxy">The proxy.</param>
        ///// <param name="id">The id.</param>
        ///// <returns>IList<IAttributeData></returns>
        //public IList<IAttributeData> GetMilestoneById(PlanningManagerProxy proxy, int typeId)
        //{
        //    //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
        //    //{
        //    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
        //    {
        //        IList<IAttributeData> milestoneObj = new List<IAttributeData>();
        //        milestoneObj = GetDynamictAttributeDetails(tx, typeId);
        //        //milestoneObj = GetEntityAttributesDetails(proxy, id);
        //        return milestoneObj;
        //    }
        //    //}
        //    //return null;
        //}

        /// <summary>
        /// Getting All Milestones based on EntityId.
        /// </summary>
        /// <param name="entityId">The EntityId</param>
        /// <param name="entitytypeId">The MileStoneTypeId</param>
        /// <returns>IList of IMilestoneMetadata</returns>
        public IList<IMilestoneMetadata> GetMilestoneMetadata(PlanningManagerProxy proxy, int entityId, int entitytypeId)
        {
            IList<IMilestoneMetadata> listMilestone = new List<IMilestoneMetadata>();
            string entityName = "AttributeRecord" + entitytypeId + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
            List<int> attrIds = new List<int>();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                var attrResult = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => Convert.ToInt32(a.Attributes["" + Convert.ToInt32(SystemDefinedAttributes.MilestoneEntityID) + ""]) == entityId);
                var entityTypeResult = tx.PersistenceManager.PlanningRepository.Query<EntityTypeAttributeRelationDao>().Where(a => a.EntityTypeID == entitytypeId).ToList();
                var attributeResult = tx.PersistenceManager.PlanningRepository.Query<AttributeDao>();
                foreach (var obj in attrResult)
                {
                    MilestoneMetadata milestonedata = new MilestoneMetadata();
                    IList<IAttributeData> listAttr = new List<IAttributeData>();
                    milestonedata.EntityId = obj.Id;
                    milestonedata.AttributeData = null;
                    var getMilestoneName = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(milestonedata.EntityId);
                    AttributeData attrformilestone = new AttributeData();
                    attrformilestone.ID = Convert.ToInt32(SystemDefinedAttributes.Name);
                    attrformilestone.Caption = entityTypeResult.Where(a => a.AttributeID == (Convert.ToInt32(SystemDefinedAttributes.Name)) && a.EntityTypeID == entitytypeId).Select(a => a.Caption).First();
                    attrformilestone.Value = getMilestoneName.Name;
                    attrformilestone.TypeID = attributeResult.Where(a => a.Id == Convert.ToInt32(SystemDefinedAttributes.Name)).Select(a => a.AttributeTypeID).First();
                    attrformilestone.IsSpecial = true;
                    attrformilestone.Lable = entityTypeResult.Where(a => a.AttributeID == (Convert.ToInt32(SystemDefinedAttributes.Name)) && a.EntityTypeID == entitytypeId).Select(a => a.Caption).First();
                    attrformilestone.Level = 0;
                    listAttr.Add(attrformilestone);
                    foreach (DictionaryEntry ob in obj.Attributes)
                    {
                        AttributeData attr = new AttributeData();
                        int attributeid = Convert.ToInt32((object)ob.Key);
                        attr.ID = attributeResult.Where(a => a.Id == attributeid).Select(a => a.Id).First();
                        attr.TypeID = attributeResult.Where(a => a.Id == attributeid).Select(a => a.AttributeTypeID).First();
                        attr.Caption = entityTypeResult.Where(a => a.AttributeID == attributeid && a.EntityTypeID == entitytypeId).Select(a => a.Caption).First();
                        if (Convert.ToInt32(ob.Key) == Convert.ToInt32(SystemDefinedAttributes.DueDate))
                            attr.Value = ((System.DateTime)(ob.Value)).Date.ToString("yyyy-MM-dd");
                        else
                            attr.Value = ob.Value;
                        listAttr.Add(attr);

                    }
                    milestonedata.AttributeData = listAttr;
                    listMilestone.Add(milestonedata);
                    // listMilestone.OrderBy
                }
                tx.Commit();
            }

            return listMilestone;
            //return listMilestone;

        }

        /// <summary>
        /// Getting All Milestones based on EntityId.
        /// </summary>
        /// <param name="entityId">The EntityId</param>
        /// <param name="entitytypeId">The MileStoneTypeId</param>
        /// <returns>IList of IMilestoneMetadata</returns>
        public IList<IMilestoneMetadata> GetMilestoneforWidget(PlanningManagerProxy proxy, int entityId, int entitytypeId)
        {
            IList<IMilestoneMetadata> listMilestone = new List<IMilestoneMetadata>();
            string entityName = "AttributeRecord" + entitytypeId + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
            List<int> attrIds = new List<int>();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                var userAccessableEntities = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(a => a.Userid == proxy.MarcomManager.User.Id).Select(a => a.Entityid).ToList();
                var attrResult = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => userAccessableEntities.Contains(Convert.ToInt32(a.Attributes["66"])));
                var attributeresult = tx.PersistenceManager.PlanningRepository.Query<AttributeDao>();
                var entityTypeResult = tx.PersistenceManager.PlanningRepository.Query<EntityTypeAttributeRelationDao>().Where(a => a.EntityTypeID == entitytypeId).ToList();

                //foreach (var obj in attrResult)
                //{
                //    MilestoneMetadata milestonedata = new MilestoneMetadata();
                //    IList<IAttributeData> listAttr = new List<IAttributeData>();
                //    milestonedata.EntityId = obj.Id;
                //    milestonedata.AttributeData = null;
                //    foreach (DictionaryEntry ob in obj.Attributes)
                //    {
                //        AttributeData attr = new AttributeData();
                //        int attributeid = Convert.ToInt32((object)ob.Key);
                //        attr.ID = attributeresult.Where(a => a.Id == attributeid).Select(a => a.Id).First();
                //        attr.TypeID = attributeresult.Where(a => a.Id == attributeid).Select(a => a.AttributeTypeID).First();
                //        attr.Caption = attributeresult.Where(a => a.Id == attributeid).Select(a => a.Caption).First();
                //        if (attr.Caption == "DueDate2")
                //            attr.Value = ((System.DateTime)(ob.Value)).Date.ToString("yyyy-MM-dd");
                //        else
                //            attr.Value = ob.Value;
                //        listAttr.Add(attr);

                //    }
                //    milestonedata.AttributeData = listAttr;
                //    listMilestone.Add(milestonedata);
                //}

                foreach (var obj in attrResult)
                {
                    MilestoneMetadata milestonedata = new MilestoneMetadata();
                    IList<IAttributeData> listAttr = new List<IAttributeData>();
                    milestonedata.EntityId = obj.Id;
                    milestonedata.AttributeData = null;

                    var getMilestoneName = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(milestonedata.EntityId);
                    milestonedata.ParentEntityId = getMilestoneName.Parentid;
                    var getParentinfo = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(milestonedata.ParentEntityId);
                    var ShortDescription = (from item in tx.PersistenceManager.MetadataRepository.Query<EntityTypeDao>() where item.Id == getParentinfo.Typeid select item.ShortDescription).FirstOrDefault();
                    var ColorCode = (from item in tx.PersistenceManager.MetadataRepository.Query<EntityTypeDao>() where item.Id == getParentinfo.Typeid select item.ColorCode).FirstOrDefault();
                    milestonedata.ParentEntityName = getParentinfo.Name;
                    milestonedata.ParentEntityTypeShortDescription = ShortDescription.ToString();
                    milestonedata.ParentEntityTypeColorCode = ColorCode.ToString();

                    AttributeData attrformilestone = new AttributeData();
                    attrformilestone.ID = Convert.ToInt32(SystemDefinedAttributes.Name);
                    attrformilestone.Caption = entityTypeResult.Where(a => a.AttributeID == (Convert.ToInt32(SystemDefinedAttributes.Name)) && a.EntityTypeID == entitytypeId).Select(a => a.Caption).First();
                    attrformilestone.Value = getMilestoneName.Name;
                    attrformilestone.TypeID = attributeresult.Where(a => a.Id == Convert.ToInt32(SystemDefinedAttributes.Name)).Select(a => a.AttributeTypeID).First();
                    attrformilestone.IsSpecial = true;
                    attrformilestone.Lable = entityTypeResult.Where(a => a.AttributeID == (Convert.ToInt32(SystemDefinedAttributes.Name)) && a.EntityTypeID == entitytypeId).Select(a => a.Caption).First();
                    attrformilestone.Level = 0;
                    listAttr.Add(attrformilestone);
                    foreach (DictionaryEntry ob in obj.Attributes)
                    {
                        AttributeData attr = new AttributeData();
                        int attributeid = Convert.ToInt32((object)ob.Key);
                        attr.ID = attributeresult.Where(a => a.Id == attributeid).Select(a => a.Id).First();
                        attr.TypeID = attributeresult.Where(a => a.Id == attributeid).Select(a => a.AttributeTypeID).First();
                        attr.Caption = entityTypeResult.Where(a => a.AttributeID == attributeid && a.EntityTypeID == entitytypeId).Select(a => a.Caption).First();
                        if (Convert.ToInt32(ob.Key) == Convert.ToInt32(SystemDefinedAttributes.DueDate))
                            attr.Value = ((System.DateTime)(ob.Value)).Date.ToString("dd-MM-yyyy");
                        //else if(Convert.ToInt32(ob.Key) == Convert.ToInt32(SystemDefinedAttributes.MilestoneEntityID))
                        //     milestonedata.ParentEntityId=ob.Value;
                        else
                            attr.Value = ob.Value;
                        listAttr.Add(attr);

                    }
                    milestonedata.AttributeData = listAttr;
                    listMilestone.Add(milestonedata);
                }

            }
            return listMilestone;
        }

        /// <summary>
        /// Get Entity Period.
        /// </summary>
        /// <param name="EntityID">The EntityID.</param>
        /// <returns>IList of IEntityPeriod</returns>
        public IList<IEntityPeriod> GetEntityPeriod(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                IList<IEntityPeriod> ientityperiod = new List<IEntityPeriod>();
                //IList<EntityPeriodDao> entityperioddao = new List<EntityPeriodDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string strFormat = proxy.MarcomManager.GlobalAdditionalSettings[0].SettingValue;
                    strFormat = strFormat.Replace("mm", "MM");
                    var entityperioddao = tx.PersistenceManager.PlanningRepository.Query<EntityPeriodDao>().Where(a => a.Entityid == EntityID);
                    foreach (var entmem in entityperioddao)
                    {
                        IEntityPeriod entityperiod = new EntityPeriod();
                        entityperiod.Id = entmem.Id;
                        entityperiod.Entityid = entmem.Entityid;
                        entityperiod.Startdate = entmem.Startdate;
                        entityperiod.EndDate = entmem.EndDate;
                        entityperiod.Description = entmem.Description;
                        entityperiod.SortOrder = entmem.SortOrder;
                        ientityperiod.Add(entityperiod);
                    }
                }
                return ientityperiod;
            }
            catch
            {

            }
            return null;
        }

        /// <summary>
        /// Inserting Entity Period
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="int EntityID">The EntityID</param>
        /// <param name="string StartDate">The StartDate</param>
        /// <param name="string EndDate">The EndDate</param>
        /// <param name="int SortOrder">The SortOrder</param>
        /// <param name="string Description">The Description</param>
        /// <returns>int</returns>
        public int InsertEntityPeriod(PlanningManagerProxy proxy, int EntityID, string StartDate, string EndDate, int SortOrder, string Description)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                IEntityPeriod _entityroleuser = new EntityPeriod();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityPeriodDao dao = new EntityPeriodDao();
                    dao.Entityid = EntityID;
                    dao.Startdate = Convert.ToDateTime(StartDate);
                    dao.EndDate = Convert.ToDateTime(EndDate);
                    dao.Description = Description;
                    dao.SortOrder = SortOrder;
                    tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(dao);
                    tx.Commit();
                    _entityroleuser.Entityid = dao.Entityid;
                    _entityroleuser.Startdate = dao.Startdate;
                    _entityroleuser.EndDate = dao.EndDate;
                    _entityroleuser.Description = dao.Description;
                    _entityroleuser.SortOrder = dao.SortOrder;
                    return _entityroleuser.Id;

                }
                //}
                return 0;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        /// <summary>
        /// Deleting Entity Period
        /// </summary>
        /// <param name="entityId">The EntityID</param>
        /// <param name="Assignee">The Assignee</param>
        /// <returns>True (or) False</returns>
        public bool DeleteEntityPeriod(PlanningManagerProxy proxy, int ID)
        {
            try
            {
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityPeriodDao dao = new EntityPeriodDao();
                    dao.Id = ID;
                    tx.PersistenceManager.PlanningRepository.Delete<EntityPeriodDao>(dao);
                    tx.Commit();

                }
                return true;
                //}
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Updating Entity Period
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="int EntityID">The EntityID</param>
        /// <param name="string StartDate">The StartDate</param>
        /// <param name="string EndDate">The EndDate</param>
        /// <param name="int SortOrder">The SortOrder</param>
        /// <param name="string Description">The Description</param>
        /// <returns>int</returns>
        public bool UpdateEntityPeriod(PlanningManagerProxy proxy, int ID, int EntityID, string StartDate, string EndDate, int SortOrder, string Description)
        {
            try
            {
                //if (proxy.MarcomManager.AccessManager.CheckAccess(Modules.Admin, 4, FeatureID.Report, OperationId.Self, 1) == true)
                //{
                //using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                //{
                //    EntityPeriodDao dao = new EntityPeriodDao();
                //    dao.Entityid = EntityID;
                //    dao.Startdate = Convert.ToDateTime(StartDate); ;
                //    dao.EndDate = Convert.ToDateTime(EndDate); ;
                //    dao.Description = Description;
                //    dao.SortOrder = SortOrder;
                //    tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(dao);
                //    tx.Commit();
                //}

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FeedNotificationServer fs = new FeedNotificationServer();

                    EntityPeriodDao val = new EntityPeriodDao();
                    val = tx.PersistenceManager.PlanningRepository.Get<EntityPeriodDao>(ID);
                    if (StartDate.Length > 0 && EndDate.Length > 0)
                    {

                        string dateformate;
                        dateformate = proxy.MarcomManager.GlobalAdditionalSettings[0].SettingValue.ToString().Replace('m', 'M');
                        DateTime Startdate = new DateTime();
                        Startdate = Convert.ToDateTime(StartDate.ToString());
                        DateTime Enddate = new DateTime();
                        Enddate = Convert.ToDateTime(EndDate.ToString());

                        if (val.Startdate.ToString(dateformate) != Startdate.ToString(dateformate) || val.EndDate.ToString(dateformate) != Enddate.ToString(dateformate))
                        {
                            NotificationFeedObjects obj = new NotificationFeedObjects();
                            obj.action = "metadata update";
                            obj.Actorid = proxy.MarcomManager.User.Id;
                            obj.EntityId = EntityID;
                            obj.Attributetypeid = 10;
                            var attributedetails = (from tt in tx.PersistenceManager.CommonRepository.Query<AttributeDao>() where tt.AttributeTypeID == 10 select tt).FirstOrDefault();
                            obj.AttributeName = attributedetails.Caption;
                            obj.AttributeId = attributedetails.Id;
                            //(2014-03-01 / 2014-03-31) to (2014-03-07 / 2014-03-14)  format as given by amar
                            obj.FromValue = "(" + val.Startdate.ToString(dateformate) + ")" + " / " + "(" + val.EndDate.ToString(dateformate) + ")";
                            obj.ToValue = "(" + Startdate.ToString(dateformate) + ")" + " / " + "(" + Enddate.ToString(dateformate) + ")";
                            fs.AsynchronousNotify(obj);
                        }
                    }

                    if (val.Description != Description)
                    {
                        NotificationFeedObjects objdesc = new NotificationFeedObjects();
                        objdesc.action = "metadata update";
                        objdesc.Actorid = proxy.MarcomManager.User.Id;
                        objdesc.EntityId = EntityID;
                        objdesc.Attributetypeid = 10;
                        //var attributedetails = (from tt in tx.PersistenceManager.CommonRepository.Query<AttributeDao>() where tt.AttributeTypeID == 10 select tt).FirstOrDefault();
                        objdesc.AttributeName = "Start & End date comment ";
                        //objdesc.AttributeId = attributedetails.Id;
                        objdesc.FromValue = (val.Description == "" ? "-" : val.Description);
                        objdesc.ToValue = (Description == "" ? "-" : Description);
                        fs.AsynchronousNotify(objdesc);
                    }

                    val.Startdate = Convert.ToDateTime(StartDate);
                    val.EndDate = Convert.ToDateTime(EndDate);
                    val.Description = Description;
                    val.SortOrder = SortOrder;
                    tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(val);

                    tx.Commit();


                    InsertUpdateGanttEntitySortorder(proxy, val.Entityid);
                    return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Deleting RootLevelcostCentre
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="costcentreId">The CostcentreID</param>
        /// <returns>True (or) False</returns>
        public bool DeleteRootCostcentre(PlanningManagerProxy proxy, int costcentreId)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                tx.PersistenceManager.PlanningRepository.DeleteByID<DynamicAttributesDao>(costcentreId);
                tx.PersistenceManager.PlanningRepository.DeleteByID<EntityCostReleationsDao>(EntityCostReleationsDao.PropertyNames.CostcenterId, costcentreId);
                tx.PersistenceManager.PlanningRepository.DeleteByID<FundingRequestDao>(FundingRequestDao.PropertyNames.CostCenterid, costcentreId);
            }
            return true;
        }

        /// <summary>
        /// Inserting EntityCostcentres
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="costcenreId">The CostcentreID</param>
        /// <param name="isAssociate">The Associate</param>
        /// <param name="isActive">The Active</param>
        /// <returns>int</returns>
        public int InsertEntityCostcentreRelation(PlanningManagerProxy proxy, int entityId, int costcentreId, bool isAssociate, bool isActive)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityCostReleationsDao dao = new EntityCostReleationsDao();
                    dao.EntityId = entityId;
                    dao.CostcenterId = costcentreId;
                    dao.Isassociate = isAssociate;
                    dao.Isactive = isActive;
                    tx.PersistenceManager.PlanningRepository.Save<EntityCostReleationsDao>(dao);
                    tx.Commit();
                    return dao.Id;
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        /// <summary>
        /// Getting CostcentreFinancialSummaryBlockDetails
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="costCentreId">The CostcentreID</param>
        /// <param name="entityTypeId">The EntityTypeID</param>
        /// <returns>IFinancialOverview</returns>
        public IFinancialOverview GettingCostcentreFinancialOverview(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityResult = tx.PersistenceManager.PlanningRepository.Get<EntityDao>(entityId);
                    int entityTypeId = entityResult.Typeid;
                    StringBuilder CostcentreFinancialSummary = new StringBuilder();
                    IFinancialOverview finOverviewObj = new FinancialOverview();
                    if (entityTypeId == 5)
                    {
                        IList<MultiProperty> paramList = new List<MultiProperty>();
                        paramList.Add(new MultiProperty { propertyName = "entityId", propertyValue = entityId });
                        paramList.Add(new MultiProperty { propertyName = "entityTypeId", propertyValue = Convert.ToInt32(EntityTypeList.FundinngRequest) });

                        CostcentreFinancialSummary.Append(" SELECT (");
                        CostcentreFinancialSummary.Append(" SELECT TOP 1 pefav.ApprovedAllocatedAmount");
                        CostcentreFinancialSummary.Append(" FROM   PM_Financial pefav");
                        CostcentreFinancialSummary.Append(" WHERE  pefav.EntityID = :entityId ");
                        CostcentreFinancialSummary.Append(" ) AS TotalAssigned,");
                        CostcentreFinancialSummary.Append(" (");
                        CostcentreFinancialSummary.Append(" SELECT TOP 1 pefav.LastUpdateOn");
                        CostcentreFinancialSummary.Append(" FROM   PM_Financial pefav");
                        CostcentreFinancialSummary.Append(" WHERE  pefav.EntityID = :entityId ");
                        CostcentreFinancialSummary.Append(" )                                 AS LastUpdateOn,");
                        CostcentreFinancialSummary.Append(" SUM(fin.PlannedAmount)            AS Planned,");
                        CostcentreFinancialSummary.Append(" SUM(fin.RequestedAmount)          AS Requested,");
                        CostcentreFinancialSummary.Append(" SUM(fin.ApprovedAllocatedAmount)  AS Approved,");
                        CostcentreFinancialSummary.Append(" SUM(fin.ApprovedBudget)           AS ApprovedBudget,");
                        CostcentreFinancialSummary.Append(" SUM(fin.BudgetDeviation)          AS BudgetDeviation,");
                        CostcentreFinancialSummary.Append(" (");
                        CostcentreFinancialSummary.Append(" SELECT SUM(pefav.Commited)");
                        CostcentreFinancialSummary.Append(" FROM   PM_Financial pefav");
                        CostcentreFinancialSummary.Append(" INNER JOIN PM_Entity pe");
                        CostcentreFinancialSummary.Append(" ON  pe.ID = pefav.EntityID");
                        CostcentreFinancialSummary.Append(" AND pe.[Active] = 1");
                        CostcentreFinancialSummary.Append(" AND pefav.CostCenterID = :entityId ");
                        CostcentreFinancialSummary.Append(" AND pe.TypeId != :entityTypeId ");
                        CostcentreFinancialSummary.Append(" )                                 AS Commited,");
                        CostcentreFinancialSummary.Append(" (");
                        CostcentreFinancialSummary.Append(" SELECT SUM(pefav.Spent)");
                        CostcentreFinancialSummary.Append(" FROM   PM_Financial pefav");
                        CostcentreFinancialSummary.Append(" INNER JOIN PM_Entity pe");
                        CostcentreFinancialSummary.Append(" ON  pe.ID = pefav.EntityID");
                        CostcentreFinancialSummary.Append(" AND pe.[Active] = 1");
                        CostcentreFinancialSummary.Append(" AND pefav.CostCenterID = :entityId ");
                        CostcentreFinancialSummary.Append("  AND pe.TypeId != :entityTypeId ");
                        CostcentreFinancialSummary.Append(" )                                 AS Spent");
                        CostcentreFinancialSummary.Append(" FROM   (");
                        CostcentreFinancialSummary.Append(" SELECT pefav.PlannedAmount    AS PlannedAmount,");
                        CostcentreFinancialSummary.Append(" pefav.RequestedAmount  AS RequestedAmount,");
                        CostcentreFinancialSummary.Append(" pefav.ApprovedAllocatedAmount AS ApprovedAllocatedAmount,");
                        CostcentreFinancialSummary.Append("  pefav.ApprovedBudget,");
                        CostcentreFinancialSummary.Append("  CASE ");
                        CostcentreFinancialSummary.Append(" WHEN pefav.ApprovedBudgetDate IS NULL THEN 0");
                        CostcentreFinancialSummary.Append(" ELSE pefav.ApprovedBudget - pefav.ApprovedAllocatedAmount");
                        CostcentreFinancialSummary.Append(" END                    AS BudgetDeviation");
                        CostcentreFinancialSummary.Append(" FROM   PM_Financial ");
                        CostcentreFinancialSummary.Append("  pefav");
                        CostcentreFinancialSummary.Append("  INNER JOIN PM_Entity pe");
                        CostcentreFinancialSummary.Append("        ON  pe.ID = pefav.EntityID");
                        CostcentreFinancialSummary.Append("      AND pe.[Active] = 1");
                        CostcentreFinancialSummary.Append("      AND pefav.CostCenterID = :entityId ");
                        CostcentreFinancialSummary.Append("       AND pe.TypeId !=  :entityTypeId ");
                        CostcentreFinancialSummary.Append("      AND pe.Level = 1");
                        CostcentreFinancialSummary.Append("  )                                 AS fin");
                        var costcentreFinancialSummaryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(CostcentreFinancialSummary.ToString(), paramList).Cast<Hashtable>();
                        foreach (var obj in costcentreFinancialSummaryResult)
                        {
                            DateTime date = Convert.ToDateTime(obj["LastUpdateOn"].ToString());
                            finOverviewObj.TotalAssignedAmount = Convert.ToInt32(obj["TotalAssigned"]);
                            finOverviewObj.LastUpdatedon = date.ToString("yyyy-MM-dd");
                            finOverviewObj.PlannedAmount = Convert.ToInt32(obj["Planned"]);
                            finOverviewObj.InRequests = Convert.ToInt32(obj["Requested"]);
                            finOverviewObj.ApprovedBudget = Convert.ToInt32(obj["ApprovedBudget"]);
                            finOverviewObj.BudgetDeviation = Convert.ToInt32(obj["BudgetDeviation"]);
                            finOverviewObj.ApprovedAllocation = Convert.ToInt32(obj["Approved"]);
                            finOverviewObj.UnAllocatedAmount = Convert.ToInt32(obj["TotalAssigned"]) - Convert.ToInt32(obj["Approved"]);
                            finOverviewObj.Committed = Convert.ToInt32(obj["Commited"]);
                            finOverviewObj.Spent = Convert.ToInt32(obj["Spent"]);
                            //finOverviewObj.AvailabletoSpent = (Convert.ToInt32(obj["Approved"]) - (Convert.ToInt32(obj["Commited"]) + Convert.ToInt32(obj["Spent"])));
                            finOverviewObj.AvailabletoSpent = (Convert.ToInt32(obj["Approved"]) - (Convert.ToInt32(obj["Commited"])));
                            finOverviewObj.EntityTypeId = entityTypeId;
                        }
                    }
                    else if (entityResult.Parentid == 0)
                    {
                        CostcentreFinancialSummary.Append(" SELECT main.Planned,main.Approved,main.ApprovedBudget,main.BudgetDeviation,main.Commited,main.Spent, main.SubAllocation, ");
                        CostcentreFinancialSummary.Append(" main.Approved -(main.Commited + main.Spent) AS Available FROM   (");
                        CostcentreFinancialSummary.Append(" SELECT SUM(fin.PlannedAmount) AS Planned,");
                        CostcentreFinancialSummary.Append(" SUM(fin.ApprovedAllocatedAmount) AS Approved,");
                        CostcentreFinancialSummary.Append(" SUM(fin.ApprovedBudget) AS ApprovedBudget,");
                        CostcentreFinancialSummary.Append(" SUM(fin.BudgetDeviation) AS BudgetDeviation, SUM(fin.SubAllocatedAmount) AS SubAllocation, ( ");
                        CostcentreFinancialSummary.Append(" SELECT SUM(pefav2.Commited) ");
                        CostcentreFinancialSummary.Append("  FROM   PM_Financial pefav2 ");
                        CostcentreFinancialSummary.Append(" INNER JOIN PM_Entity pe2 ON  pefav2.EntityID = pe2.ID ");
                        CostcentreFinancialSummary.Append(" AND pe2.[Active] = 1 AND pe2.TypeId != 7 ");
                        CostcentreFinancialSummary.Append(" INNER JOIN PM_Entity pe ON  pe.ID = ? ");
                        CostcentreFinancialSummary.Append("  AND pe2.UniqueKey LIKE pe.UniqueKey + '.%' )  AS Commited,");
                        CostcentreFinancialSummary.Append("  ( SELECT SUM(pefav2.Spent)FROM   PM_Financial pefav2");
                        CostcentreFinancialSummary.Append(" INNER JOIN PM_Entity pe2 ON  pefav2.EntityID = pe2.ID ");
                        CostcentreFinancialSummary.Append("  AND pe2.[Active] = 1 AND pe2.TypeId != 7 INNER JOIN PM_Entity pe ON  pe.ID = ? ");
                        CostcentreFinancialSummary.Append("  AND pe2.UniqueKey LIKE pe.UniqueKey + '.%' )  AS Spent ");
                        CostcentreFinancialSummary.Append(" FROM   ( SELECT pe.ID, ");
                        CostcentreFinancialSummary.Append(" pefav.CostCenterID,pe.UniqueKey,pefav.PlannedAmount AS PlannedAmount,pefav.ApprovedAllocatedAmount AS ApprovedAllocatedAmount,");
                        CostcentreFinancialSummary.Append("  pefav.ApprovedBudget AS ApprovedBudget,");
                        CostcentreFinancialSummary.Append(" CASE WHEN pefav.ApprovedBudgetDate IS NULL THEN 0 ELSE pefav.ApprovedBudget - pefav.ApprovedAllocatedAmount");
                        CostcentreFinancialSummary.Append(" END AS BudgetDeviation,");
                        CostcentreFinancialSummary.Append("  ( SELECT SUM(pefav2.ApprovedAllocatedAmount) FROM ");
                        CostcentreFinancialSummary.Append("  PM_Financial pefav2");
                        CostcentreFinancialSummary.Append("  INNER JOIN PM_Entity pe2 ON  pefav2.EntityID = pe2.ID ");
                        CostcentreFinancialSummary.Append(" AND pe2.ParentID = pe.ID AND pe2.[Active] = 1 AND pe2.TypeId != 7  AND pefav2.CostCenterID = pefav.CostCenterID) AS SubAllocatedAmount");
                        CostcentreFinancialSummary.Append(" FROM   PM_Financial pefav INNER JOIN PM_Entity pe");
                        CostcentreFinancialSummary.Append("  ON  pe.ID = pefav.EntityID WHERE  pe.ParentID =  ? ");
                        CostcentreFinancialSummary.Append(" AND pe.[Active] = 1 )  AS fin ) AS main ");
                        var costcentreFinancialSummaryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(CostcentreFinancialSummary.ToString(), entityId, entityId, entityId).Cast<Hashtable>();
                        foreach (var obj in costcentreFinancialSummaryResult)
                        {
                            finOverviewObj.TotalAssignedAmount = Convert.ToInt32(obj["TotalAssigned"]);
                            finOverviewObj.PlannedAmount = Convert.ToInt32(obj["Planned"]);
                            finOverviewObj.InRequests = Convert.ToInt32(obj["Requested"]);
                            finOverviewObj.ApprovedBudget = Convert.ToInt32(obj["ApprovedBudget"]);
                            finOverviewObj.BudgetDeviation = Convert.ToInt32(obj["BudgetDeviation"]);
                            finOverviewObj.ApprovedAllocation = Convert.ToInt32(obj["Approved"]);
                            finOverviewObj.UnAllocatedAmount = Convert.ToInt32(obj["TotalAssigned"]) - Convert.ToInt32(obj["Approved"]);
                            finOverviewObj.Committed = Convert.ToInt32(obj["Commited"]);
                            finOverviewObj.Spent = Convert.ToInt32(obj["Spent"]);
                            //finOverviewObj.AvailabletoSpent = (Convert.ToInt32(obj["Approved"]) - (Convert.ToInt32(obj["Commited"]) + Convert.ToInt32(obj["Spent"])));
                            //finOverviewObj.AvailabletoSpent = (Convert.ToInt32(obj["Approved"]) - (Convert.ToInt32(obj["Commited"])));
                            int nonresAllocated = 0;
                            nonresAllocated = (Convert.ToInt32(obj["Approved"])) - (Convert.ToInt32(obj["SubAllocation"]));
                            int spentamount = 0;
                            spentamount = GetOverviewFinancialAmount(proxy, entityId);
                            finOverviewObj.AvailabletoSpent = nonresAllocated - spentamount;
                            finOverviewObj.EntityTypeId = entityTypeId;
                        }
                    }
                    else
                    {
                        CostcentreFinancialSummary.Append("  SELECT main.Planned,main.Approved,main.ApprovedBudget,main.BudgetDeviation,main.Commited,main.SubAllocation, ");
                        CostcentreFinancialSummary.Append(" main.Spent,(main.Approved - main.Spent) AS Available FROM   ( ");
                        CostcentreFinancialSummary.Append(" SELECT SUM(fin.PlannedAmount) AS Planned,");
                        CostcentreFinancialSummary.Append(" SUM(fin.ApprovedAllocatedAmount) AS Approved,");
                        CostcentreFinancialSummary.Append("  SUM(fin.ApprovedBudget) AS ApprovedBudget,");
                        CostcentreFinancialSummary.Append(" SUM(fin.BudgetDeviation) AS BudgetDeviation, SUM(fin.SubAllocatedAmount) AS SubAllocation, ");
                        CostcentreFinancialSummary.Append("  ( SELECT SUM(pefav2.Commited) FROM   PM_Financial pefav2 ");
                        CostcentreFinancialSummary.Append("  INNER JOIN PM_Entity pe2 ON  pefav2.EntityID = pe2.ID AND pe2.[Active] = 1 AND pe2.TypeId != 7");
                        CostcentreFinancialSummary.Append(" INNER JOIN PM_Entity pe ON  pe.ID =? AND pe2.UniqueKey LIKE pe.UniqueKey + '%' )  AS Commited,");
                        CostcentreFinancialSummary.Append(" ( SELECT SUM(pefav2.Spent)");
                        CostcentreFinancialSummary.Append(" FROM   PM_Financial pefav2");
                        CostcentreFinancialSummary.Append("  INNER JOIN PM_Entity pe2 ON  pefav2.EntityID = pe2.ID AND pe2.[Active] = 1 AND pe2.TypeId != 7");
                        CostcentreFinancialSummary.Append(" INNER JOIN PM_Entity pe ON  pe.ID =?  AND pe2.UniqueKey LIKE pe.UniqueKey + '%' )  AS Spent");
                        CostcentreFinancialSummary.Append("  FROM   ( SELECT pefav.PlannedAmount AS PlannedAmount,pefav.ApprovedAllocatedAmount AS ApprovedAllocatedAmount,");
                        CostcentreFinancialSummary.Append("  pefav.ApprovedBudget AS ApprovedBudget, CASE ");
                        CostcentreFinancialSummary.Append("  WHEN pefav.ApprovedBudgetDate IS NULL THEN 0 ELSE pefav.ApprovedBudget - pefav.ApprovedAllocatedAmount END AS BudgetDeviation,");
                        CostcentreFinancialSummary.Append("  ISNULL( ( SELECT SUM(pefav2.ApprovedAllocatedAmount)");
                        CostcentreFinancialSummary.Append(" FROM PM_Financial pefav2 INNER JOIN ");
                        CostcentreFinancialSummary.Append("  PM_Entity pe ON  pefav2.EntityID = pe.ID AND pe.ParentID = ?  AND pe.[Active] = 1 AND pe.TypeId != 7");
                        CostcentreFinancialSummary.Append(" AND pefav2.CostCenterID = pefav.CostCenterID ), 0 ) AS SubAllocatedAmount");
                        CostcentreFinancialSummary.Append("  FROM   PM_Financial pefav");
                        CostcentreFinancialSummary.Append("  WHERE  pefav.EntityID =?  )  AS fin ) AS main ");
                        var costcentreFinancialSummaryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(CostcentreFinancialSummary.ToString(), entityId, entityId, entityId, entityId).Cast<Hashtable>();
                        foreach (var obj in costcentreFinancialSummaryResult)
                        {
                            finOverviewObj.TotalAssignedAmount = Convert.ToInt32(obj["TotalAssigned"]);
                            finOverviewObj.PlannedAmount = Convert.ToInt32(obj["Planned"]);
                            finOverviewObj.InRequests = Convert.ToInt32(obj["Requested"]);
                            finOverviewObj.ApprovedBudget = Convert.ToInt32(obj["ApprovedBudget"]);
                            finOverviewObj.BudgetDeviation = Convert.ToInt32(obj["BudgetDeviation"]);
                            finOverviewObj.ApprovedAllocation = Convert.ToInt32(obj["Approved"]);
                            finOverviewObj.UnAllocatedAmount = Convert.ToInt32(obj["TotalAssigned"]) - Convert.ToInt32(obj["Approved"]);
                            finOverviewObj.Committed = Convert.ToInt32(obj["Commited"]);
                            finOverviewObj.Spent = Convert.ToInt32(obj["Spent"]);
                            //finOverviewObj.AvailabletoSpent = (Convert.ToInt32(obj["Approved"]) - (Convert.ToInt32(obj["Commited"]) + Convert.ToInt32(obj["Spent"])));
                            //finOverviewObj.AvailabletoSpent = (Convert.ToInt32(obj["Approved"]) - (Convert.ToInt32(obj["Commited"])));
                            int nonresAllocated = 0;
                            nonresAllocated = (Convert.ToInt32(obj["Approved"])) - (Convert.ToInt32(obj["SubAllocation"]));
                            int spentamount = 0;
                            spentamount = GetOverviewFinancialAmount(proxy, entityId);
                            finOverviewObj.AvailabletoSpent = nonresAllocated - spentamount;
                            finOverviewObj.EntityTypeId = entityTypeId;
                        }
                    }
                    tx.Commit();
                    return finOverviewObj;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Updating Costcentre Assigned Amount
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="costcenreId">The CostcentreID</param>
        /// <param name="totalAssignedAmount">The Total Assigned Amount</param>
        /// <returns>int</returns>
        public int UpdateTotalAssignedAmount(PlanningManagerProxy proxy, int costcentreId, int totalAssignedAmount)
        {
            try
            {
                int sumApprovedAmount = 0;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string selectApprovedQuery = "SELECT sum(pf.ApprovedAllocatedAmount) as ApprovedAmount FROM PM_Financial pf WHERE pf.CostCenterID = ? ";
                    var data = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(selectApprovedQuery, costcentreId).Cast<Hashtable>().ToList();
                    sumApprovedAmount = Convert.ToInt32(data[0]["ApprovedAmount"]);
                    bool approvedresult = (sumApprovedAmount <= totalAssignedAmount);
                    if (approvedresult == true)
                    {
                        string updateCostcentreQuery = "UPDATE MM_AttributeRecord_5 SET Attr_" + Convert.ToInt32(SystemDefinedAttributes.AssignedAmount) + " =" + totalAssignedAmount + " WHERE ID=" + costcentreId + "";
                        string UpdateQuery = "Update PM_Financial set ApprovedAllocatedAmount = ? ,LastUpdateOn=? where EntityID = ?";
                        var result = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(UpdateQuery, totalAssignedAmount, DateTime.UtcNow, costcentreId);
                        tx.PersistenceManager.PlanningRepository.ExecuteQuery(updateCostcentreQuery);
                        tx.Commit();
                        BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();

                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.action = "cost center assigned amount update";
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.EntityId = costcentreId;
                        obj.AttributeName = "";
                        obj.TypeName = "assigned amount";
                        obj.CreatedOn = DateTimeOffset.Now;
                        obj.ToValue = Convert.ToString(Convert.ToInt32(totalAssignedAmount));
                        fs.AsynchronousNotify(obj);


                        // int feedInsertResult = proxy.MarcomManager.CommonManager.SaveUpdateFeed(proxy.MarcomManager.User.Id, 9, costcentreId, "assigned amount", "", "", Convert.ToString(totalAssignedAmount));

                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Updated the Feeds", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                        return 0;
                    }
                    else
                        return sumApprovedAmount;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Getting All Units.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IObjectiveUnit</returns>
        public IList<IObjectiveUnit> GettingObjectiveUnits(PlanningManagerProxy proxy)
        {
            try
            {
                IList<IObjectiveUnit> objUnitsList = new List<IObjectiveUnit>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var objectiveUnitsDao = tx.PersistenceManager.PlanningRepository.GetAll<ObjectiveUnitDao>();
                    tx.Commit();
                    foreach (var obj in objectiveUnitsDao)
                    {
                        ObjectiveUnit unitsObj = new ObjectiveUnit();
                        unitsObj.Id = obj.Id;
                        unitsObj.Caption = obj.Caption;
                        objUnitsList.Add(unitsObj);
                    }
                }
                return objUnitsList;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #region "Search"
        public bool AddEntity(PlanningManagerProxy proxy, string EntityIDs, string name)
        {
            System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => AddEntityAsync(proxy, EntityIDs, name));
            taskforaddentityforsearch.Start();
            return true;
        }
        public bool AddEntityAsync(PlanningManagerProxy proxy, string EntityIDs, string name, string searchtype = "")
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                var ArrayEntityIDs = EntityIDs.Split(',');
                BaseEntityDao entitytypeid = new BaseEntityDao();
                IList listresult;
                StringBuilder strqry = new StringBuilder();
                strqry.Append("WITH GetPath ");
                strqry.Append("AS ");
                strqry.Append("(");
                strqry.Append("SELECT e.ID, e.Name, e.ParentID, e.UniqueKey,et.ShortDescription FROM PM_Entity e INNER JOIN MM_entitytype et ON et.ID= e.TypeID WHERE e.ID = ? ");
                strqry.Append("UNION ALL ");
                strqry.Append("SELECT ent.ID, ent.Name, ent.ParentID, ent.UniqueKey,met.ShortDescription FROM PM_Entity ent INNER JOIN MM_EntityType met ON met.id=ent.TypeID INNER JOIN GetPath AS Child ON ent.id = Child.ParentID");
                strqry.Append(")");
                strqry.Append("SELECT top 1 * FROM GetPath ORDER BY ID DESC");

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    listresult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry.ToString(), ArrayEntityIDs[0]);
                }


                List<SearchEntity> listsearch = new List<SearchEntity>();
                foreach (var entityid in listresult)
                {
                    IList<IAttributeData> entityAttrVal = new List<IAttributeData>();

                    entityAttrVal = GetEntityAttributesDetails(proxy, (int)((System.Collections.Hashtable)(entityid))["ID"]);
                    if (entityAttrVal != null)
                    {
                        foreach (var item in entityAttrVal)
                        {
                            try
                            {
                                if (item.TypeID != Convert.ToInt32(AttributesList.DropDownTree))
                                {
                                    if (item.Lable != null && item.Value != null)
                                    {
                                        AttributesList attypeid = (AttributesList)item.TypeID;
                                        switch (attypeid)
                                        {
                                            case (AttributesList.TextSingleLine):
                                                if (item.IsSpecial == false)
                                                {
                                                    search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                                }
                                                break;
                                            case (AttributesList.TextMultiLine):
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                                break;
                                            case (AttributesList.TextMoney):
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                                break;
                                            case (AttributesList.ListSingleSelection):
                                                if (item.IsSpecial == false)
                                                {
                                                    search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Caption[0].ToString()));
                                                }
                                                break;
                                            case (AttributesList.ListMultiSelection):
                                                string[] captions = item.Caption.Split(',');
                                                foreach (var cap in captions)
                                                {
                                                    search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, cap.ToString()));
                                                }
                                                break;
                                        }
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < (item.Value).Count; i++)
                                    {
                                        search.Metadata.Add(new KeyValuePair<string, string>(item.Lable[i].Label, item.Caption.Split(',')[i]));
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                    IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> _iioption = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                    IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> roleusers = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        roleusers = tx.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();

                        var entitymembers = from members in roleusers where members.Entityid == (int)((System.Collections.Hashtable)(entityid))["ID"] select members;
                        IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                        for (int i = 0; i < entitymembers.Count(); i++)
                        {
                            search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                        }

                        entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>((int)((System.Collections.Hashtable)(entityid))["ID"]);
                    }




                    StringBuilder path = new StringBuilder();

                    int ID = (int)((System.Collections.Hashtable)(entityid))["ID"];
                    search.ID = ID.ToString();
                    path.Append("<a onclick=activityload(" + ID + ")>" + search.Name + "</a>");
                    //search.ModuleID = 1;
                    search.TypeID = entitytypeid.Typeid;
                    search.Name = (string)((System.Collections.Hashtable)(entityid))["Name"];
                    search.Path = path.ToString();
                    search.ThumbnailUrl = "";
                    search.Description = (string)((System.Collections.Hashtable)(entityid))["ShortDescription"]; ;
                    search.FileID = 0;
                    search.FileName = "";
                    search.AssetAccess = "";
                    search.SearchType = searchtype;
                    //sammple tagword integration
                    search.TagWord.Add("Productions");
                    search.TagWord.Add("Tasks");
                    search.TagWord.Add("Assets");
                    search.TagWord.Add("Marcom");
                    search.TagWord.Add("Test Tag");

                    listsearch.Add(search);
                }
                if (ArrayEntityIDs.Count() > 1)
                {
                    if (ArrayEntityIDs[1] != "")
                    {
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {

                            int ID = Convert.ToInt32(ArrayEntityIDs[1]);
                            search.ID = ID.ToString();
                            search.TypeID = 1;
                            search.Name = search.Name;
                            search.Path = "<span onclick=LoadChildTreeNodes(" + ID + ")>" + search.Name + "</span>";
                            search.ThumbnailUrl = "";
                            search.Description = "";
                            search.SearchType = searchtype;
                            string entityName = "AttributeRecord1_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                            var attrResult = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => Convert.ToInt32(a.Attributes["66"]) == Convert.ToInt32(ArrayEntityIDs[0]));
                            search.Metadata.Add(new KeyValuePair<string, string>("DueDate", attrResult.First().Attributes["56"].ToString()));
                            search.Metadata.Add(new KeyValuePair<string, string>("Name", (string)(name)));
                            //sammple tagword integration
                            search.TagWord.Add("Productions");
                            search.TagWord.Add("Tasks");
                            search.TagWord.Add("Assets");
                            search.TagWord.Add("Marcom");
                            search.TagWord.Add("Test Tag");
                            listsearch.Add(search);
                        }

                    }
                }
                List<Document> DocList = new List<Document>();

                foreach (var item in listsearch)
                {
                    DocList.Add(CreateDocument(item));
                }
                if (SearchEngine.Instance.AddDocumentToIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool AddEntityAsync(PlanningManagerProxy proxy, int TaskId, string Name, string Desc, string searchtype = "")
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                BaseEntityDao entitytypeid = new BaseEntityDao();
                BaseEntityDao parententitytypeid = new BaseEntityDao();
                IList listresult;
                List<SearchEntity> listsearch = new List<SearchEntity>();

                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> _iioption = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<TaskMembersDao> roleusers = new List<TaskMembersDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    roleusers = tx.PersistenceManager.TaskRepository.GetAll<TaskMembersDao>();

                    var entitymembers = from members in roleusers where members.TaskID == TaskId select members;
                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                    for (int i = 0; i < entitymembers.Count(); i++)
                    {
                        search.UserIDs.Add(entitymembers.ElementAt(i).UserID);
                    }

                    entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(TaskId);
                    parententitytypeid = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(entitytypeid.Parentid);
                }

                StringBuilder path = new StringBuilder();
                int ID = TaskId;
                search.ID = ID.ToString();
                //search.ModuleID = 1;
                search.TypeID = entitytypeid.Typeid;
                search.Name = HttpUtility.UrlDecode(Name.ToString());
                path.Append("<a onclick=activityload(" + ID + ")>" + search.Name + "</a>");
                search.Path = path.ToString();
                search.ThumbnailUrl = "";
                //search.Description = parententitytypeid.Name;
                search.Description = "";
                search.FileID = 0;
                search.FileName = "";
                search.AssetAccess = "";
                search.SearchType = searchtype;
                //sammple tagword integration
                search.TagWord.Add("Productions");
                search.TagWord.Add("Tasks");
                search.TagWord.Add("Assets");
                search.TagWord.Add("Marcom");
                search.TagWord.Add("Test Tag");
                listsearch.Add(search);
                List<Document> DocList = new List<Document>();
                foreach (var item in listsearch)
                {
                    DocList.Add(CreateDocument(item));
                }
                if (SearchEngine.Instance.AddDocumentToIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool AddEntityAsync(PlanningManagerProxy proxy, int MilestoneId, string MilestoneName, int EntityId, string searchtype = "")
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                BaseEntityDao entitytypeid = new BaseEntityDao();
                List<SearchEntity> listsearch = new List<SearchEntity>();

                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> _iioption = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<EntityRoleUserDao> roleusers = new List<EntityRoleUserDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    roleusers = tx.PersistenceManager.TaskRepository.GetAll<EntityRoleUserDao>();

                    var entitymembers = from members in roleusers where members.Entityid == EntityId select members;
                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                    for (int i = 0; i < entitymembers.Count(); i++)
                    {
                        search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                    }

                    entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(EntityId);


                    int ID = MilestoneId;
                    search.ID = ID.ToString();
                    //search.ModuleID = 1;
                    search.TypeID = (int)EntityTypeList.Milestone;
                    search.Name = MilestoneName;
                    search.Path = "<span onclick=LoadChildTreeNodes(" + ID + ")>" + MilestoneName + "</span>";
                    search.ThumbnailUrl = "";
                    //search.Description = entitytypeid.Name;
                    search.Description = "";
                    //string entityName = "AttributeRecord1_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    search.FileID = 0;
                    search.FileName = "";
                    search.AssetAccess = "";
                    //sammple tagword integration
                    search.TagWord.Add("Productions");
                    search.TagWord.Add("Tasks");
                    search.TagWord.Add("Assets");
                    search.TagWord.Add("Marcom");
                    search.TagWord.Add("Test Tag");
                    //tx.PersistenceManager.PlanningRepository.Get<DynamicAttributesDao>(entityName, dynamicdao);
                    //var attrResult = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => Convert.ToInt32(a.Attributes[SystemDefinedAttributes.MilestoneEntityID]) == MilestoneId);
                    //search.Metadata.Add(new KeyValuePair<string, string>("DueDate", attrResult.First().Attributes[SystemDefinedAttributes.DueDate].ToString()));
                    //search.Metadata.Add(new KeyValuePair<string, string>("Name", (string)(MilestoneName)));

                    listsearch.Add(search);
                }

                List<Document> DocList = new List<Document>();

                foreach (var item in listsearch)
                {
                    DocList.Add(CreateDocument(item));
                }
                if (SearchEngine.Instance.AddDocumentToIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool AddEntityAsync(PlanningManagerProxy proxy, string AttachmentName, int AttachmentID, int EntityID, string searchtype = "")
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                BaseEntityDao entitytypeid = new BaseEntityDao();
                IList listresult;
                List<SearchEntity> listsearch = new List<SearchEntity>();

                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> _iioption = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<EntityRoleUserDao> roleusers = new List<EntityRoleUserDao>();
                FileDao files = new FileDao();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    roleusers = tx.PersistenceManager.TaskRepository.GetAll<EntityRoleUserDao>();

                    var entitymembers = from members in roleusers where members.Entityid == EntityID select members;
                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                    for (int i = 0; i < entitymembers.Count(); i++)
                    {
                        search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                    }

                    entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(EntityID);

                    files = tx.PersistenceManager.CommonRepository.Get<FileDao>(AttachmentID);

                }



                StringBuilder path = new StringBuilder();

                int ID = AttachmentID;
                search.ID = ID.ToString();
                //search.ModuleID = 1;
                search.TypeID = 4;
                search.Name = HttpUtility.UrlDecode(AttachmentName.ToString());
                path.Append("<a onclick=activityload(" + ID + ")>" + search.Name + "</a>");
                search.Path = files.Fileguid.ToString();
                search.ThumbnailUrl = files.Extension;
                //search.Description = entitytypeid.Name;
                search.Description = "";
                search.FileID = 0;
                search.FileName = "";
                search.AssetAccess = "";
                //sammple tagword integration
                search.TagWord.Add("Productions");
                search.TagWord.Add("Tasks");
                search.TagWord.Add("Assets");
                search.TagWord.Add("Marcom");
                search.TagWord.Add("Test Tag");
                listsearch.Add(search);

                List<Document> DocList = new List<Document>();

                foreach (var item in listsearch)
                {
                    DocList.Add(CreateDocument(item));
                }
                if (SearchEngine.Instance.AddDocumentToIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool AddEntityAsync(PlanningManagerProxy proxy, int ListAttachmentID, int EntityID, string ListAttachmentName, string searchtype = "")
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                BaseEntityDao entitytypeid = new BaseEntityDao();
                IList listresult;
                List<SearchEntity> listsearch = new List<SearchEntity>();

                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> _iioption = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<TaskMembersDao> roleusers = new List<TaskMembersDao>();
                FileDao files = new FileDao();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    roleusers = tx.PersistenceManager.TaskRepository.GetAll<TaskMembersDao>();

                    var entitymembers = from members in roleusers where members.TaskID == EntityID select members;
                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                    for (int i = 0; i < entitymembers.Count(); i++)
                    {
                        search.UserIDs.Add(entitymembers.ElementAt(i).UserID);
                    }

                    entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(EntityID);

                    files = tx.PersistenceManager.CommonRepository.Get<FileDao>(ListAttachmentID);

                }



                StringBuilder path = new StringBuilder();

                int ID = ListAttachmentID;
                search.ID = ID.ToString();
                //search.ModuleID = 1;
                search.TypeID = 4;
                search.Name = HttpUtility.UrlDecode(ListAttachmentName.ToString());
                path.Append("<a onclick=activityload(" + ID + ")>" + search.Name + "</a>");
                search.Path = files.Fileguid.ToString();
                search.ThumbnailUrl = files.Extension;
                //search.Description = entitytypeid.Name;
                search.Description = "";
                search.FileID = 0;
                search.FileName = "";
                search.AssetAccess = "";
                //sammple tagword integration
                search.TagWord.Add("Productions");
                search.TagWord.Add("Tasks");
                search.TagWord.Add("Assets");
                search.TagWord.Add("Marcom");
                search.TagWord.Add("Test Tag");
                listsearch.Add(search);

                List<Document> DocList = new List<Document>();

                foreach (var item in listsearch)
                {
                    DocList.Add(CreateDocument(item));
                }
                if (SearchEngine.Instance.AddDocumentToIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool AddEntityAsync(PlanningManagerProxy proxy, int EntityID, int GroupRecordID, string EntityName, string GroupRecordName, int GroupID, string searchtype = "")
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                BaseEntityDao entitytypeid = new BaseEntityDao();
                IList listresult;
                List<SearchEntity> listsearch = new List<SearchEntity>();

                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> roleusers = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                    roleusers = tx.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                    var entitymembers = from members in roleusers where members.Entityid == EntityID select members;
                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                    for (int i = 0; i < entitymembers.Count(); i++)
                    {
                        search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                    }

                    entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(EntityID);
                }
                StringBuilder path = new StringBuilder();
                int ID = GroupRecordID;
                search.ID = GroupRecordID.ToString();
                //search.ModuleID = 1;
                search.TypeID = 1000;
                search.Name = HttpUtility.UrlDecode(GroupRecordName.ToString());
                path.Append("<a onclick=activityload(" + ID + ")>" + GroupRecordName + "</a>");
                search.Path = "";
                search.ThumbnailUrl = "";
                search.Metadata.Add(new KeyValuePair<string, string>("GroupRecordName", GroupRecordName));
                search.Description = GroupRecordName;
                search.ParentID = GroupID;
                search.FileID = 0;
                search.FileName = "";
                search.AssetAccess = "";
                //sammple tagword integration
                search.TagWord.Add("Productions");
                search.TagWord.Add("Tasks");
                search.TagWord.Add("Assets");
                search.TagWord.Add("Marcom");
                search.TagWord.Add("Test Tag");
                listsearch.Add(search);

                List<Document> DocList = new List<Document>();
                foreach (var item in listsearch)
                {
                    DocList.Add(CreateDocument(item));
                }
                if (SearchEngine.Instance.AddDocumentToIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool AddEntityAsyncDam(PlanningManagerProxy proxy, int AssetID, int FileID, string searchtype = "")
        {
            List<SearchEntity> listsearch = new List<SearchEntity>();
            SearchEntity search = new SearchEntity();
            search.ID = AssetID.ToString();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                AssetsDao assets = new AssetsDao();
                assets = tx.PersistenceManager.PlanningRepository.Get<AssetsDao>(AssetID);
                search.TypeID = assets.AssetTypeid;
                search.TypeCategoryID = assets.Category;
                search.Name = assets.Name;
                DAMFileDao damfile = new DAMFileDao();
                damfile = tx.PersistenceManager.PlanningRepository.Get<DAMFileDao>(FileID);
                search.Description = damfile.Description;
                search.FileName = damfile.Name;
                search.AssetAccess = assets.AssetAccess == null ? "" : assets.AssetAccess;
                search.ParentID = assets.EntityID;
                search.ID = assets.ID.ToString();
                search.Path = damfile.FileGuid.ToString();
                search.ThumbnailUrl = "DAM";
                search.FileID = damfile.ID;
                search.SearchType = searchtype;
                //sammple tagword integration
                search.TagWord.Add("Productions");
                search.TagWord.Add("Tasks");
                search.TagWord.Add("Assets");
                search.TagWord.Add("Marcom");
                search.TagWord.Add("Test Tag");
                switch (damfile.Extension)
                {
                    case ".jpg":
                    case ".jpeg":
                    case ".png":
                    case ".psd":
                    case ".bmp":
                    case "tif":
                    case "tiff":
                    case "gif":
                        search.Extension = "jpg";
                        break;
                    default:
                        search.Extension = damfile.Extension.Remove(0, 1);
                        break;
                }
                IAssets assetdata = proxy.MarcomManager.DigitalAssetManager.GetAssetAttributesDetails(AssetID);
                if (assetdata != null && assetdata.AttributeData != null)
                {
                    foreach (var item in assetdata.AttributeData)
                    {
                        try
                        {
                            if (item.TypeID != Convert.ToInt32(AttributesList.DropDownTree))
                            {
                                if (item.Lable != null && item.Value != null)
                                {
                                    AttributesList atrtypeid = (AttributesList)item.TypeID;
                                    switch (atrtypeid)
                                    {
                                        case AttributesList.TextSingleLine:
                                            if (item.IsSpecial == false)
                                            {
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                            }
                                            break;
                                        case AttributesList.TextMultiLine:
                                            search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                            break;
                                        case AttributesList.ListSingleSelection:
                                            if (item.IsSpecial == false)
                                            {
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Caption[0].ToString()));
                                            }
                                            break;
                                        case AttributesList.ListMultiSelection:
                                            string[] captions = item.Caption.Split(',');
                                            foreach (var cap in captions)
                                            {
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, cap.ToString()));
                                            }
                                            break;
                                        case AttributesList.DateTime:
                                            break;
                                        case AttributesList.DropDownTree:
                                            break;
                                        case AttributesList.Tree:
                                            break;
                                        case AttributesList.TextMoney:
                                            search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                            break;
                                        case AttributesList.CheckBoxSelection:
                                            break;
                                        case AttributesList.Period:
                                            break;
                                        case AttributesList.Uploader:
                                            break;
                                        case AttributesList.TreeMultiSelection:
                                            break;
                                        case AttributesList.ParentEntityName:
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                            else if (item.TypeID == Convert.ToInt32(AttributesList.DropDownTree))
                            {
                                for (int i = 0; i < (item.Value).Count; i++)
                                {
                                    search.Metadata.Add(new KeyValuePair<string, string>(item.Lable[i].Label, item.Caption.Split(',')[i]));
                                }
                            }
                        }
                        catch
                        {
                        }
                    }
                }

                IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> roleusers = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                IList<TaskMembersDao> tskmembers = new List<TaskMembersDao>();
                if (assets.FolderID == 0)
                {
                    tskmembers = tx.PersistenceManager.PlanningRepository.Query<TaskMembersDao>().Where(a => a.TaskID == assets.EntityID).ToList();
                    foreach (var user in tskmembers)
                    {
                        search.UserIDs.Add(user.UserID);
                    }
                }
                else
                {
                    roleusers = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(a => a.Entityid == assets.EntityID).ToList();
                    for (int i = 0; i < roleusers.Count(); i++)
                    {
                        search.UserIDs.Add(roleusers.ElementAt(i).Userid);
                    }
                }
                IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();

                listsearch.Add(search);

                List<Document> DocList = new List<Document>();
                foreach (var item in listsearch)
                {
                    DocList.Add(CreateDocument(item));
                }
                if (SearchEngine.Instance.AddDocumentToIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    tx.Commit();
                    return true;
                }
                tx.Commit();
                return false;

            }
            return false;
        }

        public bool UpdateEntityforSearch(PlanningManagerProxy proxy, string EntityIDs, string name)
        {
            System.Threading.Tasks.Task taskforupdateentityforsearch = new System.Threading.Tasks.Task(() => UpdateEntityforSearchAsync(proxy, EntityIDs, name));
            taskforupdateentityforsearch.Start();
            return true;
        }
        public bool UpdateEntityforSearchAsync(PlanningManagerProxy proxy, string EntityIDs, string name, string searchtype = "")
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                List<SearchEntity> listsearch = new List<SearchEntity>();
                var ArrayEntityIDs = EntityIDs.Split(',');
                BaseEntityDao entitytypeid = new BaseEntityDao();
                foreach (var entityid in ArrayEntityIDs)
                {
                    IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                    entityAttrVal = GetEntityAttributesDetails(proxy, int.Parse(entityid));

                    IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                    IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> _iioption = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                    IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> roleusers = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        roleusers = tx.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();

                        var entitymembers = from members in roleusers where members.Entityid == int.Parse(entityid) select members;
                        IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                        for (int i = 0; i < entitymembers.Count(); i++)
                        {
                            search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                        }
                        entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(int.Parse(entityid));
                    }
                    if (entityAttrVal != null)
                    {
                        foreach (var item in entityAttrVal)
                        {
                            try
                            {
                                if (item.TypeID != Convert.ToInt32(AttributesList.DropDownTree))
                                {
                                    if (item.Lable != null && item.Value != null)
                                    {
                                        //if (item.Value.Count > 0)
                                        //    search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value[0].ToString()));
                                        //else
                                        AttributesList attypeid = (AttributesList)item.TypeID;
                                        switch (attypeid)
                                        {
                                            case (AttributesList.TextSingleLine):
                                                if (item.IsSpecial == false)
                                                {
                                                    search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                                }
                                                break;
                                            case (AttributesList.TextMultiLine):
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                                break;
                                            case (AttributesList.TextMoney):
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                                break;
                                            case (AttributesList.ListSingleSelection):
                                                if (item.IsSpecial == false)
                                                {
                                                    search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Caption[0].ToString()));
                                                }
                                                break;
                                            case (AttributesList.ListMultiSelection):
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Caption[0].ToString()));
                                                break;
                                        }
                                        //if (item.TypeID == 1 || item.TypeID == 2 || item.TypeID == 5 || item.TypeID == 8)
                                        //{
                                        //    search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                        //}
                                        //else
                                        //{
                                        //    search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Caption[0].ToString()));
                                        //}
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < (item.Value).Count; i++)
                                    {
                                        search.Metadata.Add(new KeyValuePair<string, string>(item.Lable[i].Label, item.Caption.Split(',')[i]));
                                    }
                                }
                            }
                            catch
                            {

                            }
                        }
                    }
                    int ID = int.Parse(entityid);
                    search.ID = ID.ToString();
                    //search.ModuleID = 1;
                    search.Name = HttpUtility.UrlDecode(name.ToString());
                    search.Path = "<span onclick=LoadChildTreeNodes(" + ID + ")>" + search.Name + "</span>";
                    search.ThumbnailUrl = "";
                    search.TypeID = entitytypeid.Typeid;
                    search.Description = "";
                    search.FileID = 0;
                    search.FileName = "";
                    search.AssetAccess = "";                   
                    search.SearchType = searchtype;
                    //sammple tagword integration
                    search.TagWord.Add("Productions");
                    search.TagWord.Add("Tasks");
                    search.TagWord.Add("Assets");
                    search.TagWord.Add("Marcom");
                    search.TagWord.Add("Test Tag");
                }
                List<Document> DocList = new List<Document>();


                if (SearchEngine.Instance.UpdateDocumentInIndex(CreateDocument(search)) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool UpdateEntityforSearchAsync(PlanningManagerProxy proxy, int TaskId, string name, string searchtype = "")
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                List<SearchEntity> listsearch = new List<SearchEntity>();
                BaseEntityDao entitytypeid = new BaseEntityDao();

                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> _iioption = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<TaskMembersDao> roleusers = new List<TaskMembersDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    roleusers = tx.PersistenceManager.TaskRepository.GetAll<TaskMembersDao>();

                    var entitymembers = from members in roleusers where members.TaskID == TaskId select members;
                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                    for (int i = 0; i < entitymembers.Count(); i++)
                    {
                        search.UserIDs.Add(entitymembers.ElementAt(i).UserID);
                    }
                    entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(TaskId);
                }

                int ID = TaskId;
                search.ID = ID.ToString();
                search.Name = HttpUtility.UrlDecode(name.ToString());
                search.Path = "<span onclick=LoadChildTreeNodes(" + ID + ")>" + search.Name + "</span>";
                search.ThumbnailUrl = "";
                search.TypeID = entitytypeid.Typeid;
                search.Description = "";
                search.FileID = 0;
                search.FileName = "";
                search.AssetAccess = "";
                search.SearchType = searchtype;
                //sammple tagword integration
                search.TagWord.Add("Productions");
                search.TagWord.Add("Tasks");
                search.TagWord.Add("Assets");
                search.TagWord.Add("Marcom");
                search.TagWord.Add("Test Tag");
                List<Document> DocList = new List<Document>();

                if (SearchEngine.Instance.UpdateDocumentInIndex(CreateDocument(search)) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool UpdateEntityforSearchAsync(PlanningManagerProxy proxy, int MilestoneId, string MilestoneName, int EntityId)
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                List<SearchEntity> listsearch = new List<SearchEntity>();
                BaseEntityDao entitytypeid = new BaseEntityDao();

                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> _iioption = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<EntityRoleUserDao> roleusers = new List<EntityRoleUserDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    roleusers = tx.PersistenceManager.TaskRepository.GetAll<EntityRoleUserDao>();

                    var entitymembers = from members in roleusers where members.Entityid == EntityId select members;
                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                    for (int i = 0; i < entitymembers.Count(); i++)
                    {
                        search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                    }
                    entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(EntityId);
                }

                int ID = MilestoneId;
                search.ID = ID.ToString();
                search.Name = HttpUtility.UrlDecode(MilestoneName.ToString());
                search.Path = "<span onclick=LoadChildTreeNodes(" + ID + ")>" + search.Name + "</span>";
                search.ThumbnailUrl = "";
                search.TypeID = entitytypeid.Typeid;
                search.Description = "";
                search.FileID = 0;
                search.FileName = "";
                search.AssetAccess = "";
                //sammple tagword integration
                search.TagWord.Add("Productions");
                search.TagWord.Add("Tasks");
                search.TagWord.Add("Assets");
                search.TagWord.Add("Marcom");
                search.TagWord.Add("Test Tag");
                List<Document> DocList = new List<Document>();

                if (SearchEngine.Instance.UpdateDocumentInIndex(CreateDocument(search)) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool UpdateEntityforSearchAsync(PlanningManagerProxy proxy, int EntityID, int GroupRecordID, string EntityName, string GroupRecordName, int GroupID)
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                BaseEntityDao entitytypeid = new BaseEntityDao();
                IList listresult;
                List<SearchEntity> listsearch = new List<SearchEntity>();

                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> roleusers = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                    roleusers = tx.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                    var entitymembers = from members in roleusers where members.Entityid == EntityID select members;
                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                    for (int i = 0; i < entitymembers.Count(); i++)
                    {
                        search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                    }

                    entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(EntityID);
                }
                StringBuilder path = new StringBuilder();
                int ID = GroupRecordID;
                search.ID = GroupRecordID.ToString();
                //search.ModuleID = 1;
                search.TypeID = 1000;
                search.Name = HttpUtility.UrlDecode(GroupRecordName.ToString());
                path.Append("<a onclick=activityload(" + ID + ")>" + GroupRecordName + "</a>");
                search.Path = "";
                search.ThumbnailUrl = "";
                search.Metadata.Add(new KeyValuePair<string, string>("GroupRecordName", GroupRecordName));
                search.Description = GroupRecordName;
                search.ParentID = GroupID;
                search.FileID = 0;
                search.FileName = "";
                search.AssetAccess = "";
                //sammple tagword integration
                search.TagWord.Add("Productions");
                search.TagWord.Add("Tasks");
                search.TagWord.Add("Assets");
                search.TagWord.Add("Marcom");
                search.TagWord.Add("Test Tag");
                listsearch.Add(search);

                List<Document> DocList = new List<Document>();
                if (SearchEngine.Instance.UpdateDocumentInIndex(CreateDocument(search)) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }

        public bool UpdateEntityAsyncForDam(PlanningManagerProxy proxy, int AssetID, string NewValue, string searchtype = "")
        {
            try
            {
                SearchEntity search = new SearchEntity();
                SearchSettings ss = new SearchSettings();
                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                List<SearchEntity> listsearch = new List<SearchEntity>();
                IAssets assetdata = proxy.MarcomManager.DigitalAssetManager.GetAssetAttributesDetails(AssetID);
                AssetsDao damassets = new AssetsDao();
                IList<DAMFileDao> damfile = new List<DAMFileDao>();
                if (assetdata != null && assetdata.AttributeData != null)
                {
                    foreach (var item in assetdata.AttributeData)
                    {
                        try
                        {
                            if (item.TypeID != Convert.ToInt32(AttributesList.DropDownTree))
                            {
                                if (item.Lable != null && item.Value != null)
                                {
                                    AttributesList atrtypeid = (AttributesList)item.TypeID;
                                    switch (atrtypeid)
                                    {
                                        case AttributesList.TextSingleLine:
                                            if (item.IsSpecial == false)
                                            {
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                            }
                                            break;
                                        case AttributesList.TextMultiLine:
                                            search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                            break;
                                        case AttributesList.ListSingleSelection:
                                            if (item.IsSpecial == false)
                                            {
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Caption[0].ToString()));
                                            }
                                            break;
                                        case AttributesList.ListMultiSelection:
                                            search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Caption[0].ToString()));
                                            break;
                                        case AttributesList.DateTime:
                                            break;
                                        case AttributesList.DropDownTree:
                                            break;
                                        case AttributesList.Tree:
                                            break;
                                        case AttributesList.TextMoney:
                                            search.Metadata.Add(new KeyValuePair<string, string>((string)item.Lable, item.Value.ToString()));
                                            break;
                                        case AttributesList.CheckBoxSelection:
                                            break;
                                        case AttributesList.Period:
                                            break;
                                        case AttributesList.Uploader:
                                            break;
                                        case AttributesList.TreeMultiSelection:
                                            break;
                                        case AttributesList.ParentEntityName:
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                            else if (item.TypeID == Convert.ToInt32(AttributesList.DropDownTree))
                            {
                                for (int i = 0; i < (item.Value).Count; i++)
                                {
                                    search.Metadata.Add(new KeyValuePair<string, string>(item.Lable[i].Label, item.Caption.Split(',')[i]));
                                }
                            }
                        }
                        catch
                        {
                        }
                    }
                }
                IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> roleusers = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                IList<TaskMembersDao> tskmembers = new List<TaskMembersDao>();                
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    damassets = tx.PersistenceManager.PlanningRepository.Get<AssetsDao>(AssetID);
                    damfile = tx.PersistenceManager.PlanningRepository.GetEquals<DAMFileDao>("AssetID", damassets.ID);
                    //roleusers = tx.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                    //var entitymembers = from members in roleusers where members.Entityid == assetdata.EntityID select members;
                    //IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                    //for (int i = 0; i < entitymembers.Count(); i++)
                    //{
                    //    search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                    //}
                    if (assetdata.FolderID == 0)
                    {
                        tskmembers = tx.PersistenceManager.PlanningRepository.Query<TaskMembersDao>().Where(a => a.TaskID == assetdata.EntityID).ToList();
                        foreach (var user in tskmembers)
                        {
                            search.UserIDs.Add(user.UserID);
                        }
                    }
                    else
                    {
                        roleusers = tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>().Where(a => a.Entityid == assetdata.EntityID).ToList();
                        for (int i = 0; i < roleusers.Count(); i++)
                        {
                            search.UserIDs.Add(roleusers.ElementAt(i).Userid);
                        }
                    }
                }

                

                search.ID = AssetID.ToString();
                search.Name = assetdata.Name;
                search.TypeID = assetdata.AssetTypeid;
                search.TypeCategoryID = assetdata.Category;
                search.Path = damfile.ElementAt(0).FileGuid.ToString();
                search.Description = damfile.ElementAt(0).Description.ToString();
                search.FileName = damfile.ElementAt(0).Name;
                search.FileID = damassets.ActiveFileID;
                search.ParentID = assetdata.EntityID;
                search.ThumbnailUrl = "DAM";
                search.SearchType = searchtype;
                search.AssetAccess = assetdata.AssetAccess == null ? "" : assetdata.AssetAccess;
                //sammple tagword integration
                search.TagWord.Add("Productions");
                search.TagWord.Add("Tasks");
                search.TagWord.Add("Assets");
                search.TagWord.Add("Marcom");
                search.TagWord.Add("Test Tag");
                switch (damfile.ElementAt(0).Extension)
                {
                    case ".jpg":
                    case ".jpeg":
                    case ".png":
                    case ".psd":
                    case ".bmp":
                    case "tif":
                    case "tiff":
                    case "gif":
                        search.Extension = "jpg";
                        break;
                    default:
                        search.Extension = damfile.ElementAt(0).Extension.Remove(0, 1);
                        break;
                }
                if (assetdata.IsPublish == true)
                {
                    search.SearchType = "Asset_library";
                }
                listsearch.Add(search);

                List<Document> DocList = new List<Document>();
                if (SearchEngine.Instance.UpdateDocumentInIndex(CreateDocument(search)) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return true;
            }
            catch
            {
                return false;
            }
        }
        public bool RemoveEntity(PlanningManagerProxy proxy, int EntityID, string name)
        {
            System.Threading.Tasks.Task taskforremoveentityforsearch = new System.Threading.Tasks.Task(() => RemoveEntityAsync(proxy, EntityID));
            taskforremoveentityforsearch.Start();
            return true;
        }
        public bool RemoveEntityAsync(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                List<int> DocList = new List<int>();
                DocList.Add(Convert.ToInt32(EntityID));
                if (SearchEngine.Instance.RemoveDocumentFromIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool RemoveEntityAsyncDAM(PlanningManagerProxy proxy, int[] EntityID)
        {
            try
            {
                List<int> DocList = new List<int>();
                foreach (var item in EntityID)
                {
                    DocList.Add(Convert.ToInt32(item));
                }
                if (SearchEngine.Instance.RemoveDocumentFromIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool RemoveFileForDAMFromSearch(int AssetID, int FileID)
        {
            try
            {
                List<int> DocList = new List<int>();
                DocList.Add(Convert.ToInt32(FileID));
                if (SearchEngine.Instance.RemoveFileDocumentFromIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool UpdateAutoCompleteText()
        {
            return true;
            //SearchEngine.Instance.UpdateAutoCompleteText()
        }
        private IndexWriter IndexWriter = null;
        private IndexSearcher IndexSearch = null;

        public Document CreateDocument(SearchEntity obj)
        {
            Document doc = new Document();
            StringBuilder SearchText = new StringBuilder();
            doc.Add(new Field("ID", obj.ID.ToString(), Field.Store.YES, Field.Index.ANALYZED));
            //doc.Add(new Field("ModuleID", obj.ModuleID.ToString(), Field.Store.YES, Field.Index.ANALYZED));
            doc.Add(new Field("TypeID", obj.TypeID.ToString(), Field.Store.YES, Field.Index.ANALYZED));
            doc.Add(new Field("TypeCategoryID", obj.TypeCategoryID.ToString(), Field.Store.YES, Field.Index.NO));
            doc.Add(new Field("Name", obj.Name, Field.Store.YES, Field.Index.ANALYZED));

            SearchText.Append(obj.Name + " ");

            doc.Add(new Field("Path", obj.Path, Field.Store.YES, Field.Index.NO));

            doc.Add(new Field("Description", obj.Description, Field.Store.YES, Field.Index.ANALYZED));

            doc.Add(new Field("ParentID", obj.ParentID.ToString(), Field.Store.YES, Field.Index.ANALYZED));

            SearchText.Append(obj.Description + " ");

            doc.Add(new Field("ThumbnailUrl", obj.ThumbnailUrl, Field.Store.YES, Field.Index.NO));

            doc.Add(new Field("FileID", obj.FileID.ToString(), Field.Store.YES, Field.Index.NO));

            doc.Add(new Field("FileName", obj.FileName, Field.Store.YES, Field.Index.NO));

            doc.Add(new Field("AssetAccess", obj.AssetAccess == null ? "" : obj.AssetAccess.ToString(), Field.Store.YES, Field.Index.NO));

            doc.Add(new Field("Extension", obj.Extension == null ? "" : obj.Extension.ToString(), Field.Store.YES, Field.Index.NO));

            doc.Add(new Field("SearchType", obj.SearchType == null ? "" : obj.SearchType, Field.Store.YES, Field.Index.NO));

            doc.Add(new Field("TagWord_List", obj.TagWord == null ? "" : string.Join("|", obj.TagWord), Field.Store.YES, Field.Index.NO));

            foreach (string tag in obj.TagWord)
            {
                doc.Add(new Field("TagWord", tag.ToString(), Field.Store.YES, Field.Index.ANALYZED));
            }

            foreach (int User in obj.UserIDs)
            {
                doc.Add(new Field("UserID", User.ToString(), Field.Store.YES, Field.Index.ANALYZED));
            }

            foreach (KeyValuePair<string, string> Item in obj.Metadata)
            {
                doc.Add(new Field("Metadata_" + Item.Key.Replace(" ", "__"), Item.Value, Field.Store.YES, Field.Index.ANALYZED));
                SearchText.Append(Item.Value + " ");
            }

            doc.Add(new Field("SearchText", SearchText.ToString(), Field.Store.NO, Field.Index.ANALYZED));


            return doc;
        }

        public Boolean AddDocumentToIndex(Document doc)
        {
            try
            {
                InitIndexWriter();
                IndexWriter.AddDocument(doc);
                OptimizeAndCloseIndex();
                return true;
            }
            catch (Exception)
            {

                throw;
            }

        }
        private void InitIndexWriter()
        {
            if (IndexWriter == null)
            {
                IndexWriter = new IndexWriter(SearchSettings.Instance.GetIndexFileDirectory(), SearchSettings.Instance.GetAnalyzer(), new IndexWriter.MaxFieldLength(10000));
            }
        }
        private void OptimizeAndCloseIndex()
        {
            if (IndexWriter != null)
            {
                IndexWriter.Optimize();
                IndexWriter.Commit();
                IndexWriter.Close();
                IndexWriter = null;
            }
            if (IndexSearch != null)
            {
                IndexSearch.Close();
                IndexSearch = null;
            }
        }

        public List<ResultEntity> QuickSearch(PlanningManagerProxy proxy, String Text, int ModuleIds, Boolean IsGlobalAdmin)
        {
            try
            {
                int intUserID = proxy.MarcomManager.User.Id;

                bool AccessPermission = proxy.MarcomManager.AccessManager.CheckUserAccess((int)Modules.Planning, (int)FeatureID.ViewEditAll);

                //If System.Web.HttpContext.Current.Session("SearchCriteria") IsNot Nothing Then

                string SearchCriteria = "Text=" + Text + " ModuleID=" + string.Join(",", ModuleIds) + " TypeID=0 SearchTerm=" + " IsGlobalAdmin=" + AccessPermission;
                int SearchCriteriaHash = SearchCriteria.GetHashCode();

                SearchResult SearchResult = new SearchResult();

                //if(System.Web.HttpContext.Current.Session["SearchCriteria"] != null)
                //{
                //    if (Convert.ToInt32(System.Web.HttpContext.Current.Session["SearchCriteria"]) == SearchCriteriaHash)
                //    {
                //        SearchResult = (SearchResult)System.Web.HttpContext.Current.Session["SearchResult"];
                //    }
                //    else
                //    {
                //        System.Web.HttpContext.Current.Session["SearchCriteria"] = SearchCriteriaHash;

                //        SearchResult = PerformQuickSearch(Text, 0, ModuleIds);
                //    }
                //    System.Web.HttpContext.Current.Session["SearchResult"] = SearchResult;
                //}

                if (AccessPermission == true)
                {
                    SearchResult = PerformQuickSearch(proxy, Text, 0, ModuleIds);
                }
                else
                {
                    SearchResult = PerformQuickSearch(proxy, Text, intUserID, ModuleIds);
                }
                int NoOfItemToTake = 5;

                try
                {
                    //NoOfItemToTake = Convert.ToInt32(System.Web.HttpContext.Current.Application["NoOfQuickSearchItem"]);

                }
                catch (Exception ex)
                {
                }
                dynamic Result = (from Item in SearchResult.SearchResultEntity select Item).Take(NoOfItemToTake);
                //dynamic Result = from Item in SearchResult.SearchResultEntity select Item;
                List<ResultEntity> resultentity = new List<ResultEntity>();
                foreach (var item in Result)
                {
                    resultentity.Add(item);
                }
                return resultentity;
            }
            catch
            {

                return null;
            }

        }
        public IList<BrandSystems.Marcom.Core.Metadata.Interface.IEntityType> GetEntityTypeByID(PlanningManagerProxy proxy, int ID)
        {
            try
            {
                IList<BrandSystems.Marcom.Core.Metadata.Interface.IEntityType> _iientitytype = new List<BrandSystems.Marcom.Core.Metadata.Interface.IEntityType>();
                EntityTypeDao dao = new EntityTypeDao();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    dao = tx.PersistenceManager.MetadataRepository.Get<EntityTypeDao>(ID);
                    tx.Commit();
                }

                BrandSystems.Marcom.Core.Metadata.Interface.IEntityType _ientitytype = new BrandSystems.Marcom.Core.Metadata.EntityType();
                _ientitytype.Caption = dao.Caption;
                _ientitytype.ModuleID = dao.ModuleID;
                _ientitytype.Description = dao.Description;
                _ientitytype.ShortDescription = dao.ShortDescription;
                _ientitytype.ColorCode = dao.ColorCode;
                // _ientitytype.IsSystemDefined = dao.IsSystemDefined;
                _ientitytype.Category = dao.Category;
                _ientitytype.Id = dao.Id;
                _iientitytype.Add(_ientitytype);

                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public string Escape(string Text)
        {

            Text = Text.Replace("\\", "\\\\");
            Text = Text.Replace("+", "\\+");
            Text = Text.Replace("-", "\\-");
            Text = Text.Replace("&", "\\&");
            Text = Text.Replace("|", "\\|");
            Text = Text.Replace("!", "\\!");
            Text = Text.Replace("(", "\\(");
            Text = Text.Replace(")", "\\)");
            Text = Text.Replace("{", "\\{");
            Text = Text.Replace("}", "\\}");
            Text = Text.Replace("[", "\\[");
            Text = Text.Replace("]", "\\]");
            Text = Text.Replace("^", "\\^");
            Text = Text.Replace("\"", "\\\"");
            Text = Text.Replace("~", "\\~");
            Text = Text.Replace("*", "\\*");
            Text = Text.Replace("?", "\\?");
            Text = Text.Replace(":", "\\:");

            return Text;


        }
        private ReaderWriterLockSlim IndexLock = new ReaderWriterLockSlim();
        private bool InitSearch()
        {
            IndexSearch = new IndexSearcher(SearchSettings.Instance.GetIndexFileDirectory());
            //if (IndexSearch == null)
            //{
            //    IndexSearch = new IndexSearcher(SearchSettings.Instance.GetIndexFileDirectory());
            //}
            return true;

        }
        public Lucene.Net.Search.TopDocs PerformSearch(string Text)
        {

            try
            {
                IndexLock.EnterReadLock();
                if (!InitSearch())
                {
                    return null;
                }

                QueryParser queryParser = new QueryParser(Lucene.Net.Util.Version.LUCENE_30, "SearchText", SearchSettings.Instance.GetAnalyzer());

                Query query = null;

                query = queryParser.Parse(Text);

                Sort sort = new Sort(SortField.FIELD_SCORE);

                TopDocs docs = IndexSearch.Search(query, 1000);


                return docs;
            }
            finally
            {
                IndexLock.ExitReadLock();
            }

        }
        public SearchResult PerformQuickSearch(PlanningManagerProxy proxy, string Text, int UserID = 0, int ModuleID = 0)
        {

            try
            {
                string SearchText = "";


                if (Text.StartsWith("ID:"))
                {
                    SearchText = "(ID:\"" + Text.Replace("ID:", "") + "\" OR " + "Metadata_SAP__Order__Id:\"" + Text.Replace("ID:", "") + "\")";

                    if (UserID != 0)
                    {
                        SearchText += " AND UserID:" + UserID;
                    }


                }
                else
                {

                    Text = Escape(Text);



                    string FreeText = "";


                    if (Text.Contains(" "))
                    {
                        foreach (string term in Text.Split(' '))
                        {
                            if (!string.IsNullOrEmpty(term))
                            {
                                if (FreeText.Length > 0)
                                {
                                    FreeText += " AND ";
                                }
                                if (Text.Contains("\\*"))
                                {
                                    FreeText += term;
                                }
                                else
                                {
                                    FreeText += term + "*";
                                }
                            }
                        }

                        SearchText += "(" + FreeText + ")";
                    }
                    else
                    {
                        SearchText += Text + "*";
                    }


                    if (UserID != 0)
                    {
                        SearchText += " AND UserID:" + UserID;
                    }

                }

                TopDocs Result = PerformSearch(SearchText);

                List<ResultEntity> objResultEntityList = new List<ResultEntity>();


                foreach (ScoreDoc scoreDoc in Result.ScoreDocs)
                {
                    int x = 0;
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        // retrieve the document from the 'ScoreDoc' object
                        Lucene.Net.Documents.Document doc = IndexSearch.Doc(scoreDoc.Doc);//searcher.Doc(scoreDoc.Doc);
                        ResultEntity objResultEntity = new ResultEntity();
                        var _with1 = objResultEntity;
                        _with1.TypeID = Convert.ToInt32(doc.Get("TypeID"));
                        _with1.TypeCategoryID = Convert.ToInt32(doc.Get("TypeCategoryID"));
                        _with1.Name = System.Net.WebUtility.HtmlDecode(doc.Get("Name"));
                        _with1.Path = doc.Get("Path");
                        _with1.FileGUID = doc.Get("Path");
                        _with1.ThumbnailUrl = doc.Get("ThumbnailUrl");

                        IList<BrandSystems.Marcom.Core.Metadata.Interface.IEntityType> _iientitytype = new List<BrandSystems.Marcom.Core.Metadata.Interface.IEntityType>();
                        _iientitytype = GetEntityTypeByID(proxy, Convert.ToInt32(doc.Get("TypeID")));
                        _with1.ID = doc.Get("ID");
                        IList<EntityRoleUserDao> entityrole = new List<EntityRoleUserDao>();
                        entityrole = tx.PersistenceManager.PlanningRepository.GetEquals<EntityRoleUserDao>("Entityid", Convert.ToInt32(doc.Get("ParentID")));
                        var entityuser = (from a in entityrole where a.Userid == Convert.ToInt32(proxy.MarcomManager.User.Id) && a.Entityid == Convert.ToInt32(doc.Get("ParentID")) select a);
                        UserDao user = new UserDao();
                        user = tx.PersistenceManager.PlanningRepository.Get<UserDao>(proxy.MarcomManager.User.Id);

                        if (Convert.ToInt32(doc.Get("TypeID")) == (int)EntityTypeList.Milestone)
                        {
                            BaseEntityDao entitytypeid = new BaseEntityDao();
                            entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID")));
                            BaseEntityDao prententityid = new BaseEntityDao();
                            prententityid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, entitytypeid.Parentid);
                            _with1.ID = entitytypeid.Parentid.ToString();
                            _with1.ShortDescription = _iientitytype.ElementAt(0).ShortDescription;
                            _with1.ColorCode = _iientitytype.ElementAt(0).ColorCode;
                            _with1.Description = prententityid.Name;
                            _with1.Searchentitytype = "Production";
                        }
                        else if (_with1.TypeID == 4)
                        {
                            AttachmentsDao attchments = new AttachmentsDao();
                            attchments = tx.PersistenceManager.MetadataRepository.Get<AttachmentsDao>(AttachmentsDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID")));
                            BaseEntityDao entitytypeid = new BaseEntityDao();
                            entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, attchments.Entityid);
                            _with1.ShortDescription = "A";
                            _with1.ColorCode = "008000";
                            _with1.Description = entitytypeid.Name;
                            _with1.ThumbnailUrl = doc.Get("ThumbnailUrl");
                            _with1.Path = doc.Get("Path");
                            _with1.Searchentitytype = "Asset";
                        }
                        else if (_with1.TypeID == 2 || _with1.TypeID == 3 || _with1.TypeID == 31 || _with1.TypeID == 30)
                        {
                            BaseEntityDao entityid = new BaseEntityDao();
                            entityid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID")));

                            BaseEntityDao parententityid = new BaseEntityDao();
                            parententityid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, entityid.Id);

                            _with1.ShortDescription = "T";
                            _with1.ColorCode = "008000";
                            _with1.Description = parententityid.Name;
                            _with1.Searchentitytype = "Task";
                        }
                        else if (_with1.TypeID == 1000)
                        {
                            var entityName = "";
                            if (MarcomManagerFactory.ActiveMetadataVersionNumber == 0)
                                entityName = "AttributeGroup" + doc.Get("ParentID") + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                            else
                                entityName = "AttributeGroup" + doc.Get("ParentID") + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber.ToString();

                            var dynamicvalues = tx.PersistenceManager.MetadataRepository.GetAll<AttrGroupDynamicAttributesDao>(entityName).Where(a => a.Id == Convert.ToInt32(doc.Get("ID")));
                            foreach (var dynamic in dynamicvalues)
                            {
                                var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                                 where item.Id == dynamic.EntityId
                                                 select item).FirstOrDefault();
                                _iientitytype = GetEntityTypeByID(proxy, Convert.ToInt32(entityObj.Typeid));

                                _with1.ShortDescription = _iientitytype.ElementAt(0).ShortDescription;
                                _with1.ColorCode = _iientitytype.ElementAt(0).ColorCode;
                                _with1.Description = doc.Get("Description");
                                _with1.ID = dynamic.EntityId.ToString();
                                _with1.TypeID = entityObj.Typeid;
                                _with1.Name = entityObj.Name;
                                _with1.ParentID = entityObj.Id;
                                _with1.Searchentitytype = "Production";
                                x = 1;
                            }

                        }
                        else
                        {
                            _with1.ShortDescription = _iientitytype.ElementAt(0).ShortDescription;
                            _with1.ColorCode = _iientitytype.ElementAt(0).ColorCode;
                            _with1.Description = doc.Get("Description");
                            _with1.Searchentitytype = "Production";
                        }
                        _with1.Caption = _iientitytype.ElementAt(0).Caption;
                        StringBuilder strqry = new StringBuilder();
                        strqry.Append("WITH GetPath ");
                        strqry.Append("AS ");
                        strqry.Append("(");
                        strqry.Append("SELECT ID, Name, ParentID FROM PM_Entity WHERE ID = ? ");
                        strqry.Append("UNION ALL ");
                        strqry.Append("SELECT ent.ID, ent.Name, ent.ParentID FROM PM_Entity ent INNER JOIN GetPath AS Child ON ent.id = Child.ParentID");
                        strqry.Append(")");
                        strqry.Append("SELECT top(1)ID FROM GetPath ORDER BY ID");
                        IList listresult;
                        var level = 0;
                        if (_with1.ThumbnailUrl != "DAM")
                        {
                            if (x != 1)
                            {
                                listresult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry.ToString(), doc.Get("ID"));
                                level = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID"))).Level;
                            }
                            else
                            {
                                listresult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry.ToString(), _with1.ParentID);
                                level = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, Convert.ToInt32(_with1.ParentID)).Level;
                            }
                            foreach (var item in listresult)
                            {
                                _with1.ParentID = (int)((System.Collections.Hashtable)(item))["ID"];
                            }
                        }
                        else
                        {
                            try
                            {
                                _with1.MemberAccess = doc.Get("AssetAccess") == null ? "" : doc.Get("AssetAccess").ToString();
                            }
                            catch { }
                            _with1.Extension = doc.Get("Extension");
                            _with1.ParentID = Convert.ToInt32(doc.Get("ParentID"));
                        }
                        _with1.Level = Convert.ToInt32(level);
                        if (_with1.ThumbnailUrl == "DAM")
                        {
                            IList<GlobalRoleUserDao> globalrole = new List<GlobalRoleUserDao>();
                            globalrole = tx.PersistenceManager.PlanningRepository.GetEquals<GlobalRoleUserDao>("Userid", proxy.MarcomManager.User.Id);
                            var assetroles = _with1.MemberAccess.Split(',');
                            int countroles = 0;
                            foreach (var assetrole in assetroles)
                            {
                                int roleasset = assetrole == "" ? 0 : Convert.ToInt32(assetrole);
                                countroles = (from a in globalrole where a.GlobalRoleId == roleasset select a).Count();
                            }
                            int membercount = (from abc in entityrole where abc.Userid == proxy.MarcomManager.User.Id select abc).Count();
                            if (countroles > 0 || membercount > 0)
                                objResultEntityList.Add(objResultEntity);
                        }
                        else
                        {
                        objResultEntityList.Add(objResultEntity);
                        }
                    }
                }

                SearchResult objSearchResult = new SearchResult();

                objSearchResult.Count = objResultEntityList.Count();
                int productionCount = objResultEntityList.Where(a => a.Searchentitytype == "Production").Count();
                int taskCount = objResultEntityList.Where(a => a.Searchentitytype == "Task").Count();
                int assetCount = objResultEntityList.Where(a => a.Searchentitytype == "Asset").Count();

                List<object> countObj = new List<object>();
                countObj.Add(new { production = productionCount, task = taskCount, asset = assetCount });

                objSearchResult.DistictResultcount = countObj;


                SearchSettings.Instance.PageSize = 20;
                if (objSearchResult.Count % SearchSettings.Instance.PageSize > 0)
                {
                    objSearchResult.TotalPages = ((objSearchResult.Count - objSearchResult.Count % SearchSettings.Instance.PageSize) / SearchSettings.Instance.PageSize) + 1;
                }
                else
                {
                    objSearchResult.TotalPages = objSearchResult.Count / SearchSettings.Instance.PageSize;
                }

                objSearchResult.SearchResultEntity = objResultEntityList.GroupBy(x => x.ID).Select(y => y.First()).ToList();

                return objSearchResult;

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public SearchResult PerformAdvanceSearch(PlanningManagerProxy proxy, string Text, List<SearchTerm> objSearchTearm, int UserID = 0, int[] TypeID = null)
        {

            try
            {
                string InputText = Text;

                string SearchText = "";


                if (Text.StartsWith("ID:"))
                {
                    SearchText = "(ID:\"" + Text.Replace("ID:", "") + "\" OR " + "Metadata_SAP__Order__Id:\"" + Text.Replace("ID:", "") + "\")";

                    if (UserID != 0)
                    {
                        SearchText += " AND UserID:" + UserID;
                    }


                    if (TypeID != null)
                    {
                        for (int i = 0; i <= TypeID.Length - 1; i++)
                        {
                            if (i == 0)
                            {
                                SearchText += " AND (";
                            }
                            else
                            {
                                SearchText += " OR ";
                            }
                            SearchText += "TypeID:" + TypeID[i];

                        }

                        if (TypeID.Length > 0)
                        {
                            SearchText += ")";
                        }

                    }


                }
                else
                {
                    Text = Escape(Text);

                    string FreeText = "";


                    if (Text.Contains(" "))
                    {

                        foreach (string term in Text.Split(' '))
                        {
                            if (!string.IsNullOrEmpty(term))
                            {
                                if (FreeText.Length > 0)
                                {
                                    FreeText += " AND ";
                                }

                                if (Text.Contains("\\*"))
                                {
                                    FreeText += term;
                                }
                                else
                                {
                                    FreeText += term + "*";
                                }

                            }

                        }

                        SearchText += "(" + FreeText + ")";
                    }
                    else
                    {
                        SearchText += Text + "*";
                    }

                    string SearchMetadata = "";


                    foreach (SearchTerm Item in objSearchTearm)
                    {

                        SearchMetadata += " AND ";


                        SearchMetadata += "(";

                        string SearchValue = "";

                        foreach (string Val in Item.MetadataValue)
                        {
                            if (SearchValue.Length > 0)
                            {
                                SearchValue += " OR ";
                            }

                            SearchValue += "Metadata_" + Item.MetadataName.Replace(" ", "__") + ":";
                            SearchValue += "\"" + Val + "\"";


                        }
                        SearchMetadata += SearchValue;
                        SearchMetadata += ")";

                    }

                    SearchText += SearchMetadata;



                    if (UserID != 0)
                    {
                        SearchText += " AND UserID:" + UserID;
                    }


                    if (TypeID != null)
                    {
                        for (int i = 0; i <= TypeID.Length - 1; i++)
                        {
                            if (i == 0)
                            {
                                SearchText += " AND (";
                            }
                            else
                            {
                                SearchText += " OR ";
                            }
                            SearchText += "TypeID:" + TypeID[i];

                        }

                        if (TypeID.Length > 0)
                        {
                            SearchText += ")";
                        }

                    }
                }


                TopDocs Result = PerformSearch(SearchText);
                List<ResultEntity> objResultEntityList = new List<ResultEntity>();

                foreach (ScoreDoc scoreDoc in Result.ScoreDocs)
                {
                    int x = 0;
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        // retrieve the document from the 'ScoreDoc' object
                        Lucene.Net.Documents.Document doc = IndexSearch.Doc(scoreDoc.Doc);//searcher.Doc(scoreDoc.Doc);
                        ResultEntity objResultEntity = new ResultEntity();
                        var _with1 = objResultEntity;
                        _with1.TypeID = Convert.ToInt32(doc.Get("TypeID"));
                        _with1.TypeCategoryID = Convert.ToInt32(doc.Get("TypeCategoryID"));
                        _with1.Name = System.Net.WebUtility.HtmlDecode(doc.Get("Name"));
                        _with1.Path = doc.Get("Path");
                        _with1.FileGUID = doc.Get("Path");
                        _with1.ThumbnailUrl = doc.Get("ThumbnailUrl");
                        IList itemPath = tx.PersistenceManager.PlanningRepository.ExecuteQuery("SELECT dbo.searchentitypathinfo(" + doc.Get("ID") + ") as 'pathinfo'");
                        _with1.pathInfo = itemPath;
                        IList<BrandSystems.Marcom.Core.Metadata.Interface.IEntityType> _iientitytype = new List<BrandSystems.Marcom.Core.Metadata.Interface.IEntityType>();
                        _iientitytype = GetEntityTypeByID(proxy, Convert.ToInt32(doc.Get("TypeID")));
                        IList<EntityRoleUserDao> entityrole = new List<EntityRoleUserDao>();
                        entityrole = tx.PersistenceManager.PlanningRepository.GetEquals<EntityRoleUserDao>("Entityid", Convert.ToInt32(doc.Get("ParentID")));
                        foreach (Field Item in doc.GetFields())
                        {
                            if (Item.Name == "Metadata_Description")
                            {
                                _with1.Description = Item.StringValue.ToString();
                            }
                        }
                        if (Convert.ToInt32(doc.Get("TypeID")) == (int)EntityTypeList.Milestone)
                        {
                            BaseEntityDao entitytypeid = new BaseEntityDao();
                            entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID")));
                            BaseEntityDao prententityid = new BaseEntityDao();
                            prententityid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, entitytypeid.Parentid);
                            _with1.ID = entitytypeid.Parentid.ToString();
                            _with1.Description = prententityid.Name;
                            _with1.Searchentitytype = "Production";
                        }
                        else
                        {
                            _with1.ID = doc.Get("ID");
                        }
                        if (_with1.TypeID == 4)
                        {
                            AttachmentsDao attchments = new AttachmentsDao();
                            attchments = tx.PersistenceManager.MetadataRepository.Get<AttachmentsDao>(AttachmentsDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID")));
                            BaseEntityDao entitytypeid = new BaseEntityDao();
                            entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, attchments.Entityid);
                            _with1.ShortDescription = "A";
                            _with1.ColorCode = "008000";
                            _with1.Description = entitytypeid.Name;
                            _with1.ThumbnailUrl = doc.Get("ThumbnailUrl");
                            _with1.Path = doc.Get("Path");
                            _with1.ParentID = entitytypeid.Id;
                            _with1.Searchentitytype = "Asset";
                        }
                        else if (_with1.TypeID == 2 || _with1.TypeID == 3 || _with1.TypeID == 31 || _with1.TypeID == 30)
                        {
                            BaseEntityDao entityid = new BaseEntityDao();
                            entityid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID")));

                            BaseEntityDao parententityid = new BaseEntityDao();
                            parententityid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, entityid.Id);

                            _with1.ShortDescription = "T";
                            _with1.ColorCode = "008000";
                            _with1.Description = parententityid.Name;
                            _with1.Searchentitytype = "Task";
                        }
                        else if (_with1.TypeID == 1000)
                        {
                            var entityName = "";
                            if (MarcomManagerFactory.ActiveMetadataVersionNumber == 0)
                                entityName = "AttributeGroup" + doc.Get("ParentID") + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                            else
                                entityName = "AttributeGroup" + doc.Get("ParentID") + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber.ToString();

                            var dynamicvalues = tx.PersistenceManager.MetadataRepository.GetAll<AttrGroupDynamicAttributesDao>(entityName).Where(a => a.Id == Convert.ToInt32(doc.Get("ID")));
                            foreach (var dynamic in dynamicvalues)
                            {
                                var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                                 where item.Id == dynamic.EntityId
                                                 select item).FirstOrDefault();
                                _iientitytype = GetEntityTypeByID(proxy, Convert.ToInt32(entityObj.Typeid));

                                _with1.ShortDescription = _iientitytype.ElementAt(0).ShortDescription;
                                _with1.ColorCode = _iientitytype.ElementAt(0).ColorCode;
                                _with1.Description = doc.Get("Description");
                                _with1.ID = dynamic.EntityId.ToString();
                                _with1.TypeID = entityObj.Typeid;
                                _with1.Name = entityObj.Name;
                                _with1.ParentID = entityObj.Id;
                                x = 1;
                                _with1.Searchentitytype = "Production";
                            }
                        }
                        else
                        {
                            _with1.ShortDescription = _iientitytype.ElementAt(0).ShortDescription;
                            _with1.ColorCode = _iientitytype.ElementAt(0).ColorCode;
                            _with1.Description = doc.Get("Description");
                            _with1.Searchentitytype = "Production";
                        }
                        if (_with1.TypeID == 4)
                        {
                            _with1.ThumbnailUrl = doc.Get("ThumbnailUrl");
                        }

                        _with1.Caption = _iientitytype.ElementAt(0).Caption;

                        StringBuilder strqry3 = new StringBuilder();


                        strqry3.Append("SELECT metso.StatusOptions as Status FROM MM_EntityStatus mes ");
                        strqry3.Append("INNER JOIN MM_EntityTypeStatus_Options metso ON metso.ID=mes.StatusID ");
                        strqry3.Append("WHERE mes.EntityID=? ");



                        StringBuilder strqry2 = new StringBuilder();
                        strqry2.Append("WITH GetPath AS (");
                        strqry2.Append("SELECT pe.ID, pe.Name,pe.ParentID,pe.UniqueKey,pe.TypeID,me.ColorCode,me.ShortDescription,pe.[Level] ");
                        strqry2.Append("FROM   PM_Entity pe ");
                        strqry2.Append("INNER JOIN mm_entitytype me ON  pe.TypeID = me.ID WHERE  pe.ID = ? ");
                        strqry2.Append("UNION ALL  ");
                        strqry2.Append("SELECT ent.ID,ent.Name,ent.ParentID,ent.UniqueKey,ent.TypeID,me.ColorCode,me.ShortDescription,ent.[Level] ");
                        strqry2.Append(" FROM   PM_Entity ent INNER JOIN mm_entitytype me ON  ent.TypeID = me.ID ");
                        strqry2.Append("INNER JOIN GetPath AS Child ON  ent.id = Child.ParentID) ");
                        strqry2.Append("SELECT * FROM   GetPath ORDER BY ID");


                        StringBuilder strqry = new StringBuilder();
                        strqry.Append("WITH GetPath ");
                        strqry.Append("AS ");
                        strqry.Append("(");
                        strqry.Append("SELECT ID, Name, ParentID FROM PM_Entity WHERE ID = ? ");
                        strqry.Append("UNION ALL ");
                        strqry.Append("SELECT ent.ID, ent.Name, ent.ParentID FROM PM_Entity ent INNER JOIN GetPath AS Child ON ent.id = Child.ParentID");
                        strqry.Append(")");
                        strqry.Append("SELECT top(1)ID FROM GetPath ORDER BY ID");
                        IList listresult;
                        IList listresultforpath;
                        IList StatusList;
                        string Status = "-";
                        if (_with1.ThumbnailUrl != "DAM")
                        {
                            if (x != 1 && _with1.TypeID != 4)
                            {
                                listresult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry.ToString(), doc.Get("ID"));
                                listresultforpath = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry2.ToString(), doc.Get("ID"));
                                StatusList = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry3.ToString(), doc.Get("ID"));
                            }
                            else
                            {
                                listresult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry.ToString(), _with1.ParentID);
                                listresultforpath = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry2.ToString(), _with1.ParentID);
                                StatusList = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry3.ToString(), _with1.ParentID);
                            }
                            var listcount = listresultforpath.Count;
                            StringBuilder pathstring = new StringBuilder();
                            int i = 0;

                            foreach (var item in listresultforpath)
                            {
                                i++;
                                pathstring.Append("<a style='cursor: pointer;color:#999999;' id='breadcrumlink' href='' data-parentid='" + (int)((System.Collections.Hashtable)(listresult[0]))["ID"] + "' data-uniquekey='" + (string)((System.Collections.Hashtable)(item))["UniqueKey"] + "' data-colorcode='" + (string)((System.Collections.Hashtable)(item))["ColorCode"] + "' data-shortdesc='" + (string)((System.Collections.Hashtable)(item))["ShortDescription"] + "' data-typeid='" + (int)((System.Collections.Hashtable)(item))["TypeID"] + "' ng-click='IsActiveEntity(" + (int)((System.Collections.Hashtable)(item))["ID"] + "," + (int)((System.Collections.Hashtable)(item))["TypeID"] + ")' >" + (string)((System.Collections.Hashtable)(item))["Name"] + "</a>  ");
                                if (listresultforpath.Count != i)
                                {
                                    pathstring.Append("<span>/</span>");
                                }
                            }
                            foreach (var item in StatusList)
                            {
                                Status = (string)((System.Collections.Hashtable)(StatusList[0]))["Status"];
                            }
                            _with1.Status = Status;
                            _with1.Path = pathstring.ToString();

                            foreach (var item in listresult)
                            {
                                _with1.ParentID = (int)((System.Collections.Hashtable)(item))["ID"];
                            }
                            _with1.Level = (int)((System.Collections.Hashtable)(listresultforpath[listcount - 1]))["Level"];
                        }
                        else
                        {
                            try
                            {
                                _with1.MemberAccess = doc.Get("AssetAccess") == null ? "" : doc.Get("AssetAccess").ToString();
                            }
                            catch { }
                            _with1.Extension = doc.Get("Extension");
                            _with1.ParentID = Convert.ToInt32(doc.Get("ParentID"));
                            _with1.Level = 0;
                            _with1.Searchentitytype = "Asset";
                        }


                        if (_with1.ThumbnailUrl == "DAM")
                        {
                            IList<GlobalRoleUserDao> globalrole = new List<GlobalRoleUserDao>();
                            globalrole = tx.PersistenceManager.PlanningRepository.GetEquals<GlobalRoleUserDao>("Userid", proxy.MarcomManager.User.Id);
                            var assetroles = _with1.MemberAccess.Split(',');
                            int countroles = 0;
                            foreach (var assetrole in assetroles)
                            {
                                int roleasset = assetrole == "" ? 0 : Convert.ToInt32(assetrole);
                                countroles = (from a in globalrole where a.GlobalRoleId == roleasset select a).Count();
                            }
                            int membercount = (from abc in entityrole where abc.Userid == proxy.MarcomManager.User.Id select abc).Count();

                            if (countroles > 0 || membercount > 0)
                                objResultEntityList.Add(objResultEntity);
                            _with1.Searchentitytype = "Asset";
                        }
                        else
                        {
                            objResultEntityList.Add(objResultEntity);
                        }
                    }
                }
                SearchResult objSearchResult = new SearchResult();
                objSearchResult.Count = objResultEntityList.Count();
                int productionCount = objResultEntityList.Where(a => a.Searchentitytype == "Production").Count();
                int taskCount = objResultEntityList.Where(a => a.Searchentitytype == "Task").Count();
                int assetCount = objResultEntityList.Where(a => a.Searchentitytype == "Asset").Count();

                if (assetCount > 0)
                {
                    string idinClause = "(" + String.Join(",", objResultEntityList.Where(a => a.Searchentitytype == "Asset").Select(x => x.ID.ToString()).Distinct().ToArray()) + ")";
                    List<object> assetResult = proxy.MarcomManager.DigitalAssetManager.GetSearchAssets(idinClause);
                    objSearchResult.AssetData = assetResult;
                }

                List<object> countObj = new List<object>();
                countObj.Add(new { production = productionCount, task = taskCount, asset = assetCount });

                objSearchResult.DistictResultcount = countObj;

                if (objSearchResult.Count % SearchSettings.Instance.PageSize > 0)
                {
                    objSearchResult.TotalPages = ((objSearchResult.Count - objSearchResult.Count % SearchSettings.Instance.PageSize) / SearchSettings.Instance.PageSize) + 1;
                }
                else
                {
                    objSearchResult.TotalPages = objSearchResult.Count / SearchSettings.Instance.PageSize;
                }

                objSearchResult.SearchResultEntity = objResultEntityList;


                return objSearchResult;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public SearchResult PerformCustomAdvanceSearch(PlanningManagerProxy proxy, string Text, List<SearchTerm> objSearchTearm, int UserID = 0, int[] TypeID = null)
        {

            try
            {
                string InputText = Text;
                string SearchText = "";
                Text = Escape(Text);
                string SearchMetadata = "";

                if (Text != "")
                {
                    Text = Escape(Text);
                    string FreeText = "";
                    if (Text.Contains(" "))
                    {

                        foreach (string term in Text.Split(' '))
                        {
                            if (!string.IsNullOrEmpty(term))
                            {
                                if (FreeText.Length > 0)
                                {
                                    FreeText += " AND ";
                                }

                                if (Text.Contains("\\*"))
                                {
                                    FreeText += term;
                                }
                                else
                                {
                                    FreeText += term + "*";
                                }

                            }

                        }

                        SearchText += "(" + FreeText + ")";
                    }
                    else
                    {
                        SearchText += Text + "*";
                    }
                }
                else
                {

                    foreach (SearchTerm Item in objSearchTearm)
                    {
                        string SearchValue = "";
                        foreach (string Val in Item.MetadataValue)
                        {
                            if (SearchValue.Length > 0)
                            {
                                SearchValue += " OR ";
                            }

                            SearchValue += "Metadata_" + Item.MetadataName.Replace(" ", "__") + ":";
                            SearchValue += "\"" + Val + "\"";
                        }
                        SearchMetadata += SearchValue;

                    }
                    if (SearchMetadata.Length > 0)
                        SearchText += SearchMetadata;
                }

                if (UserID != 0)
                {
                    SearchText += " AND UserID:" + UserID;
                }
                if (TypeID != null)
                {
                    for (int i = 0; i <= TypeID.Length - 1; i++)
                    {
                        if (i == 0)
                        {
                            SearchText += " AND (";
                        }
                        else
                        {
                            SearchText += " OR ";
                        }
                        SearchText += "TypeID:" + TypeID[i];

                    }

                    if (TypeID.Length > 0)
                    {
                        SearchText += ")";
                    }

                }

                TopDocs Result = PerformSearch(SearchText);
                List<ResultEntity> objResultEntityList = new List<ResultEntity>();

                foreach (ScoreDoc scoreDoc in Result.ScoreDocs)
                {
                    int x = 0;
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        // retrieve the document from the 'ScoreDoc' object
                        Lucene.Net.Documents.Document doc = IndexSearch.Doc(scoreDoc.Doc);//searcher.Doc(scoreDoc.Doc);
                        ResultEntity objResultEntity = new ResultEntity();
                        var _with1 = objResultEntity;
                        _with1.TypeID = Convert.ToInt32(doc.Get("TypeID"));
                        _with1.TypeCategoryID = Convert.ToInt32(doc.Get("TypeCategoryID"));
                        _with1.Name = System.Net.WebUtility.HtmlDecode(doc.Get("Name"));
                        _with1.Path = doc.Get("Path");
                        _with1.FileGUID = doc.Get("Path");
                        _with1.ThumbnailUrl = doc.Get("ThumbnailUrl");
                        IList itemPath = tx.PersistenceManager.PlanningRepository.ExecuteQuery("SELECT dbo.searchentitypathinfo(" + doc.Get("ID") + ") as 'pathinfo'");
                        _with1.pathInfo = itemPath;
                        IList<BrandSystems.Marcom.Core.Metadata.Interface.IEntityType> _iientitytype = new List<BrandSystems.Marcom.Core.Metadata.Interface.IEntityType>();
                        _iientitytype = GetEntityTypeByID(proxy, Convert.ToInt32(doc.Get("TypeID")));
                        IList<EntityRoleUserDao> entityrole = new List<EntityRoleUserDao>();
                        entityrole = tx.PersistenceManager.PlanningRepository.GetEquals<EntityRoleUserDao>("Entityid", Convert.ToInt32(doc.Get("ParentID")));
                        foreach (Field Item in doc.GetFields())
                        {
                            if (Item.Name == "Metadata_Description")
                            {
                                _with1.Description = Item.StringValue.ToString();
                            }
                        }
                        if (Convert.ToInt32(doc.Get("TypeID")) == (int)EntityTypeList.Milestone)
                        {
                            BaseEntityDao entitytypeid = new BaseEntityDao();
                            entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID")));
                            BaseEntityDao prententityid = new BaseEntityDao();
                            prententityid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, entitytypeid.Parentid);
                            _with1.ID = entitytypeid.Parentid.ToString();
                            _with1.Description = prententityid.Name;
                            _with1.Searchentitytype = "Production";
                        }
                        else
                        {
                            _with1.ID = doc.Get("ID");
                        }
                        if (_with1.TypeID == 4)
                        {
                            AttachmentsDao attchments = new AttachmentsDao();
                            attchments = tx.PersistenceManager.MetadataRepository.Get<AttachmentsDao>(AttachmentsDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID")));
                            BaseEntityDao entitytypeid = new BaseEntityDao();
                            entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, attchments.Entityid);
                            _with1.ShortDescription = "A";
                            _with1.ColorCode = "008000";
                            _with1.Description = entitytypeid.Name;
                            _with1.ThumbnailUrl = doc.Get("ThumbnailUrl");
                            _with1.Path = doc.Get("Path");
                            _with1.ParentID = entitytypeid.Id;
                            _with1.Searchentitytype = "Asset";
                        }
                        else if (_with1.TypeID == 2 || _with1.TypeID == 3 || _with1.TypeID == 31 || _with1.TypeID == 30)
                        {
                            BaseEntityDao entityid = new BaseEntityDao();
                            entityid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, Convert.ToInt32(doc.Get("ID")));

                            BaseEntityDao parententityid = new BaseEntityDao();
                            parententityid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, entityid.Id);

                            _with1.ShortDescription = "T";
                            _with1.ColorCode = "008000";
                            _with1.Description = parententityid.Name;
                            _with1.Searchentitytype = "Task";
                        }
                        else if (_with1.TypeID == 1000)
                        {
                            var entityName = "";
                            if (MarcomManagerFactory.ActiveMetadataVersionNumber == 0)
                                entityName = "AttributeGroup" + doc.Get("ParentID") + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                            else
                                entityName = "AttributeGroup" + doc.Get("ParentID") + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber.ToString();

                            var dynamicvalues = tx.PersistenceManager.MetadataRepository.GetAll<AttrGroupDynamicAttributesDao>(entityName).Where(a => a.Id == Convert.ToInt32(doc.Get("ID")));
                            foreach (var dynamic in dynamicvalues)
                            {
                                var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                                 where item.Id == dynamic.EntityId
                                                 select item).FirstOrDefault();
                                _iientitytype = GetEntityTypeByID(proxy, Convert.ToInt32(entityObj.Typeid));

                                _with1.ShortDescription = _iientitytype.ElementAt(0).ShortDescription;
                                _with1.ColorCode = _iientitytype.ElementAt(0).ColorCode;
                                _with1.Description = doc.Get("Description");
                                _with1.ID = dynamic.EntityId.ToString();
                                _with1.TypeID = entityObj.Typeid;
                                _with1.Name = entityObj.Name;
                                _with1.ParentID = entityObj.Id;
                                x = 1;
                                _with1.Searchentitytype = "Production";
                            }
                        }
                        else
                        {
                            _with1.ShortDescription = _iientitytype.ElementAt(0).ShortDescription;
                            _with1.ColorCode = _iientitytype.ElementAt(0).ColorCode;
                            _with1.Description = doc.Get("Description");
                            _with1.Searchentitytype = "Production";
                        }
                        if (_with1.TypeID == 4)
                        {
                            _with1.ThumbnailUrl = doc.Get("ThumbnailUrl");
                        }

                        _with1.Caption = _iientitytype.ElementAt(0).Caption;

                        StringBuilder strqry3 = new StringBuilder();


                        strqry3.Append("SELECT metso.StatusOptions as Status FROM MM_EntityStatus mes ");
                        strqry3.Append("INNER JOIN MM_EntityTypeStatus_Options metso ON metso.ID=mes.StatusID ");
                        strqry3.Append("WHERE mes.EntityID=? ");




                        StringBuilder strqry2 = new StringBuilder();
                        strqry2.Append("WITH GetPath AS (");
                        strqry2.Append("SELECT pe.ID, pe.Name,pe.ParentID,pe.UniqueKey,pe.TypeID,me.ColorCode,me.ShortDescription,pe.[Level] ");
                        strqry2.Append("FROM   PM_Entity pe ");
                        strqry2.Append("INNER JOIN mm_entitytype me ON  pe.TypeID = me.ID WHERE  pe.ID = ? ");
                        strqry2.Append("UNION ALL  ");
                        strqry2.Append("SELECT ent.ID,ent.Name,ent.ParentID,ent.UniqueKey,ent.TypeID,me.ColorCode,me.ShortDescription,ent.[Level] ");
                        strqry2.Append(" FROM   PM_Entity ent INNER JOIN mm_entitytype me ON  ent.TypeID = me.ID ");
                        strqry2.Append("INNER JOIN GetPath AS Child ON  ent.id = Child.ParentID) ");
                        strqry2.Append("SELECT * FROM   GetPath ORDER BY ID");


                        StringBuilder strqry = new StringBuilder();
                        strqry.Append("WITH GetPath ");
                        strqry.Append("AS ");
                        strqry.Append("(");
                        strqry.Append("SELECT ID, Name, ParentID FROM PM_Entity WHERE ID = ? ");
                        strqry.Append("UNION ALL ");
                        strqry.Append("SELECT ent.ID, ent.Name, ent.ParentID FROM PM_Entity ent INNER JOIN GetPath AS Child ON ent.id = Child.ParentID");
                        strqry.Append(")");
                        strqry.Append("SELECT top(1)ID FROM GetPath ORDER BY ID");
                        IList listresult;
                        IList listresultforpath;
                        IList StatusList;
                        string Status = "-";
                        if (_with1.ThumbnailUrl != "DAM")
                        {
                            if (x != 1 && _with1.TypeID != 4)
                            {
                                listresult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry.ToString(), doc.Get("ID"));
                                listresultforpath = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry2.ToString(), doc.Get("ID"));
                                StatusList = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry3.ToString(), doc.Get("ID"));
                            }
                            else
                            {
                                listresult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry.ToString(), _with1.ParentID);
                                listresultforpath = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry2.ToString(), _with1.ParentID);
                                StatusList = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry3.ToString(), _with1.ParentID);
                            }
                            var listcount = listresultforpath.Count;
                            StringBuilder pathstring = new StringBuilder();
                            int i = 0;

                            foreach (var item in listresultforpath)
                            {
                                i++;
                                pathstring.Append("<a style='cursor: pointer;color:#999999;' id='breadcrumlink' href='' data-parentid='" + (int)((System.Collections.Hashtable)(listresult[0]))["ID"] + "' data-uniquekey='" + (string)((System.Collections.Hashtable)(item))["UniqueKey"] + "' data-colorcode='" + (string)((System.Collections.Hashtable)(item))["ColorCode"] + "' data-shortdesc='" + (string)((System.Collections.Hashtable)(item))["ShortDescription"] + "' data-typeid='" + (int)((System.Collections.Hashtable)(item))["TypeID"] + "' ng-click='IsActiveEntity(" + (int)((System.Collections.Hashtable)(item))["ID"] + "," + (int)((System.Collections.Hashtable)(item))["TypeID"] + ")' >" + (string)((System.Collections.Hashtable)(item))["Name"] + "</a>  ");
                                if (listresultforpath.Count != i)
                                {
                                    pathstring.Append("<span>/</span>");
                                }
                            }
                            foreach (var item in StatusList)
                            {
                                Status = (string)((System.Collections.Hashtable)(StatusList[0]))["Status"];
                            }
                            _with1.Status = Status;
                            _with1.Path = pathstring.ToString();

                            foreach (var item in listresult)
                            {
                                _with1.ParentID = (int)((System.Collections.Hashtable)(item))["ID"];
                            }
                            _with1.Level = (int)((System.Collections.Hashtable)(listresultforpath[listcount - 1]))["Level"];
                        }
                        else
                        {
                            try
                            {
                                _with1.MemberAccess = doc.Get("AssetAccess") == null ? "" : doc.Get("AssetAccess").ToString();
                            }
                            catch { }
                            _with1.Extension = doc.Get("Extension");
                            _with1.ParentID = Convert.ToInt32(doc.Get("ParentID"));
                            _with1.Level = 0;
                            _with1.Searchentitytype = "Asset";
                        }


                        if (_with1.ThumbnailUrl == "DAM")
                        {
                            IList<GlobalRoleUserDao> globalrole = new List<GlobalRoleUserDao>();
                            globalrole = tx.PersistenceManager.PlanningRepository.GetEquals<GlobalRoleUserDao>("Userid", proxy.MarcomManager.User.Id);
                            var assetroles = _with1.MemberAccess.Split(',');
                            int countroles = 0;
                            foreach (var assetrole in assetroles)
                            {
                                int roleasset = assetrole == "" ? 0 : Convert.ToInt32(assetrole);
                                countroles = (from a in globalrole where a.GlobalRoleId == roleasset select a).Count();
                            }
                            int membercount = (from abc in entityrole where abc.Userid == proxy.MarcomManager.User.Id select abc).Count();

                            if (countroles > 0 || membercount > 0)
                                objResultEntityList.Add(objResultEntity);
                            _with1.Searchentitytype = "Asset";
                        }
                        else
                        {
                            objResultEntityList.Add(objResultEntity);
                        }
                    }
                }
                SearchResult objSearchResult = new SearchResult();
                objSearchResult.Count = objResultEntityList.Count();
                int productionCount = objResultEntityList.Where(a => a.Searchentitytype == "Production").Count();
                int taskCount = objResultEntityList.Where(a => a.Searchentitytype == "Task").Count();
                int assetCount = objResultEntityList.Where(a => a.Searchentitytype == "Asset").Count();

                if (assetCount > 0)
                {
                    string idinClause = "(" + String.Join(",", objResultEntityList.Where(a => a.Searchentitytype == "Asset").Select(x => x.ID.ToString()).Distinct().ToArray()) + ")";
                    try { List<object> assetResult = proxy.MarcomManager.DigitalAssetManager.GetSearchAssets(idinClause); objSearchResult.AssetData = assetResult; }
                    catch { }
                }

                List<object> countObj = new List<object>();
                countObj.Add(new { production = productionCount, task = taskCount, asset = assetCount });

                objSearchResult.DistictResultcount = countObj;

                if (objSearchResult.Count % SearchSettings.Instance.PageSize > 0)
                {
                    objSearchResult.TotalPages = ((objSearchResult.Count - objSearchResult.Count % SearchSettings.Instance.PageSize) / SearchSettings.Instance.PageSize) + 1;
                }
                else
                {
                    objSearchResult.TotalPages = objSearchResult.Count / SearchSettings.Instance.PageSize;
                }

                objSearchResult.SearchResultEntity = objResultEntityList;


                return objSearchResult;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public SearchResult Search(PlanningManagerProxy proxy, string Text, List<SearchTerm> SearchTerm, int[] ETypeID, int PageID, bool IsGlobalAdmin)
        {
            try
            {
                int intUserID = proxy.MarcomManager.User.Id;

                bool AccessPermission = proxy.MarcomManager.AccessManager.CheckUserAccess((int)Modules.Planning, (int)FeatureID.ViewEditAll);

                StringBuilder SearchTermText = new StringBuilder();

                foreach (SearchTerm Item in SearchTerm)
                {
                    SearchTermText.Append(Item.MetadataName);
                    foreach (string Val in Item.MetadataValue)
                    {
                        SearchTermText.Append(Val);
                    }
                }

                string EntityTypeIDs = "";
                if (ETypeID != null)
                {
                    EntityTypeIDs = string.Join(",", ETypeID);
                }

                //Generate Search Criteria Hash
                string SearchCriteria = "Text=" + Text + " TypeID=" + EntityTypeIDs + " SearchTerm=" + SearchTermText.ToString() + " IsGlobalAdmin=" + AccessPermission;
                int SearchCriteriaHash = SearchCriteria.GetHashCode();

                SearchResult SearchResult = default(SearchResult);

                //Get Filter Entity ID based on Search criteria
                FilteredEntityHolder FEH = new FilteredEntityHolder();
                if (AccessPermission == true)
                {
                    SearchResult = PerformAdvanceSearch(proxy, Text, SearchTerm, 0, ETypeID);
                }
                else
                {
                    SearchResult = PerformAdvanceSearch(proxy, Text, SearchTerm, intUserID, ETypeID);
                }
                //Do Paging now

                int SkipItem = SearchSettings.Instance.PageSize * (PageID - 1);

                int PageSize = SearchResult.Count - SkipItem;


                if (PageSize > SearchSettings.Instance.PageSize)
                {
                    PageSize = SearchSettings.Instance.PageSize;

                }

                // dynamic Result = (from Item in SearchResult.SearchResultEntityItem).Skip(SkipItem).Take(PageSize);
                SearchResult SR = new SearchResult();

                SR.SearchResultEntity = (from Item in SearchResult.SearchResultEntity select Item).Skip(SkipItem).Take(PageSize).ToList();



                //SR.SearchResultEntity.Add(Result);

                //SR.SearchResultEntity = Result.ToList();

                //foreach (var item in Result)
                //{
                //    SR.SearchResultEntity = item.ToList();
                //}

                var _with1 = SR;
                _with1.PageNo = PageID;
                _with1.TotalPages = SearchResult.TotalPages;


                var distinctItems = SearchResult.SearchResultEntity.GroupBy(x => x.TypeID).Select(y => y.First());
                SR.DistinctTypes = (from Item in distinctItems select Item).Skip(SkipItem).Take(PageSize).ToList();
                SR.DistinctTypes = distinctItems.ToList();

                return SR;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public SearchResult CustomSearch(PlanningManagerProxy proxy, string Text, List<SearchTerm> SearchTerm, int searchtype, int PageID, bool IsGlobalAdmin)
        {
            try
            {
                int intUserID = proxy.MarcomManager.User.Id;

                bool AccessPermission = proxy.MarcomManager.AccessManager.CheckUserAccess((int)Modules.Planning, (int)FeatureID.ViewEditAll);

                StringBuilder SearchTermText = new StringBuilder();

                foreach (SearchTerm Item in SearchTerm)
                {
                    SearchTermText.Append(Item.MetadataName);
                    foreach (string Val in Item.MetadataValue)
                    {
                        SearchTermText.Append(Val);
                    }
                }
                int[] ETypeID = proxy.MarcomManager.CommonManager.GetSearchCriteriaTypesIds(searchtype);
                string EntityTypeIDs = "";
                if (ETypeID != null)
                {
                    EntityTypeIDs = string.Join(",", ETypeID);
                }

                //Generate Search Criteria Hash
                string SearchCriteria = "Text=" + Text + " TypeID=" + EntityTypeIDs + " SearchTerm=" + SearchTermText.ToString() + " IsGlobalAdmin=" + AccessPermission;
                int SearchCriteriaHash = SearchCriteria.GetHashCode();

                SearchResult SearchResult = default(SearchResult);

                //Get Filter Entity ID based on Search criteria
                FilteredEntityHolder FEH = new FilteredEntityHolder();
                if (AccessPermission == true)
                {
                    SearchResult = PerformCustomAdvanceSearch(proxy, Text, SearchTerm, 0, ETypeID);
                }
                else
                {
                    SearchResult = PerformCustomAdvanceSearch(proxy, Text, SearchTerm, intUserID, ETypeID);
                }
                List<ResultEntity> objResultEntityList = new List<ResultEntity>();
                List<ResultEntity> finalResult = new List<ResultEntity>();

                //Do Paging now

                int SkipItem = SearchSettings.Instance.PageSize * (PageID);

                int PageSize = SearchResult.Count - SkipItem;


                if (PageSize > SearchSettings.Instance.PageSize)
                {
                    PageSize = SearchSettings.Instance.PageSize;

                }
                var pageSize = 20; // set your page size, which is number of records per page

                var page = PageID; // set current page number, must be >= 1

                var skip = pageSize * (page - 1);

                var canPage = skip < SearchResult.SearchResultEntity.Count;

                if (canPage) // do what you wish if you can page no further
                    objResultEntityList = SearchResult.SearchResultEntity.Where(a => a.Searchentitytype == Enum.GetName(typeof(SearchViews), searchtype)).ToList();
                else
                    objResultEntityList = SearchResult.SearchResultEntity.Select(p => p).Skip(skip).Take(pageSize).ToList();
                SearchResult SR = new SearchResult();
                SR.SearchResultEntity = objResultEntityList.ToList();
                var _with1 = SR;
                _with1.PageNo = PageID;
                _with1.TotalPages = SearchResult.TotalPages;
                var distinctItems = SearchResult.SearchResultEntity.GroupBy(x => x.TypeID).Select(y => y.First());
                SR.DistinctTypes = (from Item in distinctItems select Item).Skip(SkipItem).Take(PageSize).ToList();
                SR.DistictResultcount = SearchResult.DistictResultcount;
                SR.Count = SearchResult.Count;
                SR.AssetData = SearchResult.AssetData;
                return SR;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public bool UpdateSearchEngine(PlanningManagerProxy proxy)
        {
            List<SearchEntity> listsearch = new List<SearchEntity>();
            try
            {

                IList<EntityDao> allentity;
                IList<AttachmentsDao> allattachments;
                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> EntityMembers = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<BrandSystems.Marcom.Core.Metadata.Interface.IOption> _iioption = new List<BrandSystems.Marcom.Core.Metadata.Interface.IOption>();
                IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> roleusers = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                IList<AttributeGroupDao> allattributegroups;
                IList<AssetsDao> assets = new List<AssetsDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    allentity = tx.PersistenceManager.PlanningRepository.GetAll<EntityDao>();
                    allattachments = tx.PersistenceManager.CommonRepository.GetAll<AttachmentsDao>();
                    allattributegroups = tx.PersistenceManager.PlanningRepository.GetAll<AttributeGroupDao>();
                    assets = tx.PersistenceManager.PlanningRepository.GetAll<AssetsDao>();
                }
                //var entity = from entitys in allentity where (entitys.Typeid == 6 && entitys.Active == true) || (entitys.Typeid == 5 && entitys.Active == true) select entitys;

                var entity = from entitys in allentity where entitys.Active == true || entitys.Typeid == (int)EntityTypeList.Milestone select entitys;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    roleusers = tx.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                }
                IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                foreach (var item in entity)
                {
                    SearchEntity search = new SearchEntity();
                    //if (item.Typeid == 5 || item.Typeid == 6 || item.Typeid == 10)
                    //{

                    if (item.Typeid == Convert.ToInt32(EntityTypeList.Objective))
                    {
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {
                            var Objectiveentity = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, Convert.ToInt32(item.Id));
                            search.ID = Convert.ToInt32(item.Id).ToString();
                            search.TypeID = item.Typeid;
                            search.Name = Objectiveentity.Name;
                            search.Path = "";
                            search.ThumbnailUrl = "";
                            search.Description = "";
                            search.FileID = 0;
                            search.FileName = "";
                            search.AssetAccess = "";
                            var entitymembers = from members in roleusers where members.Entityid == item.Id select members;
                            IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                            for (int i = 0; i < entitymembers.Count(); i++)
                            {
                                search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                            }
                            listsearch.Add(search);
                        }
                    }


                    entityAttrVal = GetEntityAttributesDetails(proxy, item.Id);
                    if (entityAttrVal != null)
                    {
                        var entitymembers = from members in roleusers where members.Entityid == item.Id select members;
                        IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                        for (int i = 0; i < entitymembers.Count(); i++)
                        {
                            search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                        }

                        StringBuilder path = new StringBuilder();
                        int ID = item.Id;
                        search.ID = ID.ToString();
                        path.Append("<a onclick=activityload(" + ID + ")>" + search.Name + "</a>");
                        search.TypeID = item.Typeid;
                        //search.ModuleID = 1;
                        search.Name = item.Name;
                        search.Path = path.ToString();
                        search.ThumbnailUrl = "";
                        search.Description = "";
                        search.FileID = 0;
                        search.FileName = "";
                        search.AssetAccess = "";
                        foreach (var attrbs in entityAttrVal)
                        {
                            try
                            {
                                if (attrbs.TypeID != Convert.ToInt32(AttributesList.DropDownTree))
                                {
                                    if (attrbs.Lable != null && attrbs.Value != null)
                                    {
                                        AttributesList attypeid = (AttributesList)attrbs.TypeID;
                                        switch (attypeid)
                                        {
                                            case (AttributesList.TextSingleLine):
                                                if (attrbs.IsSpecial == false)
                                                {
                                                    search.Metadata.Add(new KeyValuePair<string, string>((string)attrbs.Lable, attrbs.Value.ToString()));
                                                }
                                                break;
                                            case (AttributesList.TextMultiLine):
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)attrbs.Lable, attrbs.Value.ToString()));
                                                break;
                                            case (AttributesList.TextMoney):
                                                search.Metadata.Add(new KeyValuePair<string, string>((string)attrbs.Lable, attrbs.Value.ToString()));
                                                break;
                                            case (AttributesList.ListSingleSelection):
                                                if (attrbs.IsSpecial == false)
                                                {
                                                    search.Metadata.Add(new KeyValuePair<string, string>((string)attrbs.Lable, attrbs.Caption[0].ToString()));
                                                }
                                                break;
                                            case (AttributesList.ListMultiSelection):
                                                string[] captions = attrbs.Caption.Split(',');
                                                foreach (var cap in captions)
                                                {
                                                    search.Metadata.Add(new KeyValuePair<string, string>((string)attrbs.Lable, cap.ToString()));
                                                }
                                                break;

                                        }
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < (attrbs.Value).Count; i++)
                                    {
                                        search.Metadata.Add(new KeyValuePair<string, string>(attrbs.Lable[i].Label, attrbs.Caption.Split(',')[i]));
                                    }
                                }
                            }
                            catch
                            {

                            }
                        }


                        listsearch.Add(search);
                    }

                    else if (item.Typeid == Convert.ToInt32(EntityTypeList.Milestone))
                    {
                        int ID = Convert.ToInt32(item.Id);
                        search.ID = ID.ToString();
                        //search.ModuleID = 1;
                        search.TypeID = item.Typeid;
                        search.Name = item.Name;
                        search.Path = "<span onclick=LoadChildTreeNodes(" + ID + ")>" + search.Name + "</span>";
                        search.ThumbnailUrl = "";
                        search.Description = "";
                        search.FileID = 0;
                        search.FileName = "";
                        search.AssetAccess = "";
                        var entitymembers = from members in roleusers where members.Entityid == item.Id select members;
                        IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                        for (int i = 0; i < entitymembers.Count(); i++)
                        {
                            search.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                        }
                        string entityName = "AttributeRecord1_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                        //tx.PersistenceManager.PlanningRepository.Get<DynamicAttributesDao>(entityName, dynamicdao);
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {
                            try
                            {
                                var attrResult = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => Convert.ToInt32(a.Attributes["66"]) == Convert.ToInt32(item.Id));
                                search.Metadata.Add(new KeyValuePair<string, string>("DueDate", attrResult.First().Attributes["56"].ToString()));
                                search.Metadata.Add(new KeyValuePair<string, string>("Name", attrResult.First().Attributes["2"].ToString()));
                                search.Metadata.Add(new KeyValuePair<string, string>("Description", attrResult.First().Attributes["58"].ToString()));
                            }
                            catch
                            {
                            }
                        }
                        listsearch.Add(search);
                    }
                    else if (item.Typeid == (int)TaskTypes.Work_Task || item.Typeid == (int)TaskTypes.Reviewal_Task || item.Typeid == (int)TaskTypes.Approval_Task || item.Typeid == (int)EntityTypeList.Task)
                    {
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {
                            search.ID = Convert.ToInt32(item.Id).ToString();
                            search.TypeID = item.Typeid;
                            search.Name = item.Name;
                            search.Path = "";
                            search.ThumbnailUrl = "";
                            search.Description = "";
                            search.FileID = 0;
                            search.FileName = "";
                            search.AssetAccess = "";
                            IList<TaskMembersDao> taskroleusers = new List<TaskMembersDao>();
                            taskroleusers = tx.PersistenceManager.TaskRepository.GetAll<TaskMembersDao>();
                            var entitymembers = from members in taskroleusers where members.TaskID == Convert.ToInt32(item.Id) select members;
                            for (int i = 0; i < entitymembers.Count(); i++)
                            {
                                search.UserIDs.Add(entitymembers.ElementAt(i).UserID);
                            }
                            listsearch.Add(search);
                        }
                    }
                }
                foreach (var attachments in allattachments)
                {
                    using (ITransaction tx2 = proxy.MarcomManager.GetTransaction())
                    {
                        SearchEntity attchsearch = new SearchEntity();
                        attchsearch.ID = attachments.Id.ToString();
                        attchsearch.Name = attachments.Name;
                        BaseEntityDao entitytypeid = new BaseEntityDao();


                        entitytypeid = tx2.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(attachments.Entityid);

                        if (entitytypeid.Typeid == 2 || entitytypeid.Typeid == 3 || entitytypeid.Typeid == 31 || entitytypeid.Typeid == 30)
                        {
                            IList<TaskMembersDao> taskroleusers = new List<TaskMembersDao>();
                            taskroleusers = tx2.PersistenceManager.TaskRepository.GetAll<TaskMembersDao>();
                            var entitymembers = from members in taskroleusers where members.TaskID == Convert.ToInt32(attachments.Entityid) select members;
                            for (int i = 0; i < entitymembers.Count(); i++)
                            {
                                attchsearch.UserIDs.Add(entitymembers.ElementAt(i).UserID);
                            }
                            attchsearch.TypeID = 4;
                        }
                        else
                        {
                            IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> entityattachroleusers = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                            entityattachroleusers = tx2.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                            var entitymembers = from members in entityattachroleusers where members.Entityid == attachments.Entityid select members;
                            for (int i = 0; i < entitymembers.Count(); i++)
                            {
                                attchsearch.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                            }
                            attchsearch.TypeID = 4;
                        }
                        IList<BrandSystems.Marcom.Dal.Common.Model.FileDao> files = new List<BrandSystems.Marcom.Dal.Common.Model.FileDao>();
                        files = tx2.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Common.Model.FileDao>();
                        var cmfiles = from fileslist in files where fileslist.Id == attachments.Id select fileslist;
                        attchsearch.Path = files.ElementAt(0).Fileguid.ToString();
                        attchsearch.ThumbnailUrl = files.ElementAt(0).Extension;
                        attchsearch.Description = "";
                        attchsearch.FileID = 0;
                        attchsearch.FileName = "";
                        attchsearch.AssetAccess = "";
                        listsearch.Add(attchsearch);
                    }
                }

                foreach (var attrgrp in allattributegroups)
                {
                    using (ITransaction tx5 = proxy.MarcomManager.GetTransaction())
                    {
                        var entityName = "";
                        if (MarcomManagerFactory.ActiveMetadataVersionNumber == 0)
                            entityName = "AttributeGroup" + attrgrp.Id + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                        else
                            entityName = "AttributeGroup" + attrgrp.Id + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber.ToString();
                        var dynamicvalues = tx5.PersistenceManager.MetadataRepository.GetAll<AttrGroupDynamicAttributesDao>(entityName);

                        foreach (var grpvalues in dynamicvalues)
                        {
                            try
                            {
                                SearchEntity grpsearch = new SearchEntity();
                                SearchSettings ss = new SearchSettings();
                                ss.IndexFolderLocation = AppDomain.CurrentDomain.BaseDirectory;
                                BaseEntityDao entitytypeid = new BaseEntityDao();

                                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                                {
                                    IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> roleusersgrp = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                                    roleusersgrp = tx.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                                    var entitymembers = from members in roleusersgrp where members.Entityid == grpvalues.EntityId select members;
                                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                                    for (int i = 0; i < entitymembers.Count(); i++)
                                    {
                                        grpsearch.UserIDs.Add(entitymembers.ElementAt(i).Userid);
                                    }

                                    entitytypeid = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(grpvalues.EntityId);
                                }
                                StringBuilder path = new StringBuilder();
                                int ID = grpvalues.Id;
                                grpsearch.ID = grpvalues.Id.ToString();
                                //search.ModuleID = 1;
                                grpsearch.TypeID = 1000;
                                grpsearch.Name = HttpUtility.UrlDecode(grpvalues.Attributes["76"].ToString());
                                path.Append("<a onclick=activityload(" + ID + ")>" + grpvalues.Attributes["76"] + "</a>");
                                grpsearch.Path = "";
                                grpsearch.ThumbnailUrl = "";
                                grpsearch.Metadata.Add(new KeyValuePair<string, string>("GroupRecordName", grpvalues.Attributes["76"].ToString()));
                                grpsearch.Description = grpvalues.Attributes["76"].ToString();
                                grpsearch.ParentID = attrgrp.Id;
                                grpsearch.FileID = 0;
                                grpsearch.FileName = "";
                                grpsearch.AssetAccess = "";
                                listsearch.Add(grpsearch);
                            }
                            catch
                            {
                            }
                        }
                    }
                }
                foreach (var asset in assets)
                {
                    //IList<DAMFileDao> damfiles = List<DAMFileDao>();
                    IList<DAMFileDao> files = new List<DAMFileDao>();
                    using (ITransaction ast = proxy.MarcomManager.GetTransaction())
                    {
                        files = ast.PersistenceManager.PlanningRepository.GetEquals<DAMFileDao>("AssetID", asset.ID);
                        int filecount = 0;
                        foreach (var file in files)
                        {
                            SearchEntity assetsearch = new SearchEntity();
                            assetsearch.ID = asset.ID.ToString();
                            assetsearch.AssetAccess = asset.AssetAccess == null ? "" : asset.AssetAccess;
                            assetsearch.Description = file.Description;
                            assetsearch.FileID = file.ID;
                            assetsearch.FileName = file.Name;
                            assetsearch.Name = asset.Name;
                            assetsearch.ParentID = asset.EntityID;
                            assetsearch.Path = file.FileGuid.ToString();
                            assetsearch.ThumbnailUrl = "DAM";
                            assetsearch.TypeCategoryID = asset.Category;
                            assetsearch.TypeID = asset.AssetTypeid;
                            switch (file.Extension)
                            {
                                case ".jpg":
                                case ".jpeg":
                                case ".png":
                                case ".psd":
                                case ".bmp":
                                case "tif":
                                case "tiff":
                                case "gif":
                                    assetsearch.Extension = "jpg";
                                    break;
                                default:
                                    assetsearch.Extension = file.Extension.Remove(0, 1);
                                    break;
                            }
                            if (filecount == 0)
                            {
                                IAssets assetdata = proxy.MarcomManager.DigitalAssetManager.GetAssetAttributesDetails(asset.ID);
                                if (assetdata != null && assetdata.AttributeData != null)
                                {
                                    foreach (var attrdata in assetdata.AttributeData)
                                    {
                                        try
                                        {
                                            if (attrdata.TypeID != Convert.ToInt32(AttributesList.DropDownTree))
                                            {
                                                if (attrdata.Lable != null && attrdata.Value != null)
                                                {
                                                    AttributesList atrtypeid = (AttributesList)attrdata.TypeID;
                                                    switch (atrtypeid)
                                                    {
                                                        case AttributesList.TextSingleLine:
                                                            if (attrdata.IsSpecial == false)
                                                            {
                                                                assetsearch.Metadata.Add(new KeyValuePair<string, string>((string)attrdata.Lable, attrdata.Value.ToString()));
                                                            }
                                                            break;
                                                        case AttributesList.TextMultiLine:
                                                            assetsearch.Metadata.Add(new KeyValuePair<string, string>((string)attrdata.Lable, attrdata.Value.ToString()));
                                                            break;
                                                        case AttributesList.ListSingleSelection:
                                                            if (attrdata.IsSpecial == false)
                                                            {
                                                                assetsearch.Metadata.Add(new KeyValuePair<string, string>((string)attrdata.Lable, attrdata.Caption[0].ToString()));
                                                            }
                                                            break;
                                                        case AttributesList.ListMultiSelection:
                                                            string[] captions = attrdata.Caption.Split(',');
                                                            foreach (var cap in captions)
                                                            {
                                                                assetsearch.Metadata.Add(new KeyValuePair<string, string>((string)attrdata.Lable, cap.ToString()));
                                                            }
                                                            break;

                                                        case AttributesList.DateTime:
                                                            break;
                                                        case AttributesList.DropDownTree:
                                                            break;
                                                        case AttributesList.Tree:
                                                            break;
                                                        case AttributesList.TextMoney:
                                                            assetsearch.Metadata.Add(new KeyValuePair<string, string>((string)attrdata.Lable, attrdata.Value.ToString()));
                                                            break;
                                                        case AttributesList.CheckBoxSelection:
                                                            break;
                                                        case AttributesList.Period:
                                                            break;
                                                        case AttributesList.Uploader:
                                                            break;
                                                        case AttributesList.TreeMultiSelection:
                                                            break;
                                                        case AttributesList.ParentEntityName:
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                }
                                            }
                                            else if (attrdata.TypeID == Convert.ToInt32(AttributesList.DropDownTree))
                                            {
                                                for (int i = 0; i < (attrdata.Value).Count; i++)
                                                {
                                                    assetsearch.Metadata.Add(new KeyValuePair<string, string>(attrdata.Lable[i].Label, attrdata.Caption.Split(',')[i]));
                                                }
                                            }
                                        }
                                        catch { }
                                    }
                                }
                            }
                            filecount++;
                            listsearch.Add(assetsearch);
                        }
                    }
                }
                List<Document> DocList = new List<Document>();
                string dirvalue = AppDomain.CurrentDomain.BaseDirectory + "SearchIndexFiles\\LuceneIndex\\Index";

                GC.Collect();
                var dir = new DirectoryInfo(dirvalue);
                dir.Attributes = dir.Attributes & ~FileAttributes.ReadOnly;
                dir.Delete(true);

                //string[] filePaths = System.IO.Directory.GetFiles(dirvalue);
                //foreach (string filePath in filePaths)
                //    System.IO.File.Delete(filePath);

                foreach (var item in listsearch)
                {
                    DocList.Add(CreateDocument(item));

                }
                if (SearchEngine.Instance.UpdateDocumentInIndex(DocList) == true)
                {
                    UpdateAutoCompleteText();
                }
                //if (SearchEngine.Instance.AddDocumentToTempIndex(DocList) == true)
                //{
                //    UpdateAutoCompleteText();
                //    return true;
                //}
                return true;
            }
            catch
            {
                //List<Document> DocList = new List<Document>();

                //foreach (var item in listsearch)
                //{
                //    DocList.Add(CreateDocument(item));
                //}
                //if (SearchEngine.Instance.AddDocumentToTempIndex(DocList) == true)
                //{
                //    UpdateAutoCompleteText();
                //    return true;
                //}
                return false;
            }
        }
        #endregion

        /// <summary>
        /// Getting Objective & Assignments Type Block
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <param name="proxy">The proxy</param>
        /// <returns>IObjectiveSummaryDeatils</returns>
        public IObjectiveSummaryDetails GettingObjectiveSummaryBlockDetails(PlanningManagerProxy proxy, int objectiveId)
        {
            try
            {
                IObjectiveSummaryDetails objSummaryDetails = new ObjectiveSummaryDetails();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    ObjectiveNumericDao quantitativeDao = new ObjectiveNumericDao();
                    ObjectiveRatingDao objRatingDao = new ObjectiveRatingDao();
                    var entityResult = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == objectiveId);
                    var objectiveResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveDao>().Where(a => a.Id == objectiveId).ToList();
                    if (objectiveResult[0].Typeid == 1 || objectiveResult[0].Typeid == 2)
                    {
                        var UnitResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveUnitDao>();
                        StringBuilder quantitativequery = new StringBuilder();
                        quantitativequery.Append("SELECT pe.ID,po.[ObjectiveStatus], pe.Name,po.TypeID,po.Instruction,po.IsEnableFeedback,");
                        quantitativequery.Append("pon.GlobalBaseLine,pon.GlobalTarget, pon.UnitID,");
                        quantitativequery.Append(" (SELECT COUNT(*) FROM   PM_ObjectiveEntityValue WHERE  PlannedTarget <> 0");
                        quantitativequery.Append(" AND ObjectiveID = ? ");
                        quantitativequery.Append(" ) AS 'PlannedTarget',");
                        quantitativequery.Append(" (SELECT COUNT(*) FROM PM_ObjectiveEntityValue");
                        quantitativequery.Append(" WHERE  TargetOutcome <> 0 AND ObjectiveID = ? ");
                        quantitativequery.Append(" ) AS 'TargetOutcome'");
                        quantitativequery.Append(" FROM PM_Entity pe INNER JOIN PM_Objective po ON po.ID =pe.ID");
                        quantitativequery.Append(" INNER JOIN PM_Objective_Numeric pon ON pon.ObjectiveID = po.ID where pe.ID = ? ");
                        var quantitativequeryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(quantitativequery.ToString(), objectiveId, objectiveId, objectiveId).Cast<Hashtable>();
                        var entityObjectiveResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveEntityValueDao>().Where(a => a.Objectiveid == objectiveId).ToList();
                        foreach (var quantObj in quantitativequeryResult)
                        {
                            objSummaryDetails.Id = (int)quantObj["ID"];
                            objSummaryDetails.ObjectiveStatus = (bool)quantObj["ObjectiveStatus"];
                            objSummaryDetails.ObjectiveTypeId = (int)quantObj["TypeID"];
                            objSummaryDetails.ObjectiveDescription = quantObj["Instruction"] != "" ? (string)quantObj["Instruction"] : "-";
                            objSummaryDetails.GlobalBaseLine = (decimal)quantObj["GlobalBaseLine"];
                            objSummaryDetails.GlobalTarget = (decimal)quantObj["GlobalTarget"];
                            objSummaryDetails.ObjectiveUnitId = (int)quantObj["UnitID"];
                            string unitCaption = UnitResult.Where(a => a.Id == (int)quantObj["UnitID"]).Select(a => a.Caption).FirstOrDefault();
                            objSummaryDetails.ObjectiveUnitCaption = unitCaption != null ? unitCaption : "";
                            if (entityObjectiveResult.Count() > 0)
                            {
                                objSummaryDetails.PlannedAmount = (int)quantObj["PlannedTarget"];  // this is the count value we should not use decimal
                                objSummaryDetails.TargetOutcome = (int)quantObj["TargetOutcome"];  // this is the count of the value which the user given target opu
                            }
                            objSummaryDetails.EnableCommnets = (bool)quantObj["IsEnableFeedback"];
                        }
                    }
                    if (objectiveResult[0].Typeid == 3)
                    {
                        StringBuilder qualitativeQuery = new StringBuilder();
                        // string qualitativeQuery = "SELECT pe.ID,pe.[Active], pe.Name,po.TypeID,po.Instruction,po.IsEnableFeedback FROM PM_Entity pe INNER JOIN PM_Objective po ON po.ID = pe.ID where pe.ID'" + objectiveId + "'";
                        qualitativeQuery.Append("SELECT PO.ID AS 'ObjectiveID',");
                        qualitativeQuery.Append("                  PO.Name AS 'ObjectiveName',");
                        qualitativeQuery.Append("                  PO.Instruction AS 'ObjectiveDescription',");

                        qualitativeQuery.Append("            ISNULL(");

                        //qualitativeQuery.Append("    (");
                        //qualitativeQuery.Append("        SELECT pe.Active");
                        //qualitativeQuery.Append("       FROM   PM_Entity pe");
                        //qualitativeQuery.Append("       WHERE  pe.ID = " + objectiveId + "");
                        //qualitativeQuery.Append("   ),");

                        qualitativeQuery.Append("PO.ObjectiveStatus,  ");
                        qualitativeQuery.Append("    0");
                        qualitativeQuery.Append("    ) AS 'ObjectiveStatus',");

                        qualitativeQuery.Append("            (");
                        qualitativeQuery.Append("          SELECT COUNT(po.Fulfilment)");
                        qualitativeQuery.Append("          FROM   PM_ObjectiveEntityValue po");
                        qualitativeQuery.Append("          WHERE  po.ObjectiveID =  ? ");
                        qualitativeQuery.Append("                AND po.Fulfilment = 2");
                        qualitativeQuery.Append("     ) AS 'NotFulfiled',");
                        qualitativeQuery.Append("    (");
                        qualitativeQuery.Append("        SELECT COUNT(po.Fulfilment)");
                        qualitativeQuery.Append("        FROM   PM_ObjectiveEntityValue po");
                        qualitativeQuery.Append("        WHERE  po.ObjectiveID = ? ");
                        qualitativeQuery.Append("            AND po.Fulfilment = 1");
                        qualitativeQuery.Append("  ) AS 'Fulfiled',");
                        qualitativeQuery.Append("   ISNULL(");
                        qualitativeQuery.Append("		(");
                        qualitativeQuery.Append("			SELECT pa.TypeID");
                        qualitativeQuery.Append("			FROM   PM_Objective pa");
                        qualitativeQuery.Append("			WHERE  pa.ID = ? ");
                        qualitativeQuery.Append("		),");
                        qualitativeQuery.Append("		0");
                        qualitativeQuery.Append("  ) AS 'ObjectiveTypeID',");
                        qualitativeQuery.Append("  ISNULL(");
                        qualitativeQuery.Append("        (");
                        //qualitativeQuery.Append("            SELECT COUNT(*)");
                        //qualitativeQuery.Append("           FROM   PM_ObjectiveEntityValue");
                        //qualitativeQuery.Append("           WHERE  ObjectiveID = " + objectiveId + "");
                        qualitativeQuery.Append("         SELECT COUNT(*)");
                        qualitativeQuery.Append("         FROM   PM_ObjectiveEntityValue poev");
                        qualitativeQuery.Append("          INNER JOIN PM_Entity pe");
                        qualitativeQuery.Append("           ON  pe.ID = poev.EntityID");
                        qualitativeQuery.Append("          WHERE  poev.ObjectiveID = ? ");
                        qualitativeQuery.Append("         AND pe.[Active] = 1");
                        qualitativeQuery.Append("    ),");
                        qualitativeQuery.Append("     0");
                        qualitativeQuery.Append(" ) AS 'InvolvedLevels',");
                        qualitativeQuery.Append("  ISNULL(");
                        qualitativeQuery.Append("       (");
                        qualitativeQuery.Append("           SELECT pa.IsEnableFeedback");
                        qualitativeQuery.Append("           FROM   PM_Objective pa");
                        qualitativeQuery.Append("           WHERE  pa.ID =  ? ");
                        qualitativeQuery.Append("       ),");
                        qualitativeQuery.Append("       0");
                        qualitativeQuery.Append("    ) AS 'IsEnableFeedback'");
                        qualitativeQuery.Append("FROM PM_Objective po ");
                        qualitativeQuery.Append(" WHERE po.ID = ? ");

                        var qualitativeQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(qualitativeQuery.ToString(), objectiveId, objectiveId, objectiveId, objectiveId, objectiveId, objectiveId).Cast<Hashtable>();
                        foreach (var qualObj in qualitativeQueryResult)
                        {
                            objSummaryDetails.Id = (int)qualObj["ObjectiveID"];
                            objSummaryDetails.ObjectiveStatus = (bool)qualObj["ObjectiveStatus"];
                            objSummaryDetails.ObjectiveTypeId = (int)qualObj["ObjectiveTypeID"];
                            objSummaryDetails.ObjectiveDescription = qualObj["ObjectiveDescription"] != "" ? (string)qualObj["ObjectiveDescription"] : "-";
                            objSummaryDetails.EnableCommnets = (bool)qualObj["IsEnableFeedback"];
                            objSummaryDetails.Fulfilled = (int)qualObj["Fulfiled"];
                            objSummaryDetails.NotFulfilled = (int)qualObj["NotFulfiled"];
                            objSummaryDetails.LevelsInvolved = (int)qualObj["InvolvedLevels"];
                        }

                    }
                    if (objectiveResult[0].Typeid == 4)
                    {
                        var entityRatingResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveEntityValueDao>().Where(a => a.Objectiveid == objectiveId);
                        StringBuilder ratingQuery = new StringBuilder();
                        ratingQuery.Append("SELECT PO.ObjectiveID AS 'RatingID',");
                        ratingQuery.Append("          PO.Caption AS 'RatingName',");
                        ratingQuery.Append("          ISNULL(");
                        ratingQuery.Append("           (");
                        ratingQuery.Append("               SELECT pa.TypeID");
                        ratingQuery.Append("               FROM   PM_Objective pa");
                        ratingQuery.Append("              WHERE  pa.ID = ? ");
                        ratingQuery.Append("          ),");
                        ratingQuery.Append("         0");
                        ratingQuery.Append("     ) AS 'ObjectiveTypeID',");
                        ratingQuery.Append("     ISNULL(");
                        ratingQuery.Append("        (");
                        ratingQuery.Append("            SELECT COUNT(pt.RatingObjective)");
                        ratingQuery.Append("           FROM    PM_ObjectiveEntityValue");
                        ratingQuery.Append("                  pt");
                        ratingQuery.Append("           WHERE  pt.RatingObjective = PO.ID");
                        ratingQuery.Append("           GROUP BY");
                        ratingQuery.Append("                 pt.RatingObjective");
                        ratingQuery.Append("     ),");
                        ratingQuery.Append("      0");
                        ratingQuery.Append("   ) AS 'RatingCount',");
                        ratingQuery.Append("  ISNULL(");

                        ratingQuery.Append("       (");
                        ratingQuery.Append("           SELECT po.ObjectiveStatus");
                        ratingQuery.Append("          FROM   PM_Objective po");
                        ratingQuery.Append("         WHERE  po.ID = ?");
                        ratingQuery.Append("     ),");

                        ratingQuery.Append("    0");
                        ratingQuery.Append("  ) AS 'RatingStatus',");
                        //ratingQuery.Append("  ISNULL(");
                        //ratingQuery.Append("      (");
                        //ratingQuery.Append("         SELECT COUNT(*)");
                        //ratingQuery.Append("         FROM   PM_ObjectiveEntityValue");
                        //ratingQuery.Append("         WHERE  ObjectiveID = " + objectiveId + "");
                        //ratingQuery.Append("     ),");
                        //ratingQuery.Append("     0");
                        //ratingQuery.Append("  ) AS 'InvolvedLevels',");
                        ratingQuery.Append("  ISNULL(");
                        ratingQuery.Append("        (");
                        ratingQuery.Append("         SELECT COUNT(*)");
                        ratingQuery.Append("         FROM   PM_ObjectiveEntityValue poev");
                        ratingQuery.Append("          INNER JOIN PM_Entity pe");
                        ratingQuery.Append("           ON  pe.ID = poev.EntityID");
                        ratingQuery.Append("          WHERE  poev.ObjectiveID = ?");
                        ratingQuery.Append("         AND pe.[Active] = 1");
                        ratingQuery.Append("    ),");
                        ratingQuery.Append("     0");
                        ratingQuery.Append(" ) AS 'InvolvedLevels',");
                        ratingQuery.Append("  ISNULL(");
                        ratingQuery.Append("      (");
                        ratingQuery.Append("        SELECT pa.Instruction");
                        ratingQuery.Append("         FROM   PM_Objective pa");
                        ratingQuery.Append("        WHERE  pa.ID = ?");
                        ratingQuery.Append("     ),");
                        ratingQuery.Append("     0");
                        ratingQuery.Append("  ) AS 'ObjectiveDescription',");
                        ratingQuery.Append("  ISNULL(");
                        ratingQuery.Append("      (");
                        ratingQuery.Append("        SELECT pa.IsEnableFeedback");
                        ratingQuery.Append("         FROM   PM_Objective pa");
                        ratingQuery.Append("        WHERE  pa.ID = ? ");
                        ratingQuery.Append("     ),");
                        ratingQuery.Append("     0");
                        ratingQuery.Append("  ) AS 'IsEnableFeedback'");
                        ratingQuery.Append("  FROM   PM_Objective_Rating po");
                        ratingQuery.Append("   WHERE  PO.ObjectiveID =  ? ");
                        //if (entityRatingResult != null)
                        //{
                        //    ratingQuery = "SELECT pe.ID,pe.[Active], pe.Name,po.TypeID,po.Instruction,po.IsEnableFeedback,por.Caption  FROM PM_Entity pe INNER JOIN PM_Objective po ON po.ID =pe.ID INNER JOIN PM_Objective_Rating por ON por.ObjectiveID = po.ID INNER JOIN PM_ObjectiveEntityValue poe ON poe.ObjectiveID = po.ID where Pe.ID =" + objectiveId + "";
                        //}
                        //else
                        //{
                        //    ratingQuery = "SELECT pe.ID,pe.[Active], pe.Name,po.TypeID,po.Instruction,po.IsEnableFeedback,por.Caption  FROM PM_Entity pe INNER JOIN PM_Objective po ON po.ID =pe.ID INNER JOIN PM_Objective_Rating por ON por.ObjectiveID = po.ID  where Pe.ID = " + objectiveId + "";
                        //}
                        var ratingQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(ratingQuery.ToString(), objectiveId, objectiveId, objectiveId, objectiveId, objectiveId, objectiveId).Cast<Hashtable>();
                        List<IObjectiveRatingSummary> objRatingSummaryList = new List<IObjectiveRatingSummary>();
                        objSummaryDetails.ObjectiveRating = null;
                        foreach (var ratingObj in ratingQueryResult)
                        {
                            IObjectiveRatingSummary objRatingsummary = new ObjectiveRatingSummary();
                            objSummaryDetails.Id = (int)ratingObj["RatingID"];
                            objSummaryDetails.ObjectiveStatus = (bool)ratingObj["RatingStatus"];
                            objSummaryDetails.ObjectiveTypeId = (int)ratingObj["ObjectiveTypeID"];
                            objSummaryDetails.ObjectiveDescription = ratingObj["ObjectiveDescription"] != "" ? (string)ratingObj["ObjectiveDescription"] : "-";
                            objSummaryDetails.ObjectiveUnitCaption = (string)ratingObj["RatingName"];
                            objSummaryDetails.EnableCommnets = (bool)ratingObj["IsEnableFeedback"];
                            objSummaryDetails.LevelsInvolved = (int)ratingObj["InvolvedLevels"];
                            objRatingsummary.RatingId = (int)ratingObj["RatingID"];
                            objRatingsummary.RatingCaption = (string)ratingObj["RatingName"];
                            objRatingsummary.RatinCount = (int)ratingObj["RatingCount"];
                            objRatingSummaryList.Add(objRatingsummary);
                        }
                        objSummaryDetails.ObjectiveRating = objRatingSummaryList;
                    }
                }
                return objSummaryDetails;

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        /// <summary>
        /// Getting Objective & Assignments Fulfillment Block
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <returns>IObjectiveFulfullConditions</returns>
        public IObjectiveFulfillCondtions GettingObjectiveFulfillmentBlockDetails(PlanningManagerProxy proxy, int objectiveId)
        {
            try
            {
                IList<IObjectiveFulfillCondtions> objfulfillList = new List<IObjectiveFulfillCondtions>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var entityResult = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == objectiveId);
                    var objectiveResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveDao>().Where(a => a.Id == objectiveId).ToList();
                    StringBuilder condQuery = new StringBuilder();

                    condQuery.Append("   DECLARE @GetAttribute AS INT ");
                    condQuery.Append(" SET @GetAttribute =( SELECT COUNT(1) FROM PM_ObjectiveCondition poc WHERE poc.ObjectiveID = ? AND poc.AttributeID is NOT  NULL) ");
                    condQuery.Append(" IF(@GetAttribute = 0) ");
                    condQuery.Append(" BEGIN ");
                    condQuery.Append(" SELECT pe.ID,       pec.EntityTypeID,      isnull(pec.AttributeID,0),       pec.ConditionType,       pec.AttributeLevel,       peobc.ConditionID, ");
                    condQuery.Append(" peobc.[Value],       me.Caption  AS 'EntityTypeCaption'       FROM   PM_Entity pe       INNER JOIN PM_ObjectiveCondition pec ");
                    condQuery.Append(" ON  pec.ObjectiveID = pe.ID       INNER JOIN PM_ObjectiveConditionValue peobc            ON  peobc.ConditionID = pec.ID ");
                    condQuery.Append(" INNER JOIN MM_EntityType me            ON  me.ID = pec.EntityTypeID  WHERE  pe.ID = ? END  ELSE ");
                    condQuery.Append(" BEGIN ");

                    condQuery.Append(" SELECT pe.ID,");
                    condQuery.Append(" 	pec.ID as 'OID',");
                    condQuery.Append("  pec.EntityTypeID,");
                    condQuery.Append(" pec.AttributeID,");
                    condQuery.Append(" pec.ConditionType,");
                    condQuery.Append("  pec.AttributeLevel,");
                    condQuery.Append("  peobc.ConditionID,");
                    condQuery.Append("  peobc.[Value],");
                    condQuery.Append("  me.Caption  AS 'EntityTypeCaption',");
                    condQuery.Append("  CASE ");
                    condQuery.Append("      WHEN ma.AttributeTypeID = 3 OR ma.AttributeTypeID = 4 THEN ma.Caption");
                    condQuery.Append("       ELSE (");
                    condQuery.Append("         SELECT TOP 1 mtl.LevelName");
                    condQuery.Append("         FROM   MM_TreeLevel mtl");
                    condQuery.Append("         WHERE  mtl.[Level] = pec.AttributeLevel");
                    condQuery.Append("                AND mtl.AttributeID = pec.AttributeID");
                    condQuery.Append("      )");
                    condQuery.Append("   END         AS 'AttributeCaption',");
                    condQuery.Append("   CASE ");
                    condQuery.Append("   WHEN ma.AttributeTypeID = 3 OR ma.AttributeTypeID = 4 THEN ( ");
                    condQuery.Append("   SELECT TOP 1 mo.Caption ");
                    condQuery.Append("   FROM   MM_Option mo ");
                    condQuery.Append("    WHERE  mo.ID = peobc.[Value] ");
                    condQuery.Append("   ) ");
                    condQuery.Append("   ELSE ( ");
                    condQuery.Append("   SELECT TOP 1 mtn.Caption ");
                    condQuery.Append("   FROM   MM_TreeNode mtn ");
                    condQuery.Append("   WHERE  mtn.ID = peobc.Value ");
                    condQuery.Append("   ) ");
                    condQuery.Append("   END         AS 'OptionCaption' ");
                    condQuery.Append(" FROM   PM_Entity pe");
                    condQuery.Append("  INNER JOIN PM_ObjectiveCondition pec");
                    condQuery.Append("      ON  pec.ObjectiveID = pe.ID");
                    condQuery.Append(" INNER JOIN PM_ObjectiveConditionValue peobc");
                    condQuery.Append("      ON  peobc.ConditionID = pec.ID");
                    condQuery.Append("  INNER JOIN MM_EntityType me");
                    condQuery.Append("       ON  me.ID = pec.EntityTypeID");
                    condQuery.Append("  INNER JOIN MM_Attribute ma");
                    condQuery.Append("       ON  ma.ID = pec.AttributeID");
                    condQuery.Append(" WHERE  pe.ID = ? ");
                    condQuery.Append(" UNION ");
                    condQuery.Append(" select");
                    condQuery.Append(" 0 AS 'ID',");
                    condQuery.Append(" pec.ID as 'OID', ");
                    condQuery.Append(" pec.EntityTypeID AS 'EntityTypeID',");
                    condQuery.Append(" pec.AttributeID AS 'AttributeID',");
                    condQuery.Append(" pec.ConditionType AS 'ConditionType',");
                    condQuery.Append(" 0 AS 'AttributeLevel',");
                    condQuery.Append(" 0 AS 'ConditionID',");
                    condQuery.Append(" 0 AS 'Value',");
                    condQuery.Append(" mm.Caption AS 'EntityTypeCaption',");
                    condQuery.Append(" '' AS AttributeCaption,");
                    condQuery.Append(" '' AS 'OptionCaption'");
                    condQuery.Append(" FROM PM_ObjectiveCondition pec");
                    condQuery.Append(" INNER JOIN mm_entitytype mm");
                    condQuery.Append(" ON mm.ID = pec.EntityTypeID");
                    condQuery.Append(" WHERE pec.ObjectiveID = ?");
                    condQuery.Append(" AND pec.AttributeID IS NULL");
                    condQuery.Append(" ORDER by pec.ID");
                    condQuery.Append(" END ");

                    var condQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(condQuery.ToString(), objectiveId, objectiveId, objectiveId, objectiveId).Cast<Hashtable>().ToList();
                    var CondtionData = tx.PersistenceManager.PlanningRepository.Query<ObjectiveDao>().Where(a => a.Id == objectiveId).FirstOrDefault();
                    // var entityRolesDao = tx.PersistenceManager.PlanningRepository.GetEquals<EntityRoleUserDao>(EntityRoleUserDao.PropertyNames.Entityid, objectiveId).Where(a => a.Roleid == 1).FirstOrDefault();
                    var entityRolesDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                          join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                          where item.Entityid == objectiveId && EntityTypeRole.EntityRoleID == 1
                                          select item).FirstOrDefault();
                    var ownerDao = tx.PersistenceManager.UserRepository.Query<UserDao>().Where(a => a.Id == Convert.ToInt32(entityRolesDao.Userid)).Select(a => new { a.FirstName, a.LastName, a.Email }).FirstOrDefault();

                    StringBuilder sb = new StringBuilder();

                    for (int i = 0; i < condQueryResult.Count(); i++)
                    {

                        if (i == 0)
                        {
                            sb.Append("\"if type is " + (string)condQueryResult[i]["EntityTypeCaption"] + "");
                            if ((int?)condQueryResult[i]["AttributeID"] == null)
                            {
                                sb.Append("\"");
                            }
                            if ((int?)condQueryResult[i]["AttributeID"] != 0 && (int?)condQueryResult[i]["AttributeID"] != null)
                            {
                                sb.Append(" Where ");
                                sb.Append((string)condQueryResult[i]["AttributeCaption"] + " Equals ");
                            }
                        }
                        if (i - 1 != -1)
                        {

                            if (((string)condQueryResult[i]["EntityTypeCaption"] != (string)condQueryResult[i - 1]["EntityTypeCaption"]) || (((string)condQueryResult[i]["EntityTypeCaption"] == (string)condQueryResult[i - 1]["EntityTypeCaption"]) && ((string)condQueryResult[i]["AttributeCaption"] != (string)condQueryResult[i - 1]["AttributeCaption"])))
                            {
                                if ((int)condQueryResult[i]["ConditionType"] != 0)
                                {
                                    if ((string)condQueryResult[i]["EntityTypeCaption"] != (string)condQueryResult[i - 1]["EntityTypeCaption"])
                                    {
                                        sb.Append("\"");
                                    }
                                    string Condtiontype = (int)condQueryResult[i]["ConditionType"] == 1 ? "\"OR\"" : "\"AND\"";
                                    sb.Append(" " + Condtiontype + " ");
                                    sb.Replace(" \"OR\"", " \"OR\"");
                                    sb.Replace(" \"AND\"", " \"AND\"");
                                }
                                sb.Append(" " + "\"if type is " + (string)condQueryResult[i]["EntityTypeCaption"]);
                                if ((int?)condQueryResult[i]["AttributeID"] != 0 && (int?)condQueryResult[i]["AttributeID"] != null)
                                {
                                    sb.Append(" Where ");
                                    sb.Append((string)condQueryResult[i]["AttributeCaption"] + " Equals ");
                                }
                            }
                        }
                        if ((int?)condQueryResult[i]["AttributeID"] != 0 && (int?)condQueryResult[i]["AttributeID"] != null)
                        {
                            sb.Append(",");
                            sb.Replace("Equals ,", "Equals ");
                            sb.Append((string)condQueryResult[i]["OptionCaption"] + "");
                        }
                    }

                    if (sb[sb.Length - 1].ToString() != "\"")
                    {
                        sb.Append("\"");
                    }


                    ObjectiveFulfillCondtions objFulfillCond = new ObjectiveFulfillCondtions();
                    objFulfillCond.Id = CondtionData.Id;
                    objFulfillCond.ObjectiveName = HttpUtility.HtmlEncode(CondtionData.Name);
                    objFulfillCond.OwnerId = Convert.ToInt32(entityRolesDao.Userid);
                    objFulfillCond.OwnerName = ownerDao.FirstName + " " + ownerDao.LastName;
                    objFulfillCond.ObjectiveDescription = HttpUtility.HtmlEncode(CondtionData.Description);
                    objFulfillCond.StartDate = CondtionData.StartDate.ToString("yyyy-MM-dd");
                    objFulfillCond.EndDate = CondtionData.EndDate.ToString("yyyy-MM-dd");
                    objFulfillCond.DateRule = CondtionData.DateRule == 1 ? "Starts & Ends" : "are Active";
                    objFulfillCond.Mandatory = (Convert.ToInt32(CondtionData.IsMandatory) == 1 ? "Yes" : "No");
                    objFulfillCond.FulfillCondition = sb.ToString();
                    return objFulfillCond;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// Duplicating the entites
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="entityId"></param>
        /// <returns>EntityID</returns>
        public ArrayList DuplicateEntity(PlanningManagerProxy proxy, int entityID, int ParentLevel, int DuplicateTimes, bool IsDuplicateChild, Dictionary<string, bool> duplicateitems = null, List<string> listEntityNamesToDuplicate = null)
        {
            ArrayList DuplicatedIds = new ArrayList();
            try
            {
                if (ParentLevel == 0)
                    proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.Duplicate, OperationId.Create);
                else
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);

                Tuple<int, int> lastEntityIDcumUniqueKey = null;

                int globalEntityLevel = ParentLevel;
                for (int i = 0; i < DuplicateTimes; i++)
                {
                    lastEntityIDcumUniqueKey = CreateDuplicateEntities(proxy, entityID, 0, IsDuplicateChild, duplicateitems, listEntityNamesToDuplicate[i]);
                    if ((int)lastEntityIDcumUniqueKey.Item2 == globalEntityLevel)
                        DuplicatedIds.Add((int)lastEntityIDcumUniqueKey.Item1);
                }
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return null;
            }
            return DuplicatedIds;

        }


        /// <summary>
        /// Inserting Additional Objective & Assignments 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="entityTypeId">The EntityTypeId</param>
        /// <param name="objectiveTye">The ObjectiveTypeId</param>
        /// <param name="name">The Name</param>
        /// <param name="instruction">The Instruction</param>
        /// <param name="isEnablefeeback">The IsEnableFeedback</param>
        /// <param name="untiId">The UnitId</param>
        /// <param name="plannedTarget">The PlannedTarget</param>
        /// <param name="targetOutcome">The TargetOutcome</param>
        /// <param name="ratingObjective">The RatingObjective</param>
        /// <param name="comments">The Comments</param>
        /// <param name="fulFillment">The Fulfillment</param>
        /// <param name="objectiveStatus">The ObjectiveStatus</param>
        /// <param name="entityMembers">The Entity Users</param>
        /// <param name="ratings">The Ratings</param>
        /// <returns>Last Inserted Additional EntityId</returns>
        public int InsertAdditionalObjective(PlanningManagerProxy proxy, int entityId, int entityTypeId, int objectiveTypeId, string name, string instruction, bool isEnableFeedback, int unitId, decimal plannedTarget, decimal targetOutCome, int ratingObjective, string comments, int fulFillment, int objectiveStatus, IEntityRoleUser entityMembers, List<string> ratings = null)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityId, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    int AdditionalObjectiveID = GetBaseEntityID(entityTypeId, name, tx, entityId, true);
                    if (entityMembers != null)
                    {
                        EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                        entityroledao.Entityid = AdditionalObjectiveID;
                        entityroledao.Roleid = entityMembers.Roleid;
                        entityroledao.Userid = entityMembers.Userid; ;
                        entityroledao.IsInherited = entityMembers.IsInherited;
                        entityroledao.InheritedFromEntityid = entityMembers.InheritedFromEntityid;
                        tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(entityroledao);
                    }
                    AdditionalObjectiveEntityValuesDao additionalObjDao = new AdditionalObjectiveEntityValuesDao();
                    additionalObjDao.EntityId = AdditionalObjectiveID;
                    additionalObjDao.TypeId = objectiveTypeId;
                    additionalObjDao.Instruction = instruction;
                    additionalObjDao.IsEnableFeedback = isEnableFeedback;
                    additionalObjDao.UnitID = unitId;
                    additionalObjDao.PlannedTarget = plannedTarget;
                    additionalObjDao.TargetOutcome = targetOutCome;
                    additionalObjDao.RatingObjective = ratingObjective;
                    additionalObjDao.Comments = comments;
                    additionalObjDao.Fulfillment = fulFillment;
                    additionalObjDao.IsActive = Convert.ToBoolean(objectiveStatus);

                    tx.PersistenceManager.PlanningRepository.Save<AdditionalObjectiveEntityValuesDao>(additionalObjDao);
                    if (objectiveTypeId == 4)
                    {
                        IList<AddtionalObjectiveRatingDao> additionalRatingDaoList = new List<AddtionalObjectiveRatingDao>();
                        foreach (var ratingObj in ratings)
                        {
                            AddtionalObjectiveRatingDao additionalRatingobj = new AddtionalObjectiveRatingDao();
                            additionalRatingobj.ObjectiveId = AdditionalObjectiveID;
                            additionalRatingobj.Ratings = ratingObj;
                            additionalRatingobj.SortOrder = 1;
                            additionalRatingDaoList.Add(additionalRatingobj);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<AddtionalObjectiveRatingDao>(additionalRatingDaoList);
                    }
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "Additional Objective";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = AdditionalObjectiveID;
                    obj.EntityTypeId = entityTypeId;
                    obj.AttributeName = name;
                    obj.TypeName = "Additional Objective";
                    obj.CreatedOn = DateTimeOffset.Now;
                    obj.ParentId = 0;
                    fs.AsynchronousNotify(obj);

                    tx.Commit();
                    return additionalObjDao.Id;
                }
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Getting Objectives for Activity Entity Select 
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID</param>
        /// <returns>IObjectivesToEntitySelect</returns>
        public IList<IObjectivesToEntitySelect> GettingObjectivestoEntitySelect(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                IList<IObjectivesToEntitySelect> ObjectiveEntitiesList = new List<IObjectivesToEntitySelect>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder entityObjQuery = new StringBuilder();
                    entityObjQuery.Append("DECLARE @StartDate NVARCHAR(10)");
                    entityObjQuery.Append("DECLARE @EndDate NVARCHAR(10)");
                    entityObjQuery.Append("SET @StartDate = (");
                    entityObjQuery.Append(" SELECT CONVERT(NVARCHAR(10), MIN(ped.StartDate), 120)");
                    entityObjQuery.Append("FROM   PM_EntityPeriod ped");
                    entityObjQuery.Append("  WHERE  ped.EntityID = @EntityID");
                    entityObjQuery.Append(" )");
                    entityObjQuery.Append("SET @EndDate = (");
                    entityObjQuery.Append("SELECT CONVERT(NVARCHAR(10), MAX(ped.EndDate), 120) ");
                    entityObjQuery.Append("FROM   PM_EntityPeriod ped");
                    entityObjQuery.Append(" WHERE  ped.EntityID = @EntityID");
                    entityObjQuery.Append(" )");
                    entityObjQuery.Append("IF LEN(@StartDate) > 0");
                    entityObjQuery.Append("BEGIN");
                    entityObjQuery.Append(" DECLARE @ListOfObjectiveID AS NVARCHAR(MAX)");
                    entityObjQuery.Append(" SELECT @ListOfObjectiveID = COALESCE(@ListOfObjectiveID + ',', '') + ");
                    entityObjQuery.Append(" CAST(tbl7.ObjectiveID AS NVARCHAR(4000))");
                    entityObjQuery.Append(" FROM   (");
                    entityObjQuery.Append(" SELECT tbl6.ObjectiveID");
                    entityObjQuery.Append(" FROM   (");
                    entityObjQuery.Append(" SELECT DISTINCT tbl4.ObjectiveID");
                    entityObjQuery.Append(" FROM   (");
                    entityObjQuery.Append("SELECT tbl1.EntityID,");
                    entityObjQuery.Append("   tbl1.ObjectiveID,");
                    entityObjQuery.Append(" COUNT(1) AS Counts");
                    entityObjQuery.Append(" FROM   (");
                    entityObjQuery.Append("  SELECT peaiv.EntityID,");
                    entityObjQuery.Append("      pov.ObjectiveID AS ");
                    entityObjQuery.Append("   ObjectiveID,");
                    entityObjQuery.Append("    pov.AttributeID,");
                    entityObjQuery.Append("    pov.ConditionType,");
                    entityObjQuery.Append("     COUNT(1) AS Counts");
                    entityObjQuery.Append(" FROM   PM_ObjectiveCondition ");
                    entityObjQuery.Append("      pov");
                    entityObjQuery.Append("    INNER JOIN ");
                    entityObjQuery.Append("          MM_MultiSelect ");
                    entityObjQuery.Append("       peaiv");
                    entityObjQuery.Append("      ON  pov.AttributeID = ");
                    entityObjQuery.Append("          peaiv.AttributeID");
                    entityObjQuery.Append("  INNER join");
                    entityObjQuery.Append("  PM_ObjectiveConditionValue Pobv");
                    entityObjQuery.Append("  ON pov.ID = pobv.ConditionID");
                    entityObjQuery.Append(" AND pobv.[Value] = ");
                    entityObjQuery.Append("    peaiv.OptionID");
                    entityObjQuery.Append("    inner join PM_Entity pe on");
                    entityObjQuery.Append("   pe.ID = peaiv.EntityID ");
                    entityObjQuery.Append("  and pov.EntityTypeID = pe.TypeId");
                    entityObjQuery.Append(" WHERE  peaiv.EntityID IN ");
                    entityObjQuery.Append("  (@EntityID)");
                    entityObjQuery.Append("   GROUP BY");
                    entityObjQuery.Append("    peaiv.EntityID,");
                    entityObjQuery.Append("     pov.ObjectiveID,");
                    entityObjQuery.Append("     pov.AttributeID,");
                    entityObjQuery.Append("    pov.ConditionType");
                    entityObjQuery.Append("  ) tbl1");
                    entityObjQuery.Append(" INNER JOIN (");
                    entityObjQuery.Append(" SELECT pov.ObjectiveID AS ");
                    entityObjQuery.Append("       ObjectiveID,");
                    entityObjQuery.Append("      pov.AttributeID,");
                    entityObjQuery.Append("      pov.ConditionType,");
                    entityObjQuery.Append("     COUNT(1) AS ");
                    entityObjQuery.Append("     Counts");
                    entityObjQuery.Append(" FROM   ");
                    entityObjQuery.Append("   PM_ObjectiveCondition ");
                    entityObjQuery.Append("    pov");
                    entityObjQuery.Append("GROUP BY");
                    entityObjQuery.Append("   pov.ObjectiveID,");
                    entityObjQuery.Append("   pov.AttributeID,");
                    entityObjQuery.Append("   pov.ConditionType");
                    entityObjQuery.Append("   ) tbl2");
                    entityObjQuery.Append("  ON  tbl2.ObjectiveID = tbl1.ObjectiveID");
                    entityObjQuery.Append(" AND tbl2.AttributeID = tbl1.AttributeID");
                    entityObjQuery.Append("  AND (tbl2.Counts = tbl1.Counts OR tbl1.ConditionType = 1)");
                    entityObjQuery.Append("   GROUP BY");
                    entityObjQuery.Append("      tbl1.EntityID,");
                    entityObjQuery.Append("   tbl1.ObjectiveID");
                    entityObjQuery.Append(" ) tbl4");
                    entityObjQuery.Append(" INNER JOIN (");
                    entityObjQuery.Append("          SELECT tbl3.ObjectiveID,");
                    entityObjQuery.Append("               COUNT(1) AS counts");
                    entityObjQuery.Append("        FROM   (");
                    entityObjQuery.Append("       SELECT pov.ObjectiveID AS ");
                    entityObjQuery.Append("             ObjectiveID,");
                    entityObjQuery.Append("             pov.AttributeID,");
                    entityObjQuery.Append("             pov.ConditionType,");
                    entityObjQuery.Append("            COUNT(1) AS ");
                    entityObjQuery.Append("          Counts");
                    entityObjQuery.Append("   FROM   ");
                    entityObjQuery.Append("          PM_ObjectiveCondition ");
                    entityObjQuery.Append("          pov");
                    entityObjQuery.Append("     GROUP BY");
                    entityObjQuery.Append("       pov.ObjectiveID,");
                    entityObjQuery.Append("      pov.AttributeID,");
                    entityObjQuery.Append("        pov.ConditionType");
                    entityObjQuery.Append("  ) tbl3");
                    entityObjQuery.Append("  GROUP BY");
                    entityObjQuery.Append("        tbl3.ObjectiveID");
                    entityObjQuery.Append("     ) tbl5");
                    entityObjQuery.Append("     ON  tbl5.ObjectiveID = tbl4.ObjectiveID");
                    entityObjQuery.Append("      AND tbl5.Counts = tbl4.Counts");
                    entityObjQuery.Append("    ) tbl6");
                    entityObjQuery.Append("   INNER JOIN PM_Entity pe");
                    entityObjQuery.Append("       ON  pe.ID = tbl6.ObjectiveID");
                    entityObjQuery.Append("  WHERE  pe.[Active] = 1");
                    entityObjQuery.Append("    ) tbl7");
                    entityObjQuery.Append("END");
                    entityObjQuery.Append("		CREATE TABLE #TempTable");
                    entityObjQuery.Append("		(");
                    entityObjQuery.Append("			ObjectiveID INT");
                    entityObjQuery.Append("		)");
                    entityObjQuery.Append("	INSERT INTO #TempTable");
                    entityObjQuery.Append("	  (");
                    entityObjQuery.Append("	    ObjectiveID");
                    entityObjQuery.Append("	  )((");
                    entityObjQuery.Append("	       SELECT VALUE");
                    entityObjQuery.Append("	       FROM   dbo.tf_SplitString(@ListOfObjectiveID, ',')");
                    entityObjQuery.Append("              INNER JOIN PM_Objective po");
                    entityObjQuery.Append("                   ON  po.ID = [Value]");
                    entityObjQuery.Append("       WHERE  po.IsMandatory = 0");
                    entityObjQuery.Append("              AND po.DateRule = 1");
                    entityObjQuery.Append("             AND @StartDate >= po.StartDate");
                    entityObjQuery.Append("             AND @EndDate <= po.EndDate");
                    entityObjQuery.Append("   ) ");
                    entityObjQuery.Append("	   UNION");
                    entityObjQuery.Append("	   (");
                    entityObjQuery.Append("       SELECT [Value]");
                    entityObjQuery.Append("       FROM   dbo.tf_SplitString(@ListOfObjectiveID, ',')");
                    entityObjQuery.Append("              INNER JOIN PM_Objective po");
                    entityObjQuery.Append("                   ON  po.ID = [Value]");
                    entityObjQuery.Append("      WHERE  po.IsMandatory = 0");
                    entityObjQuery.Append("              AND po.DateRule = 2");
                    entityObjQuery.Append("              AND @StartDate <= po.EndDate");
                    entityObjQuery.Append("              AND @EndDate >= po.StartDate");
                    entityObjQuery.Append("   ))");
                    entityObjQuery.Append("         SELECT (");
                    entityObjQuery.Append("                 t.ObjectiveID");
                    entityObjQuery.Append("                 ) AS 'ObjectiveID',");
                    entityObjQuery.Append("              pe.NAME AS 'ObjectiveName',");
                    entityObjQuery.Append("           (");
                    entityObjQuery.Append("               SELECT vuu.FirstName + ' ' +");
                    entityObjQuery.Append("                      vuu.LastName");
                    entityObjQuery.Append("           FROM   PM_Entity pe");
                    entityObjQuery.Append("                 INNER JOIN AM_Entity_Role_User ");
                    entityObjQuery.Append("                      per");
                    entityObjQuery.Append("                      ON  per.EntityID = pe.ID");
                    entityObjQuery.Append("                       AND per.RoleID = 1");
                    entityObjQuery.Append("                 INNER JOIN UM_User vuu");
                    entityObjQuery.Append("                  ON  per.UserID = vuu.ID");
                    entityObjQuery.Append("       WHERE  pe.ID = po.ID");
                    entityObjQuery.Append("    ) AS 'ObjectiveOwner',");
                    entityObjQuery.Append("      (SELECT CASE (");
                    entityObjQuery.Append("                    SELECT po.TypeID");
                    entityObjQuery.Append("                     FROM   PM_Objective po");
                    entityObjQuery.Append("                 WHERE  po.ID = t.ObjectiveID");
                    entityObjQuery.Append("             )");
                    entityObjQuery.Append("             WHEN 1 THEN 1");
                    entityObjQuery.Append("              WHEN 2 THEN 2");
                    entityObjQuery.Append("             WHEN 3 THEN 3");
                    entityObjQuery.Append("            ELSE 4");
                    entityObjQuery.Append("      END) AS 'ObjectiveTypeID',");
                    entityObjQuery.Append("     (");
                    entityObjQuery.Append("       SELECT ISNULL(peasv.OptionID,'')");
                    entityObjQuery.Append("        FROM   MM_MultiSelect peasv");
                    entityObjQuery.Append("        WHERE  peasv.EntityID = t.ObjectiveID");
                    entityObjQuery.Append("               AND peasv.AttributeID = 26");
                    entityObjQuery.Append("    ) AS 'ObjectiveDecription'");
                    entityObjQuery.Append("      FROM   PM_Objective po");
                    entityObjQuery.Append("              INNER JOIN PM_Entity pe");
                    entityObjQuery.Append("                   ON  po.ID = pe.ID");
                    entityObjQuery.Append("              INNER JOIN #TempTable t");
                    entityObjQuery.Append("        ON po.ID = t.ObjectiveID");
                    entityObjQuery.Append("    WHERE  PO.IsMandatory = 0");
                    entityObjQuery.Append("           AND pe.Active = 1 ");
                    entityObjQuery.Append("          AND po.ID NOT IN (SELECT ObjectiveID FROM PM_ObjectiveEntityValue poev WHERE poev.EntityID = @EntityID)  ");
                    entityObjQuery.Append("	DROP TABLE #TempTable");
                    var entityObjeQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(entityObjQuery.ToString()).Cast<Hashtable>().ToList();
                    foreach (var resObj in entityObjeQueryResult)
                    {
                        IObjectivesToEntitySelect objEntitySelect = new ObjectivesToEntitySelect();
                        objEntitySelect.ObjectiveID = (int)resObj["ObjectiveID"];
                        objEntitySelect.ObjectiveName = (string)resObj["ObjectiveName"];
                        objEntitySelect.ObjectiveOwner = (string)resObj["ObjectiveOwner"];
                        objEntitySelect.ObjectiveTypeId = (int)resObj["ObjectiveTypeID"];
                        objEntitySelect.ObjectiveDescription = (string)resObj["ObjectiveDecription"];
                        ObjectiveEntitiesList.Add(objEntitySelect);
                    }
                    return ObjectiveEntitiesList;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Inserting the Mandatory Condition satisfied Entities To PM_ObjectiveEntities Table.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The objectiveID.</param>
        /// <param name="dateRule">The DateRule.</param>
        /// <param name="startDate">The StartDate.</param>
        /// <param name="endDate">The EndDate.</param>
        /// <returns>bool</returns>
        public bool InsertMandatoryObjectEntities(PlanningManagerProxy proxy, int objectiveId, int dateRule, string startDate, string endDate)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<MultiProperty> paramList = new List<MultiProperty>();
                    paramList.Add(new MultiProperty { propertyName = "objectiveId", propertyValue = objectiveId });
                    paramList.Add(new MultiProperty { propertyName = "startDate", propertyValue = startDate });
                    paramList.Add(new MultiProperty { propertyName = "endDate", propertyValue = endDate });

                    StringBuilder mandatoryObjinsertQuery = new StringBuilder();
                    mandatoryObjinsertQuery.Append("DECLARE @GetRows AS INT ");
                    mandatoryObjinsertQuery.Append("SET @GetRows = (");
                    mandatoryObjinsertQuery.Append(" SELECT COUNT(DISTINCT poc.SortOrder)");
                    mandatoryObjinsertQuery.Append("FROM   PM_ObjectiveCondition poc");
                    mandatoryObjinsertQuery.Append(" WHERE  poc.ObjectiveID = :objectiveId ");
                    mandatoryObjinsertQuery.Append("  )");
                    mandatoryObjinsertQuery.Append("DECLARE @DateVal AS NVARCHAR(MAX)");
                    mandatoryObjinsertQuery.Append("SET @DateVal = ''");
                    mandatoryObjinsertQuery.Append("IF @DateRule = 1");
                    mandatoryObjinsertQuery.Append("BEGIN");
                    mandatoryObjinsertQuery.Append("    SET @DateVal = '(pted.StartDate >= :startDate ");
                    mandatoryObjinsertQuery.Append("        ''' and pted.EndDate <= :endDate ");
                    mandatoryObjinsertQuery.Append("END");
                    mandatoryObjinsertQuery.Append("ELSE");
                    mandatoryObjinsertQuery.Append("BEGIN");
                    mandatoryObjinsertQuery.Append("    SET @DateVal = '(pted.StartDate <= :startDate ");
                    mandatoryObjinsertQuery.Append("      ''' and pted.EndDate >= :startDate ");
                    mandatoryObjinsertQuery.Append("END");
                    mandatoryObjinsertQuery.Append("DECLARE @StrVal AS NVARCHAR(MAX)");
                    mandatoryObjinsertQuery.Append("SET @StrVal = ''");
                    mandatoryObjinsertQuery.Append("DECLARE @Flag INT");
                    mandatoryObjinsertQuery.Append("SET @Flag = 1");
                    mandatoryObjinsertQuery.Append("CREATE TABLE #T1");
                    mandatoryObjinsertQuery.Append("(");
                    mandatoryObjinsertQuery.Append("	[ID]                  [int] IDENTITY(1, 1) NOT NULL,");
                    mandatoryObjinsertQuery.Append("	[ConditionString]     NVARCHAR(MAX)");
                    mandatoryObjinsertQuery.Append(")");
                    mandatoryObjinsertQuery.Append("WHILE (@Flag <= @GetRows)");
                    mandatoryObjinsertQuery.Append("BEGIN");
                    mandatoryObjinsertQuery.Append("    DECLARE @AttibuteID AS INT");
                    mandatoryObjinsertQuery.Append("   DECLARE @EntityTypeID AS INT");
                    mandatoryObjinsertQuery.Append("   DECLARE @Values AS NVARCHAR(MAX)");
                    mandatoryObjinsertQuery.Append("   SET @Values = NULL");
                    mandatoryObjinsertQuery.Append("   SET @AttibuteID = (");
                    mandatoryObjinsertQuery.Append("          SELECT TOP 1 poc.AttributeID");
                    mandatoryObjinsertQuery.Append("          FROM   PM_ObjectiveCondition poc");
                    mandatoryObjinsertQuery.Append("          WHERE  poc.ObjectiveID = :objectiveId ");
                    mandatoryObjinsertQuery.Append("               AND poc.SortOrder = @Flag");
                    mandatoryObjinsertQuery.Append("   )");
                    mandatoryObjinsertQuery.Append(" SET @EntityTypeID = (");
                    mandatoryObjinsertQuery.Append("         SELECT TOP 1 poc.EntityTypeID");
                    mandatoryObjinsertQuery.Append("         FROM   PM_ObjectiveCondition poc");
                    mandatoryObjinsertQuery.Append("         WHERE  poc.ObjectiveID = :objectiveId ");
                    mandatoryObjinsertQuery.Append("                AND poc.SortOrder = @Flag");
                    mandatoryObjinsertQuery.Append("     )");
                    mandatoryObjinsertQuery.Append("  SELECT @Values = COALESCE(@Values + ',', '') + CAST(pocv.Value AS NVARCHAR(MAX))");
                    mandatoryObjinsertQuery.Append("FROM   PM_ObjectiveCondition poc");
                    mandatoryObjinsertQuery.Append(" INNER JOIN PM_ObjectiveConditionValue pocv ON pocv.ID = poc.ID");
                    mandatoryObjinsertQuery.Append(" WHERE  ObjectiveID       = :objectiveId ");
                    mandatoryObjinsertQuery.Append("        AND SortOrder     = @Flag");
                    mandatoryObjinsertQuery.Append(" IF @Flag = 1");
                    mandatoryObjinsertQuery.Append(" BEGIN");
                    mandatoryObjinsertQuery.Append("     SET @StrVal = @StrVal + 'peaiv.AttributeID = ' + CAST(@AttibuteID AS NVARCHAR(100)) ");
                    mandatoryObjinsertQuery.Append("        + ' AND pe.TypeID = ' + CAST(@EntityTypeID AS NVARCHAR(100)) +");
                    mandatoryObjinsertQuery.Append("        ' And peaiv.Value in (' + @Values + ')';");
                    mandatoryObjinsertQuery.Append(" END");
                    mandatoryObjinsertQuery.Append(" ELSE");
                    mandatoryObjinsertQuery.Append(" BEGIN");
                    mandatoryObjinsertQuery.Append("     DECLARE @GetCondition AS INT");
                    mandatoryObjinsertQuery.Append("     SET @GetCondition = (");
                    mandatoryObjinsertQuery.Append("            SELECT TOP 1 ConditionType");
                    mandatoryObjinsertQuery.Append("            FROM   PM_ObjectiveCondition");
                    mandatoryObjinsertQuery.Append("          WHERE  objectiveID       = " + objectiveId + "");
                    mandatoryObjinsertQuery.Append("                 AND SortOrder     = @Flag");
                    mandatoryObjinsertQuery.Append("      )");
                    mandatoryObjinsertQuery.Append("  IF @GetCondition = 1");
                    mandatoryObjinsertQuery.Append("  BEGIN");
                    mandatoryObjinsertQuery.Append("      INSERT INTO #T1");
                    mandatoryObjinsertQuery.Append("      (");
                    mandatoryObjinsertQuery.Append("        [ConditionString]");
                    mandatoryObjinsertQuery.Append("     )");
                    mandatoryObjinsertQuery.Append("    VALUES");
                    mandatoryObjinsertQuery.Append("     (");
                    mandatoryObjinsertQuery.Append("        @StrVal");
                    mandatoryObjinsertQuery.Append("      )");
                    mandatoryObjinsertQuery.Append("    SET @StrVal = ''");
                    mandatoryObjinsertQuery.Append("   SET @StrVal = @StrVal + 'peaiv.AttributeID = ' + CAST(@AttibuteID AS NVARCHAR(100)) ");
                    mandatoryObjinsertQuery.Append("       + ' AND pe.TypeID = ' + CAST(@EntityTypeID AS NVARCHAR(100)) ");
                    mandatoryObjinsertQuery.Append("      + ' And peaiv.Value in (' + @Values + ')';");
                    mandatoryObjinsertQuery.Append("   END");
                    mandatoryObjinsertQuery.Append("   ELSE");
                    mandatoryObjinsertQuery.Append("   BEGIN");
                    mandatoryObjinsertQuery.Append("      SET @StrVal = @StrVal + ' AND peaiv.AttributeID = ' + CAST(@AttibuteID AS NVARCHAR(100)) ");
                    mandatoryObjinsertQuery.Append("          + ' AND pe.TypeID = ' + CAST(@EntityTypeID AS NVARCHAR(100)) ");
                    mandatoryObjinsertQuery.Append("         + ' And peaiv.Value in (' + @Values + ')';");
                    mandatoryObjinsertQuery.Append("  END");
                    mandatoryObjinsertQuery.Append(" END");
                    mandatoryObjinsertQuery.Append(" SET @Flag = @Flag + 1");
                    mandatoryObjinsertQuery.Append("END");
                    mandatoryObjinsertQuery.Append("INSERT INTO #T1");
                    mandatoryObjinsertQuery.Append("  (");
                    mandatoryObjinsertQuery.Append("    [ConditionString]");
                    mandatoryObjinsertQuery.Append("  )");
                    mandatoryObjinsertQuery.Append("VALUES");
                    mandatoryObjinsertQuery.Append("  (");
                    mandatoryObjinsertQuery.Append("    @StrVal");
                    mandatoryObjinsertQuery.Append("  )");
                    mandatoryObjinsertQuery.Append("DECLARE @Condition AS NVARCHAR(MAX)");
                    mandatoryObjinsertQuery.Append("SELECT @Condition = COALESCE(@Condition + ' OR ', '') + '(' + t.ConditionString ");
                    mandatoryObjinsertQuery.Append("    + ')'");
                    mandatoryObjinsertQuery.Append("FROM   #T1 t");
                    mandatoryObjinsertQuery.Append("DROP TABLE #T1");
                    var insertionResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(mandatoryObjinsertQuery.ToString(), paramList);
                    return true;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// Updating Objective & Assignments Summary Block
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <param name="instruction">The Instruction</param>
        /// <param name="isEnableComments">The EnableComments</param>
        /// <param name="unitId">The UnitID</param>
        /// <param name="globalBaseline">The GlobaleBaseLine</param>
        /// <param name="globalTarget">The GlobalTarget</param>
        /// <returns>True or False</returns>
        public bool UpdateObjectiveSummaryBlockData(PlanningManagerProxy proxy, int objectiveId, int objectiveTypeId, string instruction, bool isEnableComments, int unitId = 0, decimal globalBaseline = 0, decimal globalTarget = 0)
        {
            try
            {
                string summaryQuery = string.Empty;
                string objDescupdateQuery = string.Empty;
                bool stat = false;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //stat = checkisupdated(tx, proxy, objectiveId, objectiveTypeId, instruction, isEnableComments, unitId, globalBaseline, globalTarget, "");
                    //Handle the newsfeed for updatesummeryblockdata
                    var objectivedetails = (from tt in tx.PersistenceManager.PlanningRepository.Query<ObjectiveDao>() where tt.Id == objectiveId select tt).ToList();
                    FeedNotificationServer fs = new FeedNotificationServer();
                    foreach (var item in objectivedetails)
                    {
                        if (objectiveTypeId != 0)
                        {
                            if (item.Instruction != instruction && instruction != "-")
                            {
                                NotificationFeedObjects obj = new NotificationFeedObjects();
                                obj.EntityId = objectiveId;
                                obj.action = "objective summary update";
                                obj.Actorid = proxy.MarcomManager.User.Id;
                                obj.EntityTypeId = objectiveTypeId;
                                obj.FromValue = item.Instruction;
                                obj.ToValue = instruction;
                                obj.AttributeName = "Instruction";
                                fs.AsynchronousNotify(obj);
                            }
                            if (item.IsEnableFeedback != isEnableComments)
                            {
                                NotificationFeedObjects objfeedback = new NotificationFeedObjects();
                                objfeedback.EntityId = objectiveId;
                                objfeedback.action = "objective summary update";
                                objfeedback.Actorid = proxy.MarcomManager.User.Id;
                                objfeedback.EntityTypeId = objectiveTypeId;
                                objfeedback.FromValue = (Convert.ToBoolean(item.IsEnableFeedback).ToString() == "True") ? "Checked" : "Unchecked";
                                objfeedback.ToValue = (Convert.ToBoolean(isEnableComments).ToString() == "True") ? "Checked" : "Unchecked";
                                objfeedback.AttributeName = "Enable comments/Learnings – field";
                                fs.AsynchronousNotify(objfeedback);
                            }
                            if (item.Typeid == 1 || item.Typeid == 2)
                            {
                                var numericdetails = (from tt in tx.PersistenceManager.PlanningRepository.Query<ObjectiveNumericDao>() where tt.ObjectiveId == objectiveId select tt).ToList();

                                foreach (var num in numericdetails)
                                {
                                    if (num.Unitid != unitId)
                                    {
                                        NotificationFeedObjects objunit = new NotificationFeedObjects();
                                        objunit.EntityId = objectiveId;
                                        objunit.action = "objective summary update";
                                        objunit.Actorid = proxy.MarcomManager.User.Id;
                                        objunit.EntityTypeId = objectiveTypeId;

                                        var units = (from tt in tx.PersistenceManager.PlanningRepository.Query<ObjectiveUnitDao>() select tt).ToList();
                                        //var unt = (from uu in units where uu.Id == num.Unitid select uu.Caption).FirstOrDefault();
                                        var unt = (from uu in units where uu.Id == num.Unitid select uu.Caption).FirstOrDefault();
                                        var untvalue = unt == null ? "-" : unt.ToString();
                                        objunit.FromValue = untvalue.ToString();
                                        var uu1 = (from uu in units where uu.Id == unitId select uu.Caption).FirstOrDefault();
                                        objunit.ToValue = uu1.ToString();
                                        objunit.AttributeName = "Unit";
                                        fs.AsynchronousNotify(objunit);
                                    }
                                    if (num.GlobalBaseLine != globalBaseline)
                                    {
                                        NotificationFeedObjects objbaseline = new NotificationFeedObjects();
                                        objbaseline.EntityId = objectiveId;
                                        objbaseline.action = "objective summary update";
                                        objbaseline.Actorid = proxy.MarcomManager.User.Id;
                                        objbaseline.EntityTypeId = objectiveTypeId;

                                        objbaseline.FromValue = num.GlobalBaseLine.ToString();
                                        objbaseline.ToValue = globalBaseline.ToString();
                                        objbaseline.AttributeName = "GlobalBaseLine";
                                        fs.AsynchronousNotify(objbaseline);
                                    }
                                    if (num.GlobalTarget != globalTarget)
                                    {
                                        NotificationFeedObjects objtarget = new NotificationFeedObjects();
                                        objtarget.EntityId = objectiveId;
                                        objtarget.action = "objective summary update";
                                        objtarget.Actorid = proxy.MarcomManager.User.Id;
                                        objtarget.EntityTypeId = objectiveTypeId;

                                        objtarget.FromValue = num.GlobalTarget.ToString();
                                        objtarget.ToValue = globalTarget.ToString();
                                        objtarget.AttributeName = "GlobalTarget";
                                        fs.AsynchronousNotify(objtarget);
                                    }
                                }
                            }
                        }
                    }



                    if (objectiveTypeId == 1 || objectiveTypeId == 2)
                    {
                        IList temp = tx.PersistenceManager.CommonRepository.ExecuteQuerywithMinParam("select ObjectiveStatus from PM_Objective where ID = ? ", objectiveId);

                        var cc = (Boolean)((System.Collections.Hashtable)(temp)[0])["ObjectiveStatus"];

                        summaryQuery = "UPDATE PM_Objective_Numeric SET GlobalBaseLine = ? ,GlobalTarget = ?, UnitID = ? WHERE ObjectiveID = ? ";
                        objDescupdateQuery = "UPDATE PM_Objective SET Instruction = ? ,IsEnableFeedback = ? WHERE ID =?";
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(summaryQuery, globalBaseline, globalTarget, unitId, objectiveId);
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(objDescupdateQuery, HttpUtility.HtmlEncode(instruction), Convert.ToInt32(isEnableComments), objectiveId);
                    }
                    if (objectiveTypeId == 3 || objectiveTypeId == 4)
                    {
                        objDescupdateQuery = "UPDATE PM_Objective SET Instruction = ? ,IsEnableFeedback = ? WHERE ID = ?";
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(objDescupdateQuery, HttpUtility.HtmlEncode(instruction), Convert.ToInt32(isEnableComments), objectiveId);
                    }
                    tx.Commit();
                }
                return true;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public bool checkisupdated(ITransaction tx, PlanningManagerProxy proxy, int objectiveId, int objectiveTypeId, string instruction = null, bool isEnableComments = false, int unitId = 0, int globalBaseline = 0, int globalTarget = 0, string startdate = null, string enddate = null, int daterule = 0, bool objmandatory = false, IList<IObjectiveFulfillCondtions> objFullfilConditions = null, string FromObjectiveFullfillmentCondition = null)
        {
            try
            {
                FeedNotificationServer fs = new FeedNotificationServer();

                List<string> objcsondtion = new List<string>();

                IObjectiveFulfillCondtions objectivces = new ObjectiveFulfillCondtions();
                StringBuilder objCondition = new StringBuilder();
                StringBuilder ToValue = new StringBuilder();
                foreach (IObjectiveFulfillCondtions item in objFullfilConditions)
                {
                    objectivces.EntityTypeid = item.EntityTypeid;
                    objectivces.Attributeid = item.Attributeid == null ? 0 : item.Attributeid;
                    IList<int> objectiveconditionvalue = item.ObjectiveConditionValue;
                    int j = 0;
                    List<int> data = new List<int>();
                    if (objectiveconditionvalue != null)
                    {
                        foreach (int condition in objectiveconditionvalue)
                        {
                            j = condition;
                            data.Add(j);
                        }
                    }
                    string result = "";
                    string ConditionType = "";
                    if (item.ConditionType >= 1)
                    {
                        ConditionType = item.ConditionType == 1 ? "OR" : "AND";
                    }
                    if (data.Count != 0)
                    {
                        result = string.Join(",", data.Select(n => n.ToString()).ToArray());
                    }
                    StringBuilder query = new StringBuilder();

                    if (objectivces.Attributeid == 0 || result == null)
                    {
                        query.Append("select caption as [entitycaption] from mm_entitytype where id='" + objectivces.EntityTypeid + "' ");
                    }
                    else
                    {
                        query.Append("SELECT optionvalue.ID,entityattr.AttributeID as [AttributeID], entitytype.Caption as [entitycaption],entityattr.Caption [attributecaption] ,");
                        query.Append(" optionValue.Caption as [optoincaption]  FROM MM_EntityType entitytype ");
                        query.Append(" inner JOIN MM_EntityTypeAttributeRelation entityattr on  ");
                        query.Append(" entitytype.ID = entityattr.EntityTypeID INNER JOIN MM_Option ");
                        query.Append(" optionValue ON entityattr.AttributeID = optionValue.AttributeID ");
                        query.Append(" where entityattr.EntityTypeID = " + objectivces.EntityTypeid + " ");
                        query.Append(" AND entityattr.AttributeID = " + objectivces.Attributeid + " AND optionValue.ID IN (" + result + ")");
                    }
                    var items = tx.PersistenceManager.PlanningRepository.ExecuteQuery(query.ToString()).Cast<Hashtable>().ToList();
                    StringBuilder Condition = new StringBuilder();
                    int i = 0;

                    string cb = "";
                    for (int ii = 0; ii < items.Count(); ii++)
                    {
                        if (cb.Length == 0)
                        {
                            if (Convert.ToInt32(item.ConditionType) >= 1)
                            {
                                Condition.Append(" " + ConditionType + "");
                            }
                            Condition.Append("\"if type is " + (string)items[ii]["entitycaption"] + "");
                            if (objectivces.Attributeid != 0)
                            {
                                Condition.Append(" Where " + (string)items[ii]["attributecaption"] + " Equals ");
                            }
                        }
                        if ((string)items[ii]["attributecaption"] != null)
                        {
                            Condition.Append(",");
                            Condition.Replace("Equals ,", "Equals ");
                            Condition.Append(" " + (string)items[ii]["optoincaption"]);
                        }
                        cb = Condition.ToString();
                        cb = cb + "\"";
                    }
                    objcsondtion.Add(cb);
                }
                ToValue.Append(string.Join("", objcsondtion.ToArray()));
                //Objective fullfullment condtion
                string Fromvalueconditin = ""; string Tovalueconditioin = "";
                Fromvalueconditin = System.Text.RegularExpressions.Regex.Replace(FromObjectiveFullfillmentCondition, "[^0-9a-zA-Z]+", "");
                Tovalueconditioin = System.Text.RegularExpressions.Regex.Replace(ToValue.ToString(), "[^0-9a-zA-Z]+", "");
                if (Fromvalueconditin != Tovalueconditioin)
                {

                    NotificationFeedObjects objfullfilmentcondition = new NotificationFeedObjects();
                    objfullfilmentcondition.EntityId = objectiveId;
                    objfullfilmentcondition.action = "objective summary update";
                    objfullfilmentcondition.Actorid = proxy.MarcomManager.User.Id;
                    objfullfilmentcondition.EntityTypeId = 10;
                    objfullfilmentcondition.FromValue = FromObjectiveFullfillmentCondition;
                    objfullfilmentcondition.ToValue = ToValue.ToString();
                    objfullfilmentcondition.AttributeName = "Fullfilment condition";
                    fs.AsynchronousNotify(objfullfilmentcondition);
                }
                var objectivedetails = (from tt in tx.PersistenceManager.PlanningRepository.Query<ObjectiveDao>() where tt.Id == objectiveId select tt).ToList();
                foreach (var item in objectivedetails)
                {
                    //obj fullfillment  block update
                    if (objectiveTypeId == 0)
                    {
                        if (item.StartDate.ToString("yyyy-MM-dd") != startdate)
                        {
                            NotificationFeedObjects objstartdate = new NotificationFeedObjects();
                            objstartdate.EntityId = objectiveId;
                            objstartdate.action = "objective summary update";
                            objstartdate.Actorid = proxy.MarcomManager.User.Id;
                            objstartdate.EntityTypeId = item.Typeid;
                            objstartdate.FromValue = item.StartDate.ToString("yyyy-MM-dd");
                            objstartdate.ToValue = startdate;
                            objstartdate.AttributeName = "Start Date";
                            fs.AsynchronousNotify(objstartdate);
                        }
                        if (item.EndDate.ToString("yyyy-MM-dd") != enddate)
                        {
                            NotificationFeedObjects objENDdate = new NotificationFeedObjects();
                            objENDdate.EntityId = objectiveId;
                            objENDdate.action = "objective summary update";
                            objENDdate.Actorid = proxy.MarcomManager.User.Id;
                            objENDdate.EntityTypeId = item.Typeid;
                            objENDdate.FromValue = item.EndDate.ToString("yyyy-MM-dd");
                            objENDdate.ToValue = enddate;
                            objENDdate.AttributeName = "End Date";
                            fs.AsynchronousNotify(objENDdate);
                        }
                        if (item.DateRule != daterule)
                        {
                            NotificationFeedObjects objdaterule = new NotificationFeedObjects();
                            objdaterule.EntityId = objectiveId;
                            objdaterule.action = "objective summary update";
                            objdaterule.Actorid = proxy.MarcomManager.User.Id;
                            objdaterule.EntityTypeId = item.Typeid;
                            objdaterule.FromValue = (item.DateRule == 1 ? "starts & ends" : "are active");
                            objdaterule.ToValue = (daterule == 1 ? "starts & ends" : "are active");
                            objdaterule.AttributeName = "Date rule";
                            fs.AsynchronousNotify(objdaterule);
                        }
                        if (item.IsMandatory != objmandatory)
                        {
                            NotificationFeedObjects objectmandatory = new NotificationFeedObjects();
                            objectmandatory.EntityId = objectiveId;
                            objectmandatory.action = "objective summary update";
                            objectmandatory.Actorid = proxy.MarcomManager.User.Id;
                            objectmandatory.EntityTypeId = item.Typeid;
                            objectmandatory.FromValue = (item.IsMandatory == true ? "Is mandatory" : "Not Mandatory");
                            objectmandatory.ToValue = (objmandatory == true ? "Is mandatory" : "Not Mandatory");
                            objectmandatory.AttributeName = "Mandatory";
                            fs.AsynchronousNotify(objectmandatory);
                        }

                    }


                }


                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }
        /// <summary>
        /// Getting Objective & Assignments Fulfillment Block
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <returns>IList of IObjectiveFulfullConditions</returns>
        public IList<IObjectiveFulfillCondtions> GettingEditObjectiveFulfillmentDetails(PlanningManagerProxy proxy, int objectiveId)
        {
            try
            {
                IList<IObjectiveFulfillCondtions> objfulfillList = new List<IObjectiveFulfillCondtions>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityResult = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == objectiveId);
                    var objectiveResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveDao>().Where(a => a.Id == objectiveId).ToList();
                    StringBuilder condQuery = new StringBuilder();
                    condQuery.Append(" SELECT DISTINCT poc.ID AS 'ConditionID',");
                    condQuery.Append(" poc.ObjectiveID,");
                    condQuery.Append(" poc.EntityTypeID,");
                    condQuery.Append("  poc.AttributeID,");
                    condQuery.Append(" poc.ConditionType,");
                    condQuery.Append(" poc.AttributeLevel,");
                    condQuery.Append(" ObjectiveValue.[Value],");
                    condQuery.Append("  poc.SortOrder");
                    condQuery.Append(" FROM   PM_ObjectiveCondition poc");
                    condQuery.Append(" INNER JOIN (");
                    condQuery.Append(" SELECT pocv.ConditionID,");
                    condQuery.Append(" STUFF(");
                    condQuery.Append(" (");
                    condQuery.Append("  SELECT DISTINCT ',' + CAST(pocv2.[Value] AS NVARCHAR(10))");
                    condQuery.Append(" FROM   PM_ObjectiveConditionValue pocv2");
                    condQuery.Append("  WHERE  pocv2.ConditionID = pocv.ConditionID FOR ");
                    condQuery.Append("  XML PATH('')");
                    condQuery.Append(" ),");
                    condQuery.Append(" 1,");
                    condQuery.Append(" 1,");
                    condQuery.Append(" ''");
                    condQuery.Append(" ) AS Value");
                    condQuery.Append(" FROM   PM_ObjectiveConditionValue pocv");
                    condQuery.Append(" ) AS ObjectiveValue");
                    condQuery.Append(" ON  poc.ID = ObjectiveValue.ConditionID");
                    condQuery.Append(" WHERE  poc.ObjectiveID = ?");
                    condQuery.Append(" ORDER BY");
                    condQuery.Append(" poc.SortOrder");

                    // "SELECT pe.ID,pec.EntityTypeID, pec.AttributeID, pec.ConditionType,pec.AttributeLevel,peobc.ConditionID, peobc.[Value] FROM PM_Entity pe INNER JOIN PM_ObjectiveCondition pec ON pec.ObjectiveID = pe.ID INNER JOIN PM_ObjectiveConditionValue peobc ON peobc.ConditionID = pec.ID WHERE pe.ID =" + objectiveId + "";
                    var condQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(condQuery.ToString(), objectiveId).Cast<Hashtable>().ToList();
                    var CondtionData = tx.PersistenceManager.PlanningRepository.Query<ObjectiveDao>().Where(a => a.Id == objectiveId).FirstOrDefault();
                    if (condQueryResult.Count() > 0)
                    {
                        foreach (var obj in condQueryResult)
                        {
                            ObjectiveFulfillCondtions objFulfillCond = new ObjectiveFulfillCondtions();
                            objFulfillCond.Id = CondtionData.Id;
                            objFulfillCond.ObjectiveName = CondtionData.Name;
                            objFulfillCond.ObjectiveDescription = CondtionData.Instruction;
                            objFulfillCond.StartDate = CondtionData.StartDate.ToString("yyyy/MM/dd");
                            objFulfillCond.EndDate = CondtionData.EndDate.ToString("yyyy/MM/dd");
                            objFulfillCond.IsDateRule = Convert.ToInt32(CondtionData.DateRule);
                            objFulfillCond.IsMandatory = Convert.ToBoolean(CondtionData.IsMandatory);
                            objFulfillCond.ConditionType = (int)obj["ConditionType"];
                            objFulfillCond.ConditionId = (int)obj["ConditionID"];
                            objFulfillCond.EntityTypeid = (int)obj["EntityTypeID"];
                            if (obj["AttributeID"] != null)
                            {
                                objFulfillCond.Attributeid = (int)obj["AttributeID"];
                                objFulfillCond.AttributeLevel = (int)obj["AttributeLevel"];
                                objFulfillCond.ObjectiveOptionValue = (string)obj["Value"];
                            }
                            else
                            {
                                objFulfillCond.Attributeid = 0;
                                objFulfillCond.AttributeLevel = 0;
                                objFulfillCond.ObjectiveOptionValue = string.Empty;
                            }

                            objfulfillList.Add(objFulfillCond);
                        }
                    }
                    else
                    {
                        ObjectiveFulfillCondtions objFulfillCond = new ObjectiveFulfillCondtions();
                        objFulfillCond.Id = CondtionData.Id;
                        objFulfillCond.ObjectiveName = CondtionData.Name;
                        objFulfillCond.ObjectiveDescription = CondtionData.Instruction;
                        objFulfillCond.StartDate = CondtionData.StartDate.ToString("yyyy/MM/dd");
                        objFulfillCond.EndDate = CondtionData.EndDate.ToString("yyyy/MM/dd");
                        objFulfillCond.IsDateRule = Convert.ToInt32(CondtionData.DateRule);
                        objFulfillCond.IsMandatory = Convert.ToBoolean(CondtionData.IsMandatory);
                        objfulfillList.Add(objFulfillCond);
                    }
                    return objfulfillList;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// Getting Entity Predefine Objectie AttributeDetails
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID</param>
        /// <returns>List of IEntityPredefineObjectiveAttributes</returns>
        public List<IEntityPredefineObjectiveAttributes> GettingEntityPredefineObjectives(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                List<EntityPredefineObjectiveAttributes> entityObjAttrList = new List<EntityPredefineObjectiveAttributes>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityResult = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == entityId).ToList();
                    string entityName = "AttributeRecord" + entityResult[0].Typeid + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    var treeValResult = tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>().Where(a => a.Entityid == entityId).ToList();
                    var attributeResulst = tx.PersistenceManager.PlanningRepository.GetAll<AttributeDao>();
                    var multiselectResult = tx.PersistenceManager.PlanningRepository.Query<Marcom.Dal.Metadata.Model.MultiSelectDao>().Where(a => a.Entityid == entityId).ToList();
                    var entityPeriodResult = tx.PersistenceManager.PlanningRepository.Query<EntityPeriodDao>().Where(a => a.Entityid == entityId).ToList();
                    var entityAttrResult = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => a.Id == entityId).ToList();
                    if (treeValResult != null)
                    {
                        foreach (var treeObj in treeValResult)
                        {
                            EntityPredefineObjectiveAttributes entityObjAttr = new EntityPredefineObjectiveAttributes();
                            entityObjAttr.AttributeId = treeObj.Attributeid;
                            entityObjAttr.AttributeName = attributeResulst.Where(a => a.Id == Convert.ToInt32(treeObj.Attributeid)).Select(a => a.Caption).FirstOrDefault();
                            entityObjAttr.AttributeTypeId = attributeResulst.Where(a => a.Id == Convert.ToInt32(treeObj.Attributeid)).Select(a => a.AttributeTypeID).FirstOrDefault();
                            entityObjAttr.AttributeValues = Convert.ToString(treeObj.Nodeid);
                            entityObjAttr.StartDate = Convert.ToString(entityPeriodResult[0].Startdate.ToString("MM/dd/yyyy"));
                            entityObjAttr.EndDate = Convert.ToString(entityPeriodResult[0].EndDate.ToString("MM/dd/yyyy"));
                            entityObjAttrList.Add(entityObjAttr);
                        }
                    }
                    if (multiselectResult != null)
                    {
                        foreach (var multiObj in multiselectResult)
                        {
                            EntityPredefineObjectiveAttributes entityObjAttr = new EntityPredefineObjectiveAttributes();
                            entityObjAttr.AttributeId = multiObj.Attributeid;
                            entityObjAttr.AttributeName = attributeResulst.Where(a => a.Id == Convert.ToInt32(multiObj.Attributeid)).Select(a => a.Caption).FirstOrDefault();
                            entityObjAttr.AttributeTypeId = attributeResulst.Where(a => a.Id == Convert.ToInt32(multiObj.Attributeid)).Select(a => a.AttributeTypeID).FirstOrDefault();
                            entityObjAttr.AttributeValues = Convert.ToString(multiObj.Optionid);
                            entityObjAttr.StartDate = Convert.ToString(entityPeriodResult[0].Startdate.ToString("MM/dd/yyyy"));
                            entityObjAttr.EndDate = Convert.ToString(entityPeriodResult[0].EndDate.ToString("MM/dd/yyyy"));
                            entityObjAttrList.Add(entityObjAttr);
                        }
                    }
                    if (entityAttrResult != null)
                    {
                        foreach (var entityObj in entityAttrResult)
                        {
                            if (entityObj.Attributes != null)
                            {
                                EntityPredefineObjectiveAttributes entityObjAttr = new EntityPredefineObjectiveAttributes();

                                foreach (DictionaryEntry attrObj in entityObj.Attributes)
                                {
                                    if (Convert.ToInt32(attrObj.Key) == 2)
                                    {
                                        entityObjAttr.AttributeId = 0;
                                        entityObjAttr.AttributeName = "";
                                        entityObjAttr.AttributeTypeId = 0;
                                        entityObjAttr.AttributeValues = "";
                                        entityObjAttr.StartDate = Convert.ToString(entityPeriodResult[0].Startdate.ToString("MM/dd/yyyy"));
                                        entityObjAttr.EndDate = Convert.ToString(entityPeriodResult[0].EndDate.ToString("MM/dd/yyyy"));
                                    }
                                    else
                                    {
                                        entityObjAttr.AttributeId = Convert.ToInt32(attrObj.Key);
                                        entityObjAttr.AttributeName = attributeResulst.Where(a => a.Id == Convert.ToInt32(attrObj.Key)).Select(a => a.Caption).FirstOrDefault();
                                        entityObjAttr.AttributeTypeId = attributeResulst.Where(a => a.Id == Convert.ToInt32(attrObj.Key)).Select(a => a.AttributeTypeID).FirstOrDefault();
                                        entityObjAttr.AttributeValues = Convert.ToString(attrObj.Value);
                                        entityObjAttr.StartDate = Convert.ToString(entityPeriodResult[0].Startdate.ToString("MM/dd/yyyy"));
                                        entityObjAttr.EndDate = Convert.ToString(entityPeriodResult[0].EndDate.ToString("MM/dd/yyyy"));

                                    }
                                    entityObjAttrList.Add(entityObjAttr);
                                }

                            }
                        }
                    }

                    List<Object> objList = new List<object>();
                    BrandSystems.Marcom.Utility.TranslatetoXml we = new BrandSystems.Marcom.Utility.TranslatetoXml();
                    objList.Add(we.ObjectToXML(entityObjAttrList).Remove(0, 38));
                    var entityObjectiveResult = GettingEntityPredefineObjectiveDetails(tx, objList, entityResult[0].Typeid);

                    var entityObjectiveData = tx.PersistenceManager.PlanningRepository.Query<ObjectiveEntityValueDao>().Where(a => a.Entityid == entityId).ToList();
                    List<int> objectiveList = new List<int>();
                    foreach (var entObj in entityObjectiveData)
                    {
                        objectiveList.Add(entObj.Objectiveid);
                    }
                    entityObjectiveResult = entityObjectiveResult.Where(ab => !objectiveList.Contains(ab.ObjectiveId)).ToList<IEntityPredefineObjectiveAttributes>();

                    return entityObjectiveResult;

                }

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// Getting Entity Predefine Objectie AttributeDetails
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="xmlData">The XmlData</param>
        /// <param name="entityTypeId">The EntityTypeID</param>
        /// <returns>List of IEntityPredefineObjectiveAttributes</returns>
        public List<IEntityPredefineObjectiveAttributes> GettingEntityPredefineObjectiveDetails(ITransaction tx, List<object> xmlData, int entityTypeId)
        {
            try
            {
                StringBuilder entityObjQuery = new StringBuilder();

                entityObjQuery.Append(" declare @objCriteria as nvarchar(max) ");

                entityObjQuery.Append(" declare @EntityValue as nvarchar(max)");
                entityObjQuery.Append(" set @EntityValue = 'DECLARE @InputXMLData");
                entityObjQuery.Append(" AS");
                entityObjQuery.Append(" XML=''" + xmlData[0] + "'',");
                entityObjQuery.Append(" @EntityTypeId AS INT =" + entityTypeId + " ");
                entityObjQuery.Append(" DECLARE @StartDate NVARCHAR(10)");
                entityObjQuery.Append(" DECLARE @EndDate NVARCHAR(10)");
                entityObjQuery.Append(" DECLARE @SQLQryStr NVARCHAR(MAX)");
                entityObjQuery.Append(" DECLARE @GenerateScriptObjectiveConditions AS NVARCHAR(MAX)");
                entityObjQuery.Append(" CREATE TABLE #temp");
                entityObjQuery.Append(" (");
                entityObjQuery.Append(" 	EntityTypeId        INT,");
                entityObjQuery.Append(" 	AttributeID         INT,");
                entityObjQuery.Append(" 	AttributeTypeID     INT,");
                entityObjQuery.Append(" 	AttributeValue      NVARCHAR(MAX),");
                entityObjQuery.Append(" 	AttributeName       NVARCHAR(MAX), StartDate Date ,EndDate Date");
                entityObjQuery.Append(" ) ");
                entityObjQuery.Append(" INSERT INTO #temp");
                entityObjQuery.Append("   (");
                entityObjQuery.Append(" EntityTypeId,");
                entityObjQuery.Append("    AttributeID,");
                entityObjQuery.Append("    AttributeTypeID,");
                entityObjQuery.Append("   AttributeValue,");
                entityObjQuery.Append("   AttributeName,StartDate ,EndDate");
                entityObjQuery.Append("  )(");
                entityObjQuery.Append("       SELECT @EntityTypeId,");
                entityObjQuery.Append("             X.EntityAttribute.value(''@AttributeId'', ''INT''),");
                entityObjQuery.Append("            X.EntityAttribute.value(''@AttributeTypeId'', ''INT''),");
                entityObjQuery.Append("           X.EntityAttribute.value(''@AttributeValues'', ''NVARCHAR(MAX)''),");
                entityObjQuery.Append("           X.EntityAttribute.value(''@AttributeName'', ''NVARCHAR(MAX)''), X.EntityAttribute.value(''@StartDate'' ,''DATE'') ,X.EntityAttribute.value(''@EndDate'' ,''Date'')");
                entityObjQuery.Append("    FROM   (");
                entityObjQuery.Append("               SELECT @InputXMLData");
                entityObjQuery.Append("           ) AS T(x)");
                entityObjQuery.Append("          CROSS APPLY x.nodes(");
                entityObjQuery.Append("       ''ArrayOfEntityPredefineObjectiveAttributes/EntityPredefineObjectiveAttributes''");
                entityObjQuery.Append("     ) AS X(EntityAttribute)");
                entityObjQuery.Append("  )'");

                entityObjQuery.Append(" SELECT @objCriteria = REPLACE(REPLACE(REPLACE(STUFF(     ( ");
                entityObjQuery.Append(" SELECT 'UNION ALL '+ 'SELECT TOP 1 '+ CAST(o.ID AS NVARCHAR(10)) + 'as ObjectiveID, ");
                entityObjQuery.Append(" ''' +  CAST(o.Name AS NVARCHAR(200))  + '''as ObjectiveName ,'''+  CAST(o.IsMandatory AS NVARCHAR(200))  + '''as ObjectiveMandatoryStatus ,''' +  CAST(o.Description AS NVARCHAR(200))  + '''as ObjectiveDecription ");
                entityObjQuery.Append(" FROM #TEMP t WHERE t.AttributeTypeID in(3,4,6,0) ' + o.ObjectiveCriteria from PM_Objective as o inner join PM_Entity pe on pe.ID = o.ID");
                entityObjQuery.Append(" where pe.active = 1 and o.Objectivecriteria is not null  AND o.ObjectiveCriteria  NOT LIKE'%AND (  )%'  and o.ObjectiveStatus = 1 ");
                entityObjQuery.Append(" FOR XML PATH('') ), 1, 10, ''),'&lt;','<'),'&gt;','>'),'&#x0D;','') ");

                entityObjQuery.Append(" exec(@EntityValue + @objCriteria) ");

                var ObjectiveResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(entityObjQuery.ToString()).Cast<Hashtable>().ToList();
                List<IEntityPredefineObjectiveAttributes> listPredefineObjectives = new List<IEntityPredefineObjectiveAttributes>();
                foreach (var listObj in ObjectiveResult)
                {
                    EntityPredefineObjectiveAttributes entityObj = new EntityPredefineObjectiveAttributes();
                    entityObj.ObjectiveId = Convert.ToInt32(listObj["ObjectiveID"]);
                    entityObj.ObjectiveName = HttpUtility.HtmlDecode(Convert.ToString(listObj["ObjectiveName"]));
                    entityObj.ObjectiveDescription = HttpUtility.HtmlDecode(Convert.ToString(listObj["ObjectiveDecription"]));

                    //entityObj.ObjectiveTypeId = Convert.ToInt32(listObj["ObjectiveTypeID"]);
                    //entityObj.ObjectiveOwner = Convert.ToString(listObj["ObjectiveOwner"]);
                    entityObj.ObjectiveMandatoryStatus = Convert.ToBoolean(Convert.ToInt32(listObj["ObjectiveMandatoryStatus"]));


                    listPredefineObjectives.Add(entityObj);
                }
                return listPredefineObjectives;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// Inserting predefined Objectives for Entity
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <param name="entityId">The EntityID</param>
        /// <returns>List of Last Inserted Objective IDs</returns>
        public List<int> InsertPredefineObjectivesforEntity(PlanningManagerProxy proxy, List<int> objectiveId, int entityId)
        {
            try
            {
                FeedNotificationServer fs = new FeedNotificationServer();
                List<ObjectiveEntityValueDao> objectiveEntityDaoList = new List<ObjectiveEntityValueDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    foreach (var objId in objectiveId)
                    {
                        ObjectiveEntityValueDao objEntityDao = new ObjectiveEntityValueDao();
                        objEntityDao.Objectiveid = Convert.ToInt32(objId);
                        objEntityDao.Entityid = entityId;
                        objectiveEntityDaoList.Add(objEntityDao);

                        string result = "select name,id from pm_entity where id ='" + Convert.ToInt32(objId) + "'";
                        var query = tx.PersistenceManager.PlanningRepository.ExecuteQuery(result.ToString()).Cast<Hashtable>().ToList();
                        foreach (var data in query)
                        {
                            NotificationFeedObjects obj = new NotificationFeedObjects();
                            obj.action = "Predefined Objective";
                            obj.Actorid = proxy.MarcomManager.User.Id;
                            obj.EntityId = entityId;
                            obj.EntityTypeId = 10;
                            obj.AssociatedEntityId = Convert.ToInt32(objId);
                            obj.AttributeName = (string)data["name"];
                            obj.TypeName = "Predefined Objective";
                            obj.CreatedOn = DateTimeOffset.Now;
                            obj.ParentId = 0;
                            fs.AsynchronousNotify(obj);
                        }
                    }
                    tx.PersistenceManager.PlanningRepository.Save<ObjectiveEntityValueDao>(objectiveEntityDaoList);
                    tx.Commit();
                    return objectiveId;
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        /// <summary>
        /// Getting Entity Predefine Objectie AttributeDetails
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="attribteDate">The IList of AttributeData</param>
        /// <param name="startDate">The StartDate</param>
        /// <param name="enddate">The EndDate</param>
        /// <param name="entityTypeId">The EntityTypeID</param>
        /// <returns>List of IEntityPredefineObjectiveAttributes</returns>
        public List<IEntityPredefineObjectiveAttributes> GettingPredefineObjectivesForEntityMetadata(PlanningManagerProxy proxy, IList<IAttributeData> attributeData, DateTime startDate, DateTime endDate, int entityTypeID)
        {
            try
            {
                List<EntityPredefineObjectiveAttributes> entityobjattrlist = new List<EntityPredefineObjectiveAttributes>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (attributeData != null && attributeData.Count > 0)
                    {
                        foreach (var attrObj in attributeData)
                        {
                            EntityPredefineObjectiveAttributes entityobjattr = new EntityPredefineObjectiveAttributes();
                            entityobjattr.AttributeId = attrObj.ID;
                            entityobjattr.AttributeName = attrObj.Caption;
                            entityobjattr.AttributeTypeId = attrObj.TypeID;
                            //entityobjattr.ObjectiveMandatoryStatus=attrObj. 
                            entityobjattr.AttributeValues = Convert.ToString(attrObj.Value);
                            entityobjattr.StartDate = startDate.ToString("MM/dd/yyyy");
                            entityobjattr.EndDate = endDate.ToString("MM/dd/yyyy");
                            entityobjattrlist.Add(entityobjattr);
                        }
                    }
                    else
                    {
                        EntityPredefineObjectiveAttributes entityobjattr = new EntityPredefineObjectiveAttributes();
                        entityobjattr.AttributeId = 0;
                        entityobjattr.AttributeName = "";
                        entityobjattr.AttributeTypeId = 0;
                        entityobjattr.AttributeValues = "";
                        entityobjattr.StartDate = startDate.ToString("MM/dd/yyyy");
                        entityobjattr.EndDate = endDate.ToString("MM/dd/yyyy");
                        entityobjattrlist.Add(entityobjattr);
                    }
                    List<object> objlist = new List<object>();
                    BrandSystems.Marcom.Utility.TranslatetoXml translatexmlObj = new BrandSystems.Marcom.Utility.TranslatetoXml();
                    objlist.Add(translatexmlObj.ObjectToXML(entityobjattrlist).Remove(0, 38));
                    var entityobjectiveresult = GettingEntityPredefineObjectiveDetails(tx, objlist, entityTypeID);
                    return entityobjectiveresult;
                }

            }
            catch (Exception ex)
            {
                throw;
            }
        }

        /// <summary>
        /// Getting Entity Predefine Objecties
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID</param>
        /// <returns>IList of IPredefineObjectives</returns>
        public IList<IPredefineObjectives> LoadPredefineObjectives(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<IPredefineObjectives> predefineObjList = new List<IPredefineObjectives>();

                    //var objResult1 = tx.PersistenceManager.PlanningRepository.Query<ObjectiveEntityValueDao>().Join(tx.PersistenceManager.PlanningRepository.Query<ObjectiveDao>(),
                    //    ent => ent.Objectiveid, entr => entr.Id, (ent, entr) => new { ent, entr }).Join(tx.PersistenceManager.MetadataRepository.Query<EntityDao>(),
                    //    entre => entre.entr.Id, at => at.Id, (entre, at) => new { entre, at }).Where
                    //    (a => a.at.Active == true && a.entre.ent.Entityid == entityId && a.entre.entr.ObjectiveStatus == true).ToList();


                    StringBuilder ObjQuery = new StringBuilder();

                    ObjQuery.Append(" SELECT objentyval.ID as ObjEntityID, obj.ID, obj.Name,obj.ObjectiveStatus,obj.IsMandatory,obj.IsEnableFeedback,obj.Description,obj.TypeID ");
                    ObjQuery.Append(" ,objentyval.Comments,objentyval.Fulfilment,objentyval.PlannedTarget,objentyval.TargetOutcome  ");
                    ObjQuery.Append(" ,objunt.ID AS unitID,objunt.Caption AS UnitCaption,objrat.ID AS ratingID,objrat.Caption AS RatingCaption ");
                    ObjQuery.Append(" FROM   PM_Objective  AS obj INNER JOIN PM_ObjectiveEntityValue AS objentyval ");
                    ObjQuery.Append(" ON obj.ID = objentyval.ObjectiveID ");
                    ObjQuery.Append(" INNER JOIN PM_Entity AS et ");
                    ObjQuery.Append(" ON obj.ID = et.ID ");
                    ObjQuery.Append(" LEFT JOIN PM_Objective_Numeric AS objnum ");
                    ObjQuery.Append(" ON objnum.ObjectiveID = obj.ID ");
                    ObjQuery.Append(" LEFT JOIN PM_Objective_Unit AS objunt ");
                    ObjQuery.Append(" ON objunt.ID = objnum.UnitID ");
                    ObjQuery.Append(" LEFT JOIN PM_Objective_Rating AS objrat ");
                    ObjQuery.Append(" ON objrat.ID = objentyval.RatingObjective ");
                    ObjQuery.Append(" WHERE et.Active = 1 AND obj.ObjectiveStatus = 1 AND objentyval.EntityID = ? ORDER BY obj.IsMandatory desc  ");

                    var ObjectiveResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(ObjQuery.ToString(), entityId).Cast<Hashtable>().ToList();

                    foreach (var listObj in ObjectiveResult)
                    {
                        PredefineObjectives ObjforEntity = new PredefineObjectives();

                        ObjforEntity.ObjectiveEntityId = Convert.ToInt32(listObj["ObjEntityID"]);
                        ObjforEntity.ObjectiveId = Convert.ToInt32(listObj["ID"]);
                        ObjforEntity.ObjectiveName = Convert.ToString(listObj["Name"]);
                        ObjforEntity.ObjectiveTypeId = Convert.ToInt32(listObj["TypeID"]);

                        ObjforEntity.PlannedTarget = (decimal)listObj["PlannedTarget"];
                        ObjforEntity.TargetOutcome = (decimal)listObj["TargetOutcome"];
                        ObjforEntity.FulfillmentState = Convert.ToInt32(listObj["Fulfilment"]);
                        ObjforEntity.UnitId = Convert.ToInt32(listObj["unitID"]) != null ? Convert.ToInt32(listObj["unitID"]) : 0;
                        ObjforEntity.UnitName = Convert.ToString(listObj["UnitCaption"]) != null ? Convert.ToString(listObj["UnitCaption"]) : "-";
                        ObjforEntity.Satus = Convert.ToInt32(listObj["IsMandatory"]);
                        ObjforEntity.ObjectiveComments = Convert.ToString(listObj["Comments"]);
                        ObjforEntity.ObjectiveDescription = Convert.ToString(listObj["Description"]);
                        ObjforEntity.IsEnableFeedback = Convert.ToBoolean(listObj["IsEnableFeedback"]);
                        ObjforEntity.Rating = Convert.ToInt32(listObj["ratingID"]) != null ? Convert.ToInt32(listObj["ratingID"]) : 0;
                        ObjforEntity.RatingCaption = Convert.ToString(listObj["RatingCaption"]) != null ? Convert.ToString(listObj["RatingCaption"]) : "-";

                        predefineObjList.Add(ObjforEntity);
                    }

                    //foreach (var ob in objResult1)
                    //{
                    //    PredefineObjectives predefObj = new PredefineObjectives();
                    //    int objEntityId = Convert.ToInt32(ob.entre.ent.Id);
                    //    int ObjectiveId = Convert.ToInt32(ob.entre.entr.Id);
                    //    string ObjectiveName = Convert.ToString(ob.entre.entr.Name);
                    //    int ObjectiveTypeId = Convert.ToInt32(ob.entre.entr.Typeid);
                    //    int PlannedTarget = Convert.ToInt32(ob.entre.ent.PlannedTarget);
                    //    int TargetOutcome = Convert.ToInt32(ob.entre.ent.TargetOutcome);
                    //    int fulFillment = Convert.ToInt32(ob.entre.ent.Fulfilment);
                    //    int isMandatory = Convert.ToInt32(ob.entre.entr.IsMandatory);
                    //    if (ObjectiveTypeId == 1 || ObjectiveTypeId == 2)
                    //    {
                    //        var result = tx.PersistenceManager.PlanningRepository.Query<ObjectiveNumericDao>().Join(
                    //                     tx.PersistenceManager.PlanningRepository.Query<ObjectiveUnitDao>(), obn => obn.Unitid,
                    //                     obu => obu.Id, (obn, obu) => new { obn, obu }).Where(a => a.obn.ObjectiveId == Convert.ToInt32(ob.entre.ent.Objectiveid)).Select(
                    //                     a => new { UnitId = a.obn.Unitid, UnitName = a.obu.Caption }).FirstOrDefault();

                    //        predefObj.ObjectiveEntityId = objEntityId;
                    //        predefObj.ObjectiveId = ObjectiveId;
                    //        predefObj.ObjectiveName = ObjectiveName;
                    //        predefObj.ObjectiveTypeId = ObjectiveTypeId;
                    //        predefObj.PlannedTarget = PlannedTarget;
                    //        predefObj.TargetOutcome = TargetOutcome;
                    //        predefObj.FulfillmentState = fulFillment;
                    //        predefObj.UnitId = result != null ? result.UnitId : 0;
                    //        predefObj.UnitName = result != null ? result.UnitName : "-";
                    //        predefObj.Satus = isMandatory;
                    //        predefObj.ObjectiveComments = ob.entre.ent.Comments;
                    //        predefObj.ObjectiveDescription = ob.entre.entr.Instruction;
                    //        predefObj.IsEnableFeedback = Convert.ToBoolean(ob.entre.entr.IsEnableFeedback);
                    //        predefineObjList.Add(predefObj);
                    //    }
                    //    if (ObjectiveTypeId == 3)
                    //    {
                    //        predefObj.ObjectiveEntityId = objEntityId;
                    //        predefObj.ObjectiveId = ObjectiveId;
                    //        predefObj.ObjectiveName = ObjectiveName;
                    //        predefObj.ObjectiveTypeId = ObjectiveTypeId;
                    //        predefObj.PlannedTarget = 0;
                    //        predefObj.TargetOutcome = 0;
                    //        predefObj.FulfillmentState = fulFillment;
                    //        predefObj.UnitName = "";
                    //        predefObj.Satus = isMandatory;
                    //        predefObj.ObjectiveComments = ob.entre.ent.Comments;
                    //        predefObj.ObjectiveDescription = ob.entre.entr.Instruction;
                    //        predefObj.IsEnableFeedback = Convert.ToBoolean(ob.entre.entr.IsEnableFeedback);
                    //        predefineObjList.Add(predefObj);
                    //    }
                    //    if (ObjectiveTypeId == 4)
                    //    {
                    //        string RatingCaption = "-";
                    //        //var ratingObj = tx.PersistenceManager.PlanningRepository.Query<ObjectiveEntityValueDao>().Join(tx.PersistenceManager.PlanningRepository.Query<ObjectiveRatingDao>(),
                    //        //    obe => obe.Objectiveid, obr => obr.Objectiveid, (obe, obr) => new { obe, obr }).Where(a => a.obe.Objectiveid == ObjectiveId && a.obe.Entityid == entityId)
                    //        //    .Select(a => new { RatingObjective = a.obe.RatingObjective, RatingCaption = a.obr.Caption }).FirstOrDefault();
                    //        var ratingObj = tx.PersistenceManager.PlanningRepository.Query<ObjectiveEntityValueDao>().Where(a => a.Objectiveid == ObjectiveId && a.Entityid == entityId).Select(a => new { RatingObjective = a.RatingObjective }).FirstOrDefault();
                    //        if (ratingObj.RatingObjective != 0)
                    //        {
                    //            RatingCaption = tx.PersistenceManager.PlanningRepository.Query<ObjectiveRatingDao>().Where(a => a.Id == Convert.ToInt32(ratingObj.RatingObjective) && a.Objectiveid == ObjectiveId).Select(a => a.Caption).FirstOrDefault();

                    //        }
                    //        predefObj.ObjectiveEntityId = objEntityId;
                    //        predefObj.ObjectiveId = ObjectiveId;
                    //        predefObj.ObjectiveName = ObjectiveName;
                    //        predefObj.ObjectiveTypeId = ObjectiveTypeId;
                    //        predefObj.PlannedTarget = 0;
                    //        predefObj.TargetOutcome = 0;
                    //        predefObj.Rating = ratingObj.RatingObjective != null ? Convert.ToInt32(ratingObj.RatingObjective) : 0;
                    //        predefObj.RatingCaption = RatingCaption;
                    //        predefObj.FulfillmentState = fulFillment;
                    //        predefObj.UnitName = "";
                    //        predefObj.Satus = isMandatory;
                    //        predefObj.ObjectiveComments = ob.entre.ent.Comments;
                    //        predefObj.ObjectiveDescription = ob.entre.entr.Instruction;
                    //        predefObj.IsEnableFeedback = Convert.ToBoolean(ob.entre.entr.IsEnableFeedback);
                    //        predefineObjList.Add(predefObj);
                    //    }
                    //}

                    tx.Commit();

                    return predefineObjList;
                }

            }
            catch (Exception ex)
            {
                throw;
            }
        }
        /// <summary>
        /// Updating predefined Objectives for Entity
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveEntityId">The ObjectiveEntiyID</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="plannedTarget">The PlannedTarget</param>
        /// <param name="targetOutCome">The TargetOutcome</param>
        /// <param name="ratingObjective">The RatignObjective</param>
        /// <param name="comments">The Comments</param>
        /// <param name="status">The Status</param>
        /// <param name="fulfilled">The FulFilled</param>
        /// <returns>True or False</returns>
        public bool UpdatePredefineObjectivesforEntity(PlanningManagerProxy proxy, int objectiveEntityId, int objectiveId, int entityId, decimal plannedTarget = 0, decimal targetOutcome = 0, int ratingObjective = 0, string comments = null, int status = 0, int fulfillment = 0)
        {
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FeedNotificationServer fs = new FeedNotificationServer();

                    var objdetails = (from item in tx.PersistenceManager.PlanningRepository.Query<ObjectiveEntityValueDao>() where item.Id == objectiveEntityId select item).FirstOrDefault();
                    if (objdetails.PlannedTarget != plannedTarget)
                    {
                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.action = "predefobjective update";
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.objectiveId = objectiveId;
                        obj.EntityId = entityId;
                        obj.AttributeName = "Planned target";
                        obj.FromValue = objdetails.PlannedTarget.ToString();
                        obj.ToValue = Convert.ToString(plannedTarget);
                        fs.AsynchronousNotify(obj);
                    }
                    if (objdetails.TargetOutcome != targetOutcome)
                    {
                        NotificationFeedObjects objtargetoutcome = new NotificationFeedObjects();
                        objtargetoutcome.action = "predefobjective update";
                        objtargetoutcome.Actorid = proxy.MarcomManager.User.Id;
                        objtargetoutcome.objectiveId = objectiveId;
                        objtargetoutcome.EntityId = entityId;
                        objtargetoutcome.AttributeName = "Target outcome";
                        objtargetoutcome.FromValue = objdetails.TargetOutcome.ToString();
                        objtargetoutcome.ToValue = Convert.ToString(targetOutcome);
                        fs.AsynchronousNotify(objtargetoutcome);
                    }
                    if (objdetails.RatingObjective != ratingObjective)
                    {
                        NotificationFeedObjects objratingObjective = new NotificationFeedObjects();
                        objratingObjective.action = "predefobjective update";
                        objratingObjective.Actorid = proxy.MarcomManager.User.Id;
                        objratingObjective.objectiveId = objectiveId;
                        objratingObjective.EntityId = entityId;
                        objratingObjective.AttributeName = "Rating objective";
                        ObjectiveRatingDao FromRatingDao = (from Obj in tx.PersistenceManager.PlanningRepository.Query<ObjectiveRatingDao>() where Obj.Id == objdetails.RatingObjective select Obj).FirstOrDefault();
                        ObjectiveRatingDao ToRatingDao = (from Obj in tx.PersistenceManager.PlanningRepository.Query<ObjectiveRatingDao>() where Obj.Id == ratingObjective select Obj).FirstOrDefault();
                        objratingObjective.FromValue = FromRatingDao == null ? "-" : FromRatingDao.Caption.ToString();
                        objratingObjective.ToValue = ToRatingDao == null ? "-" : ToRatingDao.Caption.ToString();
                        fs.AsynchronousNotify(objratingObjective);
                    }
                    if (objdetails.Status != status)
                    {
                        NotificationFeedObjects objstatus = new NotificationFeedObjects();
                        objstatus.action = "predefobjective update";
                        objstatus.Actorid = proxy.MarcomManager.User.Id;
                        objstatus.objectiveId = objectiveId;
                        objstatus.EntityId = entityId;
                        objstatus.AttributeName = "Status";
                        objstatus.FromValue = (objdetails.Status == 1 ? "Active" : "Deactivated");
                        objstatus.ToValue = (status == 1 ? "Active" : "Deactivated");
                        fs.AsynchronousNotify(objstatus);
                    }
                    if ((objdetails.Comments != comments && comments != "-") && (objdetails.Comments != null && comments != ""))
                    {
                        NotificationFeedObjects objcomments = new NotificationFeedObjects();
                        objcomments.action = "predefobjective update";
                        objcomments.Actorid = proxy.MarcomManager.User.Id;
                        objcomments.objectiveId = objectiveId;
                        objcomments.EntityId = entityId;
                        objcomments.AttributeName = "Comments";
                        objcomments.FromValue = (objdetails.Comments == null ? "-" : objdetails.Comments);
                        objcomments.ToValue = comments;
                        fs.AsynchronousNotify(objcomments);
                    }
                    ObjectiveEntityValueDao objEntityDao = new ObjectiveEntityValueDao();
                    objEntityDao.Id = objectiveEntityId;
                    objEntityDao.Objectiveid = objectiveId;
                    objEntityDao.Entityid = entityId;
                    objEntityDao.PlannedTarget = plannedTarget;
                    objEntityDao.TargetOutcome = targetOutcome;
                    objEntityDao.RatingObjective = ratingObjective;
                    objEntityDao.Comments = comments;
                    objEntityDao.Status = status;
                    objEntityDao.Fulfilment = fulfillment;




                    tx.PersistenceManager.PlanningRepository.Save<ObjectiveEntityValueDao>(objEntityDao);
                    tx.Commit();



                    return true;
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        /// <summary>
        /// Inserting and Updating Mandatoy Objective condition satisfied Entities
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <param name="startDate">The StartDate</param>
        /// <param name="endDate">The EndDate</param>
        /// <param name="dateRule">The DateRule</param>
        /// <returns>True or False</returns>
        public bool InsertingMandatoryObjectiveEntities(ITransaction tx, int objectiveId, string startDate, string endDate, int dateRule)
        {
            try
            {
                var objCondValResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveCondition>().Join(
                                       tx.PersistenceManager.PlanningRepository.Query<ObjectiveConditionValueDao>(),
                                       obc => obc.Id, obcv => obcv.Conditionid, (obc, obcv) => new { obc, obcv }).Where(a => a.obc.Objectiveid == objectiveId).ToList();
                var attributeResult = tx.PersistenceManager.PlanningRepository.Query<AttributeDao>();
                StringBuilder mandatroyObjQuery = new StringBuilder();
                mandatroyObjQuery.Append("SELECT DISTINCT poc.ID,");
                mandatroyObjQuery.Append(" poc.ObjectiveID,");
                mandatroyObjQuery.Append(" poc.EntityTypeID,");
                mandatroyObjQuery.Append(" poc.AttributeID,");
                mandatroyObjQuery.Append(" poc.ConditionType,");
                mandatroyObjQuery.Append(" ObjectiveValue.[VALUE],");
                mandatroyObjQuery.Append(" poc.SortOrder");
                mandatroyObjQuery.Append(" FROM   PM_ObjectiveCondition poc");
                mandatroyObjQuery.Append(" INNER JOIN (");
                mandatroyObjQuery.Append(" SELECT pocv.ConditionID,");
                mandatroyObjQuery.Append(" STUFF(");
                mandatroyObjQuery.Append(" (");
                mandatroyObjQuery.Append(" SELECT DISTINCT ',' + CAST(pocv2.[Value] AS NVARCHAR(10))");
                mandatroyObjQuery.Append(" FROM   PM_ObjectiveConditionValue pocv2");
                mandatroyObjQuery.Append(" WHERE  pocv2.ConditionID = pocv.ConditionID");

                mandatroyObjQuery.Append(" FOR XML PATH('')");
                mandatroyObjQuery.Append(" ),");
                mandatroyObjQuery.Append(" 1,");
                mandatroyObjQuery.Append("  1,");
                mandatroyObjQuery.Append("  ''");
                mandatroyObjQuery.Append(" ) AS VALUE");
                mandatroyObjQuery.Append(" FROM   PM_ObjectiveConditionValue pocv");
                mandatroyObjQuery.Append(" ) AS ObjectiveValue");
                mandatroyObjQuery.Append(" ON  poc.ID = ObjectiveValue.ConditionID");
                mandatroyObjQuery.Append(" WHERE poc.ObjectiveID = ?");
                mandatroyObjQuery.Append(" ORDER BY poc.SortOrder");
                var mandatoryObjQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(mandatroyObjQuery.ToString(), objectiveId).Cast<Hashtable>().ToList();

                IList<IObjectiveEntitycondition> objconList = new List<IObjectiveEntitycondition>();
                foreach (var mandObj in mandatoryObjQueryResult)
                {
                    ObjectiveEntitycondition condObj = new ObjectiveEntitycondition();
                    condObj.ObjectiveId = Convert.ToInt32(mandObj["ObjectiveID"]);
                    condObj.EntityTypeId = Convert.ToInt32(mandObj["EntityTypeID"]);
                    condObj.AttributeId = Convert.ToInt16(mandObj["AttributeID"]);
                    condObj.ConditionType = Convert.ToInt32(mandObj["ConditionType"]);
                    condObj.AttributeOptions = Convert.ToString(mandObj["VALUE"]);
                    objconList.Add(condObj);
                }


                StringBuilder querySb = new StringBuilder();
                querySb.Append("SELECT pe.ID");
                querySb.Append(" FROM   PM_Entity pe");
                querySb.Append(" WHERE  pe.ID IN (SELECT DISTINCT pep.EntityID");
                querySb.Append(" FROM   PM_EntityPeriod pep");

                if (dateRule == 1)
                {
                    querySb.Append(" WHERE  pep.Startdate >= '" + startDate + "'");
                    querySb.Append(" AND pep.EndDate <= '" + endDate + "')");
                }
                if (dateRule == 2)
                {
                    querySb.Append(" WHERE  pep.Startdate <= '" + endDate + "'");
                    querySb.Append(" AND pep.EndDate >= '" + startDate + "')");
                }

                querySb.Append(" AND (");

                Boolean BraketStart = false;
                for (int i = 0; i < objconList.Count; i++)
                {
                    int attributeId = Convert.ToInt32(objconList[i].AttributeId);
                    int attributeTypeId = attributeResult.Where(a => a.Id == attributeId).Select(a => a.AttributeTypeID).FirstOrDefault();

                    bool IsAnd = false;
                    if (i > 0)
                    {

                        if (objconList[i].ConditionType == 1)
                        {
                            querySb.AppendLine("     OR");
                            if (objconList.Count - 1 > i)
                            {
                                if (objconList[i + 1].ConditionType == 2)
                                {
                                    querySb.AppendLine("  (");
                                    BraketStart = true;
                                }
                            }

                        }
                        else
                        {
                            querySb.AppendLine(" AND");
                            if (objconList.Count - 1 > i)
                            {
                                if (objconList[i + 1].ConditionType == 1)
                                {
                                    IsAnd = true;
                                }

                            }
                            else
                            {
                                IsAnd = true;
                            }

                        }

                    }
                    else
                    {
                        if (objconList.Count - 1 > i)
                        {
                            if (objconList[i + 1].ConditionType == 2)
                            {
                                querySb.AppendLine(" (");
                                BraketStart = true;
                            }
                        }

                    }


                    if (attributeTypeId == 3)//Single Select
                    {
                        querySb.Append(" pe.id IN (SELECT mar.Id");
                        querySb.Append(" FROM   MM_AttributeRecord_" + objconList[i].EntityTypeId + " mar");
                        querySb.Append(" WHERE  mar.Attr_" + attributeId + " IN (" + objconList[i].AttributeOptions + "))");
                    }
                    else if (attributeTypeId == 4)//Multi Select
                    {
                        querySb.Append(" pe.id IN (SELECT mms.EntityID");
                        querySb.Append(" FROM   MM_MultiSelect mms");
                        querySb.Append(" INNER JOIN PM_Entity pe2");
                        querySb.Append(" ON  pe2.ID = mms.EntityID");
                        querySb.Append(" AND pe2.TypeID = " + objconList[i].EntityTypeId + "");
                        querySb.Append(" WHERE  mms.AttributeID = " + attributeId + "");
                        querySb.Append(" AND mms.OptionID IN (" + objconList[i].AttributeOptions + "))");
                    }
                    else if (attributeTypeId == 6)//Tree
                    {
                        querySb.Append(" pe.id IN (SELECT mtv.EntityID");
                        querySb.Append(" FROM   MM_TreeValue mtv");
                        querySb.Append(" INNER JOIN PM_Entity pe2");
                        querySb.Append(" ON  pe2.ID = mtv.EntityID");
                        querySb.Append(" AND pe2.TypeID = " + objconList[i].EntityTypeId + "");
                        querySb.Append(" WHERE  mtv.AttributeID = " + attributeId + "");
                        querySb.Append(" AND mtv.NodeID IN (" + objconList[i].AttributeOptions + "))");
                    }
                    else if (attributeTypeId == 0)//Tree
                    {

                        querySb.Append(" pe.TypeID = " + objconList[i].EntityTypeId + "");
                    }
                    if (IsAnd && BraketStart)
                    {
                        querySb.AppendLine(" )");
                        BraketStart = false;
                    }
                }
                querySb.Append("  )");

                var entityIdResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(querySb.ToString()).Cast<Hashtable>().ToList();
                IList<ObjectiveEntityValueDao> objEntityDaoList = new List<ObjectiveEntityValueDao>();
                foreach (var entObj in entityIdResult)
                {
                    ObjectiveEntityValueDao objentityDao = new ObjectiveEntityValueDao();
                    objentityDao.Entityid = Convert.ToInt32(entObj["ID"]);
                    objentityDao.Objectiveid = objectiveId;
                    objentityDao.PlannedTarget = 0;
                    objentityDao.TargetOutcome = 0;
                    objentityDao.RatingObjective = 0;
                    objentityDao.Status = 1;
                    objentityDao.Comments = "";
                    objentityDao.Fulfilment = 0;
                    objEntityDaoList.Add(objentityDao);
                    tx.PersistenceManager.PlanningRepository.Save<ObjectiveEntityValueDao>(objEntityDaoList);
                }
                return true;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        /// <summary>
        /// Getting Entity Additional Objecties
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID</param>
        /// <returns>IList of IPredefineObjectives</returns>
        public IList<IPredefineObjectives> GettingAddtionalObjectives(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<IPredefineObjectives> additionalObjList = new List<IPredefineObjectives>();
                    StringBuilder addtionalObjQuery = new StringBuilder();
                    addtionalObjQuery.Append("SELECT pe.ID, pe.[Active], pe.Name,pma.TypeID,pma.ID as 'AdditoinalObectiveID',pma.Instruction,pma.IsEnableFeedback,pma.UnitID, ");
                    addtionalObjQuery.Append(" pma.PlannedTarget,pma.TargetOutcome,pma.RatingObjective,pma.Comments,pma.Fulfillment,pma.IsActive as AddtioanalsStatus ");
                    addtionalObjQuery.Append("FROM PM_Entity pe INNER JOIN PM_AdditionalObjectiveEntityValues pma ON pe.ID = pma.EntityID");
                    addtionalObjQuery.Append(" AND pma.EntityID IN ");
                    addtionalObjQuery.Append("(SELECT pe.ID FROM PM_Entity pe WHERE  pe.ParentID = ? ) where pe.[Active]=1");
                    var additionalObjQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(addtionalObjQuery.ToString(), entityId).Cast<Hashtable>().ToList();
                    var UnitResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveUnitDao>();
                    foreach (var ob in additionalObjQueryResult)
                    {
                        PredefineObjectives additionalObj = new PredefineObjectives();
                        int objEntityId = Convert.ToInt32(ob["AdditoinalObectiveID"]);
                        int ObjectiveId = Convert.ToInt32(ob["ID"]);
                        string ObjectiveName = Convert.ToString(ob["Name"]);
                        int ObjectiveTypeId = Convert.ToInt32(ob["TypeID"]);
                        decimal PlannedTarget = (decimal)ob["PlannedTarget"];
                        decimal TargetOutcome = (decimal)ob["TargetOutcome"];
                        int fulFillment = Convert.ToInt32(ob["Fulfillment"]);
                        int status = Convert.ToInt32(ob["AddtioanalsStatus"]);
                        string Description = Convert.ToString(ob["Instruction"]);
                        if (ObjectiveTypeId == 2)
                        {
                            additionalObj.ObjectiveEntityId = objEntityId;
                            additionalObj.ObjectiveId = ObjectiveId;
                            additionalObj.ObjectiveName = ObjectiveName;
                            additionalObj.ObjectiveTypeId = ObjectiveTypeId;
                            additionalObj.PlannedTarget = PlannedTarget;
                            additionalObj.TargetOutcome = TargetOutcome;
                            additionalObj.FulfillmentState = fulFillment;
                            additionalObj.UnitName = UnitResult.Where(a => a.Id == Convert.ToInt32(ob["UnitID"])).Select(a => a.Caption).FirstOrDefault();
                            additionalObj.Satus = status;
                            additionalObj.IsEnableFeedback = Convert.ToBoolean(ob["IsEnableFeedback"]);
                            additionalObj.UnitId = Convert.ToInt32(ob["UnitID"]);
                            additionalObj.ObjectiveComments = Convert.ToString(ob["Comments"]);
                            additionalObj.ObjectiveDescription = Description;
                            additionalObjList.Add(additionalObj);
                        }
                        if (ObjectiveTypeId == 3)
                        {
                            additionalObj.ObjectiveEntityId = objEntityId;
                            additionalObj.ObjectiveId = ObjectiveId;
                            additionalObj.ObjectiveName = ObjectiveName;
                            additionalObj.ObjectiveTypeId = ObjectiveTypeId;
                            additionalObj.PlannedTarget = 0;
                            additionalObj.TargetOutcome = 0;
                            additionalObj.FulfillmentState = fulFillment;
                            additionalObj.UnitName = "";
                            additionalObj.IsEnableFeedback = Convert.ToBoolean(ob["IsEnableFeedback"]);
                            additionalObj.Satus = status;
                            additionalObj.ObjectiveComments = Convert.ToString(ob["Comments"]);
                            additionalObj.ObjectiveDescription = Description;
                            additionalObjList.Add(additionalObj);
                        }
                        if (ObjectiveTypeId == 4)
                        {
                            var ratingResult = tx.PersistenceManager.PlanningRepository.Query<AddtionalObjectiveRatingDao>().Where(a => a.ObjectiveId == ObjectiveId).ToList();
                            var ratingcaption = tx.PersistenceManager.PlanningRepository.Query<AddtionalObjectiveRatingDao>().
                                Where(a => a.Id == Convert.ToInt32(ob["RatingObjective"])).Select(a => a.Ratings).FirstOrDefault();
                            additionalObj.ObjectiveEntityId = objEntityId;
                            additionalObj.ObjectiveId = ObjectiveId;
                            additionalObj.ObjectiveName = ObjectiveName;
                            additionalObj.ObjectiveTypeId = ObjectiveTypeId;
                            additionalObj.PlannedTarget = 0;
                            additionalObj.TargetOutcome = 0;
                            additionalObj.Rating = Convert.ToInt32(ob["RatingObjective"]);
                            additionalObj.RatingCaption = Convert.ToString(ratingcaption);
                            additionalObj.FulfillmentState = fulFillment;
                            additionalObj.UnitName = "";
                            additionalObj.Satus = status;
                            additionalObj.ObjectiveComments = Convert.ToString(ob["Comments"]);
                            additionalObj.ObjectiveDescription = Description;
                            additionalObj.ObjectiveRatings = null;
                            additionalObj.IsEnableFeedback = Convert.ToBoolean(ob["IsEnableFeedback"]);
                            IList<IEntityRatings> entRatingList = new List<IEntityRatings>();
                            foreach (var ratObj in ratingResult)
                            {
                                EntityRatings entRating = new EntityRatings();
                                entRating.RatingId = Convert.ToInt32(ratObj.Id);
                                entRating.RatingName = Convert.ToString(ratObj.Ratings);
                                entRating.SortOrder = Convert.ToInt32(ratObj.SortOrder);
                                entRatingList.Add(entRating);
                            }
                            additionalObj.ObjectiveRatings = entRatingList;
                            additionalObjList.Add(additionalObj);
                        }
                    }
                    tx.Commit();
                    return additionalObjList;
                }

            }
            catch (Exception ex)
            {
                throw;
            }
        }
        /// <summary>
        /// Inserting and Updating Mandatoy Objective condition satisfied Entities
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <param name="objectiveName">The ObjectiveName</param>
        /// <param name="objectiveDescription">The ObjectiveDescription</param>
        /// <returns>True or False</returns>
        public bool UpdatingObjectiveOverDetails(PlanningManagerProxy proxy, int objectiveId, string objectiveName, string objectiveDescription, string Typeid)
        {

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    checkdetailisupdated(tx, proxy, objectiveId, objectiveName, objectiveDescription);
                    string entityUpdateQuery = "Update PM_Entity set Name = ? where ID = ?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(entityUpdateQuery, HttpUtility.HtmlEncode(objectiveName), objectiveId);
                    string objUpdateQuery = "Update PM_Objective set Name = ? ,Description= ? where ID = ?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(objUpdateQuery, HttpUtility.HtmlEncode(objectiveName), HttpUtility.HtmlEncode(objectiveDescription), objectiveId);
                    tx.Commit();
                    //Update SearchEngine
                    UpdateEntityforSearch(proxy, objectiveId.ToString(), objectiveName);
                    return true;
                }
                catch (Exception ex)
                {

                    if (tx != null)
                        tx.Rollback();
                    throw;
                }
                finally
                {

                }

            }
        }
        public bool checkdetailisupdated(ITransaction tx, PlanningManagerProxy proxy, int objectiveId, string objectiveName, string objectiveDescription)
        {
            try
            {
                FeedNotificationServer fs = new FeedNotificationServer();
                NotificationFeedObjects obj = new NotificationFeedObjects();
                obj.EntityId = objectiveId;
                obj.action = "objective summary update";
                obj.Actorid = proxy.MarcomManager.User.Id;


                var objectivedetails = (from tt in tx.PersistenceManager.PlanningRepository.Query<ObjectiveDao>() where tt.Id == objectiveId select tt).ToList();

                foreach (var item in objectivedetails)
                {
                    if (item.Name != objectiveName)
                    {
                        obj.FromValue = item.Name.ToString();
                        obj.ToValue = objectiveName;
                        obj.AttributeName = "Name";
                        fs.AsynchronousNotify(obj);
                    }
                    if (item.Description != objectiveDescription)
                    {
                        obj.FromValue = item.Description.ToString();
                        obj.ToValue = objectiveDescription;
                        obj.AttributeName = "Description";
                        fs.AsynchronousNotify(obj);
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        /// <summary>
        /// Updating Additional Objective & Assignments 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="objectiveEntityId">The ObjectiveEntityID</param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="objectiveTye">The ObjectiveTypeId</param>
        /// <param name="instruction">The Instruction</param>
        /// <param name="isEnablefeeback">The IsEnableFeedback</param>
        /// <param name="untiId">The UnitId</param>
        /// <param name="plannedTarget">The PlannedTarget</param>
        /// <param name="targetOutcome">The TargetOutcome</param>
        /// <param name="ratingObjective">The RatingObjective</param>
        /// <param name="comments">The Comments</param>
        /// <param name="fulFillment">The Fulfillment</param>
        /// <returns>True or False</returns>
        public bool UpdateAdditionalObjectivesforEntity(PlanningManagerProxy proxy, int objectiveEntityId, int entityId, int objectiveTypeId, string instruction, bool isEnableFeedback, int unitId, decimal plannedTarget, decimal targetOutCome, int ratingObjective, string comments, int fulFillment, string instructions, int Objstatus, string Objectivename)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    StringBuilder addtionalObjQuery = new StringBuilder();
                    addtionalObjQuery.Append("SELECT pe.ID,pe.active, pe.[Active], pe.Name,pma.TypeID,pma.ID as 'AdditoinalObectiveID',pma.Instruction,pma.IsEnableFeedback,pma.UnitID, ");
                    addtionalObjQuery.Append(" pma.PlannedTarget,pma.TargetOutcome,pma.RatingObjective,pma.Comments,pma.Fulfillment,pma.IsActive as AddtionalStatus ");
                    addtionalObjQuery.Append("FROM PM_Entity pe INNER JOIN PM_AdditionalObjectiveEntityValues pma ON pe.ID = pma.EntityID");
                    addtionalObjQuery.Append(" AND pma.EntityID IN ");
                    addtionalObjQuery.Append("(SELECT pe.ID FROM PM_Entity pe WHERE pe.id = ? ) WHERE pma.ID = ? ");
                    //addtionalObjQuery.Append("(SELECT pe.ID FROM PM_Entity pe WHERE pe.ParentID = ? )");
                    var additionalObjQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(addtionalObjQuery.ToString(), entityId, objectiveEntityId).Cast<Hashtable>().ToList();
                    var UnitResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveUnitDao>();

                    IList<MultiProperty> paramList = new List<MultiProperty>();
                    paramList.Add(new MultiProperty { propertyName = "entityId", propertyValue = entityId });
                    paramList.Add(new MultiProperty { propertyName = "unitId", propertyValue = unitId });
                    paramList.Add(new MultiProperty { propertyName = "PlannedTarget", propertyValue = plannedTarget });
                    paramList.Add(new MultiProperty { propertyName = "TargetOutcome", propertyValue = targetOutCome });
                    paramList.Add(new MultiProperty { propertyName = "RatingObjective", propertyValue = ratingObjective });
                    paramList.Add(new MultiProperty { propertyName = "Comments", propertyValue = comments });
                    paramList.Add(new MultiProperty { propertyName = "Fulfillment", propertyValue = fulFillment });
                    paramList.Add(new MultiProperty { propertyName = "objectiveEntityId", propertyValue = objectiveEntityId });
                    paramList.Add(new MultiProperty { propertyName = "instructions", propertyValue = instructions });
                    paramList.Add(new MultiProperty { propertyName = "IsActive", propertyValue = Objstatus });

                    FeedNotificationServer fs = new FeedNotificationServer();

                    foreach (var ob in additionalObjQueryResult)
                    {
                        if (Convert.ToString(ob["Name"]) != Objectivename)
                        {
                            NotificationFeedObjects obj = new NotificationFeedObjects();
                            obj.action = "Additional objective update";
                            obj.Actorid = proxy.MarcomManager.User.Id;
                            obj.objectiveId = objectiveEntityId;
                            obj.EntityId = entityId;
                            obj.AttributeName = "Name";
                            obj.FromValue = (ob["Name"]).ToString();
                            obj.ToValue = Convert.ToString(Objectivename);
                            fs.AsynchronousNotify(obj);
                        }

                        if (Convert.ToString(ob["Instruction"]) != instruction)
                        {
                            NotificationFeedObjects obj = new NotificationFeedObjects();
                            obj.action = "Additional objective update";
                            obj.Actorid = proxy.MarcomManager.User.Id;
                            obj.objectiveId = objectiveEntityId;
                            obj.EntityId = entityId;
                            obj.AttributeName = "Instruction";
                            obj.FromValue = (ob["Instruction"]).ToString();
                            obj.ToValue = Convert.ToString(instruction);
                            fs.AsynchronousNotify(obj);
                        }


                        if (Convert.ToDecimal(ob["PlannedTarget"]) != plannedTarget)
                        {
                            NotificationFeedObjects obj = new NotificationFeedObjects();
                            obj.action = "Additional objective update";
                            obj.Actorid = proxy.MarcomManager.User.Id;
                            obj.objectiveId = objectiveEntityId;
                            obj.EntityId = entityId;
                            obj.AttributeName = "Planned target";
                            obj.FromValue = (ob["PlannedTarget"]).ToString();
                            obj.ToValue = Convert.ToString(plannedTarget);
                            fs.AsynchronousNotify(obj);
                        }
                        if (Convert.ToDecimal(ob["TargetOutcome"]) != targetOutCome)
                        {
                            NotificationFeedObjects objtargetoutcome = new NotificationFeedObjects();
                            objtargetoutcome.action = "Additional objective update";
                            objtargetoutcome.Actorid = proxy.MarcomManager.User.Id;
                            objtargetoutcome.objectiveId = objectiveEntityId;
                            objtargetoutcome.EntityId = entityId;
                            objtargetoutcome.AttributeName = "Target outcome";
                            objtargetoutcome.FromValue = ob["TargetOutcome"].ToString();
                            objtargetoutcome.ToValue = Convert.ToString(targetOutCome);
                            fs.AsynchronousNotify(objtargetoutcome);
                        }
                        if (Convert.ToInt32(ob["RatingObjective"]) != ratingObjective)
                        {
                            NotificationFeedObjects objratingObjective = new NotificationFeedObjects();
                            objratingObjective.action = "Additional objective update";
                            objratingObjective.Actorid = proxy.MarcomManager.User.Id;
                            objratingObjective.objectiveId = objectiveEntityId;
                            objratingObjective.EntityId = entityId;
                            objratingObjective.AttributeName = "Rating objective";
                            var ratingfromcaption = "-";
                            var ratingtocaption = "-";
                            if (Convert.ToInt32(ob["RatingObjective"]) > 0)
                                ratingfromcaption = tx.PersistenceManager.PlanningRepository.Query<AddtionalObjectiveRatingDao>().
                                 Where(a => a.Id == Convert.ToInt32(ob["RatingObjective"])).Select(a => a.Ratings).FirstOrDefault();
                            if (ratingObjective > 0)
                                ratingtocaption = tx.PersistenceManager.PlanningRepository.Query<AddtionalObjectiveRatingDao>().
                               Where(a => a.Id == ratingObjective).Select(a => a.Ratings).FirstOrDefault();
                            objratingObjective.FromValue = ratingfromcaption;
                            objratingObjective.ToValue = ratingtocaption;
                            fs.AsynchronousNotify(objratingObjective);
                        }

                        if (Convert.ToInt32(ob["UnitID"]) != unitId)
                        {
                            NotificationFeedObjects objratingUnit = new NotificationFeedObjects();
                            objratingUnit.action = "Additional objective update";
                            objratingUnit.Actorid = proxy.MarcomManager.User.Id;
                            objratingUnit.objectiveId = objectiveEntityId;
                            objratingUnit.EntityId = entityId;
                            objratingUnit.AttributeName = "Unit";
                            string unitfromCaption = "-";
                            if ((int)ob["UnitID"] > 0)
                                unitfromCaption = UnitResult.Where(a => a.Id == (int)ob["UnitID"]).Select(a => a.Caption).FirstOrDefault();
                            string unittoCaption = "-";
                            if ((int)unitId > 0)
                                unittoCaption = UnitResult.Where(a => a.Id == (int)unitId).Select(a => a.Caption).FirstOrDefault();
                            objratingUnit.FromValue = unitfromCaption;
                            objratingUnit.ToValue = unittoCaption;
                            fs.AsynchronousNotify(objratingUnit);
                        }

                        if (Convert.ToInt32(ob["Fulfillment"]) != fulFillment)
                        {
                            NotificationFeedObjects objratingFulfilment = new NotificationFeedObjects();
                            objratingFulfilment.action = "Additional objective update";
                            objratingFulfilment.Actorid = proxy.MarcomManager.User.Id;
                            objratingFulfilment.objectiveId = objectiveEntityId;
                            objratingFulfilment.EntityId = entityId;
                            objratingFulfilment.AttributeName = "Fulfilment";
                            string FulfilmentfromCaption = "-";
                            if ((int)ob["Fulfillment"] == 1)
                                FulfilmentfromCaption = "Fulfilled";
                            else if ((int)ob["Fulfillment"] == 2)
                                FulfilmentfromCaption = "Not Fulfilled";
                            string FulfilmenttoCaption = "-";
                            if (fulFillment == 1)
                                FulfilmenttoCaption = "Fulfilled";
                            else if (fulFillment == 2)
                                FulfilmenttoCaption = "Not Fulfilled";
                            objratingFulfilment.FromValue = FulfilmentfromCaption;
                            objratingFulfilment.ToValue = FulfilmenttoCaption;
                            fs.AsynchronousNotify(objratingFulfilment);
                        }

                        if (Convert.ToInt32(ob["AddtionalStatus"]) != Objstatus)
                        {
                            NotificationFeedObjects objNotifystatus = new NotificationFeedObjects();
                            objNotifystatus.action = "Additional objective update";
                            objNotifystatus.Actorid = proxy.MarcomManager.User.Id;
                            objNotifystatus.objectiveId = objectiveEntityId;
                            objNotifystatus.EntityId = entityId;
                            objNotifystatus.AttributeName = "Status";

                            //objNotifystatus.FromValue = (Convert.ToInt32(ob [ "active" ] == 1 ? "Active" : "Deactivated"));
                            //objNotifystatus.ToValue = (Objstatus == 1 ? "Active" : "Deactivated");

                            objNotifystatus.FromValue = (Convert.ToInt32(ob["AddtionalStatus"]) == 1 ? "Active" : "Deactivated");
                            objNotifystatus.ToValue = (Objstatus == 1 ? "Active" : "Deactivated");

                            fs.AsynchronousNotify(objNotifystatus);
                        }

                        if ((Convert.ToString(ob["Comments"]) != comments && comments != "-") && (Convert.ToString(ob["Comments"]) != null && comments != ""))
                        {
                            NotificationFeedObjects objcomments = new NotificationFeedObjects();
                            objcomments.action = "Additional objective update";
                            objcomments.Actorid = proxy.MarcomManager.User.Id;
                            objcomments.objectiveId = objectiveEntityId;
                            objcomments.EntityId = entityId;
                            objcomments.AttributeName = "Comments";
                            objcomments.FromValue = (Convert.ToString(ob["Comments"]) == null ? "-" : Convert.ToString(ob["Comments"]));
                            objcomments.ToValue = comments;
                            fs.AsynchronousNotify(objcomments);
                        }
                    }
                    string additionObjQuery = "UPDATE PM_AdditionalObjectiveEntityValues SET EntityID = :entityId, UNITID= :unitId ,PlannedTarget = :PlannedTarget ,TargetOutcome = :TargetOutcome ,RatingObjective = :RatingObjective ,Comments = :Comments ,Fulfillment = :Fulfillment,Instruction = :instructions, IsActive =:IsActive where ID = :objectiveEntityId ";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(additionObjQuery, paramList);

                    string qry = "Update PM_Entity set name ='" + Objectivename + "' where ID=" + entityId + "";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuery(qry);


                    tx.Commit();
                    return true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        /// <summary>
        /// Reinserting Objective Fulfillment Conditions
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <param name="startDate">The start date.</param>
        /// <param name="endDate">The end date.</param>
        /// <param name="dateRule">The date rule.</param>
        /// <param name="isMandatory">The is mandatory.</param>
        /// <param name="objFullfilConditions">The objFullfilConditions.</param>
        /// <returns>Last inserted Condition ID</returns>
        public int UpdateObjectiveFulfillmentCondition(PlanningManagerProxy proxy, int objectiveId, string objStartDate, string objEndDate, int objDateRule, bool objMandatory, IList<IObjectiveFulfillCondtions> objFullfilConditions, string FromvalueFullfullCondtion)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    //public bool checkisupdated(tx, proxy,  objectiveId,0, null, false,  0,  0,  0, string startdate =null,string enddate=null , int daterule = 0, bool objmandatory = false, IList<IObjectiveFulfillCondtions> objFullfilConditions = null);
                    checkisupdated(tx, proxy, objectiveId, 0, null, false, 0, 0, 0, objStartDate, objEndDate, objDateRule, objMandatory, objFullfilConditions, FromvalueFullfullCondtion);

                    DeleteObjectiveFulfillmentCondition(tx, objectiveId);
                    StringBuilder objUpdateQuery = new StringBuilder();
                    objUpdateQuery.Append(" Update PM_Objective set");
                    objUpdateQuery.Append(" StartDate = ?,");
                    objUpdateQuery.Append(" EndDate = ?,");
                    objUpdateQuery.Append(" DateRule = ?,");
                    objUpdateQuery.Append(" IsMandatory = ? where ID = ?");
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(objUpdateQuery.ToString(), objStartDate, objEndDate, objDateRule, Convert.ToInt32(objMandatory), objectiveId);
                    IList<ObjectiveConditionValueDao> listObjfulfullValue = new List<ObjectiveConditionValueDao>();
                    if (objFullfilConditions != null)
                    {
                        IList<ObjectiveConditionDao> Iobjcondao = new List<ObjectiveConditionDao>();
                        foreach (var ab in objFullfilConditions)
                        {
                            ObjectiveConditionDao objCon = new ObjectiveConditionDao();
                            objCon.Objectiveid = objectiveId;
                            objCon.EntityTypeid = ab.EntityTypeid;
                            objCon.Attributeid = ab.Attributeid;
                            objCon.ConditionType = ab.ConditionType;
                            objCon.AttributeLevel = ab.AttributeLevel;
                            objCon.SortOrder = 1;
                            var conditionValueObj = ab.ObjectiveConditionValue;
                            tx.PersistenceManager.PlanningRepository.Save<ObjectiveConditionDao>(objCon);
                            var conditionId = objCon.Id;
                            if (conditionValueObj != null)
                            {
                                foreach (var objew in conditionValueObj)
                                {
                                    ObjectiveConditionValueDao conditionDao = new ObjectiveConditionValueDao();
                                    conditionDao.Conditionid = conditionId;
                                    conditionDao.Value = Convert.ToInt32(objew);
                                    listObjfulfullValue.Add(conditionDao);
                                }
                            }
                            else
                            {
                                ObjectiveConditionValueDao conditionDao = new ObjectiveConditionValueDao();
                                conditionDao.Conditionid = conditionId;
                                listObjfulfullValue.Add(conditionDao);

                            }

                            tx.PersistenceManager.PlanningRepository.Save<ObjectiveConditionValueDao>(listObjfulfullValue);
                        }
                    }

                    objUpdateQuery.Clear();

                    objUpdateQuery.Append("DELETE FROM PM_ObjectiveEntityValue WHERE ObjectiveID= ? ");
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(objUpdateQuery.ToString(), objectiveId);

                    if (objMandatory == true)
                    {
                        InsertingMandatoryObjectiveEntities(tx, objectiveId, objStartDate, objEndDate, objDateRule);
                    }

                    string objectivecriteria = "";
                    objectivecriteria = InsertingObjectiveConditionQuery(tx, objectiveId, objStartDate, objEndDate, objDateRule);

                    string updateobjQuery = "UPDATE PM_Objective SET Objectivecriteria = '" + objectivecriteria.Replace("'", "''") + "' WHERE ID = ? ";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(updateobjQuery.ToString(), objectiveId);

                    tx.Commit();
                    return objectiveId;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }



        /// <summary>
        /// Deleting Objective Fulfillment Conditions 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <returns>True or False</returns>
        public bool DeleteObjectiveFulfillmentCondition(ITransaction tx, int objectiveId)
        {
            try
            {
                tx.PersistenceManager.PlanningRepository.DeleteByID<ObjectiveEntityValueDao>(ObjectiveEntityValueDao.PropertyNames.Objectiveid, objectiveId);
                StringBuilder additionObjQuery = new StringBuilder();
                additionObjQuery.Append(" DELETE PM_ObjectiveCondition");
                additionObjQuery.Append(" FROM PM_ObjectiveCondition t1");
                additionObjQuery.Append(" INNER JOIN PM_ObjectiveConditionValue t2 ON t1.ID = t2.ConditionID");
                additionObjQuery.Append(" WHERE t1.ObjectiveID IN (" + objectiveId + ")");
                tx.PersistenceManager.PlanningRepository.ExecuteQuery(additionObjQuery.ToString());
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Deleting Objective Fulfillment Conditions 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <returns>True or False</returns>
        public bool DeleteObjectiveFulfillment(PlanningManagerProxy proxy, int objectiveId)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    tx.PersistenceManager.PlanningRepository.DeleteByID<ObjectiveEntityValueDao>(objectiveId);
                    StringBuilder additionObjQuery = new StringBuilder();
                    additionObjQuery.Append(" DELETE PM_ObjectiveCondition");
                    additionObjQuery.Append(" FROM PM_ObjectiveCondition t1");
                    additionObjQuery.Append(" INNER JOIN PM_ObjectiveConditionValue t2 ON t1.ID = t2.ConditionID");
                    additionObjQuery.Append(" WHERE t1.ObjectiveID IN (" + objectiveId + ")");
                    tx.PersistenceManager.PlanningRepository.ExecuteQuery(additionObjQuery.ToString());
                    tx.Commit();
                    return true;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        /// <summary>
        /// Getting Additional Objective Ratings
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <returns>IList of Additional Ratings</returns>
        public IList<IAddtionalObjectiveRating> GettingAdditionalObjRatings(PlanningManagerProxy proxy, int objectiveId)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    IList<AddtionalObjectiveRatingDao> objRatingDao = new List<AddtionalObjectiveRatingDao>();
                    objRatingDao = tx.PersistenceManager.PlanningRepository.Query<AddtionalObjectiveRatingDao>().Where(a => a.ObjectiveId == objectiveId).ToList();
                    IList<IAddtionalObjectiveRating> objRatingList = new List<IAddtionalObjectiveRating>();

                    IAddtionalObjectiveRating ratingObj1 = new AddtionalObjectiveRating();
                    ratingObj1.Id = 0;
                    ratingObj1.Ratings = "--No Response yet--";
                    ratingObj1.ObjectiveId = 0;
                    ratingObj1.SortOrder = 0;
                    objRatingList.Add(ratingObj1);

                    foreach (var ratObj in objRatingDao)
                    {
                        IAddtionalObjectiveRating ratingObj = new AddtionalObjectiveRating();
                        ratingObj.Id = ratObj.Id;
                        ratingObj.Ratings = ratObj.Ratings;
                        ratingObj.ObjectiveId = ratObj.ObjectiveId;
                        ratingObj.SortOrder = ratObj.SortOrder;
                        objRatingList.Add(ratingObj);
                    }
                    tx.Commit();
                    return objRatingList;
                }
                catch
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Getting Predefine Objective Ratings
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <returns>IList of Objective Ratings</returns>
        public IList<IObjectiveRating> GettingPredefineObjRatings(PlanningManagerProxy proxy, int objectiveId)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    IList<ObjectiveRatingDao> objRatingDao = new List<ObjectiveRatingDao>();
                    objRatingDao = tx.PersistenceManager.PlanningRepository.Query<ObjectiveRatingDao>().Where(a => a.Objectiveid == objectiveId).ToList();
                    IList<IObjectiveRating> objRatingList = new List<IObjectiveRating>();

                    ObjectiveRating ratingObj1 = new ObjectiveRating();
                    ratingObj1.Id = 0;
                    ratingObj1.Caption = "--No Response yet--";
                    ratingObj1.Objectiveid = 0;
                    ratingObj1.SortOrder = 0;
                    objRatingList.Add(ratingObj1);

                    foreach (var ratObj in objRatingDao)
                    {
                        ObjectiveRating ratingObj = new ObjectiveRating();
                        ratingObj.Id = ratObj.Id;
                        ratingObj.Caption = ratObj.Caption;
                        ratingObj.Objectiveid = ratObj.Objectiveid;
                        ratingObj.SortOrder = ratObj.SortOrder;
                        objRatingList.Add(ratingObj);
                    }
                    tx.Commit();
                    return objRatingList;
                }
                catch
                {
                    throw;
                }
            }
        }

        public bool EntityForeCastInsert(PlanningManagerProxy proxy, int entityID, int CostcenterId, Double QuarterAmount, int Quater)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var CurrentData = tx.PersistenceManager.PlanningRepository.Query<FinancialForecastSettingsDao>().SingleOrDefault();
                    IList<MultiProperty> prplstVal = new List<MultiProperty>();

                    switch ((enumDivisonIds)CurrentData.ForecastDivision)
                    {
                        case enumDivisonIds.Monthly:
                            switch (Quater)
                            {
                                case 1:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M1, propertyValue = QuarterAmount });
                                    break;
                                case 2:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M2, propertyValue = QuarterAmount });
                                    break;
                                case 3:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M3, propertyValue = QuarterAmount });
                                    break;
                                case 4:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M4, propertyValue = QuarterAmount });
                                    break;
                                case 5:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M5, propertyValue = QuarterAmount });
                                    break;
                                case 6:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M6, propertyValue = QuarterAmount });
                                    break;
                                case 7:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M7, propertyValue = QuarterAmount });
                                    break;
                                case 8:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M8, propertyValue = QuarterAmount });
                                    break;
                                case 9:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M9, propertyValue = QuarterAmount });
                                    break;
                                case 10:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M10, propertyValue = QuarterAmount });
                                    break;
                                case 11:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M11, propertyValue = QuarterAmount });
                                    break;
                                case 12:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.M12, propertyValue = QuarterAmount });
                                    break;
                            }
                            break;
                        case enumDivisonIds.Quaterly:
                            switch (Quater)
                            {
                                case 1:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Q1, propertyValue = QuarterAmount });
                                    break;
                                case 2:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Q2, propertyValue = QuarterAmount });
                                    break;
                                case 3:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Q3, propertyValue = QuarterAmount });
                                    break;
                                case 4:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Q4, propertyValue = QuarterAmount });
                                    break;
                            }


                            break;
                        case enumDivisonIds.Half_yearly:
                            switch (Quater)
                            {
                                case 1:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.H1, propertyValue = QuarterAmount });
                                    break;
                                case 2:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.H2, propertyValue = QuarterAmount });
                                    break;
                            }
                            break;
                        default:
                            switch (Quater)
                            {
                                case 1:
                                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Y, propertyValue = QuarterAmount });
                                    break;
                            }
                            break;
                    }
                    prplstVal.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.LastUpdatedAmountOn, propertyValue = DateTime.UtcNow });

                    IList<MultiProperty> prplstCond = new List<MultiProperty>();
                    prplstCond.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplstCond.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });

                    tx.PersistenceManager.PlanningRepository.UpdateByID<FinancialDao>(prplstVal, prplstCond);

                    tx.Commit();
                    return true;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }


        public IList GetForeCastForCCDetl(PlanningManagerProxy proxy, int CostcenterId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var CurrentData = tx.PersistenceManager.PlanningRepository.Query<FinancialForecastSettingsDao>().SingleOrDefault();
                    StringBuilder strQry = new StringBuilder();

                    strQry.Append(" select pe2.UniqueKey as ParentID, pe2.Name, a.ApprovedAllocatedAmount as ApprovedAllocatedAmount, a.PlannedAmount as PlannedAmount,a.RequestedAmount as RequestedAmount,a.ApprovedBudget as ApprovedBudget,a.Commited as Commited,a.Spent as Spent, ");
                    switch ((enumDivisonIds)CurrentData.ForecastDivision)
                    {
                        case enumDivisonIds.Monthly:
                            strQry.Append(" a.M1,a.M2,a.M3,a.M4,a.M5,a.M6,a.M7,a.M8 ,a.M9,a.M10,a.M11,a.M12 ,a.ActualM1,a.ActualM2,a.ActualM3,a.ActualM4,a.ActualM5,a.ActualM6,a.ActualM7,a.ActualM8 ,a.ActualM9,a.ActualM10,a.ActualM11,a.ActualM12 ");
                            break;
                        case enumDivisonIds.Quaterly:
                            strQry.Append("  a.Q1, a.Q2,a.Q3,a.Q4   ,  a.ActualQ1, a.ActualQ2,a.ActualQ3,a.ActualQ4   ");
                            break;

                        case enumDivisonIds.Half_yearly:
                            strQry.Append(" a.H1 ,a.H2 , a.ActualH1 ,a.ActualH2   ");
                            break;
                        default:

                            strQry.Append(" a.Y, a.ActualY ");
                            break;
                    }

                    strQry.Append("from (  select UIDs,SUM(b.ApprovedAllocatedAmount) AS ApprovedAllocatedAmount, SUM(b.PlannedAmount) as PlannedAmount,SUM(b.RequestedAmount) as RequestedAmount,SUM(b.ApprovedBudget) as ApprovedBudget,SUM(b.Commited) as Commited,SUM(b.Spent) as Spent, ");
                    switch ((enumDivisonIds)CurrentData.ForecastDivision)
                    {
                        case enumDivisonIds.Monthly:
                            strQry.Append(" sum(b.M1) as M1,sum(b.M2) as M2,sum(b.M3) as M3,sum(b.M4) as M4,sum(b.M5) as M5,sum(b.M6) as M6,sum(b.M7) as M7,sum(b.M8) as M8 ,sum(b.M9) as M9,sum(b.M10) as M10,sum(b.M11) as M11,sum(b.M12) as M12  ");
                            strQry.Append(" ,sum(b.ActualM1) as ActualM1,sum(b.ActualM2) as ActualM2,sum(b.ActualM3) as ActualM3,sum(b.ActualM4) as ActualM4,sum(b.ActualM5) as ActualM5,sum(b.ActualM6) as ActualM6,sum(b.ActualM7) as ActualM7,sum(b.ActualM8) as ActualM8 ,sum(b.ActualM9) as ActualM9,sum(b.ActualM10) as ActualM10,sum(b.ActualM11) as ActualM11,sum(b.ActualM12) as ActualM12  ");

                            //sum(b.M1) as M1,sum(b.M2) as M2,sum(b.M3) as M3,sum(b.M4) as M4,sum(b.M5) as M5,sum(b.M6) as M6,sum(b.M7) as M7,sum(b.M8) as M8 ,sum(b.M9) as M9,sum(b.M10) as M10,sum(b.M11) as M11,sum(b.M12) as M12 
                            break;
                        case enumDivisonIds.Quaterly:
                            strQry.Append("  sum(b.Q1) as Q1,sum(b.Q2) as Q2,sum(b.Q3) as Q3,sum(b.Q4) as Q4   ");
                            strQry.Append(" , sum(b.ActualQ1) as ActualQ1,sum(b.ActualQ2) as ActualQ2,sum(b.ActualQ3) as ActualQ3,sum(b.ActualQ4) as ActualQ4   ");
                            break;

                        case enumDivisonIds.Half_yearly:
                            strQry.Append(" sum(b.H1) as H1,sum(b.H2) as H2   ");
                            strQry.Append(" , sum(b.ActualH1) as ActualH1,sum(b.ActualH2) as ActualH2   ");
                            break;
                        default:

                            strQry.Append(" sum(b.Y) as Y ");
                            strQry.Append(" , sum(b.ActualY) as ActualY ");
                            break;
                    }


                    strQry.Append(" from ( select   ");
                    strQry.Append(" case when pe.Level = 0 then ");
                    strQry.Append(" pe.UniqueKey else ");
                    strQry.Append(" SUBSTRING(pe.UniqueKey,0,charindex('.',pe.UniqueKey,0))end as UIDs, pe.UniqueKey , ");
                    strQry.Append("  pf.ApprovedAllocatedAmount AS ApprovedAllocatedAmount ,pf.PlannedAmount as PlannedAmount,pf.RequestedAmount as RequestedAmount,pf.ApprovedBudget as ApprovedBudget,pf.Commited as Commited,pf.Spent as Spent, ");

                    switch ((enumDivisonIds)CurrentData.ForecastDivision)
                    {
                        case enumDivisonIds.Monthly:
                            strQry.Append(" pf.M1 as M1,pf.M2 as M2,pf.M3 as M3,pf.M4 as M4,pf.M5 as M5,pf.M6 as M6,pf.M7 as M7,pf.M8 as M8 ,pf.M9 as M9,pf.M10 as M10,pf.M11 as M11,pf.M12 as M12  ");
                            strQry.Append(", pf.ActualM1,pf.ActualM2,pf.ActualM3,pf.ActualM4,pf.ActualM5,pf.ActualM6,pf.ActualM7,pf.ActualM8 ,pf.ActualM9,pf.ActualM10,pf.ActualM11,pf.ActualM12  ");

                            break;
                        case enumDivisonIds.Quaterly:
                            strQry.Append(" pf.Q1 as Q1,pf.Q2 as Q2,pf.Q3 as Q3,pf.Q4 as Q4   ");
                            strQry.Append(" , pf.ActualQ1, pf.ActualQ2,pf.ActualQ3,pf.ActualQ4     ");
                            //,  a.ActualQ1, a.ActualQ2,a.ActualQ3,a.ActualQ4   
                            break;

                        case enumDivisonIds.Half_yearly:
                            strQry.Append(" pf.H1 as H1,pf.H2 as H2   ");
                            strQry.Append(" , pf.ActualH1 as ActualH1,pf.ActualH2 as ActualH1   ");
                            break;
                        default:

                            strQry.Append(" pf.Y as Y ");
                            strQry.Append(" , pf.ActualY as ActualY ");
                            break;
                    }

                    strQry.Append(" from PM_Financial pf inner join PM_Entity pe ");
                    strQry.Append(" on pe.ID = pf.EntityID AND pe.[Active]=1 ");
                    strQry.Append(" where pf.CostCenterID = ? ");
                    strQry.Append(" ) as b ");
                    strQry.Append(" group by b.uids) a ");
                    strQry.Append(" inner join PM_Entity pe2 ");
                    strQry.Append(" on pe2.UniqueKey = a.UIDs ");

                    IList ForeCaseresult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strQry.ToString(), CostcenterId);

                    tx.Commit();
                    return ForeCaseresult;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
            return null;
        }

        public bool EntityForecastAmountUpdate(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder strQry = new StringBuilder();
                    strQry.Append("DECLARE @EntityID AS INT SET @EntityID = ? DECLARE @UniqueKey AS NVARCHAR(100) SET @UniqueKey = (SELECT pe.UniqueKey FROM  PM_Entity pe WHERE pe.ID = @EntityID)");
                    strQry.Append("UPDATE b SET ");

                    switch ((enumDivisonIds)GetCurrentDivisionId(proxy))
                    {

                        case enumDivisonIds.Monthly:
                            strQry.Append(" b.m1=CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=1  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M2 = CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=2  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M3 = CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=3  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M4 = CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=4  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M5 = CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=5  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M6 = CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=6  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M7 = CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=7  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M8 =CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=8  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M9 =CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=9  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M10 = CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=10  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M11 = CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=11  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("               b.M12 = CASE  ");
                            strQry.Append("                    WHEN MONTH(c.Startdate)=12  THEN b.ApprovedAllocatedAmount ");
                            strQry.Append("                    ELSE 0 ");
                            strQry.Append("               END, ");
                            strQry.Append("              b.Q1 = 0, ");
                            strQry.Append("              b.Q2 = 0, ");
                            strQry.Append("              b.Q3 = 0, ");
                            strQry.Append("              b.Q4 = 0, ");
                            strQry.Append("              b.H1 = 0, ");
                            strQry.Append("              b.H2 = 0, ");
                            strQry.Append("              b.Y = 0 ");
                            break;
                        case enumDivisonIds.Quaterly:
                            strQry.Append(" b.Q1 = Case WHEN MONTH(c.Startdate) BETWEEN 1 AND 3 THEN b.ApprovedAllocatedAmount ELSE 0 END,b.Q2 =  CASE WHEN MONTH(c.Startdate) BETWEEN 4 AND 6 THEN b.ApprovedAllocatedAmount ELSE 0 END,b.Q3= CASE WHEN MONTH(c.Startdate) BETWEEN 7 AND 9 THEN b.ApprovedAllocatedAmount ELSE 0 END,b.Q4 =  CASE WHEN MONTH(c.Startdate) BETWEEN 10 AND 12 THEN b.ApprovedAllocatedAmount ELSE 0 END,b.m1=0,b.M2 = 0, b.M3 = 0, b.M4 = 0,b.M5 = 0,b.M6 = 0,b.M7 = 0,b.M8 = 0, b.M9 = 0, b.M10 = 0,b.M11 = 0,b.M12 = 0,b.H1 = 0,b.H2 = 0,b.Y = 0  ");
                            break;

                        case enumDivisonIds.Half_yearly:
                            strQry.Append("              b.Q1=0, ");
                            strQry.Append("              b.Q2 = 0, ");
                            strQry.Append("              b.Q3 = 0, ");
                            strQry.Append("              b.Q4 = 0, ");
                            strQry.Append("  b.m1=0,b.M2 = 0, b.M3 = 0, b.M4 = 0,b.M5 = 0,b.M6 = 0,b.M7 = 0,b.M8 = 0, b.M9 = 0, b.M10 = 0,b.M11 = 0,b.M12 = 0,");
                            strQry.Append("               b.H1 = Case WHEN MONTH(c.Startdate) BETWEEN 1 AND 6 THEN b.ApprovedAllocatedAmount ELSE 0 END, ");
                            strQry.Append("               b.H2 = Case WHEN MONTH(c.Startdate) BETWEEN 6 AND 12 THEN b.ApprovedAllocatedAmount ELSE 0 END, ");
                            strQry.Append("               b.Y = 0 ");
                            break;
                        default:

                            strQry.Append("               b.Y = b.ApprovedAllocatedAmount  ");
                            strQry.Append("  b.m1=0,b.M2 = 0, b.M3 = 0, b.M4 = 0,b.M5 = 0,b.M6 = 0,b.M7 = 0,b.M8 = 0, b.M9 = 0, b.M10 = 0,b.M11 = 0,b.M12 = 0,");
                            strQry.Append("              b.Q1=0, ");
                            strQry.Append("              b.Q2 = 0, ");
                            strQry.Append("              b.Q3 = 0, ");
                            strQry.Append("              b.Q4 = 0, ");
                            strQry.Append("               b.H1 = 0, ");
                            strQry.Append("               b.H2 = 0  ");
                            break;
                    }
                    strQry.Append(" FROM PM_Entity a INNER JOIN PM_Financial b ON a.ID = b.EntityID INNER JOIN PM_EntityPeriod c ON c.EntityID = a.ID AND c.SortOrder = 1 WHERE  a.UniqueKey LIKE @UniqueKey +'%'   and a.[Level] <> 0 ");


                    IList ForeCaseresult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strQry.ToString(), EntityID);

                    tx.Commit();
                    return true;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
            return false;
        }

        /// <summary>
        /// Updating Entity Image Name 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="attributeId">The AttributeID</param>
        /// <param name="imageName">The ImageName</param>
        ///  <param name="attribtueData">The AttributeData</param>
        /// <returns>True or False</returns>
        public bool UpdateImageName(PlanningManagerProxy proxy, int entityId, int attributeId, string imageName)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    var entityTypeResult = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == entityId).FirstOrDefault();
                    string query = string.Empty;
                    query = "update  MM_AttributeRecord_" + Convert.ToInt32(entityTypeResult.Typeid) + " set Attr_" + attributeId + "='" + imageName + "' where ID=" + entityId + "";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuery(query);
                    tx.Commit();
                    return true;
                }
                catch
                {
                    throw;
                }
            }
        }

        public bool DeleteFundRequest(PlanningManagerProxy proxy, int fundingReqID, int entityId)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityId, Modules.Planning);
                IList<FundingRequestDao> Ifundreq = new List<FundingRequestDao>();
                IList<FinancialDao> Ifinancialdao = new List<FinancialDao>();
                IList<TaskDao> itaskdao = new List<TaskDao>();
                IList<TaskMemberDao> itaskmem = new List<TaskMemberDao>();
                FundingRequestDao dao = new FundingRequestDao();
                FinancialDao findao = new FinancialDao();
                TaskDao taskdao = new TaskDao();
                TaskMemberDao taskmemdao = new TaskMemberDao();
                IList<MultiProperty> prplst = new List<MultiProperty>();
                prplst.Add(new MultiProperty { propertyName = FundingRequestDao.PropertyNames.Id, propertyValue = fundingReqID });
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    //to insert feed when a funding request Deleted
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "funding request Deleted";
                    obj.EntityId = fundingReqID;
                    // obj.AttributeName = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>() where item.Id == dao.Entityid select item.Name).FirstOrDefault().ToString();
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    fs.AsynchronousNotify(obj);
                    //end


                    dao = (tx.PersistenceManager.PlanningRepository.GetEquals<FundingRequestDao>(prplst)).FirstOrDefault();
                    Ifundreq.Add(dao);


                    prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = dao.Entityid });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = dao.CostCenterid });
                    findao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                    findao.RequestedAmount = 0;
                    findao.Status = 3;
                    Ifinancialdao.Add(findao);
                    prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = TaskDao.PropertyNames.ID, propertyValue = fundingReqID });
                    taskdao = (tx.PersistenceManager.AccessRepository.GetEquals<TaskDao>(prplst)).FirstOrDefault();
                    itaskdao.Add(taskdao);
                    prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = TaskMemberDao.PropertyNames.TaskID, propertyValue = fundingReqID });
                    taskmemdao = (tx.PersistenceManager.AccessRepository.GetEquals<TaskMemberDao>(prplst)).FirstOrDefault();
                    itaskmem.Add(taskmemdao);
                    tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancialdao);
                    tx.PersistenceManager.PlanningRepository.Delete<FundingRequestDao>(Ifundreq);
                    tx.PersistenceManager.PlanningRepository.Delete<TaskDao>(itaskdao);
                    tx.PersistenceManager.PlanningRepository.Delete<TaskMemberDao>(itaskmem);
                    var entityDao = tx.PersistenceManager.PlanningRepository.Get<EntityDao>(fundingReqID);
                    entityDao.Id = fundingReqID;
                    entityDao.Active = false;
                    tx.PersistenceManager.PlanningRepository.Save<EntityDao>(entityDao);
                    tx.Commit();
                }
                return false;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        /// <summary>
        /// Getting WorkFlowSteps with Tasks
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="EntityTypeID">The EntityTypeID</param>
        /// <returns>IList of IWorkFlowStepsWithTasks</returns>
        public IList<IWorkFlowStepsWithTasks> GetAllWorkFlowStepsWithTasks(PlanningManagerProxy proxy, int entityID)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {

                    IList<IWorkFlowStepsWithTasks> iiWorkflowtasks = new List<IWorkFlowStepsWithTasks>();


                    var entdao = (from entitydata in tx.PersistenceManager.PlanningRepository.Query<EntityDao>() where entitydata.Id == entityID select entitydata).FirstOrDefault();

                    var workflowid = (from entitydata in tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>() where entitydata.Id == entdao.Typeid select entitydata).FirstOrDefault();

                    var WorkflowType = (from work in tx.PersistenceManager.PlanningRepository.Query<WorkFlowTypeDao>() where work.Id == workflowid.WorkFlowID select work).FirstOrDefault();

                    var WorkflowSteps = (from steps in tx.PersistenceManager.PlanningRepository.Query<WorkFlowStepsDao>() where steps.WorkFlowID == WorkflowType.Id select steps).ToList();
                    int[] avtiveStateIDs = { 8, 13 };

                    foreach (var step in WorkflowSteps)
                    {
                        IWorkFlowStepsWithTasks workflow = new WorkFlowStepsWithTasks();
                        workflow.StepName = step.Name;
                        workflow.StepID = step.Id;
                        workflow.IsActive = false;
                        if (step.Id == entdao.ActiveEntityStateID)
                            workflow.IsActive = true;
                        workflow.TaskList = GetTaskListDetails(proxy, step.Id, entityID);
                        workflow.TotalActiveTasks = (from task in tx.PersistenceManager.PlanningRepository.Query<TaskDao>() where task.StepID == step.Id && avtiveStateIDs.Contains(task.TaskStatus) && task.EntityId == entityID select task).Count();
                        iiWorkflowtasks.Add(workflow);
                    }
                    tx.Commit();
                    return iiWorkflowtasks;
                }
                catch
                {
                    throw;
                }
            }
        }


        public int InsertTaskWithAttachments(PlanningManagerProxy proxy, int parentEntityID, int taskTypeID, string TaskName, int StepID, IList<ITask> TaskList, IList<ITaskMember> TaskMembers, IList<ITaskAttachment> TaskAttachments, IList<IFile> TaskFiles)
        {
            try
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Started creating Task", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                int entityId;
                WorkFlowNotifyHolder workFlowNotifyHolder = new WorkFlowNotifyHolder();

                workFlowNotifyHolder.Actorid = proxy.MarcomManager.User.Id;
                workFlowNotifyHolder.action = "Tasks";
                workFlowNotifyHolder.TypeName = taskTypeID.ToString();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    entityId = GetBaseEntityID(taskTypeID, TaskName, tx, parentEntityID, true, false);
                    if (TaskList != null)
                    {
                        IList<TaskDao> iTask = new List<TaskDao>();
                        StringBuilder activestepQuery = new StringBuilder();
                        activestepQuery.Append("SELECT TOP 1 ISNULL( mwfs.id , 0) AS StepID FROM MM_WorkFlow_Steps mwfs WHERE mwfs.WorkFlowID = (SELECT met.WorkFlowID FROM MM_EntityType met WHERE met.ID= ? ) ORDER BY mwfs.ID asc");
                        IList activeStepUniqueRes = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(activestepQuery.ToString(), taskTypeID);
                        int activeStepID = 0;
                        if (activeStepUniqueRes.Count > 0)
                        {
                            activeStepID = (int)((System.Collections.Hashtable)(activeStepUniqueRes)[0])["StepID"];
                        }
                        foreach (var a in TaskList)
                        {
                            TaskDao taskdao = new TaskDao();
                            taskdao.ID = entityId;
                            taskdao.Name = a.Name;
                            taskdao.StepID = a.StepID;
                            taskdao.Description = a.Description;
                            taskdao.DueDate = a.DueDate;
                            taskdao.EntityId = parentEntityID;
                            taskdao.PredefinedTaskID = a.PredefinedTaskID;
                            if (taskTypeID == 2 && TaskMembers.Count() > 0)
                                taskdao.TaskStatus = 8;
                            else if (taskTypeID == 2 && TaskMembers.Count() == 0)
                                taskdao.TaskStatus = 7;
                            else if (taskTypeID == 3 && TaskMembers.Count() > 0)
                                taskdao.TaskStatus = 8;
                            else if (taskTypeID == 3 && TaskMembers.Count() == 0)
                                taskdao.TaskStatus = 7;
                            iTask.Add(taskdao);
                        }

                        tx.PersistenceManager.PlanningRepository.Save<TaskDao>(iTask);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                        workFlowNotifyHolder.iTask = new List<TaskDao>();
                        workFlowNotifyHolder.iTask = iTask;
                    }
                    if (TaskMembers != null)
                    {
                        IList<TaskMemberDao> ientityRole = new List<TaskMemberDao>();
                        TaskMemberDao entroledao = new TaskMemberDao();
                        entroledao.Roleid = 1;
                        entroledao.TaskID = entityId;
                        entroledao.Userid = proxy.MarcomManager.User.Id;
                        entroledao.ApprovalRount = 1;
                        entroledao.ApprovalStatus = false;
                        ientityRole.Add(entroledao);
                        foreach (var a in TaskMembers)
                        {
                            entroledao = new TaskMemberDao();
                            entroledao.Roleid = a.Roleid;
                            entroledao.TaskID = entityId;
                            entroledao.Userid = a.Userid;
                            entroledao.ApprovalRount = 1;
                            entroledao.ApprovalStatus = false;
                            ientityRole.Add(entroledao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<TaskMemberDao>(ientityRole);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task Members", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                        // workFlowNotifyHolder.ismemberadded = true;
                        workFlowNotifyHolder.ientityRole = new List<TaskMemberDao>();
                        for (int i = 0; i < ientityRole.Count(); i++)
                        {
                            // if (ientityRole[i].Userid != proxy.MarcomManager.User.Id)
                            {
                                workFlowNotifyHolder.ientityRole.Add(ientityRole[i]);
                            }
                        }

                        IList<FileDao> ifile = new List<FileDao>();
                        if (TaskFiles != null)
                        {

                            foreach (var a in TaskFiles)
                            {
                                Guid NewId = Guid.NewGuid();

                                string filePath = ReadAdminXML("FileManagment");
                                var DirInfo = System.IO.Directory.GetParent(filePath);
                                string newFilePath = DirInfo.FullName;
                                System.IO.File.Move(filePath + "\\" + a.strFileID.ToString() + a.Extension, newFilePath + "\\" + NewId + a.Extension);
                                FileDao fldao = new FileDao();
                                fldao.Checksum = a.Checksum;
                                fldao.CreatedOn = a.CreatedOn;
                                fldao.Entityid = entityId;
                                fldao.Extension = a.Extension;
                                fldao.MimeType = a.MimeType;
                                fldao.Moduleid = a.Moduleid;
                                fldao.Name = a.Name;
                                fldao.Ownerid = a.Ownerid;
                                fldao.Size = a.Size;
                                fldao.VersionNo = a.VersionNo;
                                fldao.Fileguid = NewId;
                                ifile.Add(fldao);
                            }
                            tx.PersistenceManager.PlanningRepository.Save<FileDao>(ifile);
                            BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in File", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                        }

                        if (ifile != null)
                        {

                            IList<TaskAttachmentsDao> iattachment = new List<TaskAttachmentsDao>();
                            foreach (var a in ifile)
                            {
                                TaskAttachmentsDao attachedao = new TaskAttachmentsDao();
                                attachedao.ActiveFileid = a.Id;
                                attachedao.ActiveVersionNo = 1;
                                attachedao.Createdon = DateTime.Now;
                                attachedao.Entityid = entityId;
                                attachedao.Name = a.Name;
                                attachedao.Typeid = taskTypeID;
                                iattachment.Add(attachedao);
                            }
                            tx.PersistenceManager.PlanningRepository.Save<TaskAttachmentsDao>(iattachment);
                            BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task Members", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                            //workFlowNotifyHolder.taskattachmentdao = new List<object>();
                            // workFlowNotifyHolder.isattachment = true;
                            for (int i = 0; i < iattachment.Count(); i++)
                            {
                                if (i != 0)
                                {
                                    workFlowNotifyHolder.obj2.Add(iattachment[i]);
                                }
                            }

                        }
                        tx.Commit();
                        FeedNotificationServer fs = new FeedNotificationServer();
                        fs.AsynchronousNotify((NotificationFeedObjects)workFlowNotifyHolder);


                    }

                }
                return entityId;
            }
            catch (Exception ex)
            {
                return 0;
            }


        }

        private string ReadAdminXML(string elementNode)
        {

            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            XDocument xDoc = XDocument.Load(xmlpath);
            if (xDoc.Root.Elements(elementNode).Count() > 0)
            {
                return (string)xDoc.Root.Elements(elementNode).FirstOrDefault().Elements("FolderPath").First();
            }
            string uploadImagePath = Path.Combine(HttpRuntime.AppDomainAppPath);
            return uploadImagePath = uploadImagePath + "UploadedImages\\";
        }
        /// <summary>
        /// Getting Task details
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="TaskID">The TaskID</param>
        /// <returns>IList of ITask</returns>
        public IList<ITask> GetWorkFlowTaskDetails(PlanningManagerProxy proxy, int taskID)
        {
            IList<ITask> iitaskDetails = new List<ITask>();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var taskData = (from item in tx.PersistenceManager.PlanningRepository.Query<TaskDao>() where item.ID == taskID select item).FirstOrDefault();
                    ITask itask = new BrandSystems.Marcom.Core.Planning.Task();
                    itask.EntityId = taskData.EntityId;
                    itask.Id = taskData.ID;
                    itask.Description = taskData.Description;
                    itask.DueDate = taskData.DueDate;
                    DateTime d1 = taskData.DueDate;
                    DateTime d2 = DateTime.Now;
                    TimeSpan t = d1 - d2;
                    itask.Duedates = (int)t.TotalDays;
                    if (itask.Duedates == 0)
                        itask.Duedates = 1;
                    itask.Name = taskData.Name;
                    itask.Status = taskData.TaskStatus;
                    itask.StepID = taskData.StepID;
                    var taskTypeDetails = (from entity in tx.PersistenceManager.UserRepository.Query<BaseEntityDao>()
                                           join enttype in tx.PersistenceManager.UserRepository.Query<EntityTypeDao>() on entity.Typeid equals enttype.Id
                                           where entity.Id == taskData.ID
                                           select new
                                           {
                                               entityTypeName = enttype.Caption,
                                               taskTypeID = enttype.Id
                                           }).FirstOrDefault();
                    var parentEntityDetails = (from entity in tx.PersistenceManager.UserRepository.Query<BaseEntityDao>()
                                               join enttype in tx.PersistenceManager.UserRepository.Query<EntityTypeDao>() on entity.Typeid equals enttype.Id
                                               where entity.Id == taskData.EntityId
                                               select new
                                               {
                                                   entityTypeName = enttype.Caption,
                                                   entityname = entity.Name,
                                                   taskTypeID = enttype.Id
                                               }).FirstOrDefault();
                    itask.ParentEntityName = parentEntityDetails.entityname;
                    itask.ParentEntityTypeName = parentEntityDetails.entityTypeName;
                    itask.TaskTypeId = taskTypeDetails.taskTypeID;
                    itask.TaskTypeName = taskTypeDetails.entityTypeName;
                    var OwnerDetails = (from entityrole in tx.PersistenceManager.UserRepository.Query<TaskMemberDao>()
                                        join user in tx.PersistenceManager.UserRepository.Query<UserDao>() on entityrole.Userid equals user.Id
                                        where entityrole.Roleid == 4 && entityrole.TaskID == taskID
                                        select new
                                        {
                                            username = user.FirstName + " " + user.LastName,
                                            OwnerID = user.Id
                                        }).ToList();//.FirstOrDefault();

                    itask.TaskOwnerName = OwnerDetails == null ? "" : string.Join(",", OwnerDetails.Select(a => a.username.ToString()));
                    //itask.MemberID = OwnerDetails == null ? 0 : OwnerDetails.OwnerID;
                    var statusname = (from item in tx.PersistenceManager.PlanningRepository.Query<WorkFlowStepsDao>() where item.Id == taskData.TaskStatus select item.Name).FirstOrDefault();
                    itask.TaskStatusName = "";
                    if (taskData.TaskStatus == 8)
                        itask.TaskStatusName = "In progress";
                    if (taskData.TaskStatus == 11)
                        itask.TaskStatusName = "Approved";
                    if (taskData.TaskStatus == 12)
                        itask.TaskStatusName = "Rejected";
                    itask.TaskMembers = GetTaskMember(proxy, taskID);
                    itask.TaskAttachment = (from attach in tx.PersistenceManager.PlanningRepository.Query<FileDao>() where attach.Entityid == taskData.ID select attach).ToList();
                    itask.fundrequestTask = getfundingRequestsByFundRequestID(proxy, taskID);
                    iitaskDetails.Add(itask);
                }
                return iitaskDetails;
            }
            catch (Exception ex)
            {
                return null;
            }

        }


        /// <summary>
        /// Getting Task details
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="StepID">The StepID</param>
        /// <returns>IList of ITask</returns>
        public IList<ITask> GetTaskListDetails(PlanningManagerProxy proxy, int StepId, int entityID)
        {
            IList<ITask> iitaskDetails = new List<ITask>();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var TaskList = (from task in tx.PersistenceManager.PlanningRepository.Query<TaskDao>() where task.StepID == StepId && task.EntityId == entityID select task).OrderBy(a => a.TaskStatus).ToList();
                    foreach (var val in TaskList)
                    {

                        var taskData = (from item in tx.PersistenceManager.PlanningRepository.Query<TaskDao>() where item.ID == val.ID select item).FirstOrDefault();
                        ITask itask = new BrandSystems.Marcom.Core.Planning.Task();
                        itask.EntityId = taskData.EntityId;
                        itask.Id = taskData.ID;
                        itask.Description = taskData.Description;
                        itask.DueDate = taskData.DueDate;
                        DateTime d1 = taskData.DueDate;
                        DateTime d2 = DateTime.Now;
                        TimeSpan t = d1 - d2;
                        itask.Duedates = (int)t.TotalDays;
                        if (itask.Duedates == 0)
                            itask.Duedates = 1;
                        itask.Name = taskData.Name;
                        itask.Status = taskData.TaskStatus;
                        var taskTypeDetails = (from entity in tx.PersistenceManager.UserRepository.Query<BaseEntityDao>()
                                               join enttype in tx.PersistenceManager.UserRepository.Query<EntityTypeDao>() on entity.Typeid equals enttype.Id
                                               where entity.Id == taskData.ID
                                               select new
                                               {
                                                   entityTypeName = enttype.Caption,
                                                   taskTypeID = enttype.Id
                                               }).FirstOrDefault();
                        itask.TaskTypeId = taskTypeDetails.taskTypeID;
                        itask.TaskTypeName = taskTypeDetails.entityTypeName;
                        var statusname = (from item in tx.PersistenceManager.PlanningRepository.Query<WorkFlowStepsDao>() where item.Id == taskData.TaskStatus select item.Name).FirstOrDefault();
                        itask.TaskStatusName = statusname == null ? "" : statusname;
                        itask.StepID = taskData.StepID;
                        var OwnerDetails = (from entityrole in tx.PersistenceManager.UserRepository.Query<TaskMemberDao>()
                                            join user in tx.PersistenceManager.UserRepository.Query<UserDao>() on entityrole.Userid equals user.Id
                                            where entityrole.Roleid == 1 && entityrole.TaskID == taskData.ID
                                            select new
                                            {
                                                username = user.FirstName + " " + user.LastName,
                                                OwnerID = user.Id
                                            }).FirstOrDefault();
                        itask.TaskOwnerName = OwnerDetails == null ? "" : OwnerDetails.username;
                        itask.MemberID = OwnerDetails == null ? 0 : OwnerDetails.OwnerID;
                        itask.IsPredefined = false;
                        itask.PredefinedTaskID = taskData.PredefinedTaskID;
                        itask.TaskMembers = GetTaskMember(proxy, taskData.ID);
                        //itask.TaskAttachment = (from attach in tx.PersistenceManager.PlanningRepository.Query<FileDao>() where attach.Entityid == taskData.ID select attach).ToList();
                        iitaskDetails.Add(itask);
                    }

                    var predefinedTaskList = (from task in tx.PersistenceManager.PlanningRepository.Query<WorkFlowStepPredefinedTasksDao>() where task.StepID == StepId select task).ToList();

                    foreach (var res in predefinedTaskList)
                    {
                        var IsPredefinedExistsList = TaskList.Where(a => a.PredefinedTaskID == res.TaskID).Select(a => a).ToList();

                        if (IsPredefinedExistsList.Count() == 0)
                        {

                            var taskData = (from item in tx.PersistenceManager.PlanningRepository.Query<PredefinedTasksDao>() where item.ID == res.TaskID && item.Active == true select item).FirstOrDefault();

                            ITask itask = new BrandSystems.Marcom.Core.Planning.Task();
                            itask.EntityId = 0;
                            itask.Id = taskData.ID;
                            itask.Description = taskData.Description;
                            itask.DueDate = DateTime.Now;
                            DateTime d1 = DateTime.Now;
                            DateTime d2 = DateTime.Now;
                            TimeSpan t = d1 - d2;
                            itask.Duedates = 0;
                            itask.Name = taskData.Name;
                            itask.Status = 0;
                            itask.TaskStatusName = "Un Assigned";
                            itask.StepID = StepId;
                            itask.TaskOwnerName = "";
                            itask.MemberID = 0;
                            var taskTypeDetails = (from entity in tx.PersistenceManager.UserRepository.Query<PredefinedTasksDao>()
                                                   join enttype in tx.PersistenceManager.UserRepository.Query<EntityTypeDao>() on entity.WorkFlowType equals enttype.Id
                                                   where entity.ID == taskData.ID
                                                   select new
                                                   {
                                                       entityTypeName = enttype.Caption,
                                                       taskTypeID = enttype.Id
                                                   }).FirstOrDefault();
                            itask.TaskTypeId = taskTypeDetails.taskTypeID;
                            itask.TaskTypeName = taskTypeDetails.entityTypeName;
                            itask.IsPredefined = true;
                            itask.PredefinedTaskID = taskData.ID;
                            itask.TaskMembers = null;
                            //itask.TaskAttachment = (from attach in tx.PersistenceManager.PlanningRepository.Query<PredefinedWorflowFileAttachementDao>() where attach.PredefinedID == taskData.ID select attach).ToList();
                            iitaskDetails.Add(itask);
                        }
                    }

                    // for loop on predefiend task
                    //pre.taskid 


                }
                return iitaskDetails;
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        /// <summary>
        /// Get member.
        /// </summary>
        /// <param name="ID">The ID.</param>
        /// <returns>IList of IEntityRoleUser</returns>
        public IList<ITaskMember> GetFundrequestTaskMember(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                IList<ITaskMember> ientityMembers = new List<ITaskMember>();
                IList<TaskMemberDao> entityroleuserdao = new List<TaskMemberDao>();
                IUser users = new BrandSystems.Marcom.Core.User.User();
                UserDao userval = new UserDao();
                RoleDao roleval = new RoleDao();
                EntityDao entityVal = new EntityDao();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    entityroleuserdao = (from item in tx.PersistenceManager.PlanningRepository.Query<TaskMemberDao>() where item.TaskID == EntityID select item).ToList<TaskMemberDao>();

                    foreach (var entmem in entityroleuserdao)
                    {
                        ITaskMember entityMembers = new TaskMember();
                        userval = tx.PersistenceManager.UserRepository.Get<UserDao>(entmem.Userid);
                        roleval = tx.PersistenceManager.UserRepository.Get<RoleDao>(entmem.Roleid);
                        entityMembers.Id = entmem.Id;
                        entityMembers.Roleid = entmem.Roleid;
                        entityMembers.Userid = entmem.Userid;
                        if (userval != null)
                        {
                            entityMembers.UserName = userval.FirstName + ' ' + userval.LastName;
                            entityMembers.UserEmail = userval.Email;
                        }
                        else
                        {
                            entityMembers.UserName = " ";
                            entityMembers.UserEmail = " ";
                        }
                        entityMembers.DepartmentName = (userval.Designation == null ? "-" : userval.Designation);
                        entityMembers.Role = roleval.Caption;
                        entityMembers.Title = (userval.Title == null ? "-" : userval.Title);
                        ientityMembers.Add(entityMembers);
                    }
                }
                return ientityMembers;
            }
            catch
            {

            }
            return null;
        }

        /// <summary>
        /// Get member.
        /// </summary>
        /// <param name="ID">The ID.</param>
        /// <returns>IList of IEntityRoleUser</returns>
        public IList<ITaskMember> GetTaskMember(PlanningManagerProxy proxy, int taskID)
        {
            try
            {
                IList<ITaskMember> ientityMembers = new List<ITaskMember>();
                IList<TaskMemberDao> entityroleuserdao = new List<TaskMemberDao>();
                IUser users = new BrandSystems.Marcom.Core.User.User();
                UserDao userval = new UserDao();
                RoleDao roleval = new RoleDao();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    entityroleuserdao = (from item in tx.PersistenceManager.PlanningRepository.Query<TaskMemberDao>() where item.TaskID == taskID select item).ToList<TaskMemberDao>();
                    //entityroleuserdao = tx.PersistenceManager.PlanningRepository.GetEquals<TaskMemberDao>(TaskMemberDao.PropertyNames.TaskID, taskID);
                    foreach (var entmem in entityroleuserdao)
                    {
                        ITaskMember entityMembers = new TaskMember();
                        userval = tx.PersistenceManager.UserRepository.Get<UserDao>(entmem.Userid);
                        roleval = tx.PersistenceManager.UserRepository.Get<RoleDao>(entmem.Roleid);
                        entityMembers.Id = entmem.Id;
                        entityMembers.TaskID = entmem.TaskID;
                        entityMembers.Roleid = entmem.Roleid;
                        entityMembers.Userid = entmem.Userid;
                        if (userval != null)
                        {
                            entityMembers.UserName = userval.FirstName + ' ' + userval.LastName;
                            entityMembers.UserEmail = userval.Email;
                        }
                        else
                        {
                            entityMembers.UserName = " ";
                            entityMembers.UserEmail = " ";
                        }
                        entityMembers.DepartmentName = (userval.Designation == null ? "-" : userval.Designation);
                        entityMembers.Role = roleval.Caption;
                        entityMembers.Title = (userval.Title == null ? "-" : userval.Title);
                        ientityMembers.Add(entityMembers);
                    }
                }
                return ientityMembers;
            }
            catch
            {

            }
            return null;
        }


        /// <summary>
        /// Updating Milestone status 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="status">The status</param>
        /// <returns>True or False</returns>
        public bool UpdatingMilestoneStatus(PlanningManagerProxy proxy, int entityId, int status)
        {

            //transaction for feed 
            using (ITransaction tx1 = proxy.MarcomManager.GetTransaction())
            {
                FeedNotificationServer fs = new FeedNotificationServer();
                NotificationFeedObjects obj = new NotificationFeedObjects();
                obj.action = "milestoneupdated";
                obj.Actorid = proxy.MarcomManager.User.Id;
                var milestonedetails = (from item in tx1.PersistenceManager.PlanningRepository.Query<EntityDao>() where item.Id == entityId select item).FirstOrDefault();
                string entityName = "AttributeRecord" + milestonedetails.Typeid + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                var milestoneattrdetails = (from item in tx1.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName) where item.Id == entityId select item).ToList();
                obj.EntityId = milestonedetails.Parentid;
                if (Convert.ToInt16(milestoneattrdetails[0].Attributes["67"]) != status)
                {
                    obj.AttributeName = "Status";
                    obj.ToValue = ((int)status == 0 ? "Not Reached" : "Reached");
                    obj.FromValue = (Convert.ToInt16(milestoneattrdetails[0].Attributes["67"]) == 0 ? "Not Reached" : "Reached");
                    //obj.ToValue = (Convert.ToInt16(milestoneattrdetails[0].Attributes["67"]) == 0 ? "Not Reached" : "Reached");
                    //obj.FromValue = ((int)status == 0 ? "Not Reached" : "Reached");
                }
                tx1.Commit();
                fs.AsynchronousNotify(obj);
            }
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    var entityTypeResult = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == entityId).FirstOrDefault();
                    string query = string.Empty;
                    query = "update  MM_AttributeRecord_" + Convert.ToInt32(entityTypeResult.Typeid) + " set Attr_" + Convert.ToInt32(SystemDefinedAttributes.MilestoneStatus) + "= ?  where ID= ? ";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(query, status, entityId);
                    tx.Commit();
                    return true;
                }
                catch
                {
                    throw;
                }
            }

        }

        /// <summary>
        /// Updating Entity Active status 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="status">The status</param>
        /// <returns>True or False</returns>
        public bool UpdateEntityActiveStatus(PlanningManagerProxy proxy, int entityId, int status)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    EntityDao entdao = new EntityDao();
                    IList<EntityDao> Ientity = new List<EntityDao>();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = EntityDao.PropertyNames.Id, propertyValue = entityId });
                    entdao = (tx.PersistenceManager.AccessRepository.GetEquals<EntityDao>(prplst)).FirstOrDefault();
                    entdao.ActiveEntityStateID = status;
                    Ientity.Add(entdao);
                    tx.PersistenceManager.PlanningRepository.Save<EntityDao>(Ientity);
                    tx.Commit();
                    return true;
                }
                catch
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Updating Task status 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="entityId">The TaskID</param>
        /// <param name="status">The Status</param>
        /// <returns>True or False</returns>
        public int UpdateTaskStatus(PlanningManagerProxy proxy, int taskID, int status, int entityID = 0)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(taskID, Modules.Planning);
                    TaskDao taskdao = new TaskDao();
                    IList<TaskDao> Itask = new List<TaskDao>();
                    TaskMemberDao taskmemberdao = new TaskMemberDao();
                    IList<TaskMemberDao> Itaskmember = new List<TaskMemberDao>();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    var taskType = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == taskID select item).FirstOrDefault();
                    prplst.Add(new MultiProperty { propertyName = TaskDao.PropertyNames.ID, propertyValue = taskID });
                    taskdao = (tx.PersistenceManager.AccessRepository.GetEquals<TaskDao>(prplst)).FirstOrDefault();
                    if (taskType.Typeid == 2)
                    {
                        prplst = new List<MultiProperty>();
                        prplst.Add(new MultiProperty { propertyName = TaskMemberDao.PropertyNames.TaskID, propertyValue = taskID });
                        prplst.Add(new MultiProperty { propertyName = TaskMemberDao.PropertyNames.Userid, propertyValue = proxy.MarcomManager.User.Id });
                        prplst.Add(new MultiProperty { propertyName = TaskMemberDao.PropertyNames.Roleid, propertyValue = proxy.MarcomManager.User.Id });
                        taskmemberdao = (from data in tx.PersistenceManager.PlanningRepository.Query<TaskMemberDao>() where data.Roleid != 1 && data.Userid == proxy.MarcomManager.User.Id && data.TaskID == taskID select data).FirstOrDefault();
                        taskmemberdao.ApprovalStatus = true;
                        Itaskmember.Add(taskmemberdao);
                        tx.PersistenceManager.PlanningRepository.Save<TaskMemberDao>(Itaskmember);
                        var totalTaskmembers = tx.PersistenceManager.PlanningRepository.Query<TaskMemberDao>().Where(a => a.TaskID == taskID && a.Roleid != 1).OrderByDescending(x => x.ApprovalRount);
                        var currentTaskRount = totalTaskmembers.Select(a => a.ApprovalRount).First();
                        var currentTaskrountMembers = totalTaskmembers.Where(a => a.TaskID == taskID && a.ApprovalRount == currentTaskRount);
                        var total_Approval_Status_For_This_Round = currentTaskrountMembers.Where(a => a.ApprovalStatus == true).Count();
                        if (currentTaskrountMembers.Count() == (total_Approval_Status_For_This_Round + 1))
                            taskdao.TaskStatus = status;
                        Itask.Add(taskdao);
                        tx.PersistenceManager.PlanningRepository.Save<TaskDao>(Itask);
                        tx.Commit();
                        return 1;
                    }
                    else if (taskType.Typeid == 3)
                    {
                        prplst = new List<MultiProperty>();
                        prplst.Add(new MultiProperty { propertyName = TaskMemberDao.PropertyNames.TaskID, propertyValue = taskID });
                        prplst.Add(new MultiProperty { propertyName = TaskMemberDao.PropertyNames.Userid, propertyValue = proxy.MarcomManager.User.Id });
                        prplst.Add(new MultiProperty { propertyName = TaskMemberDao.PropertyNames.Roleid, propertyValue = proxy.MarcomManager.User.Id });
                        taskmemberdao = (from data in tx.PersistenceManager.PlanningRepository.Query<TaskMemberDao>() where data.Roleid != 1 && data.Userid == proxy.MarcomManager.User.Id && data.TaskID == taskID select data).FirstOrDefault();
                        taskmemberdao.ApprovalStatus = true;
                        Itaskmember.Add(taskmemberdao);
                        tx.PersistenceManager.PlanningRepository.Save<TaskMemberDao>(Itaskmember);
                        var totalTaskmembers = tx.PersistenceManager.PlanningRepository.Query<TaskMemberDao>().Where(a => a.TaskID == taskID && a.Roleid != 1).OrderByDescending(x => x.ApprovalRount);
                        var currentTaskRount = totalTaskmembers.Select(a => a.ApprovalRount).First();
                        var currentTaskrountMembers = totalTaskmembers.Where(a => a.TaskID == taskID && a.ApprovalRount == currentTaskRount);
                        var total_Approval_Status_For_This_Round = currentTaskrountMembers.Where(a => a.ApprovalStatus == true).Count();
                        if (currentTaskrountMembers.Count() == (total_Approval_Status_For_This_Round + 1))
                            taskdao.TaskStatus = status;
                        Itask.Add(taskdao);
                        tx.PersistenceManager.PlanningRepository.Save<TaskDao>(Itask);
                        tx.Commit();
                        return 1;
                    }

                    else if (taskType.Typeid == 7)
                    {

                        int taskstatus = status;
                        if (status == 2)
                            taskstatus = 11;
                        else if (status == 3)
                            taskstatus = 12;
                        taskdao.TaskStatus = taskstatus;
                        Itask.Add(taskdao);
                        tx.PersistenceManager.PlanningRepository.Save<TaskDao>(Itask);
                        int fundStatus = status;
                        if (status == 11)
                            fundStatus = 2;
                        else if (status == 12)
                            fundStatus = 3;
                        else if (status == 9)
                            fundStatus = 2;
                        else if (status == 65)
                            fundStatus = 3;
                        return UpdateTaskFundRequestStatus(proxy, tx, taskID, fundStatus);

                    }
                    return 0;

                }
                catch (MarcomAccessDeniedException ex)
                {
                    throw ex;
                }
                catch
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Updating Unassigned Task status 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="entityId">The TaskID</param>
        /// <returns>True or False</returns>
        public bool UpdateUnassignedTaskStatus(PlanningManagerProxy proxy, int PredefinedTaskID, int EntityID)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    TaskDao taskdao = new TaskDao();
                    IList<TaskDao> Itask = new List<TaskDao>();
                    IList<TaskMemberDao> Itaskmember = new List<TaskMemberDao>();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    var taskType = (from item in tx.PersistenceManager.PlanningRepository.Query<PredefinedTasksDao>() where item.ID == PredefinedTaskID select item).FirstOrDefault();
                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == EntityID select item).FirstOrDefault();
                    var taskAttachment = (from item in tx.PersistenceManager.PlanningRepository.Query<PredefinedWorflowFileAttachementDao>() where item.PredefinedID == PredefinedTaskID select item).ToList();

                    int entityId = 0;

                    entityId = GetBaseEntityID(taskType.WorkFlowType, taskType.Name, tx, EntityID, true, false);
                    if (taskType != null)
                    {
                        IList<TaskDao> iTask = new List<TaskDao>();
                        StringBuilder activestepQuery = new StringBuilder();

                        TaskDao dao = new TaskDao();
                        dao.ID = entityId;
                        dao.Name = taskType.Name;
                        dao.StepID = entityObj.ActiveEntityStateID;
                        dao.Description = "";
                        dao.DueDate = DateTime.Now;
                        dao.EntityId = EntityID;
                        dao.PredefinedTaskID = PredefinedTaskID;
                        if (taskType.WorkFlowType == 2)
                        {
                            dao.TaskStatus = 9;
                        }
                        else
                        {
                            dao.TaskStatus = 11;
                        }
                        iTask.Add(dao);

                        tx.PersistenceManager.PlanningRepository.Save<TaskDao>(iTask);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    TaskMemberDao entroledao = new TaskMemberDao();
                    entroledao.Roleid = 4;
                    entroledao.TaskID = entityId;
                    entroledao.Userid = proxy.MarcomManager.User.Id;
                    if (taskType.WorkFlowType == 2)
                    {
                        taskdao.TaskStatus = 9;
                        entroledao.ApprovalRount = 0;
                        entroledao.ApprovalStatus = false;
                    }
                    else
                    {
                        taskdao.TaskStatus = 11;
                        entroledao.ApprovalRount = 1;
                        entroledao.ApprovalStatus = true;

                    }
                    Itaskmember.Add(entroledao);
                    tx.PersistenceManager.PlanningRepository.Save<TaskMemberDao>(Itaskmember);

                    //if (taskAttachment != null)
                    //{

                    //    IList<TaskAttachmentsDao> iattachment = new List<TaskAttachmentsDao>();
                    //    foreach (var a in taskAttachment)
                    //    {
                    //        TaskAttachmentsDao attachedao = new TaskAttachmentsDao();
                    //        attachedao.ActiveFileid = a.Id;
                    //        attachedao.ActiveVersionNo = 1;
                    //        attachedao.Createdon = DateTime.Now;
                    //        attachedao.Entityid = entityId;
                    //        attachedao.Name = a.Name;
                    //        attachedao.Typeid = taskTypeID;
                    //        iattachment.Add(attachedao);
                    //    }
                    //    tx.PersistenceManager.PlanningRepository.Save<TaskAttachmentsDao>(iattachment);
                    //    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task Attachments", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);


                    //}

                    tx.Commit();
                    return true;
                }
                catch
                {
                    throw;
                }
            }
        }
        /// <summary>
        /// Updating Predefine In-Line Edit Planned Target and TargetOutcome 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="objectiveId">The ObjectievID</param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="plannedTarget">The PlannedTarget</param>
        /// <param name="targetOutcome">The TargetOutcome</param>
        /// <returns>True or False</returns>
        public bool UpdatePredefineObjectiveinLineData(PlanningManagerProxy proxy, int objectiveId, int entityId, int plannedTaget, int targetOutcome)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    string updateQuery = "UPDATE PM_ObjectiveEntityValue SET PlannedTarget = ?,TargetOutcome = ? WHERE ObjectiveID=? AND EntityID=?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(updateQuery, plannedTaget, targetOutcome, objectiveId, entityId);
                    tx.Commit();
                    return true;
                }
                catch
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Updating Additional In-Line Edit Planned Target and TargetOutcome 
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="plannedTarget">The PlannedTarget</param>
        /// <param name="targetOutcome">The TargetOutcome</param>
        /// <returns>True or False</returns>
        public bool UpdateAdditionalObjectiveinLineData(PlanningManagerProxy proxy, int entityId, string objectivename)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    string updateQuery = "UPDATE pm_entity SET name = ? WHERE id=?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(updateQuery, objectivename, entityId);
                    tx.Commit();
                    return true;
                }
                catch
                {
                    throw;
                }
            }
        }

        public IList<IWorkFlowOverView> GetWorkFlowSummary(PlanningManagerProxy proxy, int entityID)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {

                    IList<IWorkFlowOverView> iiWorkflowtasks = new List<IWorkFlowOverView>();


                    var entdao = (from entitydata in tx.PersistenceManager.PlanningRepository.Query<EntityDao>() where entitydata.Id == entityID select entitydata).FirstOrDefault();

                    var WorkflowType = (from work in tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>() where work.Id == entdao.Typeid select work).FirstOrDefault();



                    var WorkflowSteps = (from steps in tx.PersistenceManager.PlanningRepository.Query<WorkFlowStepsDao>() where steps.WorkFlowID == WorkflowType.WorkFlowID select steps).ToList();

                    var CurrentStepName = (from steps in WorkflowSteps where steps.Id == entdao.ActiveEntityStateID select steps).FirstOrDefault();


                    int index = WorkflowSteps.IndexOf(CurrentStepName);

                    int[] avtiveStateIDs = { 8 };

                    IWorkFlowOverView workflow = new WorkFlowOverView();
                    workflow.CurrentStepName = CurrentStepName.Name + " (" + index.ToString() + "/" + (WorkflowSteps.Count() - 1).ToString() + ")";
                    workflow.StepID = CurrentStepName.Id;
                    workflow.ActiveTasks = (from task in tx.PersistenceManager.PlanningRepository.Query<TaskDao>() where avtiveStateIDs.Contains(task.TaskStatus) && task.EntityId == entityID select task).Count();
                    workflow.UnassignedTasks = (from task in tx.PersistenceManager.PlanningRepository.Query<TaskDao>() where task.EntityId == entityID && task.TaskStatus == 7 select task).Count();
                    workflow.OverdueTasks = (from task in tx.PersistenceManager.PlanningRepository.Query<TaskDao>() where task.StepID == CurrentStepName.Id && task.EntityId == entityID && DateTime.Now > task.DueDate && task.TaskStatus == 8 select task).Count();

                    IList<IStepOptions> iiStepOptions = new List<IStepOptions>();

                    for (int i = 0; i < WorkflowSteps.Count(); i++)
                    {
                        IStepOptions stepOption = new StepOptions();
                        stepOption.StepName = WorkflowSteps[i].Name + " (" + i.ToString() + "/" + (WorkflowSteps.Count() - 1).ToString() + ")";
                        stepOption.StepID = WorkflowSteps[i].Id;
                        iiStepOptions.Add(stepOption);
                    }
                    workflow.OptionList = iiStepOptions;
                    iiWorkflowtasks.Add(workflow);
                    tx.Commit();
                    return iiWorkflowtasks;
                }
                catch
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Deleting Entity
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="costcentreId">The CostcentreID</param>
        /// <returns>One (or) Two</returns>
        public int DeleteCostcentre(PlanningManagerProxy proxy, int costcentreId)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                FeedNotificationServer fs = new FeedNotificationServer();
                NotificationFeedObjects obj = new NotificationFeedObjects();
                obj.action = "delete entity";
                obj.Actorid = proxy.MarcomManager.User.Id;
                obj.EntityId = costcentreId;

                string entityName = GetEntityName(tx, costcentreId, MarcomManagerFactory.ActiveMetadataVersionNumber);
                var assignedAmount = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(
                                     a => a.Id == costcentreId).Select(a => a.Attributes["" + Convert.ToInt32(SystemDefinedAttributes.AssignedAmount) + ""]).FirstOrDefault();
                //SELECT SUM(pf.PlannedAmount) FROM PM_Financial pf WHERE pf.CostCenterID = 306331

                //string newSortOrder = "SELECT COUNT(*)+1 AS SortOrder FROM TM_EntityTaskList ";
                //IList sortOrderVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(newSortOrder);
                //sortOrderID = (int)((System.Collections.Hashtable)(sortOrderVal)[0])["SortOrder"];

                int plannedVal = 0;
                IList plannedamount = tx.PersistenceManager.PlanningRepository.ExecuteQuery("SELECT count(1) as [plannedamount] FROM PM_Financial pf WHERE pf.CostCenterID = " + costcentreId);
                plannedVal = Convert.ToInt32(((System.Collections.Hashtable)(plannedamount)[0])["plannedamount"]);
                if (Convert.ToInt32(assignedAmount) == 0 && plannedVal == 0)
                {
                    tx.PersistenceManager.PlanningRepository.DeleteByID<EntityRoleUserDao>(costcentreId);
                    tx.PersistenceManager.PlanningRepository.DeleteByID<EntityPresentationDao>(costcentreId);
                    tx.PersistenceManager.PlanningRepository.DeleteByID<EntityPeriodDao>(costcentreId);
                    tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.MultiSelectDao>(costcentreId);
                    tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.TreeValueDao>(costcentreId);
                    //Updating EntityCostRelations table IsActive column as zero for particular EntityID
                    var entitycostcentreQuery = "update PM_EntityCostReleations set IsActive = 0 where costcenterID = ?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(entitycostcentreQuery, costcentreId);
                    //Updating Entity table Active column as zero for particular EntityID
                    var entityQuery = "update PM_Entity set Active = 0 where ID = ?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(entityQuery, costcentreId);
                    DeleteEntitySortOrder(tx, costcentreId);
                    tx.Commit();

                    //deleteentity
                    fs.AsynchronousNotify(obj);
                    System.Threading.Tasks.Task taskforremoveentityforsearch = new System.Threading.Tasks.Task(() => RemoveEntityAsync(proxy, costcentreId));
                    taskforremoveentityforsearch.Start();

                    return 1;
                }
                else if (plannedVal != 0)
                {
                    tx.Commit();
                    return 3;
                }
                else
                {
                    tx.Commit();
                    return 2;
                }
            }
        }
        /// <summary>
        /// Deleting Activity Predefine Objective
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <returns>True (or) False</returns>
        public bool DeleteActivityPredefineObjective(PlanningManagerProxy proxy, int entityId, int objectiveId)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    string deleteQuery = "Delete from PM_ObjectiveEntityValue where EntityID = ? and objectiveid = ?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(deleteQuery, entityId, objectiveId);

                    string Query = "select name from pm_entity where id ='" + objectiveId + "'";
                    var data = tx.PersistenceManager.PlanningRepository.ExecuteQuery(Query.ToString()).Cast<Hashtable>().ToList();
                    foreach (var result in data)
                    {
                        FeedNotificationServer fs = new FeedNotificationServer();
                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.action = "delete Predefined Objective";
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.AssociatedEntityId = objectiveId;
                        obj.EntityId = entityId;
                        obj.AttributeName = (string)result["name"];
                        obj.EntityTypeId = 10;
                        obj.TypeName = "Predefined Objective";
                        fs.AsynchronousNotify(obj);
                    }

                    tx.Commit();
                    return true;
                }
                catch
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Deleting Activity Additional Objective
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <returns>True (or) False</returns>
        public bool DeleteAdditionalObjective(PlanningManagerProxy proxy, int objectiveId, int entityID)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                    string deleteQuery = "Delete from PM_AdditionalObjectiveEntityValues where EntityID = ?";
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "delete entity";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = objectiveId;
                    obj.EntityTypeId = 11;
                    obj.TypeName = "Additional Objective";
                    fs.AsynchronousNotify(obj);
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(deleteQuery, objectiveId);

                    var entityDao = tx.PersistenceManager.PlanningRepository.Get<EntityDao>(objectiveId);
                    entityDao.Id = objectiveId;
                    entityDao.Active = false;
                    tx.PersistenceManager.PlanningRepository.Save<EntityDao>(entityDao);

                    tx.Commit();
                    return true;
                }
                catch (MarcomAccessDeniedException ex)
                {
                    throw ex;
                }
                catch
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Getting Entity OWners List
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID</param>
        /// <returns>IList of IEntityOwners</returns>
        public IList<IEntityOwners> EntityOwnersList(PlanningManagerProxy proxy, int entityId)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    IList<IEntityOwners> entityOwners = new List<IEntityOwners>();
                    string ownersQuery = "SELECT aeru.UserID,aeru.EntityID, uu.FirstName, uu.LastName, uu.Email FROM AM_Entity_Role_User aeru  INNER JOIN UM_User uu ON uu.ID = aeru.UserID WHERE aeru.EntityID = ?  GROUP BY aeru.UserID,aeru.EntityID,uu.FirstName,uu.LastName, uu.Email";
                    var OwnersList = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(ownersQuery, entityId).Cast<Hashtable>().ToList();
                    tx.Commit();
                    foreach (var obj in OwnersList)
                    {
                        EntityOwners entOwnerObj = new EntityOwners();
                        entOwnerObj.EntityId = entityId;
                        entOwnerObj.UserId = (int)obj["UserID"];
                        entOwnerObj.RoleId = 0;
                        entOwnerObj.UserName = (string)obj["FirstName"] + " " + (string)obj["LastName"];
                        entOwnerObj.UserEmail = (string)obj["Email"];
                        entityOwners.Add(entOwnerObj);
                    }
                    return entityOwners;
                }
                catch
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Updating Objective OwnerDetails
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entitId">The EntityID</param>
        /// <param name="userId">The UserID</param>
        /// <param name="roleId">The RoleID</param>
        /// <param name="oldOwnerId">The Old Objective Ownerid</param>
        /// <returns>True (or) False</returns>
        public bool UpdateObjectiveOwner(PlanningManagerProxy proxy, int entityId, int userId, int roleId, int oldOwnerId)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    StringBuilder UpdateentityRoleQuery = new StringBuilder();
                    var ObjOwnerDetails = (from item in tx.PersistenceManager.PlanningRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>()
                                           join newitem in tx.PersistenceManager.PlanningRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityTypeRoleAclDao>()
                                           on item.Roleid equals newitem.ID
                                           where item.Entityid == entityId && item.Userid == oldOwnerId && newitem.EntityRoleID == 2
                                           select item);


                    UpdateentityRoleQuery.Append(" Update AM_Entity_Role_User set RoleID =(SELECT top 1 aetra.Id  FROM AM_Entity_Role_User aeru INNER JOIN AM_EntityTypeRoleAcl aetra ");
                    UpdateentityRoleQuery.Append("ON aeru.RoleID=aetra.ID where aetra.EntityTypeID=10 AND aetra.EntityRoleID=1 ),userId=" + userId + " where EntityID = " + entityId + " and UserID = " + oldOwnerId + " and RoleID =(SELECT top 1 aetra.Id  FROM AM_Entity_Role_User aeru INNER JOIN AM_EntityTypeRoleAcl aetra ");
                    UpdateentityRoleQuery.Append("ON aeru.RoleID=aetra.ID where aetra.EntityTypeID=10 AND aetra.EntityRoleID=1 ) ;");
                    if (ObjOwnerDetails.Count() == 0)
                    {
                        UpdateentityRoleQuery.Append("INSERT INTO AM_Entity_Role_User(EntityID,RoleID,UserID,IsInherited,InheritedFromEntityID) ");
                        UpdateentityRoleQuery.Append("VALUES(" + entityId + ",(SELECT top 1 aetra.Id  FROM AM_Entity_Role_User aeru INNER JOIN AM_EntityTypeRoleAcl aetra ");
                        UpdateentityRoleQuery.Append("ON aeru.RoleID=aetra.ID where aetra.EntityTypeID=10 AND aetra.EntityRoleID=2 )," + oldOwnerId + ",0,0) ");

                    }
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(UpdateentityRoleQuery.ToString(), null);


                    var ActorOldValue = (from item in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where item.Id == oldOwnerId select item).FirstOrDefault();
                    var ActorNewValue = (from item in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where item.Id == userId select item).FirstOrDefault();
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "Update Member Status";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.FromValue = ActorOldValue.FirstName + " " + ActorOldValue.LastName;
                    obj.ToValue = ActorNewValue.FirstName + " " + ActorNewValue.LastName;
                    obj.AttributeName = "Owner";
                    obj.EntityId = entityId;
                    fs.addNewsFeedAndNotification(obj);

                    tx.Commit();
                    return true;
                }
                catch
                {
                    throw;
                }
            }
        }

        public bool InsertTaskMembers(PlanningManagerProxy proxy, int EntityID, int taskID, IList<ITaskMember> TaskMembers)
        {
            try
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Started creating Task", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                WorkFlowNotifyHolder workFlowNotifyHolder = new WorkFlowNotifyHolder();

                workFlowNotifyHolder.Actorid = proxy.MarcomManager.User.Id;
                workFlowNotifyHolder.action = "Tasks member added";
                workFlowNotifyHolder.ientityRole = new List<TaskMemberDao>();


                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var taskType = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == taskID select item).FirstOrDefault();
                    IList<TaskDao> iTask = new List<TaskDao>();

                    TaskDao taskdao = new TaskDao();
                    IList<TaskDao> Itask = new List<TaskDao>();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = TaskDao.PropertyNames.ID, propertyValue = taskID });
                    taskdao = (tx.PersistenceManager.AccessRepository.GetEquals<TaskDao>(prplst)).FirstOrDefault();
                    taskdao.TaskStatus = 8;
                    iTask.Add(taskdao);

                    tx.PersistenceManager.PlanningRepository.Save<TaskDao>(iTask);
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    if (TaskMembers != null)
                    {
                        IList<TaskMemberDao> ientityRole = new List<TaskMemberDao>();
                        TaskMemberDao entroledao = new TaskMemberDao();
                        foreach (var a in TaskMembers)
                        {
                            entroledao = new TaskMemberDao();
                            entroledao.Roleid = a.Roleid;
                            entroledao.TaskID = taskID;
                            entroledao.Userid = a.Userid;
                            entroledao.ApprovalRount = 1;
                            entroledao.ApprovalStatus = false;
                            ientityRole.Add(entroledao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<TaskMemberDao>(ientityRole);
                        workFlowNotifyHolder.ientityRole = ientityRole;
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task Members", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    workFlowNotifyHolder.EntityId = EntityID;
                    tx.Commit();
                    return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }


        }



        public bool InsertTaskAttachments(PlanningManagerProxy proxy, int EntityID, int taskID, IList<ITaskAttachment> TaskAttachments, IList<IFile> TaskFiles)
        {
            try
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Started creating Task", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var taskType = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == taskID select item).FirstOrDefault();

                    if (TaskFiles != null)
                    {

                        IList<FileDao> ifile = new List<FileDao>();
                        foreach (var a in TaskFiles)
                        {
                            Guid NewId = Guid.NewGuid();

                            string filePath = ReadAdminXML("FileManagment");
                            var DirInfo = System.IO.Directory.GetParent(filePath);
                            string newFilePath = DirInfo.FullName;
                            System.IO.File.Move(filePath + "\\" + a.strFileID.ToString() + a.Extension, newFilePath + "\\" + NewId + a.Extension);
                            FileDao fldao = new FileDao();
                            fldao.Checksum = a.Checksum;
                            fldao.CreatedOn = a.CreatedOn;
                            fldao.Entityid = taskID;
                            fldao.Extension = a.Extension;
                            fldao.MimeType = a.MimeType;
                            fldao.Moduleid = a.Moduleid;
                            fldao.Name = a.Name;
                            fldao.Ownerid = a.Ownerid;
                            fldao.Size = a.Size;
                            fldao.VersionNo = a.VersionNo;
                            fldao.Fileguid = NewId;
                            ifile.Add(fldao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<FileDao>(ifile);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in File", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    if (TaskAttachments != null)
                    {

                        IList<TaskAttachmentsDao> iattachment = new List<TaskAttachmentsDao>();
                        foreach (var a in TaskAttachments)
                        {
                            TaskAttachmentsDao attachedao = new TaskAttachmentsDao();
                            attachedao.ActiveFileid = a.ActiveFileid;
                            attachedao.ActiveVersionNo = 1;
                            attachedao.Createdon = DateTime.Now;
                            attachedao.Entityid = taskID;
                            attachedao.Name = a.Name;
                            attachedao.Typeid = taskType.Typeid;
                            iattachment.Add(attachedao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<TaskAttachmentsDao>(iattachment);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task Members", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }


                    tx.Commit();
                    return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }


        }

        public IList<IFile> GetTaskAttachmentFile(PlanningManagerProxy proxy, int taskID)
        {
            try
            {
                IList<IFile> iifilelist = new List<IFile>();

                IList<FileDao> entityroleuserdao = new List<FileDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    entityroleuserdao = (from attach in tx.PersistenceManager.PlanningRepository.Query<FileDao>() where attach.Entityid == taskID select attach).ToList<FileDao>();
                    foreach (var entmem in entityroleuserdao)
                    {
                        IFile entityMembers = new BrandSystems.Marcom.Core.Common.File();

                        entityMembers.Id = entmem.Id;
                        entityMembers.Entityid = entmem.Entityid;
                        entityMembers.Checksum = entmem.Checksum;
                        entityMembers.CreatedOn = entmem.CreatedOn;
                        entityMembers.Extension = entmem.Extension;
                        entityMembers.Fileguid = entmem.Fileguid;
                        entityMembers.MimeType = entmem.MimeType;

                        entityMembers.Moduleid = entmem.Moduleid;
                        entityMembers.Name = entmem.Name;
                        entityMembers.Ownerid = entmem.Ownerid;
                        entityMembers.Size = entmem.Size;
                        entityMembers.VersionNo = entmem.VersionNo;
                        iifilelist.Add(entityMembers);
                    }
                }

                return iifilelist;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        /// <summary>
        /// DeleteFileByID.
        /// </summary>
        /// <param name="proxy">ID Parameter</param>
        /// <returns>bool</returns>
        public bool DeleteFileByID(PlanningManagerProxy proxy, int ID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FileDao fldao = new FileDao();
                    fldao = tx.PersistenceManager.PlanningRepository.Get<FileDao>(TaskAttachmentsDao.MappingNames.Id, ID);
                    string flPath = ReadAdminXML("FileManagment");//HttpContext.Current.Server.MapPath("~/documents/" + fldao.Fileguid + fldao.Extension);
                    var DirInfo = System.IO.Directory.GetParent(flPath);
                    string newFilePath = DirInfo.FullName + "\\" + fldao.Fileguid + fldao.Extension;
                    if (System.IO.File.Exists(newFilePath))
                    {
                        System.IO.File.Delete(newFilePath);
                        tx.PersistenceManager.PlanningRepository.DeleteByID<AttachmentsDao>(TaskAttachmentsDao.MappingNames.ActiveFileid, ID);
                        tx.PersistenceManager.CommonRepository.DeleteByID<FileDao>(FileDao.MappingNames.Id, ID);
                        tx.Commit();
                        return true;
                    }
                }
            }
            catch
            {

            }

            return false;
        }

        /// <summary>
        /// Updating Objective Status
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveId</param>
        /// <param name="objectiveStatus">The ObjectiveStatus</param>
        /// <returns>True (or) False</returns>
        public bool UpdateObjectivestatus(PlanningManagerProxy proxy, int objectiveId, int objectiveStatus)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.EntityId = objectiveId;
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.action = "objective status update";
                    IList temp = tx.PersistenceManager.CommonRepository.ExecuteQuerywithMinParam("select ObjectiveStatus from PM_Objective where ID = ?", objectiveId);

                    var cc = (Boolean)((System.Collections.Hashtable)(temp)[0])["ObjectiveStatus"];
                    if (cc == true)
                        obj.FromValue = "Activated";
                    else
                        obj.FromValue = "Deactivated";
                    StringBuilder UpdateentityRoleQuery = new StringBuilder();
                    UpdateentityRoleQuery.Append(" Update PM_Objective set ObjectiveStatus = ? where ID = ? ");
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(UpdateentityRoleQuery.ToString(), objectiveStatus, objectiveId);
                    tx.Commit();
                    var tt = Convert.ToBoolean(objectiveStatus);
                    if (tt == true)
                        obj.ToValue = "Activated";
                    else
                        obj.ToValue = "Deactivated";

                    fs.AsynchronousNotify(obj);
                    return true;
                }
                catch
                {
                    throw;
                }
            }
        }

        public int financialcostcentrestatus(PlanningManagerProxy proxy, int entityID, int costcentreid)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                var status = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where item.Entityid == entityID && item.CostCenterid == costcentreid select item.Status).FirstOrDefault();
                return status;
            }
        }

        public string GetEntitiPeriodByIdForGantt(PlanningManagerProxy proxy, int EntityID)
        {
            string XmlReturn = "";
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder EntityPeriodQry = new StringBuilder();
                    EntityPeriodQry.Append(" SELECT(SELECT ( ");
                    EntityPeriodQry.Append(" SELECT CONVERT(NVARCHAR(10), pep.StartDate, 120) '@s', ");
                    EntityPeriodQry.Append("  CONVERT(NVARCHAR(10), pep.EndDate, 120) '@e', ");
                    EntityPeriodQry.Append(" pep.[Description] '@d', ROW_NUMBER() over(ORDER BY pep.Startdate) '@sid', ");
                    EntityPeriodQry.Append(" pep.ID '@o' ");
                    EntityPeriodQry.Append(" FROM   PM_EntityPeriod pep ");
                    EntityPeriodQry.Append(" WHERE  pep.EntityID = ? ORDER BY pep.Startdate FOR XML PATH('p'), TYPE ");
                    EntityPeriodQry.Append(" ) FOR XML PATH('root'))as 'root' ");
                    var entityResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(EntityPeriodQry.ToString(), EntityID).Cast<Hashtable>();
                    foreach (var res in entityResult)
                    {
                        XmlReturn = res["root"].ToString();
                    }
                    tx.Commit();
                }

                return XmlReturn; ;

            }
            catch (Exception ex)
            {
                return XmlReturn;
            }
            return XmlReturn;
        }

        public IList GetPeriodByIdForGantt(PlanningManagerProxy proxy, int ID)
        {


            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                StringBuilder EntityPeriodQry = new StringBuilder(); ;
                EntityPeriodQry.Append(" SELECT * from PM_EntityPeriod where Id=" + ID);
                var result = tx.PersistenceManager.PlanningRepository.ExecuteQuery(EntityPeriodQry.ToString());
                return result;
            }

        }



        /// <summary>
        /// Creates the Entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <param name="parentId">The parent id.</param>
        /// <param name="typeId">The type id.</param>
        /// <param name="active">The active.</param>
        /// <param name="uniqueKey">The unique key.</param>
        /// <param name="isLock">The is lock.</param>
        /// <param name="name">The name.</param>
        /// <param name="entityMembers">The entity members.</param>
        /// <param name="entityObjectvalues">The entity ObjectiveEntityValues.</param>
        /// <param name="entityCostcenters">The entity costcenters.</param>
        /// <param name="periods">The periods.</param>
        /// <param name="attributes"> The attributes</param>
        /// <returns>Lastinserted Entity Id value</returns>
        public int CreateDuplicateEntity(PlanningManagerProxy proxy, int currentEntityID, int parentId, int typeId, Boolean active, Boolean isLock, string name, IList<IEntityRoleUser> entityMembers, IList<IEntityCostReleations> entityCostcentres, IList<IEntityPeriod> entityPeriods, IList<IFundingRequest> listFundrequest, IList<IAttributeData> entityattributedata, IList<IFile> entityfilesattached, IList<ITaskLibraryTemplateHolder> entitytasklist, Dictionary<string, bool> duplicateitems, IList<IObjectiveEntityValue> entityObjectvalues = null, IList<object> attributes = null, int[] assetIdArr = null, int[] folderIdArr = null)
        {
            int IdExist = 0;

            try
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Started creating Entity", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                EntityDao dao = new EntityDao();
                EntityRoleUserDao entitymemberdao = new EntityRoleUserDao();
                IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                int entityId;
                Dictionary<int, int> Assetmappingdict = new Dictionary<int, int>();
                Dictionary<int, int> Tasksmappingdict = new Dictionary<int, int>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    // Business logic of EntityCreation 
                    entityId = GetBaseEntityID(typeId, name, tx, parentId, active, isLock);
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Entity is saved in PM_Entity with entityid : " + entityId, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();

                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>()
                                     where item.Id == typeId
                                     select item).FirstOrDefault();
                    if (entityObj.ModuleID == 6)
                    {
                        var cmsentity = tx.PersistenceManager.PlanningRepository.Query<CmsEntityDao>().Where(x => x.ID == currentEntityID).ToList();
                        CmsEntityDao cmsenty = new CmsEntityDao();
                        foreach (var objpage in cmsentity)
                        {
                            cmsenty.ID = entityId;
                            cmsenty.Description = "";
                            cmsenty.Active = true;
                            cmsenty.Level = objpage.Level;
                            cmsenty.Name = objpage.Name;
                            cmsenty.NavID = objpage.NavID;
                            cmsenty.ParentID = parentId;
                            cmsenty.PublishedDate = objpage.PublishedDate;
                            cmsenty.PublishedTime = objpage.PublishedTime;
                            cmsenty.PublishedStatus = objpage.PublishedStatus;
                            cmsenty.TemplateID = objpage.TemplateID;
                            cmsenty.UniqueKey = objpage.UniqueKey;
                            cmsenty.Version = objpage.Version;

                        }
                        tx.PersistenceManager.PlanningRepository.Save<CmsEntityDao>(cmsenty);

                        var cmsentyversion = tx.PersistenceManager.PlanningRepository.Query<RevisedEntityContentDao>().Where(a => a.EntityID == currentEntityID).ToList();
                        List<RevisedEntityContentDao> irevisedenty = new List<RevisedEntityContentDao>();
                        foreach (var objrev in cmsentyversion)
                        {
                            RevisedEntityContentDao reventity = new RevisedEntityContentDao();
                            reventity.EntityID = entityId;
                            reventity.Content = objrev.Content;
                            reventity.Active = objrev.Active;
                            reventity.CreatedOn = objrev.CreatedOn;
                            irevisedenty.Add(reventity);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<RevisedEntityContentDao>(irevisedenty);
                    }

                    if (entityMembers != null)
                    {
                        //IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                        foreach (var a in entityMembers)
                        {
                            if (a.Roleid != NewObj.ID)
                            {
                                EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                                entityroledao.Entityid = entityId;
                                entityroledao.Roleid = a.Roleid;
                                entityroledao.Userid = a.Userid;
                                entityroledao.IsInherited = a.IsInherited;
                                entityroledao.InheritedFromEntityid = a.InheritedFromEntityid;
                                Ientitroledao.Add(entityroledao);
                            }
                        }
                    }
                    if (Ientitroledao.Count > 0)
                    {
                        tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientitroledao);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Entity Role Users", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }


                    IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                    if (entityCostcentres != null)
                    {
                        IList<EntityCostReleationsDao> Ientitycostcenterdao = new List<EntityCostReleationsDao>();
                        foreach (var a in entityCostcentres)
                        {
                            EntityCostReleationsDao entitycostcenterdao = new EntityCostReleationsDao();
                            entitycostcenterdao.EntityId = entityId;
                            entitycostcenterdao.CostcenterId = a.CostcenterId;
                            entitycostcenterdao.Sortorder = a.Sortorder;
                            entitycostcenterdao.Isassociate = a.Isassociate;
                            entitycostcenterdao.Isactive = a.Isactive;
                            Ientitycostcenterdao.Add(entitycostcenterdao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<EntityCostReleationsDao>(Ientitycostcenterdao);

                        if (duplicateitems.FirstOrDefault(a => a.Key == "IsPlannedBudget").Value == true)
                        {
                            foreach (var a in entityCostcentres)
                            {
                                var entitybudget = tx.PersistenceManager.PlanningRepository.Query<FinancialDao>().Where(a3 => a3.Entityid == currentEntityID && a3.CostCenterid == a.CostcenterId).Select(a3 => a3).ToList();

                                if (entitybudget.Count > 0)
                                {
                                    foreach (var arbudg in entitybudget)
                                    {
                                        FinancialDao financialdao = new FinancialDao();
                                        financialdao.Entityid = entityId;
                                        financialdao.CostCenterid = a.CostcenterId;
                                        financialdao.ApprovedAllocatedAmount = arbudg.ApprovedAllocatedAmount;
                                        financialdao.ApprovedBudget = arbudg.ApprovedBudget;
                                        financialdao.Commited = arbudg.Commited;
                                        financialdao.LastUpdateOn = arbudg.LastUpdateOn;
                                        financialdao.PlannedAmount = arbudg.PlannedAmount;
                                        financialdao.RequestedAmount = arbudg.RequestedAmount;
                                        financialdao.Spent = arbudg.Spent;
                                        financialdao.Status = arbudg.Status;
                                        Ifinancial.Add(financialdao);
                                    }
                                }
                            }
                        }
                        else
                        {
                            foreach (var a in entityCostcentres)
                            {
                                FinancialDao financialdao = new FinancialDao();
                                financialdao.Entityid = entityId;
                                financialdao.CostCenterid = a.CostcenterId;
                                financialdao.ApprovedAllocatedAmount = 0;
                                financialdao.ApprovedBudget = 0;
                                financialdao.Commited = 0;
                                financialdao.LastUpdateOn = DateTimeOffset.UtcNow;
                                financialdao.PlannedAmount = 0;
                                financialdao.RequestedAmount = 0;
                                financialdao.Spent = 0;
                                financialdao.Status = 0;
                                Ifinancial.Add(financialdao);
                            }
                        }
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Financial", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    //for inserting data into dynamic table
                    IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                    DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                    foreach (var val in Ifinancial)
                    {
                        dynamicdao = new DynamicAttributesDao();
                        dynamicdao.Id = val.Id;
                        idynObj.Add(dynamicdao);

                    }
                    if (idynObj.Count > 0)
                        tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("FundingCostCentreRecords", idynObj);

                    if (entityPeriods != null)
                    {
                        IList<EntityPeriodDao> Ientityper = new List<EntityPeriodDao>();
                        EntityPeriodDao perioddao = new EntityPeriodDao();
                        int sortOrder = 1;
                        foreach (var a in entityPeriods)
                        {
                            perioddao = null;
                            perioddao = new EntityPeriodDao();
                            perioddao.Entityid = entityId;
                            perioddao.Startdate = a.Startdate;
                            perioddao.EndDate = a.EndDate;
                            perioddao.Description = a.Description;
                            perioddao.SortOrder = sortOrder;
                            sortOrder = sortOrder + 1;
                            Ientityper.Add(perioddao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(Ientityper);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Entity Period", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                    }
                    if (entityObjectvalues != null)
                    {
                        IList<ObjectiveEntityValueDao> listObjentityvaluesdao = new List<ObjectiveEntityValueDao>();
                        foreach (var objent in entityObjectvalues)
                        {
                            ObjectiveEntityValueDao objentityvalues = new ObjectiveEntityValueDao();
                            objentityvalues.Objectiveid = objent.Objectiveid;
                            objentityvalues.Entityid = entityId;
                            objentityvalues.PlannedTarget = objent.PlannedTarget;
                            objentityvalues.TargetOutcome = objent.TargetOutcome;
                            objentityvalues.RatingObjective = objent.RatingObjective;
                            objentityvalues.Comments = objent.Comments;
                            objentityvalues.Status = objent.Status;
                            objentityvalues.Fulfilment = objent.Fulfilment;
                            listObjentityvaluesdao.Add(objentityvalues);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<ObjectiveEntityValueDao>(listObjentityvaluesdao);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Objectives", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }
                    if (entityattributedata != null)
                    {
                        var result = InsertEntityAttributes(tx, entityattributedata, entityId, typeId);
                    }

                    //---------------------------> ENTITY OVERALL STATUS DUPLICATE STARTS HERE <-------------------------

                    if (duplicateitems.FirstOrDefault(a => a.Key == "IsEntityStatus").Value == true)
                    {
                        var selectedentitystatus = (from entitystatus in tx.PersistenceManager.PlanningRepository.Query<EntityStatusDao>() where entitystatus.EntityID == currentEntityID select new { entitystatus.StatusID, entitystatus.IntimeStatus, entitystatus.Comment }).FirstOrDefault();
                        if (selectedentitystatus != null)
                        {
                            EntityStatusDao entitystatusval = new EntityStatusDao();
                            entitystatusval.StatusID = selectedentitystatus.StatusID;
                            entitystatusval.IntimeStatus = selectedentitystatus.IntimeStatus;
                            entitystatusval.Comment = selectedentitystatus.Comment;
                            entitystatusval.EntityID = entityId;
                            tx.PersistenceManager.PlanningRepository.Save<EntityStatusDao>(entitystatusval);
                        }
                    }
                    else
                    {
                        EntityStatusDao entitystatusval = new EntityStatusDao();
                        entitystatusval.StatusID = 1;
                        entitystatusval.IntimeStatus = 0;
                        entitystatusval.EntityID = entityId;
                        tx.PersistenceManager.PlanningRepository.Save<EntityStatusDao>(entitystatusval);
                    }
                    //---------------------------> ENTITY OVERALL STATUS DUPLICATE ENDS HERE <-------------------------


                    //---------------------------> DUPLICATE MILSTONE STARTS HERE <--------------

                    if (duplicateitems.FirstOrDefault(a => a.Key == "IsMilestone").Value == true)
                    {
                        IList<IMilestoneMetadata> listMilestone = new List<IMilestoneMetadata>();
                        listMilestone = GetMilestoneMetadataToDuplicate(proxy, currentEntityID, Convert.ToInt32(EntityTypeList.Milestone), entityId);
                        foreach (var objmilstone in listMilestone)
                        {
                            var getMilestoneName = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(objmilstone.EntityId);
                            var baseEntityId = GetBaseEntityID((int)EntityTypeList.Milestone, getMilestoneName.Name, tx, entityId);
                            if (entityattributedata != null)
                            {
                                var result = InsertEntityAttributes(tx, objmilstone.AttributeData, baseEntityId, (int)EntityTypeList.Milestone);
                            }
                        }
                    }
                    //---------------------------> DUPLICATE MILSTONE ENDS HERE <--------------

                    IdExist = tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>().Where(a => a.Id == typeId && a.IsAssociate == false).Select(a => a.Id).FirstOrDefault();
                    if (IdExist != 0)
                    {
                        InsertUpdateGanttEntitySortorder(proxy, entityId);
                    }
                    tx.Commit();

                    //string versionXmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(MarcomManagerFactory.ActiveMetadataVersionNumber);
                    //var xDoc = XDocument.Load(versionXmlPath);
                    //string entityTypeName = Convert.ToString(xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(typeId)).Select(a => a.Element("Caption").Value).First());
                    //try
                    //{
                    //    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    //    NotificationFeedObjects obj = new NotificationFeedObjects();
                    //    obj.action = "create entity";
                    //    obj.Actorid = proxy.MarcomManager.User.Id;
                    //    obj.EntityId = entityId;
                    //    obj.EntityTypeId = typeId;
                    //    obj.AttributeName = name;
                    //    obj.TypeName = entityTypeName;
                    //    obj.CreatedOn = DateTimeOffset.Now;
                    //    fs.AsynchronousNotify(obj);

                    //    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Updated the Feeds", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    //}
                    //catch (Exception ex)
                    //{
                    //    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    //}

                }
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //--------------------------> DUPLICATE ENTITY ATTACHMENT <------------------------
                    //* ENTITY ATTACHMENT From  DamAsset
                    if (duplicateitems.FirstOrDefault(a => a.Key == "IsAttachments").Value == true)
                    {

                        try
                        {
                            if (assetIdArr.Length > 0 || folderIdArr.Length > 0)


                                Assetmappingdict = DuplicateAssettoEntity(proxy, tx, currentEntityID, entityId, assetIdArr, folderIdArr);
                        }
                        catch
                        {

                        }
                    }
                    //* Removing entity old attachment concept 
                    //IList<AttachmentsDao> tempentityattachedao = new List<AttachmentsDao>();
                    //if (entityfilesattached != null)
                    //{
                    //    foreach (var objent in entityfilesattached)
                    //    {
                    //        Guid NewId = Guid.NewGuid();

                    //        string filePath = ReadAdminXML("FileManagment");
                    //        var DirInfo = System.IO.Directory.GetParent(filePath);
                    //        string newFilePath = DirInfo.FullName;
                    //        System.IO.File.Copy(filePath + "\\" + objent.Fileguid.ToString() + objent.Extension, newFilePath + "\\" + NewId + objent.Extension);

                    //        FileDao objentityvalues = new FileDao();
                    //        objentityvalues.Checksum = objent.Checksum;
                    //        objentityvalues.Entityid = entityId;
                    //        objentityvalues.CreatedOn = objent.CreatedOn;
                    //        objentityvalues.Extension = objent.Extension;
                    //        objentityvalues.MimeType = objent.MimeType;
                    //        objentityvalues.Moduleid = objent.Moduleid;
                    //        objentityvalues.Name = objent.Name;
                    //        objentityvalues.Ownerid = objent.Ownerid;

                    //        objentityvalues.Size = objent.Size;
                    //        objentityvalues.VersionNo = objent.VersionNo;
                    //        objentityvalues.Description = objent.Description;
                    //        objentityvalues.Fileguid = NewId;

                    //        tx.PersistenceManager.PlanningRepository.Save<FileDao>(objentityvalues);

                    //        var entityAttachments = tx.PersistenceManager.PlanningRepository.Query<AttachmentsDao>().Where(a2 => a2.Entityid == currentEntityID && a2.ActiveFileid == objent.Id).Select(a2 => a2);
                    //        if (entityAttachments != null)
                    //        {
                    //            foreach (var arm in entityAttachments)
                    //            {
                    //                AttachmentsDao attachedao = new AttachmentsDao();
                    //                attachedao.Name = arm.Name;
                    //                attachedao.ActiveFileid = objentityvalues.Id;
                    //                attachedao.ActiveVersionNo = 1;
                    //                attachedao.ActiveFileVersionID = objentityvalues.Id;
                    //                attachedao.VersioningFileId = objentityvalues.Id;
                    //                attachedao.Createdon = arm.Createdon;
                    //                attachedao.Typeid = arm.Typeid;
                    //                attachedao.Entityid = entityId;
                    //                tempentityattachedao.Add(attachedao);
                    //            }
                    //        }
                    //    }
                    //}
                }
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //----------------------------> STARTS TASK DUPLICATE <---------------
                    int sortOrderID = 0;
                    int newtaskID = 0;
                    IList<AttachmentsDao> tempattachedao = new List<AttachmentsDao>();
                    IList<EntityTaskCheckListDao> icheckist = new List<EntityTaskCheckListDao>();

                    if (entitytasklist.Count > 0)
                    {
                        IList<IEntityTask> entitytaskDetails = new List<IEntityTask>();
                        foreach (var obj1 in entitytasklist)
                        {
                            IList<IEntityTask> entitytaskDet = new List<IEntityTask>();
                            entitytaskDet = proxy.MarcomManager.TaskManager.GetEntityTaskListDetails(currentEntityID, obj1.ID).ToList();
                            entitytaskDetails = new List<IEntityTask>(entitytaskDetails.Concat(entitytaskDet));
                        }


                        foreach (var obj in entitytasklist)
                        {
                            //---------------------> ADD TASK LIST <--------------------
                            sortOrderID = 0;
                            string newSortOrder = "SELECT COUNT(*)+1 AS SortOrder FROM TM_EntityTaskList ";
                            IList sortOrderVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(newSortOrder);
                            sortOrderID = (int)((System.Collections.Hashtable)(sortOrderVal)[0])["SortOrder"];

                            EntityTaskListDao tasklistdao = new EntityTaskListDao();
                            tasklistdao.Name = obj.LibraryName;
                            tasklistdao.Description = obj.LibraryDescription;
                            tasklistdao.Sortorder = sortOrderID;
                            tasklistdao.EntityID = entityId;

                            tx.PersistenceManager.PlanningRepository.Save<EntityTaskListDao>(tasklistdao);
                            var tasksToDuplicate = from objentity in entitytaskDetails where objentity.TaskListID == obj.ID select objentity;

                            foreach (var objenitytask in tasksToDuplicate)
                            {
                                //------------------> ADD TASK <------------------------

                                newtaskID = GetBaseEntityID(objenitytask.TaskType, objenitytask.Name, tx, entityId, true, false);
                                if (duplicateitems.FirstOrDefault(a => a.Key == "IsTaskAttachment").Value == true)
                                {
                                    if (!Tasksmappingdict.ContainsKey(newtaskID))
                                    {
                                        Tasksmappingdict.Add(objenitytask.Id, newtaskID);
                                    }
                                }
                                sortOrderID = 0;
                                IList<MultiProperty> paramList = new List<MultiProperty>();
                                paramList.Add(new MultiProperty { propertyName = "EntityID", propertyValue = entityId });
                                paramList.Add(new MultiProperty { propertyName = "TaskListID", propertyValue = tasklistdao.ID });
                                string newSortOrder1 = "SELECT COUNT(*)+1 as SortOrder FROM TM_EntityTask  WHERE taskListID= :TaskListID AND EntityID = :EntityID";
                                IList sortOrderVal1 = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(newSortOrder1, paramList);
                                sortOrderID = (int)((System.Collections.Hashtable)(sortOrderVal1)[0])["SortOrder"];

                                EntityTaskDao taskdao = new EntityTaskDao();
                                taskdao.ID = newtaskID;
                                taskdao.EntityID = entityId;
                                taskdao.MemberID = objenitytask.MemberID;
                                taskdao.Name = HttpUtility.HtmlEncode(objenitytask.Name);
                                taskdao.Description = HttpUtility.HtmlEncode(objenitytask.Description);
                                taskdao.TaskStatus = 0;
                                taskdao.DueDate = objenitytask.DueDate;
                                taskdao.EntityTaskListID = objenitytask.EntityTaskListID;
                                taskdao.TaskListID = tasklistdao.ID;
                                taskdao.Sortorder = sortOrderID;
                                taskdao.TaskType = objenitytask.TaskType;
                                if (objenitytask.TaskType == 32 && objenitytask.AssetId > 0 && Assetmappingdict.ContainsKey(objenitytask.AssetId))
                                {
                                    taskdao.AssetId = Convert.ToInt32(Assetmappingdict[objenitytask.AssetId]);
                                }


                                tx.PersistenceManager.PlanningRepository.Save<EntityTaskDao>(taskdao);

                                //--------------------> ADD TASK ATTACHED FILES AND LINKS <-------------------//now assetonely no cm_files   and links
                                //if (duplicateitems.FirstOrDefault(a => a.Key == "IsTaskAttachment").Value == true)
                                //{
                                //    IList<IFile> entityfilelist = new List<IFile>();
                                //    entityfilelist = proxy.MarcomManager.TaskManager.GetEntityTaskAttachmentFile(objenitytask.Id);
                                //    if (entityfilelist.Count > 0)
                                //    {
                                //        foreach (var objfle in entityfilelist)
                                //        {
                                //            Guid NewId = Guid.NewGuid();
                                //            if (objfle.Extension == "Link")
                                //            {
                                //                //--------> SAVE TASK LINKS <----------
                                //                LinksDao lnks = new LinksDao();
                                //                lnks.Name = objfle.Name;
                                //                lnks.URL = objfle.LinkURL;
                                //                lnks.Description = objfle.Description;
                                //                lnks.CreatedOn = objfle.CreatedOn.ToString();
                                //                lnks.EntityID = taskdao.ID;
                                //                lnks.ModuleID = objfle.Moduleid;
                                //                lnks.OwnerID = objfle.Ownerid;
                                //                lnks.ActiveVersionNo = objfle.ActiveFileVersionID;
                                //                lnks.LinkGuid = NewId;
                                //                tx.PersistenceManager.PlanningRepository.Save<LinksDao>(lnks);
                                //            }
                                //            else
                                //            {
                                //                //--------> SAVED TASK ATTACHED FILES <--------

                                //                string filePath = ReadAdminXML("FileManagment");
                                //                var DirInfo = System.IO.Directory.GetParent(filePath);
                                //                string newFilePath = DirInfo.FullName;
                                //                System.IO.File.Copy(filePath + "\\" + objfle.Fileguid.ToString() + objfle.Extension, newFilePath + "\\" + NewId + objfle.Extension);

                                //                FileDao fldao = new FileDao();
                                //                fldao.Checksum = objfle.Checksum;
                                //                fldao.CreatedOn = objfle.CreatedOn;
                                //                fldao.Entityid = taskdao.ID;
                                //                fldao.Extension = objfle.Extension;
                                //                fldao.MimeType = objfle.MimeType;
                                //                fldao.Moduleid = objfle.Moduleid;
                                //                fldao.Name = objfle.Name;
                                //                fldao.Ownerid = objfle.Ownerid;
                                //                fldao.Size = objfle.Size;
                                //                fldao.VersionNo = objfle.VersionNo;
                                //                fldao.Fileguid = NewId;
                                //                fldao.Description = objfle.Description;
                                //                tx.PersistenceManager.PlanningRepository.Save<FileDao>(fldao);

                                //                var entityTasksAttachments = tx.PersistenceManager.PlanningRepository.Query<AttachmentsDao>().Where(a1 => a1.Entityid == objenitytask.Id && a1.ActiveFileid == objfle.Id).Select(a1 => a1);

                                //                if (entityTasksAttachments != null)
                                //                {
                                //                    foreach (var arm in entityTasksAttachments)
                                //                    {
                                //                        AttachmentsDao attachedao = new AttachmentsDao();
                                //                        attachedao.Name = arm.Name;
                                //                        attachedao.ActiveFileid = fldao.Id;
                                //                        attachedao.ActiveVersionNo = 1;
                                //                        attachedao.ActiveFileVersionID = fldao.Id;
                                //                        attachedao.VersioningFileId = fldao.Id;
                                //                        attachedao.Createdon = arm.Createdon;
                                //                        attachedao.Typeid = arm.Typeid;
                                //                        attachedao.Entityid = taskdao.ID;
                                //                        tempattachedao.Add(attachedao);
                                //                    }
                                //                }

                                //            }
                                //        }
                                //    }
                                //}
                                ////--------------------> ENDS ADD TASK ATTACHED FILES AND LINKS <-------------------

                                //--------------------> DUPLICATE TASK CHECKLIST STARTS HERE <---------------------
                                if (duplicateitems.FirstOrDefault(a => a.Key == "IsTaskCheckList").Value == true)
                                {
                                    var entityTasksChecklist = tx.PersistenceManager.PlanningRepository.Query<EntityTaskCheckListDao>().Where(a => a.TaskId == objenitytask.Id).Select(a => a).ToList();

                                    IList<IEntityTaskCheckList> listTaskhecklist = new List<IEntityTaskCheckList>();
                                    if (entityTasksChecklist.Count > 0)
                                    {
                                        foreach (var arm in entityTasksChecklist)
                                        {
                                            IEntityTaskCheckList attachval = new EntityTaskCheckList();
                                            attachval.Name = arm.Name;
                                            attachval.CompletedOn = null;
                                            attachval.UserId = 0;
                                            attachval.OwnerId = 0;
                                            attachval.Status = false;
                                            attachval.SortOrder = arm.SortOrder;
                                            listTaskhecklist.Add(attachval);
                                        }
                                    }

                                    if (listTaskhecklist != null)
                                    {

                                        foreach (var a in listTaskhecklist)
                                        {
                                            EntityTaskCheckListDao attachval = new EntityTaskCheckListDao();
                                            attachval.Name = a.Name;
                                            attachval.CompletedOn = null;
                                            attachval.TaskId = taskdao.ID;
                                            attachval.UserId = 0;
                                            attachval.OwnerId = 0;
                                            attachval.Status = false;
                                            attachval.SortOrder = a.SortOrder;
                                            icheckist.Add(attachval);
                                        }
                                    }
                                }
                                //--------------------> DUPLICATE TASK CHECKLIST ENDS HERE <---------------------
                            }
                        }

                        //--------------------> ENTITY ATTACHMENT SAVE IS DONE HERE, IF EXECUTE BEFORE TASK EXECEPTION OCCURS BECUASE OF SAVE TRANSACTION <------------
                        // tx.PersistenceManager.PlanningRepository.Save<AttachmentsDao>(tempentityattachedao);
                        tx.PersistenceManager.PlanningRepository.Save<AttachmentsDao>(tempattachedao);
                        tx.PersistenceManager.PlanningRepository.Save<EntityTaskCheckListDao>(icheckist);
                        tx.Commit();

                        //--------------------> ENDS HERE <-------------------------------------------------
                    }
                    //---------------------------> TASK DUPLICATE ENDS HERE <-------------------
                }
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Successully created entity with ID: " + entityId, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------" + entityId, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                //Task Attachment
                //CreateAsset Transaction not taking 
                if (duplicateitems.FirstOrDefault(a => a.Key == "IsTaskAttachment").Value == true)
                {

                    if (Tasksmappingdict != null)
                    {
                        foreach (KeyValuePair<int, int> kvp in Tasksmappingdict)
                        {
                            //Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, kvp.Value);

                            int[] assetIdlist = { };
                            using (ITransaction tx1 = proxy.MarcomManager.GetTransaction())
                            {

                                assetIdlist = tx1.PersistenceManager.DamRepository.Query<AssetsDao>().Where(a => a.EntityID == kvp.Key).Select(a => a.ID).Distinct().ToArray();
                                tx1.Commit();
                            }
                            if (assetIdlist.Length > 0)
                            {
                                for (int i = 0; i < assetIdlist.Length; i++)
                                {
                                    int newasset = 0;
                                    List<IAssets> assetdet = new List<IAssets>();
                                    IAssets asset = new Assets();
                                    asset = proxy.MarcomManager.DigitalAssetManager.GetAssetAttributesDetails(assetIdlist[i]);

                                    // IAssets assetdata = proxy.MarcomManager.DigitalAssetManager.GetAssetAttributesDetails(AssetID);
                                    IList<IAttributeData> AttributeDatanew = new List<IAttributeData>();
                                    AttributeDatanew = asset.AttributeData;
                                    if (asset.Category == 0)
                                    {

                                        var Filesassest = asset.Files.Where(a => a.ID == asset.ActiveFileID).Select(a => a).ToList();
                                        newasset = proxy.MarcomManager.DigitalAssetManager.CreateAsset(0, Convert.ToInt32(asset.AssetTypeid), asset.Name, AttributeDatanew, Filesassest[0].Name, 1, Filesassest[0].MimeType, Filesassest[0].Extension, Convert.ToInt64(Filesassest[0].Size), kvp.Value, Filesassest[0].Fileguid.ToString(), Filesassest[0].Description, true, Filesassest[0].Status, 0, Filesassest[0].Additionalinfo, asset.AssetAccess, asset.ID);

                                    }
                                    else
                                    {
                                        newasset = proxy.MarcomManager.DigitalAssetManager.CreateBlankAsset(0, Convert.ToInt32(asset.AssetTypeid), asset.Name, AttributeDatanew, kvp.Value, asset.Category, asset.Url, true, 0, asset.AssetAccess, asset.ID);


                                    }
                                }

                            }
                        }

                    }
                }
                return entityId;
            }
            catch (Exception ex)
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogError("Failed to create entity", ex);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                throw;
            }
        }


        public Tuple<int, int> CreateDuplicateEntities(PlanningManagerProxy proxy, int entityID, int ParentID, bool isDuplicateChild, Dictionary<string, bool> duplicateitems, string EntityNamesToDuplicate)
        {
            IEntity entityObj = new Entity();
            int newentityID = 0;
            int[] assetIdlist = { };
            int[] folderIdlist = { };
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    entityObj = SelectEntityByID(proxy, entityID, duplicateitems);

                    IList<IAttributeData> attributesWithValues = new List<IAttributeData>();

                    //workflowname = (from val in tx.PersistenceManager.PlanningRepository.Query<WorkFlowTypeDao>() where val.Id == item.WorkFlowID select val.Name).FirstOrDefault().ToString();
                    var attribdata = (from entity in entityObj.AttributeData where entity.TypeID == (Convert.ToInt32(AttributesList.ListMultiSelection)) select entity);
                    var attribolddata = (from entity in entityObj.AttributeData where entity.TypeID != (Convert.ToInt32(AttributesList.ListMultiSelection)) && entity.TypeID != (Convert.ToInt32(AttributesList.DropDownTree)) && entity.TypeID != (Convert.ToInt32(AttributesList.TreeMultiSelection)) select entity);

                    var attrtree = (from entity in entityObj.AttributeData where entity.TypeID == (Convert.ToInt32(AttributesList.DropDownTree)) select entity);
                    var attrmultiselecttree = (from entity in entityObj.AttributeData where entity.TypeID == (Convert.ToInt32(AttributesList.TreeMultiSelection)) select entity);

                    foreach (var itemtreemulti in attrmultiselecttree)
                    {
                        int m = 0;
                        foreach (var treemultivalue in itemtreemulti.Value)
                        {

                            AttributeData treemultidata = new AttributeData();
                            treemultidata.Caption = "";
                            treemultidata.ID = itemtreemulti.ID;
                            treemultidata.IsSpecial = itemtreemulti.IsSpecial;
                            //treemultidata.Lable = (dynamic)attrmultiselecttree.Where(a => a.ID == itemtreemulti.ID).Select(a => a);
                            treemultidata.Level = treemultivalue.Level;
                            treemultidata.TypeID = itemtreemulti.TypeID;
                            treemultidata.Value = new List<int>();
                            treemultidata.Value.Add(itemtreemulti.Value[m].Nodeid);
                            attributesWithValues.Add(treemultidata);
                            m++;
                        }
                    }

                    foreach (var itemtree in attrtree)
                    {
                        int l = 0;
                        foreach (var itemtreevalue in itemtree.Value)
                        {
                            AttributeData treedata = new AttributeData();
                            treedata.Caption = itemtree.Caption.Split(',')[l];
                            treedata.ID = itemtree.ID;
                            treedata.IsSpecial = itemtree.IsSpecial;
                            treedata.Lable = itemtree.Lable[l].Label;
                            treedata.Level = itemtree.Lable[l].Level;
                            treedata.TypeID = itemtree.TypeID;
                            treedata.Value = new List<int>();
                            treedata.Value.Add(itemtree.Value[l]);
                            attributesWithValues.Add(treedata);
                            l++;
                        }
                    }

                    foreach (var item in attribdata)
                    {
                        int k = 0;
                        foreach (var itemvalue in item.Value)
                        {
                            AttributeData adata = new AttributeData();
                            adata.Caption = item.Caption.Split(',')[k];
                            adata.ID = item.ID;
                            adata.IsSpecial = item.IsSpecial;
                            adata.Lable = item.Lable;
                            adata.Level = item.Level;
                            adata.TypeID = item.TypeID;
                            adata.Value = itemvalue;
                            attributesWithValues.Add(adata);
                            k++;
                        }

                    }
                    foreach (var itemold in attribolddata)
                    {
                        attributesWithValues.Add(itemold);
                    }
                    int attribcount = entityObj.AttributeData.Count();
                    for (int i = 0; i < attribcount; i++)
                    {
                        entityObj.AttributeData.RemoveAt(0);
                    }
                    for (int i = 0; i < attributesWithValues.Count; i++)
                    {
                        entityObj.AttributeData.Add(attributesWithValues[i]);
                    }

                    var uniqueResult = (from item in tx.PersistenceManager.UserRepository.Query<BaseEntityDao>() where item.Id == entityID select item).FirstOrDefault();

                    IList<IFile> fileandAttachList = new List<IFile>();
                    int[] assetIdArr;

                    //--------------> GET ENTITY ATTACHED FILE DETAILS <----------------
                    if (duplicateitems.FirstOrDefault(a => a.Key == "IsAttachments").Value == true)
                    {
                        //*** Removing old attachment concept new attachment from Dam asset
                        //fileandAttachList = proxy.MarcomManager.CommonManager.GetFilesandLinksByEntityID(entityID);
                        assetIdlist = tx.PersistenceManager.DamRepository.Query<AssetsDao>().Where(a => a.EntityID == entityID).Select(a => a.ID).Distinct().ToArray();
                        folderIdlist = tx.PersistenceManager.DamRepository.Query<FolderDao>().Where(a => a.EntityID == entityID).Select(a => a.Id).Distinct().ToArray();
                    }

                    //--------------> GET ENTITY TASK LIST DETAILS <---------------------
                    IList<ITaskLibraryTemplateHolder> entitytasklist = new List<ITaskLibraryTemplateHolder>();
                    if (duplicateitems.FirstOrDefault(a => a.Key == "IsTasks").Value == true)
                        entitytasklist = proxy.MarcomManager.TaskManager.GetEntityTaskListWithoutTasks(entityID);

                    if (ParentID == 0)
                        ParentID = uniqueResult.Parentid;

                    if (EntityNamesToDuplicate == "")
                        EntityNamesToDuplicate = uniqueResult.Name;

                    //----------------> SAVE THE DUPLICATE VALUES <-----------
                    newentityID = CreateDuplicateEntity(proxy, entityID, ParentID, uniqueResult.Typeid, uniqueResult.Active, uniqueResult.IsLock, EntityNamesToDuplicate, entityObj.EntityMembers, entityObj.EntityCostcenters, entityObj.Periods, entityObj.FundingRequests, entityObj.AttributeData, fileandAttachList, entitytasklist, duplicateitems, null, null, assetIdlist, folderIdlist);

                    if (uniqueResult.Typeid != 1)      //to avoid milestone feeds when entity duplicated
                    {
                        FeedNotificationServer fs = new FeedNotificationServer();
                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.EntityId = newentityID;
                        obj.EntityTypeId = uniqueResult.Typeid;
                        obj.action = "duplicate entity";
                        obj.FromValue = uniqueResult.Name;
                        obj.AssociatedEntityId = uniqueResult.Id;
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.AttributeName = EntityNamesToDuplicate;
                        fs.AsynchronousNotify(obj);
                    }

                    if (isDuplicateChild)
                    {

                        IList<IEntity> entitylistObj = new List<IEntity>();

                        entitylistObj = SelectAllchildeEtities(proxy, entityID);

                        var result = entitylistObj.Where(a => a.Parentid == entityID).Select(a => a);

                        foreach (var childresult in entitylistObj)
                        {
                            CreateDuplicateEntities(proxy, childresult.Id, newentityID, isDuplicateChild, duplicateitems, "");
                        }
                    }

                    tx.Commit();

                    //Adding to the Search Engine
                    System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => AddEntityAsync(proxy, entityID.ToString(), ""));
                    taskforaddentityforsearch.Start();

                    var parentNode = from item in tx.PersistenceManager.UserRepository.Query<EntityDao>()
                                     where item.Id == newentityID
                                     select item;
                    int entityLevel = parentNode.First().Level;
                    Tuple<int, int> lastEntityIDcumUniqueKey = Tuple.Create(newentityID, entityLevel);
                    return lastEntityIDcumUniqueKey;
                }

            }
            catch
            {
                return null;
            }
        }


        public int UpdateTaskFundRequestStatus(PlanningManagerProxy proxy, ITransaction tx, int FundRequestID, int status)
        {
            try
            {
                FeedNotificationServer fs = new FeedNotificationServer();
                NotificationFeedObjects obj = new NotificationFeedObjects();
                obj.Actorid = proxy.MarcomManager.User.Id;
                obj.action = "fund request status changed";
                obj.EntityId = FundRequestID;

                var fundObj = (from item in tx.PersistenceManager.PlanningRepository.Query<FundingRequestDao>() where item.Id == FundRequestID select item).FirstOrDefault();

                FundingRequestDao dao = new FundingRequestDao();

                IList<FundingRequestDao> Ifinancial = new List<FundingRequestDao>();
                FinancialDao findao = new FinancialDao();
                IList<FinancialDao> Ifinancialdao = new List<FinancialDao>();
                IList<MultiProperty> prplst = new List<MultiProperty>();

                prplst = new List<MultiProperty>();
                prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = fundObj.Entityid });
                prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = fundObj.CostCenterid });
                findao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();

                var costCentreAssignedAmount = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where item.Entityid == fundObj.CostCenterid select item.ApprovedAllocatedAmount).FirstOrDefault();
                int[] costcentreListID = { fundObj.CostCenterid };

                var sumOfAllApprovedAmountobj = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where costcentreListID.Contains(item.CostCenterid) select item).ToList();

                int sumofAmount = Convert.ToInt32(costCentreAssignedAmount);

                int sumOfAllApprovedAmount = Convert.ToInt32(sumOfAllApprovedAmountobj.Sum(item => item.ApprovedAllocatedAmount));

                if (status == 2)
                {
                    obj.ToValue = "approved";
                    if (sumofAmount >= (sumOfAllApprovedAmount + (findao.ApprovedAllocatedAmount + findao.RequestedAmount)))
                    {

                        prplst.Add(new MultiProperty { propertyName = FundingRequestDao.PropertyNames.Id, propertyValue = FundRequestID });
                        //prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Id, propertyValue = CostcenterId });
                        dao = (tx.PersistenceManager.AccessRepository.GetEquals<FundingRequestDao>(prplst)).FirstOrDefault();
                        dao.FundRequestSTATUS = status;
                        tx.PersistenceManager.PlanningRepository.Save<FundingRequestDao>(Ifinancial);
                        string planStatusQry = "UPDATE PM_Planning SET STATUS= ? WHERE EntityID IN (" + fundObj.Entityid + ") AND CostCentreID IN (" + fundObj.CostCenterid + ") AND Status = 1";
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(planStatusQry, status);
                        prplst = new List<MultiProperty>();
                        prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = fundObj.Entityid });
                        prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = fundObj.CostCenterid });
                        findao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                        findao.ApprovedAllocatedAmount = findao.ApprovedAllocatedAmount + findao.RequestedAmount;
                        findao.RequestedAmount = 0;
                        findao.Status = status;
                        findao.Status = status;
                        Ifinancialdao.Add(findao);
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancialdao);
                        tx.Commit();
                        AdjustApproveAllocation(proxy, fundObj.Entityid);
                        obj.AssociatedEntityId = fundObj.CostCenterid;
                        fs.AsynchronousNotify(obj);
                        return 1;

                    }
                    else
                    {
                        return 2;
                    }
                }
                else if (status == 3)
                {
                    obj.ToValue = "rejected";
                    prplst.Add(new MultiProperty { propertyName = FundingRequestDao.PropertyNames.Id, propertyValue = FundRequestID });
                    //prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Id, propertyValue = CostcenterId });
                    dao = (tx.PersistenceManager.AccessRepository.GetEquals<FundingRequestDao>(prplst)).FirstOrDefault();
                    dao.FundRequestSTATUS = status;
                    tx.PersistenceManager.PlanningRepository.Save<FundingRequestDao>(Ifinancial);
                    string planStatusQry = "UPDATE PM_Planning SET STATUS= ? WHERE EntityID IN (" + fundObj.Entityid + ") AND CostCentreID IN (" + fundObj.CostCenterid + ") AND Status = 1";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(planStatusQry, status);
                    findao.RequestedAmount = 0;
                    findao.Status = status;
                    Ifinancialdao.Add(findao);
                    tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancialdao);
                    tx.Commit();
                    obj.AssociatedEntityId = fundObj.CostCenterid;
                    fs.AsynchronousNotify(obj);
                    return 0;
                }



                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }


        /// <summary>
        /// Getting Task details
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="TaskID">The TaskID</param>
        /// <returns>IList of ITask</returns>
        public IList<ITask> GetFundRequestTaskDetails(PlanningManagerProxy proxy, string entityUniqueKey, int CostcentreID)
        {
            IList<ITask> iitaskDetails = new List<ITask>();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityobj = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.UniqueKey == entityUniqueKey select item).FirstOrDefault();
                    var taskobj = (from item in tx.PersistenceManager.PlanningRepository.Query<FundingRequestDao>() where item.Entityid == entityobj.Id && item.CostCenterid == CostcentreID && item.FundRequestSTATUS == 1 select item).FirstOrDefault();
                    iitaskDetails = GetWorkFlowTaskDetails(proxy, taskobj.Id);
                }
                return iitaskDetails;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        /// <summary>
        /// Getting Task details
        /// </summary>
        ///  <param name="proxy"></param>
        /// <param name="TaskID">The TaskID</param>
        /// <returns>IList of ITask</returns>
        public IList<ITask> GetNewsfeedFundRequestTaskDetails(PlanningManagerProxy proxy, int fundID)
        {
            IList<ITask> iitaskDetails = new List<ITask>();

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    iitaskDetails = GetWorkFlowTaskDetails(proxy, fundID);
                }
                return iitaskDetails;
            }
            catch (Exception ex)
            {
                return null;
            }

        }




        /// <summary>
        /// get funding request.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The entity id.</param>
        /// <returns>IFundingRequests</returns>
        public IList<IFundingRequest> getfundingRequestsByFundRequestID(PlanningManagerProxy proxy, int fundRequestID)
        {
            try
            {
                IList<IFundingRequest> _attachmentsList = new List<IFundingRequest>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<FundingRequestDao> dao = new List<FundingRequestDao>();
                    string CostcenterentityName = "AttributeRecord5_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    string FundingRequestentityName = "AttributeRecord7_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    dao = (from item in tx.PersistenceManager.UserRepository.Query<FundingRequestDao>()
                           where item.Id == fundRequestID
                           select item).OrderBy(a => a.FundRequestSTATUS).ToList<FundingRequestDao>();
                    foreach (var val in dao)
                    {
                        IFundingRequest _attachments = new FundingRequest();
                        _attachments.Id = val.Id;
                        _attachments.Entityid = val.Entityid;
                        _attachments.CostCenterid = val.CostCenterid;
                        _attachments.CostCentreOwnerID = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                                          join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                                          where item.Entityid == val.CostCenterid
                                                          select item.Userid).FirstOrDefault();
                        var CentityName = GetEntityName(tx, val.CostCenterid);
                        var OwnerDetails = (from entityrole in tx.PersistenceManager.UserRepository.Query<EntityRoleUserDao>()
                                            join user in tx.PersistenceManager.UserRepository.Query<UserDao>() on entityrole.Userid equals user.Id
                                            join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on entityrole.Roleid equals EntityTypeRole.ID
                                            where entityrole.Entityid == val.CostCenterid
                                            select new
                                            {
                                                username = user.FirstName + " " + user.LastName,
                                                OwnerID = user.Id
                                            }).FirstOrDefault();
                        _attachments.CostCenterName = (from item in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where item.Id == val.CostCenterid select item.Name).FirstOrDefault().ToString();
                        _attachments.CostCenterOwnerName = OwnerDetails.username;
                        _attachments.FundRequestSTATUS = val.FundRequestSTATUS;
                        _attachments.RequestAmount = (from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(FundingRequestentityName) where item.Id == val.Id select item.Attributes["20"]).FirstOrDefault().ToString();
                        _attachments.Status = Convert.ToInt32((from item in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where item.Entityid == val.Entityid && item.CostCenterid == val.CostCenterid select item.Status).FirstOrDefault().ToString());
                        DateTime duedateval = Convert.ToDateTime((from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(FundingRequestentityName) where item.Id == val.Id select item.Attributes["56"]).FirstOrDefault());
                        _attachments.DueDate = duedateval.ToString("yyyy-MM-dd");
                        _attachments.RequestedBy = val.RequestedBy;
                        _attachments.RequestUser = (from item in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where item.Id == val.RequestedBy select item.FirstName + " " + item.LastName).FirstOrDefault().ToString();
                        DateTime Reqdateval = Convert.ToDateTime(val.LastUpdatedOn.ToString());
                        _attachments.RequestDate = Reqdateval.ToString("yyyy-MM-dd");
                        DateTime d1 = duedateval;
                        DateTime d2 = DateTime.Now;
                        TimeSpan t = d2 - d1;
                        _attachments.Duedates = (int)t.TotalDays;
                        if (_attachments.Duedates == 0)
                            _attachments.Duedates = 1;
                        _attachments.Description = (from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(FundingRequestentityName) where item.Id == val.Id select item.Attributes["3"]).FirstOrDefault().ToString();
                        var sbMain = new StringBuilder();
                        sbMain.AppendLine("DECLARE @CostAmount INT ");
                        sbMain.AppendLine("DECLARE @EntityVal INT  ");
                        sbMain.AppendLine("DECLARE @EntityBeforeApprovedAmount INT  ");
                        sbMain.AppendLine("DECLARE @EntityID INT = ?");
                        sbMain.AppendLine("DECLARE @CostCenterID INT = ?");
                        sbMain.AppendLine("SET @EntityVal = ( ");
                        sbMain.AppendLine("        SELECT SUM(ApprovedAllocatedAmount) ");
                        sbMain.AppendLine("        FROM   PM_Financial ps ");
                        sbMain.AppendLine("               INNER ");
                        sbMain.AppendLine("        JOIN PM_Entity pe ");
                        sbMain.AppendLine("                    ON  pe.ID = ps.EntityID ");
                        sbMain.AppendLine("                   AND pe.Level = 1 ");
                        sbMain.AppendLine("        WHERE  CostCenterID = @CostCenterID ");
                        sbMain.AppendLine("    )  ");
                        sbMain.AppendLine("SET @CostAmount = ( ");
                        sbMain.AppendLine("        SELECT Attr_59 ");
                        sbMain.AppendLine("        FROM   MM_AttributeRecord_5 ");
                        sbMain.AppendLine("        WHERE  Id = @CostCenterID ");
                        sbMain.AppendLine("    ) ");
                        sbMain.AppendLine("SET @EntityBeforeApprovedAmount = ( ");
                        sbMain.AppendLine("         SELECT SUM(ApprovedAllocatedAmount) ");
                        sbMain.AppendLine("        FROM   PM_Financial ");
                        sbMain.AppendLine("       WHERE  EntityID = @EntityID AND CostCenterID=@CostCenterID ");
                        sbMain.AppendLine("    ) ");
                        sbMain.AppendLine("SELECT @CostAmount                    AS AllocatedAmount, ");
                        sbMain.AppendLine("       @EntityVal                     AS PreviousAllApprovedAmount, ");
                        sbMain.AppendLine("       @EntityBeforeApprovedAmount    AS EntityBeforeApprovedAmount, ");
                        sbMain.AppendLine("       SUM(@CostAmount - @EntityVal)  AS BeforeApproval ");
                        IList ccdetails = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(sbMain.ToString(), val.Entityid, val.CostCenterid);
                        if (ccdetails.Count > 0)
                        {
                            _attachments.CCTotalApprovedAmountThisLevel = (int)((System.Collections.Hashtable)(ccdetails)[0])["EntityBeforeApprovedAmount"];
                            _attachments.CCAvailableAmount = (int)((System.Collections.Hashtable)(ccdetails)[0])["BeforeApproval"];
                            _attachments.CCPreviousAllApprovedAmount = (int)((System.Collections.Hashtable)(ccdetails)[0])["PreviousAllApprovedAmount"];
                            _attachments.CCAssignedAmount = (int)((System.Collections.Hashtable)(ccdetails)[0])["AllocatedAmount"];
                        }
                        _attachmentsList.Add(_attachments);
                    }


                }
                return _attachmentsList;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public string GetMilestoneByEntityID(PlanningManagerProxy proxy, int EntityID)
        {
            string XmlReturn = "";
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder MileStoneQry = new StringBuilder();
                    MileStoneQry.Append(" SELECT(SELECT (SELECT CONVERT(NVARCHAR(10), pep.Attr_56, 120)  '@s',");
                    MileStoneQry.Append(" pep.Attr_2 '@d',");
                    MileStoneQry.Append(" pep.Attr_67 '@ms',pem.Name '@n',");
                    MileStoneQry.Append(" pep.ID '@o'");
                    MileStoneQry.Append(" FROM   MM_AttributeRecord_" + (int)EntityTypeList.Milestone + " pep INNER JOIN PM_Entity pem ON pep.ID=pem.id ");
                    MileStoneQry.Append(" WHERE  pep.Attr_66 = ? order by pep.Attr_56 ASC  FOR XML PATH('p'),");
                    MileStoneQry.Append(" TYPE");
                    MileStoneQry.Append(" ) FOR XML PATH('root'))as 'root'");
                    var entityResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(MileStoneQry.ToString(), EntityID).Cast<Hashtable>();
                    foreach (var res in entityResult)
                    {
                        XmlReturn = res["root"].ToString();
                    }
                    tx.Commit();
                }

                return XmlReturn; ;

            }
            catch (Exception ex)
            {
                return XmlReturn;
            }
            return XmlReturn;
        }

        public bool PendingFundRequest(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                bool isrequestpending = false;
                int pendrequestval;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<MultiProperty> strqry_parLIST = new List<MultiProperty>();
                    BaseEntityDao baseentity = new BaseEntityDao();
                    baseentity = tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(EntityID);
                    strqry_parLIST.Add(new MultiProperty { propertyName = "baseentity_UniqueKey", propertyValue = baseentity.UniqueKey + ".%" });
                    StringBuilder strqry = new StringBuilder();
                    strqry.Append(" SELECT pfr.FundRequestSTATUS FROM PM_Entity pe ");
                    strqry.Append(" INNER JOIN PM_FundingRequest pfr ON pfr.ID IN (pe.ID) ");
                    strqry.Append(" WHERE pe.UniqueKey LIKE :baseentity_UniqueKey AND typeid = 7 ");

                    var ispending = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(strqry.ToString(), strqry_parLIST);

                    foreach (var item in ispending)
                    {
                        pendrequestval = (int)((System.Collections.Hashtable)(item))["FundRequestSTATUS"];
                        if (pendrequestval == 1)
                        {
                            return true;
                        }
                    }
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        public bool UpdateLock(PlanningManagerProxy proxy, int EntityID, int IsLock)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                BaseEntityDao baseentity = new BaseEntityDao();
                var uniquekey = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("SELECT UniqueKey FROM PM_Entity pe WHERE ID= ?", EntityID);
                int uniqueid = 0;
                foreach (var item in uniquekey)
                {
                    uniqueid = Convert.ToInt32(((System.Collections.Hashtable)(item))["UniqueKey"]);
                }
                tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("UPDATE PM_Entity SET IsLock = ? WHERE UniqueKey LIKE ? OR ID = ? ", IsLock, uniqueid + ".%", EntityID);
                int intUserID = proxy.MarcomManager.User.Id;

                LockedEntitiesDao lockentity = new LockedEntitiesDao();
                lockentity.ID = 0;
                lockentity.EntityID = EntityID;
                lockentity.LockedBy = intUserID;
                lockentity.LockedOn = DateTime.Now.ToString();
                if (IsLock == 1)
                {
                    tx.PersistenceManager.PlanningRepository.DeleteByID<LockedEntitiesDao>(LockedEntitiesDao.PropertyNames.EntityID, EntityID);
                    tx.PersistenceManager.PlanningRepository.Save<LockedEntitiesDao>(lockentity);
                }
                tx.Commit();
                return true;
            }
        }
        public bool IsLockAvailable(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                return GetLockStatus(proxy, EntityID).Item1;
                //using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                //{
                //    string strqry = "select IsLock From PM_Entity where ID = ?";
                //    var islock = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(strqry, EntityID);
                //    bool lockAvailable = false;
                //    foreach (var item in islock)
                //    {
                //        lockAvailable = Convert.ToBoolean(Convert.ToInt32(((System.Collections.Hashtable)(item))["IsLock"]));
                //    }
                //    tx.Commit();
                //    if (lockAvailable == true)
                //    {
                //        return true;
                //    }
                //    else
                //    {
                //        return false;
                //    }
                //}
            }
            catch
            {
                return false;
            }
        }


        /// <summary>
        ///Update Approved Budget
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Costcentreid">The Costcentre id.</param>
        /// <returns>true/false</returns>
        public bool UpdateCostCentreApprovedBudget(PlanningManagerProxy proxy, int[] costcentreList)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.ApproveBudget, OperationId.Allow);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (costcentreList.Length > 0)
                    {
                        IList<FinancialDao> ifinancial = new List<FinancialDao>();
                        IList<FinancialDao> iUpdatefinancial = new List<FinancialDao>();
                        IList<CostCenterApprovedBudgetDao> iCCBudget = new List<CostCenterApprovedBudgetDao>();
                        FinancialDao findao = new FinancialDao();
                        IList<MultiProperty> prplst;
                        string idlist = String.Join(",", costcentreList);
                        string updatequery = @"UPDATE PM_Financial SET PM_Financial.ApprovedBudget = PM_Financial.ApprovedAllocatedAmount,PM_Financial.ApprovedBudgetDate = GETDATE() WHERE PM_Financial.CostCenterID IN (" + idlist + ")";
                        tx.PersistenceManager.PlanningRepository.ExecuteQuery(updatequery);

                        foreach (var val in costcentreList)
                        {

                            CostCenterApprovedBudgetDao ccdao = new CostCenterApprovedBudgetDao();
                            prplst = new List<MultiProperty>();
                            prplst = new List<MultiProperty>();
                            prplst.Add(new MultiProperty { propertyName = CostCenterApprovedBudgetDao.PropertyNames.CostCentreID, propertyValue = val });
                            ccdao = (tx.PersistenceManager.AccessRepository.GetEquals<CostCenterApprovedBudgetDao>(prplst)).FirstOrDefault();
                            if (ccdao != null)
                            {
                                ccdao.UserID = proxy.MarcomManager.User.Id;
                                ccdao.ApproveTime = DateTime.UtcNow;
                                iCCBudget.Add(ccdao);
                            }
                            else
                            {
                                ccdao = new CostCenterApprovedBudgetDao();
                                ccdao.CostCentreID = val;
                                ccdao.UserID = proxy.MarcomManager.User.Id;
                                ccdao.ApproveTime = DateTime.UtcNow;
                                iCCBudget.Add(ccdao);
                            }

                            var PlannedAmount1 = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("select sum(PM_Financial.PlannedAmount) from dbo.PM_Financial where PM_Financial.CostCenterID =?", val).Cast<Hashtable>().ToList();
                            int Sumplannedamount = Convert.ToInt32(PlannedAmount1[0][""]);
                            if (Sumplannedamount > 0)
                            {
                                BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                                NotificationFeedObjects obj = new NotificationFeedObjects();
                                obj.action = "Update costcentre Approved Budjet";
                                obj.Actorid = proxy.MarcomManager.User.Id;
                                //obj.AttributeName = CostcenterId.ToString();
                                //obj.AssociatedEntityId = val;
                                obj.EntityId = val;
                                //obj.ToValue = Convert.ToString(ReleaseAmount.ToString());
                                fs.AsynchronousNotify(obj);
                            }


                            //BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                            //NotificationFeedObjects obj = new NotificationFeedObjects();
                            //obj.action = "Update costcentre Approved Budjet";
                            //obj.Actorid = proxy.MarcomManager.User.Id;
                            //obj.AssociatedEntityId = val;

                            //var EntityNames = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("select EntityID ,CostCenterID from dbo.PM_EntityCostReleations where CostCenterID = ?" , val).Cast<Hashtable>();

                            //tx.PersistenceManager.PlanningRepository.ExecuteQuery(updatequery);
                            //foreach(var id in EntityNames)
                            //    {
                            //    obj.EntityId = (Convert.ToInt32(id [ "EntityID" ]));
                            //    fs.AsynchronousNotify(obj);
                            //    }





                            //BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                            //NotificationFeedObjects obj = null;
                            //var EntityNames = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("select EntityID ,CostCenterID from dbo.PM_EntityCostReleations where CostCenterID = ?" , val).Cast<Hashtable>();
                            //tx.PersistenceManager.PlanningRepository.ExecuteQuery(updatequery);

                            ////foreach(var id in EntityNames)
                            ////    {
                            ////    obj = new NotificationFeedObjects();
                            ////    obj.action = "Update costcentre Approved Budjet";
                            ////    obj.Actorid = proxy.MarcomManager.User.Id;
                            ////    obj.AssociatedEntityId = val;
                            ////    obj.EntityId = (Convert.ToInt32(id [ "EntityID" ]));
                            ////    fs.AsynchronousNotify(obj);
                            ////    }
                            ////obj = new NotificationFeedObjects();
                            //obj.action = "Update costcentre Approved Budjet";
                            //obj.Actorid = proxy.MarcomManager.User.Id;
                            ////obj.AssociatedEntityId = val;
                            ////obj.AttributeName = val.ToString();
                            //obj.EntityId = val;
                            //fs.AsynchronousNotify(obj);

                        }
                        tx.PersistenceManager.PlanningRepository.Save<CostCenterApprovedBudgetDao>(iCCBudget);
                        tx.Commit();


                        return true;
                    }
                }

                return false;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public IList GetApprovedBudgetDate(PlanningManagerProxy proxy, string costcentreList)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                StringBuilder getcontent = new StringBuilder();

                getcontent.Append("select CostCentreID, CONVERT(VARCHAR, ApproveTime, 0)ApproveTime from PM_CostCenterApprovedBudget ");
                getcontent.Append("where CostCentreID IN (" + costcentreList + ")");
                var result = tx.PersistenceManager.CommonRepository.ExecuteQuery(getcontent.ToString());
                return result;
            }
        }


        public Tuple<IList<IPurchaseOrder>, bool> GetAllPurchaseOrdersByEntityID(PlanningManagerProxy proxy, int entityid)
        {
            IList<IPurchaseOrder> iPurOrder = new List<IPurchaseOrder>();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<PurchaseOrderDao> ipdao = new List<PurchaseOrderDao>();
                    ipdao = (from item in tx.PersistenceManager.UserRepository.Query<PurchaseOrderDao>()
                             where item.EntityID == entityid
                             select item).ToList<PurchaseOrderDao>();
                    IList<EntityTypeRoleAclDao> entityDao = new List<EntityTypeRoleAclDao>();
                    var entObj = (from data in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where data.Id == entityid select data).FirstOrDefault();
                    if (entObj.Level == 1)
                        entityDao = (from data in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                     join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on data.Roleid equals EntityTypeRole.ID
                                     where data.Entityid == entityid
                                     select EntityTypeRole).ToList();
                    else
                        entityDao = (from data in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                     join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on data.Roleid equals EntityTypeRole.ID
                                     where data.Entityid == entityid
                                     select EntityTypeRole).ToList();

                    int[] userArray = { proxy.MarcomManager.User.Id };
                    int[] approveSendRoles = { 1, 2 };

                    string newmemberCount = "SELECT Count(1) as MemberCount FROM PM_Entity pe INNER JOIN AM_Entity_Role_User aeru ON aeru.EntityID = pe.ID INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.id = aeru.RoleID WHERE pe.ID = ? AND   aeru.UserID = ? AND aetra.EntityRoleID IN(1,2)";
                    IList MemberCountVal = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(newmemberCount, entityid, proxy.MarcomManager.User.Id);
                    int MemeberCount = (int)((System.Collections.Hashtable)(MemberCountVal)[0])["MemberCount"];

                    bool isMemberApprove = MemeberCount > 0 ? true : false;

                    foreach (var val in ipdao)
                    {
                        IPurchaseOrder _iPO = new PurchaseOrder();
                        _iPO.PONumber = val.PONumber != null ? val.PONumber : "";
                        _iPO.Id = val.Id;
                        _iPO.SentDate = val.SentDate;
                        _iPO.Status = val.Status;
                        _iPO.strStatusName = Enum.GetName(typeof(PurchaseOrderStates), val.Status);
                        _iPO.SupplierID = val.SupplierID;
                        var suppliername = (from data in tx.PersistenceManager.PlanningRepository.Query<SupplierDao>() where data.ID == val.SupplierID select data).FirstOrDefault();
                        _iPO.SupplierName = suppliername.CompanyName != null ? suppliername.CompanyName : "";
                        var RequesterName = (from data in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where data.Id == val.UserID select data).FirstOrDefault();
                        if (RequesterName != null)
                        {
                            _iPO.RequesterName = RequesterName.FirstName + " " + RequesterName.LastName;
                        }
                        else
                        {
                            _iPO.RequesterName = string.Empty;
                        }
                        _iPO.UserID = val.UserID;
                        _iPO.strAppprovalDate = val.ApprovedDate == null ? "-" : Convert.ToDateTime(val.ApprovedDate).ToString("yyyy-MM-dd");
                        _iPO.ApprovedDate = val.ApprovedDate == null ? null : val.ApprovedDate;
                        _iPO.ApproverID = val.ApproverID == null ? 0 : val.ApproverID;
                        _iPO.ApproverName = "-";
                        if (val.ApproverID != null)
                        {
                            var approverUserName = (from data in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where data.Id == val.ApproverID select data).FirstOrDefault();
                            _iPO.ApproverName = approverUserName.FirstName + " " + approverUserName.LastName;
                        }
                        _iPO.CreateDate = val.CreatedDate;
                        _iPO.Description = val.Description != null ? val.Description : "";
                        _iPO.Entityid = val.EntityID;
                        _iPO.ExpectedSpentDate = val.ExpectedSpentDate;
                        var purchaseOrderDetaildao = (from data in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDetailDao>() where data.POID == val.Id select data).ToList();
                        _iPO.purchaseOrderDetail = purchaseOrderDetaildao;
                        _iPO.amount = purchaseOrderDetaildao.Sum(a => a.Amount);
                        _iPO.currencytype = purchaseOrderDetaildao.FirstOrDefault().CurrencyType;
                        _iPO.CostCentreID = purchaseOrderDetaildao.FirstOrDefault().CostCenterID;
                        var currencyDao = (from data in tx.PersistenceManager.PlanningRepository.Query<CurrencyTypeDao>() where data.Id == purchaseOrderDetaildao.FirstOrDefault().CurrencyType select data).FirstOrDefault();
                        _iPO.currencytypeName = currencyDao.Name;
                        _iPO.strSendDate = val.SentDate == null ? "-" : Convert.ToDateTime(val.SentDate).ToString("yyyy-MM-dd");
                        _iPO.strCreatedDate = val.CreatedDate == null ? "-" : Convert.ToDateTime(val.CreatedDate).ToString("yyyy-MM-dd");
                        _iPO.strAmount = GetCurrency((int)_iPO.amount);
                        _iPO.isApproveSendAuthority = isMemberApprove;
                        _iPO.DynamciData = FinancialTransactionMetadataValues(proxy, val.Id, val.EntityID, purchaseOrderDetaildao.First().CostCenterID, (int)FinancialMetadaTypes.PO);
                        iPurOrder.Add(_iPO);
                    }
                    Tuple<IList<IPurchaseOrder>, bool> listObj = Tuple.Create(iPurOrder, isMemberApprove);
                    return listObj;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        public int CreateNewPurchaseOrder(PlanningManagerProxy proxy, IList<IPurchaseOrder> listpurchaseOrder, IList<IPurchaseOrderDetail> POdetailList, IList<IAttributeData> entityattributedata, bool DirectPO)
        {

            try
            {
                if (listpurchaseOrder != null)
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(listpurchaseOrder.FirstOrDefault().Entityid, Modules.Planning);

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (listpurchaseOrder != null)
                    {
                        IList<PurchaseOrderDao> ipurchaseOrd = new List<PurchaseOrderDao>();
                        IList<PurchaseOrderDetailDao> ipurchaseOrdDet = new List<PurchaseOrderDetailDao>();

                        IPurchaseOrder ipurObj = new PurchaseOrder();
                        ipurObj = listpurchaseOrder.FirstOrDefault();

                        PurchaseOrderDao purchaseOrddao = new PurchaseOrderDao();
                        purchaseOrddao.ExpectedSpentDate = ipurObj.ExpectedSpentDate;
                        purchaseOrddao.ApprovedDate = ipurObj.ApprovedDate == null ? null : ipurObj.ApprovedDate;
                        purchaseOrddao.CreatedDate = DateTime.Now;
                        purchaseOrddao.ApproverID = ipurObj.ApproverID == 0 ? null : ipurObj.ApproverID;
                        purchaseOrddao.Description = ipurObj.Description;
                        purchaseOrddao.EntityID = ipurObj.Entityid;
                        string ponumber = GenerationNewPONumber(proxy, tx);
                        purchaseOrddao.PONumber = ponumber;
                        purchaseOrddao.SentDate = ipurObj.SentDate == null ? null : ipurObj.SentDate;
                        int status = (int)PurchaseOrderStates.Created;
                        if (DirectPO == true)
                            status = (int)PurchaseOrderStates.Invoiced;
                        purchaseOrddao.Status = status;
                        purchaseOrddao.SupplierID = ipurObj.SupplierID;
                        purchaseOrddao.UserID = ipurObj.UserID;
                        purchaseOrddao.IsExternal = false;

                        ipurchaseOrd.Add(purchaseOrddao);
                        tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(ipurchaseOrd);

                        if (POdetailList != null)
                        {
                            PurchaseOrderDetailDao purchaseOrdDetdao = new PurchaseOrderDetailDao();
                            foreach (var a in POdetailList)
                            {
                                purchaseOrdDetdao = new PurchaseOrderDetailDao();
                                purchaseOrdDetdao.CostCenterID = a.CostCentreID;
                                purchaseOrdDetdao.POID = ipurchaseOrd.FirstOrDefault().Id;
                                purchaseOrdDetdao.Amount = a.Amount;
                                purchaseOrdDetdao.CurrencyType = a.CurrencyType;
                                ipurchaseOrdDet.Add(purchaseOrdDetdao);
                            }
                            tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDetailDao>(ipurchaseOrdDet);
                        }
                        if (entityattributedata != null)
                        {
                            var result = InsertFinancialEntityAttributes(tx, entityattributedata, ipurchaseOrd.FirstOrDefault().Id, (int)FinancialMetadaTypes.PO);
                        }
                        else
                        {
                            //for funding costcenter dynamic table
                            IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                            DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                            foreach (var val in ipurchaseOrd)
                            {
                                dynamicdao = new DynamicAttributesDao();
                                dynamicdao.Id = ipurchaseOrd.FirstOrDefault().Id;
                                idynObj.Add(dynamicdao);

                            }
                            if (idynObj.Count > 0)
                                tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("PORecords", idynObj);
                        }
                        tx.Commit();
                        return ipurchaseOrd.FirstOrDefault().Id;
                    }

                }
                return 0;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }


        }

        public bool InsertFinancialEntityAttributes(ITransaction tx, IList<IAttributeData> attributeData, int finId, int typeId)
        {
            if (attributeData != null)
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Started inseting values into Dynamic tables", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                string entityName = "";
                switch (typeId)
                {
                    case 1:
                        entityName = "PORecords";
                        break;
                    case 2:
                        entityName = "SpentRecords";
                        break;
                    case 3:
                        entityName = "FundingCostCentreRecords";
                        break;
                }
                IList<IDynamicAttributes> listdynamicattributes = new List<IDynamicAttributes>();
                Dictionary<string, object> dictAttr = new Dictionary<string, object>();
                IList<FinancialMultiSelectDao> listMultiselect = new List<FinancialMultiSelectDao>();
                IList<TreeValueDao> listreeval = new List<TreeValueDao>();
                listreeval.Clear();
                DynamicAttributesDao dynamicdao = new DynamicAttributesDao();

                ArrayList entityids = new ArrayList();
                foreach (var obj in attributeData)
                {
                    entityids.Add(obj.ID);
                }
                var result = from item in tx.PersistenceManager.PlanningRepository.Query<FinancialAttributeDao>() where entityids.Contains(item.ID) && item.FinTypeID == typeId select item;
                var dynamicAttResult = result.Where(a => ((a.ID != 69) && (a.AttributeTypeID == 1 || a.AttributeTypeID == 2 || a.AttributeTypeID == 3)));

                var multiAttrResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.ListMultiSelection)));

                if (multiAttrResult.Count() > 0)
                {
                    tx.PersistenceManager.PlanningRepository.DeleteByID<Marcom.Dal.Metadata.Model.FinancialMultiSelectDao>(finId);
                    var query = attributeData.Join(multiAttrResult,
                             post => post.ID,
                             meta => meta.ID,
                             (post, meta) => new { databaseval = post, attrappval = meta });
                    foreach (var at in query)
                    {
                        FinancialMultiSelectDao mt = new FinancialMultiSelectDao();
                        mt.FinAttributeID = at.databaseval.ID;
                        mt.FinID = finId;
                        mt.FinTypeID = typeId;
                        mt.FinOptionID = Convert.ToInt32(at.databaseval.Value);
                        listMultiselect.Add(mt);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.FinancialMultiSelectDao>(listMultiselect);
                }

                if (dynamicAttResult.Count() > 0)
                {
                    Dictionary<string, dynamic> attr = new Dictionary<string, dynamic>();


                    var dynamicAttrQuery = attributeData.Join(dynamicAttResult,
                                post => post.ID,
                                meta => meta.ID,
                                (post, meta) => new { databaseval = post });
                    foreach (var ab in dynamicAttrQuery)
                    {

                        string key = Convert.ToString((int)ab.databaseval.ID);
                        int attributedataType = ab.databaseval.TypeID;
                        // dynamic value = ab.databaseval.Value;
                        dynamic value = null;
                        switch (attributedataType)
                        {
                            case 1:
                            case 2:
                            case 11:
                                {
                                    value = Convert.ToString(ab.databaseval.Value == null ? "" : (string)ab.databaseval.Value);
                                    break;
                                }
                            case 3:
                                {
                                    value = Convert.ToString(ab.databaseval.Value == null ? 0 : (int)ab.databaseval.Value);
                                    break;
                                }
                            case 5:
                                {
                                    value = DateTime.Parse(ab.databaseval.Value == null ? "" : (string)ab.databaseval.Value, CultureInfo.InvariantCulture);
                                    break;
                                }
                            case 8:
                                {

                                    value = Convert.ToInt32(((ab.databaseval.Value == null) ? 0 : (int)ab.databaseval.Value));
                                    break;
                                }
                            case 9:
                                {
                                    value = value = Convert.ToBoolean(ab.databaseval.Value != null ? 0 : (int)ab.databaseval.Value);
                                    break;
                                }
                        }
                        attr.Add(key, value);
                    }
                    dictAttr = attr != null ? attr : null;
                    dynamicdao.Id = finId;
                    dynamicdao.Attributes = dictAttr;
                    tx.PersistenceManager.PlanningRepository.SaveByentity<DynamicAttributesDao>(entityName, dynamicdao);
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Succesfully into Dynamic tables", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                }
            }
            return true;
        }


        public Tuple<int, string> GetPurchaseOrder(PlanningManagerProxy proxy, ITransaction tx, IList<IPurchaseOrder> listpurchaseOrder, IList<IPurchaseOrderDetail> POdetailList)
        {

            try
            {

                if (listpurchaseOrder != null)
                {
                    IList<PurchaseOrderDao> ipurchaseOrd = new List<PurchaseOrderDao>();
                    IList<PurchaseOrderDetailDao> ipurchaseOrdDet = new List<PurchaseOrderDetailDao>();

                    IPurchaseOrder ipurObj = new PurchaseOrder();
                    ipurObj = listpurchaseOrder.FirstOrDefault();

                    PurchaseOrderDao purchaseOrddao = new PurchaseOrderDao();
                    purchaseOrddao.ExpectedSpentDate = ipurObj.ExpectedSpentDate;
                    purchaseOrddao.ApprovedDate = ipurObj.ApprovedDate == null ? null : ipurObj.ApprovedDate;
                    purchaseOrddao.CreatedDate = DateTime.Now;
                    purchaseOrddao.ApproverID = ipurObj.ApproverID == 0 ? null : ipurObj.ApproverID;
                    purchaseOrddao.Description = ipurObj.Description;
                    purchaseOrddao.EntityID = ipurObj.Entityid;
                    string ponumber = GenerationNewPONumber(proxy, tx);
                    purchaseOrddao.PONumber = ponumber;
                    purchaseOrddao.SentDate = ipurObj.SentDate == null ? null : ipurObj.SentDate;
                    purchaseOrddao.Status = (int)PurchaseOrderStates.Invoiced; ;
                    purchaseOrddao.SupplierID = ipurObj.SupplierID;
                    purchaseOrddao.UserID = ipurObj.UserID;
                    purchaseOrddao.IsExternal = ipurObj.IsExternal;

                    ipurchaseOrd.Add(purchaseOrddao);
                    tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(ipurchaseOrd);

                    if (POdetailList != null)
                    {
                        PurchaseOrderDetailDao purchaseOrdDetdao = new PurchaseOrderDetailDao();
                        foreach (var a in POdetailList)
                        {
                            purchaseOrdDetdao = new PurchaseOrderDetailDao();
                            purchaseOrdDetdao.CostCenterID = a.CostCentreID;
                            purchaseOrdDetdao.POID = ipurchaseOrd.FirstOrDefault().Id;
                            purchaseOrdDetdao.Amount = a.Amount;
                            purchaseOrdDetdao.CurrencyType = a.CurrencyType;
                            ipurchaseOrdDet.Add(purchaseOrdDetdao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDetailDao>(ipurchaseOrdDet);
                    }
                    return Tuple.Create(ipurchaseOrd.FirstOrDefault().Id, ipurchaseOrd.FirstOrDefault().PONumber);
                }

                return null;
            }
            catch (Exception ex)
            {
                return null;
            }


        }


        /// <summary>
        /// Getting All CurrencyTypes.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of ICurrencyType</returns>
        //public IList<ICurrencyType> GetAllCurrencyType(PlanningManagerProxy proxy)
        //{
        //    try
        //    {
        //        IList<ICurrencyType> objCurrencyList = new List<ICurrencyType>();
        //        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
        //        {
        //            var currencyDao = tx.PersistenceManager.PlanningRepository.GetAll<CurrencyTypeDao>();
        //            tx.Commit();
        //            foreach (var obj in currencyDao)
        //            {
        //                CurrencyType currencyObj = new CurrencyType();
        //                currencyObj.Id = obj.Id;
        //                currencyObj.Name = obj.Name;
        //                currencyObj.ShortName = obj.ShortName;
        //                currencyObj.Symbol = obj.Symbol;
        //                objCurrencyList.Add(currencyObj);
        //            }
        //        }
        //        return objCurrencyList;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw null;
        //    }
        //}


        /// <summary>
        /// Update Commit Amount in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Amount">Commit Amount</param>
        /// <returns>Bool</returns>
        public bool EntityCommittedAmountInsert(PlanningManagerProxy proxy, int entityID, int CostcenterId, Decimal AvailableAmount, Decimal CommitAmount)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (AvailableAmount >= CommitAmount)
                    {

                        //feed and notification
                        BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.action = "Commited Amount";
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.EntityId = entityID;
                        var oldcommited = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("select commited from pm_financial where entityid=? and costcenterid =?", entityID, CostcenterId).Cast<Hashtable>();

                        decimal totalcommitAmount = getFinalCommitAmount(tx, entityID, CostcenterId);

                        IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                        FinancialDao dao = new FinancialDao();
                        IList<MultiProperty> prplst = new List<MultiProperty>();
                        prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                        prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                        dao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                        dao.Commited = totalcommitAmount;
                        Ifinancial.Add(dao);
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                        tx.Commit();



                        //news feed
                        foreach (var c in oldcommited)
                        {
                            obj.FromValue = Convert.ToString(Convert.ToInt32(c["commited"]));
                            obj.ToValue = (Convert.ToInt32(c["commited"]) + Convert.ToInt32(CommitAmount)).ToString();

                        }

                        obj.AttributeId = CostcenterId;

                        fs.AsynchronousNotify(obj);

                    }
                    return true;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Update Commit Amount in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Amount">Commit Amount</param>
        /// <returns>Bool</returns>
        public bool EntityDirectSpentCommittedAmountInsert(PlanningManagerProxy proxy, int entityID, int CostcenterId, Decimal AvailableAmount, Decimal CommitAmount)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //if (AvailableAmount >= CommitAmount)
                    //{

                    //feed and notification
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "Commited Amount";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = entityID;
                    var oldcommited = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("select commited from pm_financial where entityid=? and costcenterid =?", entityID, CostcenterId).Cast<Hashtable>();

                    decimal totalcommitAmount = getFinalCommitAmount(tx, entityID, CostcenterId);

                    IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                    FinancialDao dao = new FinancialDao();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                    dao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                    dao.Commited = totalcommitAmount;
                    Ifinancial.Add(dao);
                    tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                    tx.Commit();



                    //news feed
                    foreach (var c in oldcommited)
                    {
                        obj.FromValue = Convert.ToString(Convert.ToInt32(c["commited"]));
                        obj.ToValue = (Convert.ToInt32(c["commited"]) + Convert.ToInt32(CommitAmount)).ToString();

                    }

                    obj.AttributeId = CostcenterId;

                    fs.AsynchronousNotify(obj);

                }
                return true;
                //}

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Update Commit Amount in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Amount">Commit Amount</param>
        /// <returns>Bool</returns>
        public bool EntityDirectApiCommittedAmountInsert(PlanningManagerProxy proxy, int entityID, int CostcenterId, Decimal AvailableAmount, Decimal CommitAmount)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //if (AvailableAmount >= CommitAmount)
                    //{

                    //feed and notification
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "Commited Amount";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = entityID;
                    var oldcommited = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("select commited from pm_financial where entityid=? and costcenterid =?", entityID, CostcenterId).Cast<Hashtable>();

                    decimal totalcommitAmount = getFinalCommitAmount(tx, entityID, CostcenterId);

                    IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                    FinancialDao dao = new FinancialDao();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                    dao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                    dao.Commited = totalcommitAmount;
                    Ifinancial.Add(dao);
                    tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                    tx.Commit();



                    //news feed
                    foreach (var c in oldcommited)
                    {
                        obj.FromValue = Convert.ToString(Convert.ToInt32(c["commited"]));
                        obj.ToValue = (Convert.ToInt32(c["commited"]) + Convert.ToInt32(CommitAmount)).ToString();

                    }

                    obj.AttributeId = CostcenterId;

                    fs.AsynchronousNotify(obj);

                }
                return true;
                //}

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Update Spend Amount in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Amount">Spend Amount</param>
        /// <returns>Bool</returns>
        public bool EntitySpendAmountInsert(PlanningManagerProxy proxy, int entityID, int CostcenterId, Decimal AvailableAmount, Decimal SpendAmount)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //if (AvailableAmount >= SpendAmount)
                    //{


                    //feed and notification
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "Spent Amount";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = entityID;
                    obj.AssociatedEntityId = CostcenterId;
                    var oldcommited = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("select spent from pm_financial where entityid= ? and costcenterid =?", entityID, CostcenterId).Cast<Hashtable>();

                    decimal totalSpentAmount = getFinalSpentAmount(tx, entityID, CostcenterId);

                    IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                    FinancialDao dao = new FinancialDao();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                    dao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                    dao.Spent = totalSpentAmount;
                    Ifinancial.Add(dao);
                    tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                    tx.Commit();


                    //newsfeed
                    foreach (var c in oldcommited)
                    {
                        obj.FromValue = Convert.ToString(Convert.ToInt32(c["spent"]));
                        obj.ToValue = (Convert.ToInt32(c["spent"]) + Convert.ToInt32(SpendAmount)).ToString();

                    }

                    obj.AttributeId = CostcenterId;

                    fs.AsynchronousNotify(obj);

                    //}
                    return true;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Update Spend Amount in Financial
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <param name="CostCenterId">The CostCenter ID</param>
        /// <param name="Amount">Spend Amount</param>
        /// <returns>Bool</returns>
        public bool EntityApiSpendAmountInsert(PlanningManagerProxy proxy, int entityID, int CostcenterId, Decimal AvailableAmount, Decimal SpendAmount)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //if (AvailableAmount >= SpendAmount)
                    //{


                    //feed and notification
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "Spent Amount";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = entityID;
                    obj.AssociatedEntityId = CostcenterId;
                    var oldcommited = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("select spent from pm_financial where entityid= ? and costcenterid =?", entityID, CostcenterId).Cast<Hashtable>();
                    decimal totalSpentAmount = getFinalSpentAmount(tx, entityID, CostcenterId);

                    IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                    FinancialDao dao = new FinancialDao();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = entityID });
                    prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = CostcenterId });
                    dao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                    dao.Spent = totalSpentAmount;
                    Ifinancial.Add(dao);
                    tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                    tx.Commit();


                    //newsfeed
                    foreach (var c in oldcommited)
                    {
                        obj.FromValue = Convert.ToString(Convert.ToInt32(c["spent"]));
                        obj.ToValue = (Convert.ToInt32(c["spent"]) + Convert.ToInt32(SpendAmount)).ToString();

                    }

                    obj.AttributeId = CostcenterId;

                    fs.AsynchronousNotify(obj);

                    //}
                    return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public decimal getFinalCommitAmount(ITransaction tx, int entityID, int CostcenterID)
        {
            try
            {
                var amountQry = new StringBuilder();
                amountQry.AppendLine("SELECT ISNULL( ");
                amountQry.AppendLine("CONVERT(DECIMAL(16, 2), SUM(ppod.amount)),");
                amountQry.AppendLine("CONVERT(DECIMAL(16, 2), 0)");
                amountQry.AppendLine(" ) AS 'CommitAmount'");
                amountQry.AppendLine("FROM   PM_PurchaseOrder ppo");
                amountQry.AppendLine("INNER JOIN PM_PurchaseOrderDetail ppod");
                amountQry.AppendLine("ON  ppo.EntityID = ?");
                amountQry.AppendLine("AND ppod.CostCenterID = ?");
                amountQry.AppendLine("AND ppo.ID = ppod.POID");
                amountQry.AppendLine("AND ppo.Status NOT IN (5)");
                IList commitObj = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(amountQry.ToString(), entityID, CostcenterID);
                decimal commitAmount = (decimal)((System.Collections.Hashtable)(commitObj)[0])["CommitAmount"];
                return commitAmount;

            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        public decimal getFinalSpentAmount(ITransaction tx, int entityID, int CostcenterID)
        {
            try
            {
                var amountQry = new StringBuilder();
                amountQry.AppendLine("SELECT ISNULL( ");
                amountQry.AppendLine(" CONVERT(DECIMAL(16, 2), SUM(ppod.amount)),");
                amountQry.AppendLine("CONVERT(DECIMAL(16, 2), 0)");
                amountQry.AppendLine("  ) AS 'SpentAmount'");
                amountQry.AppendLine("FROM   PM_Invoice ppo");
                amountQry.AppendLine("INNER JOIN PM_InvoiceDetail ppod");
                amountQry.AppendLine(" ON  ppo.EntityID = ?");
                amountQry.AppendLine(" AND ppod.CostCenterID = ?");
                amountQry.AppendLine("AND ppo.ID = ppod.InvID");
                IList spentObj = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(amountQry.ToString(), entityID, CostcenterID);
                decimal spentAmount = (decimal)((System.Collections.Hashtable)(spentObj)[0])["SpentAmount"];
                return spentAmount;

            }
            catch (Exception ex)
            {
                throw ex;
            }
            return 0;
        }


        public string GetCurrency(decimal srcnumber)
        {
            string getstr = null;
            getstr = srcnumber + "";
            int count = 0;
            string commaString = "";

            string retCommaString = "";
            int i = 0;
            int j = 0;

            for (i = getstr.Length - 1; i >= 0; i += -1)
            {

                if (count == 3)
                {
                    commaString = commaString + " ";
                    count = 0;
                }
                commaString = commaString + getstr[i];


                count = count + 1;

            }
            for (j = commaString.Length - 1; j >= 0; j += -1)
            {
                retCommaString = retCommaString + commaString[j];
            }


            return retCommaString;
        }


        public string GenerationNewPONumber(PlanningManagerProxy proxy, ITransaction tx)
        {

            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            XDocument adminXdoc = XDocument.Load(xmlpath);
            IList<PurchaseOrderSettingsDao> lstPoSettings = null;
            lstPoSettings = adminXdoc.Root.Elements("PurchaseOrderSettings_Table").Elements("PurchaseOrderSettings").Select(e => new PurchaseOrderSettingsDao
            {

                Prefix = e.Element("Prefix").Value.Replace("\n", ""),
                DateFormat = e.Element("DateFormat").Value.Replace("\n", ""),
                NumberCount = e.Element("NumberCount").Value.Replace("\n", ""),
                DigitFormat = e.Element("DigitFormat").Value.Replace("\n", "")

            }).Cast<PurchaseOrderSettingsDao>().OrderByDescending(a => a.ID).ToList();
            var LastRecord = lstPoSettings[lstPoSettings.Count - 1];
            var Prefix = LastRecord.Prefix;
            var DateFormat = "";
            if (LastRecord.DateFormat != "")
            {
                DateFormat = DateTime.Now.ToString(LastRecord.DateFormat);
            }

            int NumberCount = Convert.ToInt32(LastRecord.NumberCount);
            int random = 0;
            object SqlSequence = null;
            string ExactRandomNumber = "";

            var sequencenumber = new StringBuilder();
            sequencenumber.Append("SELECT NEXT VALUE FOR PurchaseOrderID AS Latestsequence;");
            IList sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber.ToString());
            SqlSequence = (object)((System.Collections.Hashtable)(sequenceNoVal)[0])["Latestsequence"];
            random = Convert.ToInt32(SqlSequence);

            var IncludeZeros = "";
            int TotalZero = (NumberCount - random.ToString().Count());
            if (TotalZero <= 0) { IncludeZeros = ""; } else { IncludeZeros = "0"; }

            var k = 0;

            for (k = 0; k < TotalZero - 1; k++)
            {
                IncludeZeros += '0';
            }

            ExactRandomNumber = IncludeZeros + random;

            //update or insert last po number
            var updatePOQry = new StringBuilder();
            updatePOQry.Append(" DECLARE @count AS INT ");
            updatePOQry.Append(" SET @count=( SELECT COUNT(*) FROM MM_CurrentPONumberHistory) ");
            updatePOQry.Append(" IF @count > 0 ");
            updatePOQry.Append(" BEGIN ");
            updatePOQry.Append("    UPDATE MM_CurrentPONumberHistory SET LastPO = ? ");
            updatePOQry.Append(" END ");
            updatePOQry.Append(" ELSE ");
            updatePOQry.Append(" BEGIN ");
            updatePOQry.Append("  INSERT INTO MM_CurrentPONumberHistory VALUES ( ?) ");
            updatePOQry.Append(" END ");
            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(updatePOQry.ToString(), Convert.ToString(SqlSequence), Convert.ToString(SqlSequence));

            return Prefix + DateFormat + ExactRandomNumber;
        }

        /// <summary>
        /// Getting All Supplier.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of ISupplier</returns>
        public IList<ISupplier> GetAllSupplier(PlanningManagerProxy proxy)
        {
            try
            {
                IList<ISupplier> objSupplierList = new List<ISupplier>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var supplierDao = tx.PersistenceManager.PlanningRepository.GetAll<SupplierDao>();
                    tx.Commit();
                    foreach (var obj in supplierDao)
                    {
                        Supplier supplierObj = new Supplier();
                        supplierObj.ID = obj.ID;
                        supplierObj.CompanyName = obj.CompanyName;
                        supplierObj.Vat = obj.Vat;
                        objSupplierList.Add(supplierObj);
                    }
                }
                return objSupplierList;
            }
            catch (Exception ex)
            {
                throw null;
            }
        }

        /// <summary>
        /// Delete Workflow Tasks
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID.</param>
        /// <returns>true/false</returns>
        public bool EnableDisableWorkFlow(PlanningManagerProxy proxy, int entityId, bool IsEnableWorkflow)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder deletetasksSb = new StringBuilder();
                    string taskIDQuery = "SELECT pt.ID  FROM PM_Task pt INNER JOIN PM_Entity pe ON pe.ID = pt.ID WHERE pt.EntityId = ? AND pe.TypeID != ?";
                    var taskIDList = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(taskIDQuery, entityId, Convert.ToInt32(EntityTypeList.FundinngRequest)).Cast<Hashtable>().ToList();
                    deletetasksSb.Append(" UPDATE pe  SET pe.[Active] = 0,pe.EnableDisableWorkflow=" + Convert.ToInt32(IsEnableWorkflow) + " FROM PM_Entity pe INNER JOIN PM_Task pt ON pe.ID = pt.ID");
                    deletetasksSb.Append(" AND pt.EntityId = " + entityId + " AND pe.TypeID !=" + Convert.ToInt32(EntityTypeList.FundinngRequest) + "");
                    deletetasksSb.Append(" UPDATE PM_Entity SET EnableDisableWorkflow = " + Convert.ToInt32(IsEnableWorkflow) + " WHERE ID=" + entityId + "");
                    deletetasksSb.Append(" DELETE FROM PM_Task FROM PM_Entity pe WHERE pe.ID = PM_Task.ID AND");
                    deletetasksSb.Append(" PM_Task.EntityId = " + entityId + " AND pe.TypeID !=" + Convert.ToInt32(EntityTypeList.FundinngRequest) + "");
                    foreach (var obj in taskIDList)
                    {
                        deletetasksSb.Append(" DELETE FROM PM_Task_Members WHERE TaskID =" + Convert.ToInt32(obj["ID"]) + "");
                        deletetasksSb.Append(" DELETE FROM PM_Task_Attachments WHERE EntityID =" + Convert.ToInt32(obj["ID"]) + "");
                    }
                    tx.PersistenceManager.PlanningRepository.ExecuteQuery(deletetasksSb.ToString());
                    tx.Commit();
                    return true;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Enable & Disable WorkFlow Status
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID.</param>
        /// <returns>True or False</returns>
        public bool EnableDisableWorkFlowStatus(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var workflowStatus = tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>().Where(
                                          a => a.Id == entityId).Select(a => a.EnableDisableWorkflow).FirstOrDefault();
                    return Convert.ToBoolean(workflowStatus);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// WorkFlow Tasks Count
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID.</param>
        /// <returns>Work Tasks Count</returns>
        public int WorkFlowTaskCount(PlanningManagerProxy proxy, int entityId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var workflowStatuscount = tx.PersistenceManager.PlanningRepository.Query<TaskDao>().Join(
                                              tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>(), tas => tas.ID, bas => bas.Id, (tas, bas) =>
                                              new { tas, bas }).Where(a => a.tas.EntityId == entityId &&
                                              a.bas.Typeid != Convert.ToInt32(EntityTypeList.FundinngRequest)).Count();
                    return Convert.ToInt32(workflowStatuscount);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool ApprovePurchaseOrders(PlanningManagerProxy proxy, int[] POIDArr, int entityID = 0)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    PurchaseOrderDao purchaseorderdao = new PurchaseOrderDao();
                    IList<PurchaseOrderDao> Ipurchaseorder = new List<PurchaseOrderDao>();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    foreach (var val in POIDArr)
                    {
                        prplst = new List<MultiProperty>();
                        purchaseorderdao = new PurchaseOrderDao();
                        prplst.Add(new MultiProperty { propertyName = PurchaseOrderDao.PropertyNames.Id, propertyValue = val });
                        purchaseorderdao = (tx.PersistenceManager.AccessRepository.GetEquals<PurchaseOrderDao>(prplst)).FirstOrDefault();
                        purchaseorderdao.Status = (int)PurchaseOrderStates.Approved;
                        purchaseorderdao.ApproverID = proxy.MarcomManager.User.Id;
                        purchaseorderdao.ApprovedDate = DateTime.Now;
                        Ipurchaseorder.Add(purchaseorderdao);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(Ipurchaseorder);
                    tx.Commit();
                    return true;
                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        public bool SendPurchaseOrders(PlanningManagerProxy proxy, int[] POIDArr, int entityID = 0)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    PurchaseOrderDao purchaseorderdao = new PurchaseOrderDao();
                    IList<PurchaseOrderDao> Ipurchaseorder = new List<PurchaseOrderDao>();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    foreach (var val in POIDArr)
                    {
                        prplst = new List<MultiProperty>();
                        purchaseorderdao = new PurchaseOrderDao();
                        prplst.Add(new MultiProperty { propertyName = PurchaseOrderDao.PropertyNames.Id, propertyValue = val });
                        purchaseorderdao = (tx.PersistenceManager.AccessRepository.GetEquals<PurchaseOrderDao>(prplst)).FirstOrDefault();
                        purchaseorderdao.Status = (int)PurchaseOrderStates.Send;
                        purchaseorderdao.SentDate = DateTime.Now;
                        Ipurchaseorder.Add(purchaseorderdao);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(Ipurchaseorder);
                    tx.Commit();
                    return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }

        }


        public bool RejectPurchaseOrders(PlanningManagerProxy proxy, int[] POIDArr, int entityID = 0)
        {

            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    PurchaseOrderDao purchaseorderdao = new PurchaseOrderDao();
                    IList<PurchaseOrderDao> Ipurchaseorder = new List<PurchaseOrderDao>();
                    IList<FinancialDao> ifindao = new List<FinancialDao>();
                    FinancialDao findao = new FinancialDao();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    foreach (var val in POIDArr)
                    {
                        prplst = new List<MultiProperty>();
                        purchaseorderdao = new PurchaseOrderDao();
                        prplst.Add(new MultiProperty { propertyName = PurchaseOrderDao.PropertyNames.Id, propertyValue = val });
                        purchaseorderdao = (tx.PersistenceManager.AccessRepository.GetEquals<PurchaseOrderDao>(prplst)).FirstOrDefault();
                        purchaseorderdao.Status = (int)PurchaseOrderStates.Rejected;
                        Ipurchaseorder.Add(purchaseorderdao);

                        var purDetail = (from data in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDetailDao>() where data.POID == val select data).ToList();
                        foreach (var item in purDetail)
                        {
                            findao = new FinancialDao();
                            var purObj = (from data in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDao>() where data.Id == val select data).FirstOrDefault();
                            findao = (from res in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where res.Entityid == purObj.EntityID && res.CostCenterid == item.CostCenterID select res).FirstOrDefault();
                            findao.Commited = findao.Commited - item.Amount;
                            ifindao.Add(findao);
                        }
                    }
                    tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(Ipurchaseorder);
                    tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(ifindao);
                    tx.Commit();
                    return true;
                }
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }

        }


        public int CreateNewSupplier(PlanningManagerProxy proxy, IList<ISupplier> listSupplier)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (listSupplier != null)
                    {
                        IList<SupplierDao> iSupplierdao = new List<SupplierDao>();

                        ISupplier isupplierObj = new Supplier();
                        isupplierObj = listSupplier.FirstOrDefault();

                        var allreadyExists = (from item in tx.PersistenceManager.PlanningRepository.Query<SupplierDao>() where item.CompanyName == isupplierObj.CompanyName select item).Count();

                        if (allreadyExists == 0)
                        {

                            SupplierDao supplierdao = new SupplierDao();
                            supplierdao.Address1 = isupplierObj.Address1;
                            supplierdao.Address2 = isupplierObj.Address2;
                            supplierdao.City = isupplierObj.City;
                            supplierdao.CompanyName = isupplierObj.CompanyName;
                            supplierdao.Country = isupplierObj.Country;
                            supplierdao.CustomerNumber = isupplierObj.CustomerNumber;
                            supplierdao.Department = isupplierObj.Department;
                            supplierdao.Email = isupplierObj.Email;
                            supplierdao.Fax = isupplierObj.Fax;
                            supplierdao.Phone = isupplierObj.Phone;
                            supplierdao.State = isupplierObj.State;
                            supplierdao.Vat = isupplierObj.Vat;
                            supplierdao.ZipCode = isupplierObj.ZipCode;

                            iSupplierdao.Add(supplierdao);
                            tx.PersistenceManager.PlanningRepository.Save<SupplierDao>(iSupplierdao);


                            int supllierID = 0;
                            supllierID = iSupplierdao.FirstOrDefault().ID;

                            tx.Commit();

                            return supllierID;
                        }
                        else
                        {
                            return 0;
                        }
                    }

                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }


        }

        public int CreateNewApiSupplier(PlanningManagerProxy proxy, IList<ISupplier> listSupplier)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (listSupplier != null)
                    {
                        IList<SupplierDao> iSupplierdao = new List<SupplierDao>();

                        ISupplier isupplierObj = new Supplier();
                        isupplierObj = listSupplier.FirstOrDefault();
                        int supllierID = 0;

                        iSupplierdao = (from item in tx.PersistenceManager.PlanningRepository.Query<SupplierDao>() where item.CompanyName == isupplierObj.CompanyName select item).ToList();

                        if (iSupplierdao.Count == 0)
                        {

                            SupplierDao supplierdao = new SupplierDao();
                            supplierdao.Address1 = isupplierObj.Address1;
                            supplierdao.Address2 = isupplierObj.Address2;
                            supplierdao.City = isupplierObj.City;
                            supplierdao.CompanyName = isupplierObj.CompanyName;
                            supplierdao.Country = isupplierObj.Country;
                            supplierdao.CustomerNumber = isupplierObj.CustomerNumber;
                            supplierdao.Department = isupplierObj.Department;
                            supplierdao.Email = isupplierObj.Email;
                            supplierdao.Fax = isupplierObj.Fax;
                            supplierdao.Phone = isupplierObj.Phone;
                            supplierdao.State = isupplierObj.State;
                            supplierdao.Vat = isupplierObj.Vat;
                            supplierdao.ZipCode = isupplierObj.ZipCode;
                            iSupplierdao.Add(supplierdao);
                            tx.PersistenceManager.PlanningRepository.Save<SupplierDao>(iSupplierdao);
                            supllierID = iSupplierdao.FirstOrDefault().ID;
                            tx.Commit();
                            return supllierID;
                        }
                        else
                        {
                            tx.Commit();
                            return iSupplierdao.FirstOrDefault().ID;
                        }
                    }

                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }


        }

        public Tuple<IList<IInvoice>, bool> GetAllInvoiceByEntityID(PlanningManagerProxy proxy, int entityid)
        {
            IList<IInvoice> iinvoice = new List<IInvoice>();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<InvoiceDao> iidao = new List<InvoiceDao>();
                    iidao = (from item in tx.PersistenceManager.UserRepository.Query<InvoiceDao>()
                             where item.Entityid == entityid
                             select item).ToList<InvoiceDao>();
                    IList<EntityRoleUserDao> entityDao = new List<EntityRoleUserDao>();
                    var entObj = (from data in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where data.Id == entityid select data).FirstOrDefault();
                    if (entObj.Level == 1)
                        entityDao = (from data in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where data.Entityid == entityid select data).ToList();
                    else
                        entityDao = (from data in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where data.Entityid == entityid select data).ToList();

                    int[] userArray = { proxy.MarcomManager.User.Id };
                    int[] approveSendRoles = { 1, 2 };

                    string newmemberCount = "SELECT Count(1) as MemberCount FROM PM_Entity pe INNER JOIN AM_Entity_Role_User aeru ON aeru.EntityID = pe.ID INNER JOIN AM_EntityTypeRoleAcl aetra ON aetra.id = aeru.RoleID WHERE pe.ID = ? AND   aeru.UserID = ? AND aetra.EntityRoleID IN(1,2)";
                    IList MemberCountVal = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(newmemberCount, entityid, proxy.MarcomManager.User.Id);
                    int MemeberCount = (int)((System.Collections.Hashtable)(MemberCountVal)[0])["MemberCount"];

                    bool isMemberApprove = MemeberCount > 0 ? true : false;


                    foreach (var val in iidao)
                    {
                        IInvoice _iINV = new Invoice();
                        _iINV.PONumber = val.PoNumber != null ? val.PoNumber : "";
                        _iINV.POID = val.POID != null ? val.POID : "";
                        _iINV.InvoiceNumber = val.InvoiceNumber != null ? val.InvoiceNumber : "";
                        _iINV.Id = val.Id;
                        _iINV.PaymentDate = val.PaymentDate;
                        _iINV.SupplierID = val.SupplierID;
                        var suppliername = (from data in tx.PersistenceManager.PlanningRepository.Query<SupplierDao>() where data.ID == val.SupplierID select data).FirstOrDefault();
                        _iINV.SupplierName = suppliername.CompanyName != null ? suppliername.CompanyName : "";
                        _iINV.UserID = val.UserID;
                        _iINV.CreateDate = val.CreateDate;
                        _iINV.Description = val.Description != null ? val.Description : "";
                        _iINV.Entityid = val.Entityid;
                        var purchaseOrderDetaildao = (from data in tx.PersistenceManager.PlanningRepository.Query<InvoiceDetailDao>() where data.InvoiceID == val.Id select data).ToList();
                        if (purchaseOrderDetaildao == null)
                        {
                            _iINV.amount = 0;
                            _iINV.CostCenterID = 0;
                        }
                        else
                        {
                            _iINV.amount = purchaseOrderDetaildao.Sum(a => a.Amount);
                            _iINV.CostCenterID = purchaseOrderDetaildao.FirstOrDefault().CostCenterID;
                        }
                        _iINV.currencytype = purchaseOrderDetaildao.FirstOrDefault().CurrencyType;
                        var currencyDao = (from data in tx.PersistenceManager.PlanningRepository.Query<CurrencyTypeDao>() where data.Id == purchaseOrderDetaildao.FirstOrDefault().CurrencyType select data).FirstOrDefault();
                        _iINV.currencytypeName = currencyDao.Name;
                        _iINV.strCreatedDate = val.CreateDate == null ? "-" : Convert.ToDateTime(val.CreateDate).ToString("yyyy-MM-dd");
                        _iINV.strPaymentDate = val.PaymentDate == null ? "-" : Convert.ToDateTime(val.PaymentDate).ToString("yyyy-MM-dd");
                        _iINV.strAmount = GetCurrency((int)_iINV.amount);
                        _iINV.isApproveSendAuthority = isMemberApprove;
                        try
                        {
                            _iINV.DynamciData = FinancialTransactionMetadataValues(proxy, val.Id, val.Entityid, purchaseOrderDetaildao.First().CostCenterID, (int)FinancialMetadaTypes.Spent);

                        }
                        catch
                        {

                        }
                        iinvoice.Add(_iINV);
                    }
                    Tuple<IList<IInvoice>, bool> listObj = Tuple.Create(iinvoice, isMemberApprove);
                    return listObj;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        public IList<IPurchaseOrder> GetAllSentPurchaseOrdersByEntityID(PlanningManagerProxy proxy, int entityid)
        {
            IList<IPurchaseOrder> iPurOrder = new List<IPurchaseOrder>();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<PurchaseOrderDao> ipdao = new List<PurchaseOrderDao>();
                    int[] AllowedStates = { 3, 4 };
                    ipdao = (from item in tx.PersistenceManager.UserRepository.Query<PurchaseOrderDao>()
                             where item.EntityID == entityid && AllowedStates.Contains(item.Status)
                             select item).ToList<PurchaseOrderDao>();
                    IList<EntityRoleUserDao> entityDao = new List<EntityRoleUserDao>();
                    var entObj = (from data in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where data.Id == entityid select data).FirstOrDefault();
                    if (entObj.Level == 1)
                        entityDao = (from data in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where data.Entityid == entityid select data).ToList();
                    else
                        entityDao = (from data in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>() where data.Entityid == entityid select data).ToList();

                    int[] userArray = { proxy.MarcomManager.User.Id };
                    int[] approveSendRoles = { 1, 2 };

                    var IsMemberEditorArr = entityDao.Where(a => userArray.Contains(a.Userid) && approveSendRoles.Contains(a.Roleid)).Select(a => a).ToList();
                    bool isMemberApprove = IsMemberEditorArr.Count() > 0 ? true : false;


                    IPurchaseOrder _iPO = new PurchaseOrder();
                    _iPO.PONumber = "*";
                    _iPO.Id = 0;
                    iPurOrder.Add(_iPO);
                    foreach (var val in ipdao)
                    {
                        _iPO = new PurchaseOrder();
                        _iPO.PONumber = val.PONumber;
                        _iPO.Id = val.Id;
                        _iPO.SentDate = val.SentDate;
                        _iPO.Status = val.Status;
                        _iPO.strStatusName = Enum.GetName(typeof(PurchaseOrderStates), val.Status);
                        _iPO.SupplierID = val.SupplierID;
                        var suppliername = (from data in tx.PersistenceManager.PlanningRepository.Query<SupplierDao>() where data.ID == val.SupplierID select data).FirstOrDefault();
                        _iPO.SupplierName = suppliername.CompanyName;
                        var RequesterName = (from data in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where data.Id == val.UserID select data).FirstOrDefault();
                        _iPO.RequesterName = RequesterName.FirstName + " " + RequesterName.LastName;
                        _iPO.UserID = val.UserID;
                        _iPO.strAppprovalDate = val.ApprovedDate == null ? "-" : Convert.ToDateTime(val.ApprovedDate).ToString("yyyy-MM-dd");
                        _iPO.ApprovedDate = val.ApprovedDate == null ? null : val.ApprovedDate;
                        _iPO.ApproverID = val.ApproverID == null ? 0 : val.ApproverID;
                        _iPO.ApproverName = "-";
                        if (val.ApproverID != null)
                        {
                            var approverUserName = (from data in tx.PersistenceManager.PlanningRepository.Query<UserDao>() where data.Id == val.ApproverID select data).FirstOrDefault();
                            _iPO.ApproverName = approverUserName.FirstName + " " + approverUserName.LastName;
                        }
                        _iPO.CreateDate = val.CreatedDate;
                        _iPO.Description = val.Description;
                        _iPO.Entityid = val.EntityID;
                        _iPO.ExpectedSpentDate = val.ExpectedSpentDate;
                        var purchaseOrderDetaildao = (from data in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDetailDao>() where data.POID == val.Id select data).ToList();
                        _iPO.purchaseOrderDetail = purchaseOrderDetaildao;
                        _iPO.amount = purchaseOrderDetaildao.Sum(a => a.Amount);
                        _iPO.currencytype = purchaseOrderDetaildao.FirstOrDefault().CurrencyType;
                        var currencyDao = (from data in tx.PersistenceManager.PlanningRepository.Query<CurrencyTypeDao>() where data.Id == purchaseOrderDetaildao.FirstOrDefault().CurrencyType select data).FirstOrDefault();
                        _iPO.currencytypeName = currencyDao.Name;
                        _iPO.strSendDate = val.SentDate == null ? "-" : Convert.ToDateTime(val.SentDate).ToString("yyyy-MM-dd");
                        _iPO.strCreatedDate = val.CreatedDate == null ? "-" : Convert.ToDateTime(val.CreatedDate).ToString("yyyy-MM-dd");
                        _iPO.strAmount = GetCurrency((int)_iPO.amount);
                        _iPO.isApproveSendAuthority = isMemberApprove;
                        iPurOrder.Add(_iPO);
                    }
                    return iPurOrder;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }


        public int CreateNewInvoice(PlanningManagerProxy proxy, IList<IInvoice> listpurchaseOrder, IList<IInvoiceDetail> POdetailList, IList<IAttributeData> entityattributedata)
        {

            try
            {
                if (listpurchaseOrder != null)
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(listpurchaseOrder.FirstOrDefault().Entityid, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (listpurchaseOrder != null)
                    {
                        IList<InvoiceDao> iInvoiceOrd = new List<InvoiceDao>();
                        IList<InvoiceDetailDao> ipurchaseOrdDet = new List<InvoiceDetailDao>();

                        IInvoice ipurObj = new Invoice();
                        ipurObj = listpurchaseOrder.FirstOrDefault();

                        var invoiceExists = (from item in tx.PersistenceManager.PlanningRepository.Query<InvoiceDao>() where item.InvoiceNumber == ipurObj.InvoiceNumber select item).ToList();

                        if (invoiceExists.Count == 0)
                        {
                            InvoiceDao invoivedao = new InvoiceDao();
                            invoivedao.CreateDate = ipurObj.CreateDate;
                            invoivedao.Description = ipurObj.Description;
                            invoivedao.Entityid = ipurObj.Entityid;
                            invoivedao.PaymentDate = DateTime.Now;
                            invoivedao.SupplierID = ipurObj.SupplierID;
                            invoivedao.UserID = ipurObj.UserID;
                            invoivedao.PoNumber = ipurObj.PONumber;
                            invoivedao.POID = ipurObj.POID;
                            invoivedao.InvoiceNumber = ipurObj.InvoiceNumber;
                            invoivedao.IsExternal = false;
                            invoivedao.InvoiceCopy = new byte[] { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };


                            iInvoiceOrd.Add(invoivedao);
                            tx.PersistenceManager.PlanningRepository.Save<InvoiceDao>(iInvoiceOrd);


                            IList<PurchaseOrderDao> ipurchaseOrd = new List<PurchaseOrderDao>();
                            PurchaseOrderDao purDao = new PurchaseOrderDao();
                            purDao = (from item in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDao>() where item.Id == Convert.ToInt32(ipurObj.PONumber) select item).FirstOrDefault();
                            purDao.Status = (int)PurchaseOrderStates.Invoiced;
                            ipurchaseOrd.Add(purDao);
                            tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(ipurchaseOrd);

                            if (POdetailList != null)
                            {
                                InvoiceDetailDao purchaseOrdDetdao = new InvoiceDetailDao();
                                foreach (var a in POdetailList)
                                {
                                    purchaseOrdDetdao = new InvoiceDetailDao();
                                    purchaseOrdDetdao.CostCenterID = a.CostCentreID;
                                    purchaseOrdDetdao.InvoiceID = iInvoiceOrd.FirstOrDefault().Id;
                                    purchaseOrdDetdao.Amount = a.Amount;
                                    purchaseOrdDetdao.CurrencyType = a.CurrencyType;
                                    ipurchaseOrdDet.Add(purchaseOrdDetdao);
                                }
                                tx.PersistenceManager.PlanningRepository.Save<InvoiceDetailDao>(ipurchaseOrdDet);
                            }

                            if (entityattributedata != null)
                            {
                                var result = InsertFinancialEntityAttributes(tx, entityattributedata, iInvoiceOrd.FirstOrDefault().Id, (int)FinancialMetadaTypes.Spent);
                            }
                            else
                            {
                                //for funding costcenter dynamic table
                                IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                                DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                                foreach (var val in ipurchaseOrd)
                                {
                                    dynamicdao = new DynamicAttributesDao();
                                    dynamicdao.Id = iInvoiceOrd.FirstOrDefault().Id;
                                    idynObj.Add(dynamicdao);

                                }
                                if (idynObj.Count > 0)
                                    tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("SpentRecords", idynObj);
                            }

                            tx.Commit();
                            return ipurchaseOrd.FirstOrDefault().Id;
                        }
                        else
                        {
                            return 0;
                        }


                    }

                }
                return 0;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }


        }


        public int CreateInvoiceAndPurchaseOrder(PlanningManagerProxy proxy, IList<IInvoice> listInVoiceList, IList<IInvoiceDetail> InvoicedetailList, IList<IPurchaseOrder> listpurchaseOrder, IList<IPurchaseOrderDetail> POdetailList)
        {

            try
            {
                if (listpurchaseOrder != null)
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(listInVoiceList.FirstOrDefault().Entityid, Modules.Planning);

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (listpurchaseOrder != null)
                    {
                        IList<InvoiceDao> ipurchaseOrd = new List<InvoiceDao>();
                        IList<InvoiceDetailDao> ipurchaseOrdDet = new List<InvoiceDetailDao>();
                        IInvoice ipurObj = new Invoice();
                        ipurObj = listInVoiceList.FirstOrDefault();


                        var invoiceExists = (from item in tx.PersistenceManager.PlanningRepository.Query<InvoiceDao>() where item.InvoiceNumber == ipurObj.InvoiceNumber select item).ToList();

                        if (invoiceExists.Count == 0)
                        {


                            //Tuple<int, string> newPurchaseOrder = GetPurchaseOrder(proxy, tx, listpurchaseOrder, POdetailList);

                            //var purchaseordernumber = (from item in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDao>() where item.Id == newPurchaseOrderid select item).FirstOrDefault();

                            //if (newPurchaseOrder.Item1 > 0)
                            //{
                            InvoiceDao purchaseOrddao = new InvoiceDao();
                            purchaseOrddao.CreateDate = ipurObj.CreateDate;
                            purchaseOrddao.Description = ipurObj.Description;
                            purchaseOrddao.Entityid = ipurObj.Entityid;
                            purchaseOrddao.PaymentDate = DateTime.Now;
                            purchaseOrddao.SupplierID = ipurObj.SupplierID;
                            purchaseOrddao.UserID = ipurObj.UserID;
                            //purchaseOrddao.PoNumber = Convert.ToString(newPurchaseOrder.Item1);
                            purchaseOrddao.PoNumber = "";
                            //purchaseOrddao.POID = newPurchaseOrder.Item2;
                            purchaseOrddao.POID = "";
                            purchaseOrddao.InvoiceNumber = ipurObj.InvoiceNumber;
                            purchaseOrddao.IsExternal = ipurObj.IsExternal;
                            purchaseOrddao.InvoiceCopy = new byte[] { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };


                            ipurchaseOrd.Add(purchaseOrddao);
                            tx.PersistenceManager.PlanningRepository.Save<InvoiceDao>(ipurchaseOrd);

                            if (POdetailList != null)
                            {
                                InvoiceDetailDao purchaseOrdDetdao = new InvoiceDetailDao();
                                foreach (var a in POdetailList)
                                {
                                    purchaseOrdDetdao = new InvoiceDetailDao();
                                    purchaseOrdDetdao.CostCenterID = a.CostCentreID;
                                    purchaseOrdDetdao.InvoiceID = ipurchaseOrd.FirstOrDefault().Id;
                                    purchaseOrdDetdao.Amount = a.Amount;
                                    purchaseOrdDetdao.CurrencyType = a.CurrencyType;
                                    ipurchaseOrdDet.Add(purchaseOrdDetdao);
                                }
                                tx.PersistenceManager.PlanningRepository.Save<InvoiceDetailDao>(ipurchaseOrdDet);
                            }
                            tx.Commit();
                            return ipurchaseOrd.FirstOrDefault().Id;
                            //}
                            //else
                            //{
                            //    return 0;
                            //}
                        }
                        else
                        {
                            return 0;
                        }
                    }

                }
                return 0;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }


        }

        public int UpdatePurchaseOrder(PlanningManagerProxy proxy, int POID, IList<IPurchaseOrder> listpurchaseOrder, IList<IPurchaseOrderDetail> POdetailList, IList<IAttributeData> entityattributedata)
        {

            try
            {
                if (listpurchaseOrder != null)
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(listpurchaseOrder.FirstOrDefault().Entityid, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (listpurchaseOrder != null)
                    {
                        IList<PurchaseOrderDao> Ipurchaseorder = new List<PurchaseOrderDao>();
                        IList<PurchaseOrderDetailDao> ipurchaseOrdDet = new List<PurchaseOrderDetailDao>();
                        IList<FinancialDao> ifindao = new List<FinancialDao>();
                        FinancialDao findao = new FinancialDao();

                        IPurchaseOrder ipurObj = new PurchaseOrder();
                        ipurObj = listpurchaseOrder.FirstOrDefault();

                        PurchaseOrderDao purchaseOrddao = new PurchaseOrderDao();


                        IList<MultiProperty> prplst = new List<MultiProperty>();
                        prplst = new List<MultiProperty>();
                        purchaseOrddao = new PurchaseOrderDao();
                        prplst.Add(new MultiProperty { propertyName = PurchaseOrderDao.PropertyNames.Id, propertyValue = POID });
                        purchaseOrddao = (tx.PersistenceManager.AccessRepository.GetEquals<PurchaseOrderDao>(prplst)).FirstOrDefault();
                        purchaseOrddao.SupplierID = ipurObj.SupplierID;
                        purchaseOrddao.Description = ipurObj.Description;




                        IList<PurchaseOrderDetailDao> iPODetail = new List<PurchaseOrderDetailDao>();
                        PurchaseOrderDetailDao purchaseOrdDetdao = new PurchaseOrderDetailDao();
                        iPODetail = (from obj in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDetailDao>() where obj.POID == POID select obj).ToList();
                        foreach (var item in iPODetail)
                        {
                            findao = new FinancialDao();
                            var purObj = (from data in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDao>() where data.Id == POID select data).FirstOrDefault();
                            findao = (from res in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where res.Entityid == purObj.EntityID && res.CostCenterid == item.CostCenterID select res).FirstOrDefault();
                            findao.Commited = findao.Commited - item.Amount;
                            ifindao.Add(findao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(ifindao);

                        int status = purchaseOrddao.Status;

                        if (POdetailList != null)
                        {

                            foreach (var a in POdetailList)
                            {
                                purchaseOrdDetdao = new PurchaseOrderDetailDao();
                                purchaseOrdDetdao = (from data in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDetailDao>() where data.Id == a.Id select data).FirstOrDefault();
                                if (purchaseOrdDetdao.Amount != 0)
                                {
                                    if (purchaseOrdDetdao.Amount > a.Amount || purchaseOrdDetdao.Amount < a.Amount)
                                        if (status == (int)PurchaseOrderStates.Approved)
                                        {
                                            status = (int)PurchaseOrderStates.Created;
                                            purchaseOrddao.ApproverID = null;
                                            purchaseOrddao.ApprovedDate = null;
                                            purchaseOrddao.ExpectedSpentDate = null;
                                            purchaseOrddao.SentDate = null;
                                        }
                                }
                                purchaseOrdDetdao.Amount = a.Amount;
                                purchaseOrdDetdao.CurrencyType = a.CurrencyType;
                                ipurchaseOrdDet.Add(purchaseOrdDetdao);
                            }
                            tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDetailDao>(ipurchaseOrdDet);
                        }

                        purchaseOrddao.Status = status;
                        Ipurchaseorder.Add(purchaseOrddao);

                        tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(Ipurchaseorder);

                        if (entityattributedata != null)
                        {
                            var result = InsertFinancialEntityAttributes(tx, entityattributedata, POID, (int)FinancialMetadaTypes.PO);
                        }
                        tx.Commit();
                        return POID;
                    }

                }
                return 0;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }


        }
        public bool PeriodAvailability(PlanningManagerProxy proxy, int EntityID)
        {
            bool ISPeriod = false;
            string xmlPath = string.Empty;
            int tempentitTypeID = 0;
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                if (EntityID != 0)
                {
                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == EntityID
                                     select item).FirstOrDefault();

                    xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    tempentitTypeID = entityObj.Typeid;
                }

                IList<AttributeTypeDao> attribtuetypes = new List<AttributeTypeDao>();
                attribtuetypes = tx.PersistenceManager.MetadataRepository.GetObject<AttributeTypeDao>(xmlPath)
                    .Where(a => a.Id == (int)AttributesList.Period).Select(a => a).ToList();

                IList<AttributeDao> attributes = new List<AttributeDao>();
                attributes = (from attrbs in tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlPath)
                                  .Where(a => a.AttributeTypeID == attribtuetypes.ElementAt(0).Id)
                              select attrbs).ToList<AttributeDao>();

                bool periodcount = false;
                foreach (var item in attributes)
                {
                    if (periodcount == false)
                    {
                        IList<EntityTypeAttributeRelationDao> attribrelation = new List<EntityTypeAttributeRelationDao>();
                        periodcount = Convert.ToBoolean(tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlPath).Where(a => a.EntityTypeID == tempentitTypeID && a.AttributeID == item.Id).Count());
                    }
                }

                return periodcount;
            }

        }

        /// <summary>
        /// Inserting and Objective condition
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="objectiveId">The ObjectiveID</param>
        /// <param name="startDate">The StartDate</param>
        /// <param name="endDate">The EndDate</param>
        /// <param name="dateRule">The DateRule</param>
        /// <returns>True or False</returns>
        public string InsertingObjectiveConditionQuery(ITransaction tx, int objectiveId, string startDate, string endDate, int dateRule)
        {
            try
            {
                var objCondValResult = tx.PersistenceManager.PlanningRepository.Query<ObjectiveCondition>().Join(
                                       tx.PersistenceManager.PlanningRepository.Query<ObjectiveConditionValueDao>(),
                                       obc => obc.Id, obcv => obcv.Conditionid, (obc, obcv) => new { obc, obcv }).Where(a => a.obc.Objectiveid == objectiveId).ToList();
                var attributeResult = tx.PersistenceManager.PlanningRepository.Query<AttributeDao>();
                StringBuilder mandatroyObjQuery = new StringBuilder();
                mandatroyObjQuery.Append("SELECT DISTINCT poc.ID,");
                mandatroyObjQuery.Append(" poc.ObjectiveID,");
                mandatroyObjQuery.Append(" poc.EntityTypeID,");
                mandatroyObjQuery.Append(" poc.AttributeID,");
                mandatroyObjQuery.Append(" poc.ConditionType,");
                mandatroyObjQuery.Append(" ObjectiveValue.[VALUE],");
                mandatroyObjQuery.Append(" poc.SortOrder");
                mandatroyObjQuery.Append(" FROM   PM_ObjectiveCondition poc");
                mandatroyObjQuery.Append(" INNER JOIN (");
                mandatroyObjQuery.Append(" SELECT pocv.ConditionID,");
                mandatroyObjQuery.Append(" STUFF(");
                mandatroyObjQuery.Append(" (");
                mandatroyObjQuery.Append(" SELECT DISTINCT ',' + CAST(pocv2.[Value] AS NVARCHAR(10))");
                mandatroyObjQuery.Append(" FROM   PM_ObjectiveConditionValue pocv2");
                mandatroyObjQuery.Append(" WHERE  pocv2.ConditionID = pocv.ConditionID");

                mandatroyObjQuery.Append(" FOR XML PATH('')");
                mandatroyObjQuery.Append(" ),");
                mandatroyObjQuery.Append(" 1,");
                mandatroyObjQuery.Append("  1,");
                mandatroyObjQuery.Append("  ''");
                mandatroyObjQuery.Append(" ) AS VALUE");
                mandatroyObjQuery.Append(" FROM   PM_ObjectiveConditionValue pocv");
                mandatroyObjQuery.Append(" ) AS ObjectiveValue");
                mandatroyObjQuery.Append(" ON  poc.ID = ObjectiveValue.ConditionID");
                mandatroyObjQuery.Append(" WHERE poc.ObjectiveID = ?");
                mandatroyObjQuery.Append(" ORDER BY poc.SortOrder");
                var mandatoryObjQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(mandatroyObjQuery.ToString(), objectiveId).Cast<Hashtable>().ToList();

                IList<IObjectiveEntitycondition> objconList = new List<IObjectiveEntitycondition>();
                foreach (var mandObj in mandatoryObjQueryResult)
                {
                    ObjectiveEntitycondition condObj = new ObjectiveEntitycondition();
                    condObj.ObjectiveId = Convert.ToInt32(mandObj["ObjectiveID"]);
                    condObj.EntityTypeId = Convert.ToInt32(mandObj["EntityTypeID"]);
                    condObj.AttributeId = Convert.ToInt16(mandObj["AttributeID"]);
                    condObj.ConditionType = Convert.ToInt32(mandObj["ConditionType"]);
                    condObj.AttributeOptions = Convert.ToString(mandObj["VALUE"]);
                    objconList.Add(condObj);
                }


                StringBuilder querySb = new StringBuilder();

                if (dateRule == 1)
                {
                    querySb.Append(" AND t.Startdate >= '" + startDate + "'");
                    querySb.Append(" AND t.EndDate <= '" + endDate + "'");
                }
                if (dateRule == 2)
                {
                    querySb.Append(" AND  t.Startdate <= '" + endDate + "'");
                    querySb.Append(" AND t.EndDate >= '" + startDate + "'");
                }
                querySb.Append(" AND (");

                Boolean BraketStart = false;
                for (int i = 0; i < objconList.Count; i++)
                {
                    int attributeId = Convert.ToInt32(objconList[i].AttributeId);
                    int attributeTypeId = attributeResult.Where(a => a.Id == attributeId).Select(a => a.AttributeTypeID).FirstOrDefault();

                    bool IsAnd = false;
                    if (i > 0)
                    {

                        if (objconList[i].ConditionType == 1)
                        {
                            querySb.AppendLine("     OR");
                            if (objconList.Count - 1 > i)
                            {
                                if (objconList[i + 1].ConditionType == 2)
                                {
                                    querySb.AppendLine("  (");
                                    BraketStart = true;
                                }
                            }

                        }
                        else
                        {
                            querySb.AppendLine(" AND");
                            if (objconList.Count - 1 > i)
                            {
                                if (objconList[i + 1].ConditionType == 1)
                                {
                                    IsAnd = true;
                                }

                            }
                            else
                            {
                                IsAnd = true;
                            }

                        }

                    }
                    else
                    {
                        if (objconList.Count - 1 > i)
                        {
                            if (objconList[i + 1].ConditionType == 2)
                            {
                                querySb.AppendLine(" (");
                                BraketStart = true;
                            }
                        }

                    }

                    querySb.Append(" (SELECT COUNT(1) FROM #TEMP t");
                    querySb.Append(" WHERE t.EntityTypeId = " + objconList[i].EntityTypeId + " ");
                    if (attributeId != 0)
                        querySb.Append(" AND t.AttributeID =" + attributeId + " AND t.AttributeValue IN (" + objconList[i].AttributeOptions + ")");

                    querySb.Append(")>0");

                    if (IsAnd && BraketStart)
                    {
                        querySb.AppendLine(" )");
                        BraketStart = false;
                    }
                }

                querySb.Append("  )");


                return querySb.ToString();
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public IList<IPlanning> GetPlanningTransactionsByEID(PlanningManagerProxy Proxy, JArray jObject)
        {
            try
            {
                using (ITransaction tx = Proxy.MarcomManager.GetTransaction())
                {
                    IList<IPlanning> iPlanList = new List<IPlanning>();
                    IList<PlanningDao> ipdao = new List<PlanningDao>();
                    IPlanning _iPlan = new Marcom.Core.Planning.Planning();
                    IList defDateObj = tx.PersistenceManager.CommonRepository.ExecuteQuery("SELECT top 1 id,SettingName,SettingValue FROM CM_AdditionalSettings order by ID asc");
                    var dateformat = (string)((System.Collections.Hashtable)(defDateObj)[0])["SettingValue"];
                    foreach (var val in jObject)
                    {
                        ipdao = new List<PlanningDao>();
                        ipdao = (from item in tx.PersistenceManager.UserRepository.Query<PlanningDao>()
                                 where item.EntityID == (int)val["EntityID"] && item.CostCentreID == (int)val["CostCenterID"] && item.IsActive == true
                                 select item).OrderBy(a => a.EntityID).ToList<PlanningDao>();

                        foreach (var res in ipdao)
                        {
                            _iPlan = new Marcom.Core.Planning.Planning();
                            _iPlan.CostCentreID = res.CostCentreID;
                            var ccObj = (from data in tx.PersistenceManager.PlanningRepository.Query<BaseEntityDao>() where data.Id == res.CostCentreID select data).FirstOrDefault();
                            _iPlan.CCName = ccObj.Name;
                            _iPlan.EntityID = res.EntityID;
                            _iPlan.CurrencyType = res.CurrencyType;
                            var currencyDao = (from data in tx.PersistenceManager.PlanningRepository.Query<CurrencyTypeDao>() where data.Id == res.CurrencyType select data).FirstOrDefault();
                            _iPlan.currencytypeName = currencyDao.Name;
                            _iPlan.Description = res.Description;
                            _iPlan.Id = res.Id;
                            _iPlan.PlanAmount = res.PlanAmount;
                            _iPlan.PlanDate = res.PlanDate;
                            _iPlan.strPlanDate = res.PlanDate.ToString("dd-MM-yyyy");
                            _iPlan.strAmount = GetCurrency(res.PlanAmount);
                            _iPlan.UserID = res.UserID;
                            _iPlan.Status = res.Status != null ? res.Status : -1;
                            _iPlan.IsActive = res.IsActive;
                            _iPlan.strStatusName = res.Status != null ? Enum.GetName(typeof(PlanningStates), res.Status) : "";
                            iPlanList.Add(_iPlan);

                        }

                    }
                    return iPlanList;
                }

            }
            catch (Exception)
            {
                return null;
            }
        }

        public bool DeletePlanTransactions(PlanningManagerProxy proxy, JArray planObj, int entityID = 0)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    FinancialDao dao = new FinancialDao();
                    PlanningDao pdao = new PlanningDao();
                    IList<FinancialDao> Ifinancial = new List<FinancialDao>();
                    IList<PlanningDao> Iplan = new List<PlanningDao>();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    foreach (var val in planObj)
                    {
                        prplst = new List<MultiProperty>();
                        dao = new FinancialDao();
                        pdao = new PlanningDao();
                        prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.Entityid, propertyValue = (int)val["EId"] });
                        prplst.Add(new MultiProperty { propertyName = FinancialDao.PropertyNames.CostCenterid, propertyValue = (int)val["CCID"] });
                        dao = (tx.PersistenceManager.AccessRepository.GetEquals<FinancialDao>(prplst)).FirstOrDefault();
                        //new object added to hold old planned amount for news feed no new query run
                        if (dao.Status != 0)
                        {
                            //decimal newDeletedplanAmount = (decimal)val["Amount"] - dao.PlannedAmount;

                            //if (dao.PlannedAmount >= newDeletedplanAmount)
                            //    dao.PlannedAmount = dao.PlannedAmount - newDeletedplanAmount;
                            //else
                            //    dao.PlannedAmount = newDeletedplanAmount - dao.PlannedAmount;

                            dao.PlannedAmount = dao.PlannedAmount - (decimal)val["Amount"];
                        }
                        else
                        {

                            //if (dao.PlannedAmount >= (decimal)val["Amount"])
                            dao.PlannedAmount = dao.PlannedAmount - (decimal)val["Amount"];
                            //else
                            //    dao.PlannedAmount = (decimal)val["Amount"] - dao.PlannedAmount;
                        }
                        Ifinancial.Add(dao);
                        //prplst = new List<MultiProperty>();
                        //prplst.Add(new MultiProperty { propertyName = PlanningDao.PropertyNames.EntityID, propertyValue = (int)val["EId"] });
                        //prplst.Add(new MultiProperty { propertyName = PlanningDao.PropertyNames.CostCentreID, propertyValue = (int)val["CCID"] });
                        pdao = tx.PersistenceManager.PlanningRepository.Query<PlanningDao>().Where(a => a.EntityID == (int)val["EId"] && a.CostCentreID == (int)val["CCID"] && a.Id == (int)val["PlanID"]).Select(a => a).FirstOrDefault();
                        pdao.Status = (int)PlanningStates.Deleted;
                        Iplan.Add(pdao);

                    }
                    tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                    tx.PersistenceManager.PlanningRepository.Save<PlanningDao>(Iplan);
                    tx.Commit();
                    return true;
                }
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public List<IEntityPredefineObjectiveAttributes> GettingPredefineTemplatesForEntityMetadata(PlanningManagerProxy proxy, IList<IAttributeData> attributeData, int entityTypeID, int entityID)
        {
            try
            {
                List<EntityPredefineObjectiveAttributes> entityobjattrlist = new List<EntityPredefineObjectiveAttributes>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (attributeData != null)
                    {
                        foreach (var attrObj in attributeData)
                        {
                            EntityPredefineObjectiveAttributes entityobjattr = new EntityPredefineObjectiveAttributes();
                            entityobjattr.AttributeId = attrObj.ID;
                            entityobjattr.AttributeName = attrObj.Caption;
                            entityobjattr.AttributeTypeId = attrObj.TypeID;
                            entityobjattr.AttributeValues = attrObj.TypeID == (int)AttributesList.DropDownTree ? Convert.ToString(attrObj.Value[0]) : Convert.ToString(attrObj.Value);
                            entityobjattrlist.Add(entityobjattr);
                        }

                    }
                    else
                    {
                        EntityPredefineObjectiveAttributes entityobjattr = new EntityPredefineObjectiveAttributes();
                        entityobjattr.AttributeId = 0;
                        entityobjattr.AttributeName = "";
                        entityobjattr.AttributeTypeId = 0;
                        entityobjattr.AttributeValues = "";
                        entityobjattrlist.Add(entityobjattr);
                    }
                    List<object> objlist = new List<object>();
                    BrandSystems.Marcom.Utility.TranslatetoXml translatexmlObj = new BrandSystems.Marcom.Utility.TranslatetoXml();
                    objlist.Add(translatexmlObj.ObjectToXML(entityobjattrlist).Remove(0, 38));
                    var entityobjectiveresult = GettingEntityPredefineTaskDetails(proxy, tx, objlist, entityTypeID, entityID);
                    return entityobjectiveresult;
                }

            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public List<IEntityPredefineObjectiveAttributes> GettingEntityPredefineTaskDetails(PlanningManagerProxy proxy, ITransaction tx, List<object> xmlData, int entityTypeId, int entityID)
        {
            try
            {
                StringBuilder entityObjQuery = new StringBuilder();

                entityObjQuery.Append(" declare @objCriteria as nvarchar(max) ");

                entityObjQuery.Append(" declare @EntityValue as nvarchar(max)");
                entityObjQuery.Append(" set @EntityValue = 'DECLARE @InputXMLData");
                entityObjQuery.Append(" AS");
                entityObjQuery.Append(" XML=''" + xmlData[0] + "'',");
                entityObjQuery.Append(" @EntityTypeId AS INT =" + entityTypeId + " ");
                entityObjQuery.Append(" DECLARE @StartDate NVARCHAR(10)");
                entityObjQuery.Append(" DECLARE @EndDate NVARCHAR(10)");
                entityObjQuery.Append(" DECLARE @SQLQryStr NVARCHAR(MAX)");
                entityObjQuery.Append(" DECLARE @GenerateScriptObjectiveConditions AS NVARCHAR(MAX)");
                entityObjQuery.Append(" CREATE TABLE #temp");
                entityObjQuery.Append(" (");
                entityObjQuery.Append(" 	EntityTypeId        INT,");
                entityObjQuery.Append(" 	AttributeID         INT,");
                entityObjQuery.Append(" 	AttributeTypeID     INT,");
                entityObjQuery.Append(" 	AttributeValue      NVARCHAR(MAX),");
                entityObjQuery.Append(" 	AttributeName       NVARCHAR(MAX), StartDate Date ,EndDate Date");
                entityObjQuery.Append(" ) ");
                entityObjQuery.Append(" INSERT INTO #temp");
                entityObjQuery.Append("   (");
                entityObjQuery.Append(" EntityTypeId,");
                entityObjQuery.Append("    AttributeID,");
                entityObjQuery.Append("    AttributeTypeID,");
                entityObjQuery.Append("   AttributeValue,");
                entityObjQuery.Append("   AttributeName,StartDate ,EndDate");
                entityObjQuery.Append("  )(");
                entityObjQuery.Append("       SELECT @EntityTypeId,");
                entityObjQuery.Append("             X.EntityAttribute.value(''@AttributeId'', ''INT''),");
                entityObjQuery.Append("            X.EntityAttribute.value(''@AttributeTypeId'', ''INT''),");
                entityObjQuery.Append("           X.EntityAttribute.value(''@AttributeValues'', ''NVARCHAR(MAX)''),");
                entityObjQuery.Append("           X.EntityAttribute.value(''@AttributeName'', ''NVARCHAR(MAX)''), X.EntityAttribute.value(''@StartDate'' ,''DATE'') ,X.EntityAttribute.value(''@EndDate'' ,''Date'')");
                entityObjQuery.Append("    FROM   (");
                entityObjQuery.Append("               SELECT @InputXMLData");
                entityObjQuery.Append("           ) AS T(x)");
                entityObjQuery.Append("          CROSS APPLY x.nodes(");
                entityObjQuery.Append("       ''ArrayOfEntityPredefineObjectiveAttributes/EntityPredefineObjectiveAttributes''");
                entityObjQuery.Append("     ) AS X(EntityAttribute)");
                entityObjQuery.Append("  )'");

                entityObjQuery.Append(" SELECT @objCriteria = REPLACE( ");
                entityObjQuery.Append("           REPLACE( ");
                entityObjQuery.Append("               REPLACE( ");
                entityObjQuery.Append("                   STUFF( ");
                entityObjQuery.Append("                       ( ");
                entityObjQuery.Append("                           SELECT 'UNION ALL ' + 'SELECT TOP 1 ' + CAST(ttt.ID AS NVARCHAR(10)) ");
                entityObjQuery.Append("                                  + 'as TemplateID,  ");
                entityObjQuery.Append("                 ''' + CAST(ISnull(ttt.Caption,'')  AS NVARCHAR(200)) + '''as TemplateName ,''' ");
                entityObjQuery.Append("                                  + CAST(ISnull(ttt.Description,'') AS NVARCHAR(200)) + ");
                entityObjQuery.Append("                                  '''as TemplateDecription  ");
                entityObjQuery.Append("                 FROM #TEMP t WHERE t.AttributeTypeID in(3,4,6,0) and ' + ttt.TempCriteria ");
                entityObjQuery.Append("                           FROM   TM_TaskTemplate AS ttt ");

                entityObjQuery.Append("                           WHERE  ttt.TempCriteria IS NOT NULL ");

                entityObjQuery.Append("                                      FOR XML PATH('') ");
                entityObjQuery.Append("                       ), ");
                entityObjQuery.Append("                       1, ");
                entityObjQuery.Append("                       10, ");
                entityObjQuery.Append("                       '' ");
                entityObjQuery.Append("                   ), ");
                entityObjQuery.Append("                   '&lt;', ");
                entityObjQuery.Append("                   '<' ");
                entityObjQuery.Append("               ), ");
                entityObjQuery.Append("               '&gt;', ");
                entityObjQuery.Append("               '>' ");
                entityObjQuery.Append("           ), ");
                entityObjQuery.Append("           '&#x0D;', ");
                entityObjQuery.Append("           '' ");
                entityObjQuery.Append("       )  ");

                entityObjQuery.Append(" exec(@EntityValue + @objCriteria) ");

                var ObjectiveResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(entityObjQuery.ToString()).Cast<Hashtable>().ToList();
                List<IEntityPredefineObjectiveAttributes> listPredefineObjectives = new List<IEntityPredefineObjectiveAttributes>();
                foreach (var listObj in ObjectiveResult)
                {
                    EntityPredefineObjectiveAttributes entityObj = new EntityPredefineObjectiveAttributes();
                    entityObj.ObjectiveId = Convert.ToInt32(listObj["TemplateID"]);
                    entityObj.ObjectiveName = Convert.ToString(listObj["TemplateName"]);
                    entityObj.ObjectiveDescription = Convert.ToString(listObj["TemplateDecription"]);

                    //entityObj.ObjectiveTypeId = Convert.ToInt32(listObj["ObjectiveTypeID"]);
                    //entityObj.ObjectiveOwner = Convert.ToString(listObj["ObjectiveOwner"]);
                    //entityObj.ObjectiveMandatoryStatus = Convert.ToBoolean(listObj["ObjectiveMandatoryStatus"]);

                    listPredefineObjectives.Add(entityObj);
                }
                InsertAdminTasklistDetailIntoEntitytaskDetail(proxy, tx, listPredefineObjectives, entityID);
                tx.Commit();
                return listPredefineObjectives;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        public void InsertAdminTasklistDetailIntoEntitytaskDetail(PlanningManagerProxy proxy, ITransaction tx, IList<IEntityPredefineObjectiveAttributes> TempLateObj, int entityID)
        {
            try
            {
                StringBuilder parentStateQuery = new StringBuilder();
                StringBuilder newUniqueKey = new StringBuilder();
                newUniqueKey.Append("SELECT ISNULL((SELECT TOP 1 UniqueKey FROM PM_Entity as pe where  pe.ID = ?) + '.'  + CAST(ISNULL(max([EntityID]), 0) + 1 as nvarchar(10)) , ISNULL(max([EntityID]), 0) + 1) as UniqueKey, ISNULL(max([EntityID]), 0) + 1 as EntityID FROM PM_Entity as pe  where  pe.ParentID = ?");
                IList uniqueKeyVal = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(newUniqueKey.ToString(), entityID, entityID);
                string uniqueKey = (string)((System.Collections.Hashtable)(uniqueKeyVal)[0])["UniqueKey"];
                int entityKeyID = (int)((System.Collections.Hashtable)(uniqueKeyVal)[0])["EntityID"];
                int Level = uniqueKey.Count(a => a == '.');
                StringBuilder DynamiCQueryCol = new StringBuilder();

                var EntityAttributeColl = tx.PersistenceManager.PlanningRepository.Query<EntityTypeAttributeRelationDao>().Where(a => a.EntityTypeID == 30 && a.IsSystemDefined == false).Select(a => a.AttributeID);
                foreach (var val in EntityAttributeColl)
                {
                    DynamiCQueryCol.Append(",attr_" + val);
                }

                //DynamiCQueryCol.Remove(DynamiCQueryCol.Length-1,1);

                foreach (var Currenttemplate in TempLateObj)
                {
                    var Tasklist = from tmptsklist in tx.PersistenceManager.PlanningRepository.GetEquals<TempTaskListDao>(TempTaskListDao.PropertyNames.TempID, Currenttemplate.ObjectiveId).ToList()
                                   join tsklist in tx.PersistenceManager.PlanningRepository.Query<TaskListDao>().ToList()
                                   on tmptsklist.TaskListID equals tsklist.ID
                                   orderby tmptsklist.Sortorder ascending
                                   select new { TaskTemp = tmptsklist, taskListColl = tsklist };


                    foreach (var Currenttasklst in Tasklist.ToList())
                    {

                        string newSortOrder = "SELECT COUNT(*)+1 AS SortOrder FROM TM_EntityTaskList  where EntityID =?";
                        IList sortOrderVal = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(newSortOrder, entityID);
                        int sortOrderID = (int)((System.Collections.Hashtable)(sortOrderVal)[0])["SortOrder"];

                        StringBuilder activestepQuery = new StringBuilder();
                        EntityTaskListDao entititasklistdao = new EntityTaskListDao();
                        entititasklistdao.Description = Currenttasklst.taskListColl.Description;
                        entititasklistdao.EntityID = entityID;
                        //entititasklist.ID=;
                        entititasklistdao.Name = Currenttasklst.taskListColl.Caption;
                        entititasklistdao.TaskListID = Currenttasklst.taskListColl.ID;
                        entititasklistdao.Sortorder = Currenttasklst.TaskTemp.Sortorder;
                        tx.PersistenceManager.PlanningRepository.Save<EntityTaskListDao>(entititasklistdao);

                        var adminTaskLists = tx.PersistenceManager.TaskRepository.Query<AdminTaskDao>().Where(a => a.TaskListID == Currenttasklst.taskListColl.ID).OrderBy(a => a.Sortorder);

                        foreach (var Currenttasks in adminTaskLists.ToList())
                        {

                            BaseEntityDao basedao = tx.PersistenceManager.TaskRepository.Query<BaseEntityDao>().Where(a => a.Id == Currenttasks.ID).FirstOrDefault();

                            int TaskentityID = GetBaseEntityID(basedao.Typeid, Currenttasks.Caption, tx, entityID, true, false, false);

                            //tx.PersistenceManager.PlanningRepository.ExecuteQuery("insert into mm_attributerecord_30(Id" + DynamiCQueryCol + ")SELECT " + TaskentityID + " Id" + DynamiCQueryCol + " FROM MM_AttributeRecord_30 mar WHERE id=" + Currenttasks.ID);

                            EntityTaskDao enttaskDao = new EntityTaskDao();
                            enttaskDao.Description = Currenttasks.Description;
                            enttaskDao.Note = "";
                            // enttaskDao.DueDate = null;
                            enttaskDao.EntityID = entityID;
                            enttaskDao.EntityTaskListID = Currenttasks.ID;
                            enttaskDao.DueDate = null;
                            enttaskDao.ID = TaskentityID;
                            enttaskDao.MemberID = 0;
                            enttaskDao.Name = Currenttasks.Caption;
                            enttaskDao.TaskListID = entititasklistdao.ID;
                            enttaskDao.TaskStatus = 0;
                            enttaskDao.TaskType = Currenttasks.TaskType;
                            enttaskDao.Sortorder = Currenttasks.Sortorder;
                            enttaskDao.AssetId = 0;
                            tx.PersistenceManager.PlanningRepository.Save<EntityTaskDao>(enttaskDao);

                            // var getTaskFileDetails = tx.PersistenceManager.TaskRepository.GetEquals<FileDao>(FileDao.PropertyNames.Entityid, Currenttasks.ID);

                            var taskFileCollection = tx.PersistenceManager.TaskRepository.Query<TaskFileDao>().Where(a => a.Entityid == Currenttasks.ID).Select(a => a).ToList();

                            IList<FileDao> ifileDao = new List<FileDao>();
                            foreach (var CurrentFileDetl in taskFileCollection)
                            {
                                FileDao objFile = new FileDao();
                                var AdminActiveFlID = CurrentFileDetl.Id;
                                objFile.Id = 0;
                                objFile.Entityid = TaskentityID;
                                objFile.Checksum = CurrentFileDetl.Checksum;
                                objFile.CreatedOn = CurrentFileDetl.CreatedOn;
                                objFile.Extension = CurrentFileDetl.Extension;
                                objFile.Description = CurrentFileDetl.Description;
                                objFile.CreatedOn = DateTime.Now;
                                objFile.MimeType = CurrentFileDetl.MimeType;
                                objFile.Moduleid = CurrentFileDetl.Moduleid;
                                objFile.Name = CurrentFileDetl.Name;
                                objFile.Ownerid = CurrentFileDetl.Ownerid;
                                objFile.Size = CurrentFileDetl.Size;
                                objFile.VersionNo = CurrentFileDetl.VersionNo;
                                objFile.Description = CurrentFileDetl.Description;
                                string OldFilename = CurrentFileDetl.Fileguid + CurrentFileDetl.Extension;
                                Guid NewGuid = Guid.NewGuid();
                                objFile.Fileguid = NewGuid;
                                string NewFilename = NewGuid + CurrentFileDetl.Extension;
                                string Filepath = Path.Combine(HttpRuntime.AppDomainAppPath);
                                Filepath += "UploadedImages\\";
                                try { System.IO.File.Copy(Filepath + OldFilename, Filepath + NewFilename); }
                                catch
                                {
                                }

                                ifileDao.Add(objFile);

                            }
                            if (ifileDao.Count > 0)
                            {
                                tx.PersistenceManager.TaskRepository.Save<FileDao>(ifileDao);

                                IList<AttachmentsDao> iattdao = new List<AttachmentsDao>();
                                foreach (var file in ifileDao)
                                {
                                    AttachmentsDao Attachdao = new AttachmentsDao();
                                    Attachdao.ActiveFileid = file.Id;
                                    Attachdao.Typeid = 1;
                                    Attachdao.Entityid = file.Entityid;
                                    Attachdao.Name = file.Name;
                                    Attachdao.ActiveVersionNo = file.VersionNo;
                                    Attachdao.Createdon = DateTime.Now;
                                    Attachdao.ActiveFileVersionID = file.Id;
                                    Attachdao.VersioningFileId = file.Id;
                                    iattdao.Add(Attachdao);

                                }
                                tx.PersistenceManager.TaskRepository.Save<AttachmentsDao>(iattdao);
                            }

                            var taskLinkCollection = tx.PersistenceManager.TaskRepository.Query<TaskLinksDao>().Where(a => a.EntityID == Currenttasks.ID).Select(a => a).ToList();

                            IList<LinksDao> iLinkDao = new List<LinksDao>();
                            foreach (var CurrentLinkDetails in taskLinkCollection)
                            {
                                LinksDao objLinks = new LinksDao();
                                var AdminActiveFlID = CurrentLinkDetails.ID;
                                objLinks.ID = 0;
                                objLinks.EntityID = TaskentityID;
                                objLinks.Name = CurrentLinkDetails.Name;
                                objLinks.URL = CurrentLinkDetails.URL;
                                objLinks.ActiveVersionNo = 0;
                                objLinks.Description = CurrentLinkDetails.Description;
                                objLinks.TypeID = CurrentLinkDetails.TypeID;
                                objLinks.CreatedOn = CurrentLinkDetails.CreatedOn;
                                objLinks.OwnerID = CurrentLinkDetails.OwnerID;
                                objLinks.ModuleID = CurrentLinkDetails.ModuleID;
                                Guid NewGuid = Guid.NewGuid();
                                objLinks.LinkGuid = NewGuid;
                                objLinks.Description = CurrentLinkDetails.Description;

                                iLinkDao.Add(objLinks);
                            }

                            if (iLinkDao.Count > 0)
                            {
                                tx.PersistenceManager.TaskRepository.Save<LinksDao>(iLinkDao);
                            }

                            IList<IAttributeData> listAttributes = new List<IAttributeData>();
                            listAttributes = GetGeneralEntityAttributesDetails(proxy, tx, Currenttasks.ID);

                            if (listAttributes != null)
                            {
                                if (listAttributes.Count > 0)
                                {
                                    var result = InsertEntityAttributes(tx, listAttributes, TaskentityID, basedao.Typeid);
                                }
                                else
                                {
                                    tx.PersistenceManager.PlanningRepository.ExecuteQuery("INSERT INTO MM_AttributeRecord_" + basedao.Typeid + "(ID) SELECT " + TaskentityID + "");
                                }
                            }

                            var adminChkList = tx.PersistenceManager.TaskRepository.Query<AdminTaskCheckListDao>().Where(a => a.TaskId == Currenttasks.ID);
                            IList<EntityTaskCheckListDao> entityChkLst = new List<EntityTaskCheckListDao>();
                            foreach (var CurrentAdminChklstitem in adminChkList)
                            {
                                EntityTaskCheckListDao CurrententityChkLst = new EntityTaskCheckListDao();
                                CurrententityChkLst.Name = CurrentAdminChklstitem.NAME;
                                CurrententityChkLst.TaskId = TaskentityID;
                                CurrententityChkLst.SortOrder = CurrentAdminChklstitem.SortOrder;
                                entityChkLst.Add(CurrententityChkLst);
                            }
                            if (entityChkLst.Count > 0)
                                tx.PersistenceManager.TaskRepository.Save<EntityTaskCheckListDao>(entityChkLst);
                        }
                    }
                }
            }
            catch
            {

            }
        }

        public IList<Gantt> getReportData(PlanningManagerProxy proxy, string listIDS)
        {
            IList<Gantt> itsk = new List<Gantt>();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                Gantt gnt = new Gantt();
                var res = tx.PersistenceManager.PlanningRepository.ExecuteQuery("EXEC sp_PM_GanttEntitySelect @ListOfEntityIDs='" + listIDS + "'");
                foreach (var val in res)
                {
                    gnt = new Gantt();
                    gnt.ID = (int)((System.Collections.Hashtable)(val))["Id"];
                    gnt.Level = (int)((System.Collections.Hashtable)(val))["Level"];
                    gnt.Name = (string)((System.Collections.Hashtable)(val))["Name"];
                    gnt.ParentID = (int)((System.Collections.Hashtable)(val))["ParentID"];
                    gnt.ColorCode = (string)((System.Collections.Hashtable)(val))["ColorCode"];
                    gnt.StartEndDate = (string)((System.Collections.Hashtable)(val))["StartEndDate"];
                    gnt.Status = (string)((System.Collections.Hashtable)(val))["Status"];
                    gnt.TotalChildrenCount = (int)((System.Collections.Hashtable)(val))["TotalChildrenCount"];
                    gnt.TypeID = (int)((System.Collections.Hashtable)(val))["TypeID"];
                    gnt.TypeName = (string)((System.Collections.Hashtable)(val))["TypeName"];
                    gnt.StartEndForDate = (string)((System.Collections.Hashtable)(val))["StartEndForDate"];
                    gnt.Owner = (string)((System.Collections.Hashtable)(val))["Owner"];
                    gnt.Budget = (string)((System.Collections.Hashtable)(val))["Budget"];
                    gnt.Country = (string)((System.Collections.Hashtable)(val))["Country"];

                    gnt.EndCustomerSize = (string)((System.Collections.Hashtable)(val))["EndCustomerSize"];
                    gnt.EndCustomerVertical = (string)((System.Collections.Hashtable)(val))["EndCustomerVertical"];
                    gnt.Saleschannel = (string)((System.Collections.Hashtable)(val))["Saleschannel"];
                    gnt.Strategy = (string)((System.Collections.Hashtable)(val))["Strategy"];
                    gnt.Offer = (string)((System.Collections.Hashtable)(val))["Offer"];
                    gnt.Sponsoring = (string)((System.Collections.Hashtable)(val))["Sponsoring"];
                    gnt.Ringi = (string)((System.Collections.Hashtable)(val))["Ringi"];
                    gnt.PlannedBudget = (int)((System.Collections.Hashtable)(val))["PlannedBudget"];
                    gnt.ApprovedAllocations = (int)((System.Collections.Hashtable)(val))["ApprovedAllocations"];
                    gnt.Commited = (int)((System.Collections.Hashtable)(val))["Commited"];
                    gnt.Spent = (int)((System.Collections.Hashtable)(val))["Spent"];
                    itsk.Add(gnt);

                }

                return itsk;
            }
        }


        /// <summary>
        /// Getting All CurrencyTypes.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of ICurrencyType</returns>
        public IList<ICurrencyType> GetAllCurrencyType(PlanningManagerProxy proxy)
        {
            try
            {
                IList<ICurrencyType> objCurrencyList = new List<ICurrencyType>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var currencyDao = tx.PersistenceManager.PlanningRepository.GetAll<CurrencyTypeDao>();
                    tx.Commit();
                    foreach (var obj in currencyDao)
                    {
                        CurrencyType currencyObj = new CurrencyType();
                        currencyObj.Id = obj.Id;
                        currencyObj.Name = obj.Name;
                        currencyObj.ShortName = obj.ShortName;
                        currencyObj.Symbol = obj.Symbol;
                        objCurrencyList.Add(currencyObj);
                    }
                }
                return objCurrencyList;
            }
            catch (Exception ex)
            {
                throw null;
            }
        }


        /// <summary>
        /// Getting All CurrencyTypes in financial forecast settings.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of ICurrencyType</returns>

        public IList<ICurrencyType> GetCurrencyListFFsettings(PlanningManagerProxy proxy)
        {
            try
            {
                IList<ICurrencyType> objCurrencyList = new List<ICurrencyType>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var currencyDao = tx.PersistenceManager.PlanningRepository.GetAll<CurrencyTypeDao>();
                    tx.Commit();
                    foreach (var obj in currencyDao)
                    {
                        CurrencyType currencyObj = new CurrencyType();
                        currencyObj.Id = obj.Id;
                        currencyObj.Name = obj.Name;
                        currencyObj.ShortName = obj.ShortName;
                        currencyObj.Symbol = obj.Symbol;
                        objCurrencyList.Add(currencyObj);
                    }
                }
                return objCurrencyList;
            }
            catch (Exception ex)
            {
                throw null;
            }
        }


        /// <summary>
        /// Adding or updationg Currency type
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="ID">ID</param>
        /// <param name="name"></param>
        /// <param name="shortname"></param>
        /// <param name="symbol"></param>
        /// <returns>bool</returns>


        public bool InsertUpdateCurrencyListFFSettings(PlanningManagerProxy proxy, string name, string shortname, string symbol, int ID = 0)
        {
            try
            {
                CurrencyTypeDao dao = new CurrencyTypeDao();
                dao.Name = name;
                dao.ShortName = shortname;
                dao.Symbol = symbol;

                if (ID != 0)
                {
                    dao.Id = ID;
                }
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.PlanningRepository.Save<CurrencyTypeDao>(dao);
                    tx.Commit();
                }
                return true;
            }
            catch (Exception ex)
            {
                // result.StatusCode = (int)HttpStatusCode.MethodNotAllowed;
                //result.Response = 0;
                return false;
            }
        }


        /// <summary>
        /// Deleting Currency type by id
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">Id</param>
        /// <returns>bool</returns>

        public bool DeleteCurrencyListFFSettings(PlanningManagerProxy proxy, int id)
        {
            try
            {
                CurrencyTypeDao dao = new CurrencyTypeDao();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    dao = tx.PersistenceManager.PlanningRepository.Get<CurrencyTypeDao>(id);
                    tx.Commit();
                }
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.PlanningRepository.Delete<CurrencyTypeDao>(dao);
                    tx.Commit();
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }


        /// <summary>
        /// Getting Divison ids
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>Object</returns>
        public Object getDivisonIds(PlanningManagerProxy proxy)
        {
            dynamic divisionIds = Enum.GetValues(typeof(enumDivisonIds)).Cast<enumDivisonIds>().Select(e => new { DivisionId = e, DivisionName = e.ToString().Replace("_", " ") });
            //dynamic divisionIds = Enum.GetValues(typeof(enumDivisonIds));
            return divisionIds;
        }

        public bool SetDivisonsFFSettings(PlanningManagerProxy proxy, int DivisonId)
        {
            try
            {
                string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
                XDocument adminXmlDoc = XDocument.Load(xmlpath);
                var DefaultLanguage = adminXmlDoc.Descendants("DivisonIds").FirstOrDefault();
                if (DefaultLanguage == null)
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<DivisonIds>" + DivisonId + "</DivisonIds>");
                    XElement.Parse(sb.ToString());
                    adminXmlDoc.Root.Add(XElement.Parse(sb.ToString()));
                    adminXmlDoc.Save(xmlpath);
                }
                else
                {
                    adminXmlDoc.Descendants("DivisonIds").Remove();
                    adminXmlDoc.Save(xmlpath);
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<DivisonIds>" + DivisonId + "</DivisonIds>");
                    XElement.Parse(sb.ToString());
                    adminXmlDoc.Root.Add(XElement.Parse(sb.ToString()));
                    adminXmlDoc.Save(xmlpath);
                }

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder strqry = new StringBuilder();
                    strqry.Append(" UPDATE PM_Financial SET Q1 = 0,Q2 = 0,Q3 = 0,Q4 = 0,M1 = 0,M2 = 0,M3 = 0,M4 = 0,M5 = 0,M6 = 0,M7 = 0,M8 = 0,M9 = 0,M10 = 0,M11 = 0,M12 = 0,H1 = 0,H2 = 0,Y = 0 ");
                    tx.PersistenceManager.PlanningRepository.ExecuteQuery(strqry.ToString());
                    tx.Commit();
                }

                return true;
            }
            catch
            {
                return false;
            }
        }


        /// <summary>
        /// Getting Divison name in financial forecast settings.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>Divison name</returns>

        public string GetDivisonName(PlanningManagerProxy proxy)
        {

            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            XDocument adminXdoc = XDocument.Load(xmlpath);
            var result = adminXdoc.Descendants("DivisonIds").ElementAt(0).Value;
            if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(result.ToString()))
            {
                return "Yearly";
            }
            else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(result.ToString()))
            {
                return "Monthly";
            }
            else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(result.ToString()))
            {
                return "Quaterly";
            }
            else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(result.ToString()))
            {
                return "Half Yearly";
            }
            else
            {
                return "Yearly";
            }
        }


        public int GetCurrentDivisionId(PlanningManagerProxy proxy)
        {
            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            XDocument adminXdoc = XDocument.Load(xmlpath);
            if (adminXdoc.Descendants("DivisonIds").ElementAt(0).Value.Length > 0)
                return Convert.ToInt32(adminXdoc.Descendants("DivisonIds").ElementAt(0).Value);
            else
                return Convert.ToInt32(enumDivisonIds.Yearly);

        }



        public IList<IValdiationWithAttributeRelationData> GetEntityAttributesValidationDetails(PlanningManagerProxy proxy, int entityId, int entityTypeID)
        {

            IList<IValdiationWithAttributeRelationData> attributesValidationWithValues = new List<IValdiationWithAttributeRelationData>();
            ValdiationWithAttributeRelationData attributeValidationdata;
            string xmlpath = string.Empty;

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (entityTypeID == 0)
                    {
                        var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                         where item.Id == entityId
                                         select item).FirstOrDefault();
                        entityTypeID = entityObj.Typeid;
                        xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    }
                    else
                    {
                        int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                        xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    }

                    XDocument docx = XDocument.Load(xmlpath);
                    var entityResult = (from EntityAttrRel in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation")
                                        join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute")
                                        on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value)
                                        equals Convert.ToInt32(Attr.Element("ID").Value)
                                        join Attrval in docx.Root.Elements("Validation_Table").Elements("Validation")
                                        on Convert.ToInt32(EntityAttrRel.Element("ID").Value)
                                        equals Convert.ToInt32(Attrval.Element("RelationShipID").Value)
                                        where Convert.ToInt32(EntityAttrRel.Element("EntityTypeID").Value) == entityTypeID
                                        select new
                                        {
                                            AttributeID = Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value),
                                            RelationShipID = Convert.ToInt32(Attrval.Element("RelationShipID").Value),
                                            Name = Convert.ToString(Attrval.Element("Name").Value),
                                            ValueType = Convert.ToString(Attrval.Element("ValueType").Value),
                                            Value = Convert.ToString(Attrval.Element("Value").Value),
                                            ErrorMessage = Convert.ToString(Attrval.Element("ErrorMessage").Value)
                                        }).ToList();


                    foreach (var itm in entityResult)
                    {
                        attributeValidationdata = new ValdiationWithAttributeRelationData();
                        attributeValidationdata.AttributeID = Convert.ToInt32(itm.AttributeID);
                        attributeValidationdata.RelationShipID = itm.RelationShipID;
                        attributeValidationdata.Name = itm.Name;
                        attributeValidationdata.ValueType = itm.ValueType;
                        attributeValidationdata.Value = itm.Value;
                        attributeValidationdata.ErrorMessage = itm.ErrorMessage;

                        attributesValidationWithValues.Add(attributeValidationdata);
                    }
                }
                return attributesValidationWithValues;
            }
            catch (Exception ex)
            {

            }
            return null;
        }


        /// <summary>
        /// Get the entity status by entity id
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="entityID"></param>
        /// <returns></returns>
        public IEntityStatus GetEntityStatusByEntityID(PlanningManagerProxy proxy, int entityID)
        {

            try
            {
                IList<EntityStatusDao> EntyStatusdao;
                IEntityStatus entitystatusReturn = new EntityStatus();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntyStatusdao = tx.PersistenceManager.CommonRepository.GetEquals<EntityStatusDao>(EntityStatusDao.PropertyNames.EntityID, entityID);


                    entitystatusReturn.ID = Convert.ToInt32(EntyStatusdao[0].ID);
                    entitystatusReturn.Status = Convert.ToInt32(EntyStatusdao[0].StatusID);
                    entitystatusReturn.TimeStatus = Convert.ToInt32(EntyStatusdao[0].IntimeStatus);
                    entitystatusReturn.Comment = Convert.ToString(EntyStatusdao[0].Comment);

                    tx.Commit();
                    return entitystatusReturn;
                }

            }
            catch (Exception ex)
            {
                return null;
                throw ex;
            }
        }

        /// <summary>
        /// Update the Entity status
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="entityID"></param>
        /// <param name="statusID"></param>
        /// <param name="intimeID"></param>
        /// <param name="comment"></param>
        /// <returns></returns>
        public bool UpdateEntityStatus(PlanningManagerProxy proxy, int entityID, int statusID, int intimeID, string comment)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(entityID, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityStatusDao entitystatusval = new EntityStatusDao();
                    entitystatusval = tx.PersistenceManager.CommonRepository.Get<EntityStatusDao>(EntityStatusDao.PropertyNames.EntityID, entityID);

                    entitystatusval.StatusID = statusID;
                    entitystatusval.IntimeStatus = intimeID;
                    entitystatusval.Comment = comment;
                    bool stat = checkcostcenterisupdated(tx, entityID, statusID, intimeID, comment, proxy.MarcomManager.User.Id);
                    tx.PersistenceManager.TaskRepository.Save<EntityStatusDao>(entitystatusval);

                    tx.Commit();
                    return true;
                }
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch
            {
                return false;
            }

        }
        public bool checkcostcenterisupdated(ITransaction tx, int entityID, int statusID, int intimeID, string comment, int userID)
        {
            try
            {
                FeedNotificationServer fs = new FeedNotificationServer();
                NotificationFeedObjects obj = new NotificationFeedObjects();
                obj.EntityId = entityID;
                obj.action = "entity status update";
                obj.Actorid = userID;
                string oldstatus = "";
                string newstatus = "";
                var costcenterdetails = (from tt in tx.PersistenceManager.PlanningRepository.Query<EntityStatusDao>() where tt.EntityID == entityID select tt);
                foreach (var ccdetails in costcenterdetails)
                {
                    if (ccdetails.StatusID != statusID)
                    {
                        oldstatus = (from uu in tx.PersistenceManager.PlanningRepository.Query<EntityTypeStatusOptionsDao>() where uu.ID == ccdetails.StatusID select uu.StatusOptions).FirstOrDefault();
                        obj.FromValue = oldstatus.ToString();
                        newstatus = (from uu in tx.PersistenceManager.PlanningRepository.Query<EntityTypeStatusOptionsDao>() where uu.ID == statusID select uu.StatusOptions).FirstOrDefault();
                        obj.ToValue = newstatus.ToString();
                        obj.AttributeName = "Overall status";
                        fs.AsynchronousNotify(obj);
                    }
                    if (ccdetails.IntimeStatus != intimeID)
                    {
                        oldstatus = ((CostcenterOntimeStatus)ccdetails.IntimeStatus).ToString();
                        obj.FromValue = oldstatus.ToString();
                        newstatus = ((CostcenterOntimeStatus)intimeID).ToString();
                        obj.ToValue = newstatus.ToString();

                        obj.AttributeName = "On time status";
                        fs.AsynchronousNotify(obj);
                    }
                    if (ccdetails.Comment != comment && comment != "-")
                    {
                        obj.FromValue = ccdetails.Comment;
                        obj.ToValue = comment;
                        obj.AttributeName = "On time comment";
                        fs.AsynchronousNotify(obj);
                    }

                }
                return true;
            }
            catch
            {
                return false;
            }

        }


        public bool InsertUpdateGanttEntitySortorder(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder SortorderQry = new StringBuilder();
                    SortorderQry.Append(" DECLARE @UpdateId AS INT =  " + EntityID);
                    SortorderQry.Append(" DECLARE @UniqueKey AS NVARCHAR(MAX) ");

                    SortorderQry.Append(" SELECT @UniqueKey = SUBSTRING(pe.UniqueKey + '.', 0, CHARINDEX('.', pe.UniqueKey + '.')) ");
                    SortorderQry.Append(" FROM   PM_Entity pe ");
                    SortorderQry.Append(" WHERE  pe.ID = @UpdateId ");


                    SortorderQry.Append(" DECLARE @TempTbl TABLE( ");
                    SortorderQry.Append("             ID INT IDENTITY PRIMARY KEY CLUSTERED, ");
                    SortorderQry.Append("             EntityID INT NOT NULL ");
                    SortorderQry.Append("         ) ");

                    SortorderQry.Append(" INSERT INTO @TempTbl ");
                    SortorderQry.Append("   ( ");
                    SortorderQry.Append("     EntityID ");
                    SortorderQry.Append("   ) ");
                    SortorderQry.Append(" SELECT pe.ID ");
                    SortorderQry.Append(" FROM   PM_Entity pe ");
                    SortorderQry.Append("        INNER JOIN MM_EntityType met ");
                    SortorderQry.Append("             ON  met.ID = pe.TypeID ");
                    SortorderQry.Append(" WHERE  pe.Active = 1 ");
                    SortorderQry.Append("        AND met.IsAssociate = 0 ");
                    SortorderQry.Append("        AND pe.UniqueKey LIKE @UniqueKey + '%' ");
                    SortorderQry.Append("         ");
                    SortorderQry.Append("        ");
                    SortorderQry.Append(" DELETE  ");
                    SortorderQry.Append(" FROM   PM_Entity_Sort ");
                    SortorderQry.Append(" WHERE  id IN (SELECT tt.EntityID ");
                    SortorderQry.Append("               FROM   @TempTbl tt) ");
                    SortorderQry.Append("         ");
                    SortorderQry.Append(" DECLARE @ID AS INT = 1 ");
                    SortorderQry.Append(" DECLARE @TotalID AS INT  ");

                    SortorderQry.Append(" SELECT @TotalID = COUNT(1) ");
                    SortorderQry.Append(" FROM   @TempTbl ");

                    SortorderQry.Append(" WHILE @ID <= @TotalID ");
                    SortorderQry.Append(" BEGIN ");
                    SortorderQry.Append("     DECLARE @Key AS NVARCHAR(MAX) ");
                    SortorderQry.Append("     DECLARE @EntityID AS INT ");
                    SortorderQry.Append("      ");
                    SortorderQry.Append("     SELECT @Key = UniqueKey, ");
                    SortorderQry.Append("            @EntityID         = ID ");
                    SortorderQry.Append("     FROM   PM_Entity ");
                    SortorderQry.Append("     WHERE  ID                = ( ");
                    SortorderQry.Append("                SELECT TOP 1 EntityID ");
                    SortorderQry.Append("                FROM   @TempTbl ");
                    SortorderQry.Append("                WHERE  ID     = @ID ");
                    SortorderQry.Append("            )   ");
                    SortorderQry.Append("      ");
                    SortorderQry.Append("     INSERT INTO PM_Entity_Sort ");
                    SortorderQry.Append("     SELECT @EntityID, ");
                    SortorderQry.Append("            L1, ");
                    SortorderQry.Append("            S1, ");
                    SortorderQry.Append("            L2, ");
                    SortorderQry.Append("            S2, ");
                    SortorderQry.Append("            L3, ");
                    SortorderQry.Append("            S3, ");
                    SortorderQry.Append("            L4, ");
                    SortorderQry.Append("            S4, ");
                    SortorderQry.Append("            L5, ");
                    SortorderQry.Append("            S5, ");
                    SortorderQry.Append("            L6, ");
                    SortorderQry.Append("            S6, ");
                    SortorderQry.Append("            L7, ");
                    SortorderQry.Append("            S7, ");
                    SortorderQry.Append("            L8, ");
                    SortorderQry.Append("            S8, ");
                    SortorderQry.Append("            L9, ");
                    SortorderQry.Append("            S9, ");
                    SortorderQry.Append("            L10, ");
                    SortorderQry.Append("            S10 ");
                    SortorderQry.Append("     FROM   dbo.tf_GetDateAndID(@Key, '.') ");
                    SortorderQry.Append("      ");
                    SortorderQry.Append("      ");
                    SortorderQry.Append("     SET @ID = @ID + 1 ");
                    SortorderQry.Append(" END ");
                    tx.PersistenceManager.PlanningRepository.ExecuteQuery(SortorderQry.ToString());
                    tx.Commit();
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Entity is saved or updated  in PM_Entity_Sort with entityid : " + EntityID, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    return true;
                }
            }
            catch (Exception ex)
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogError("Entity is not saved or updated in PM_Entity_Sort with follwing error  : " + EntityID, ex);

            }

            return false;
        }


        public bool InserIntoEntitySortorder(ITransaction tx, int EntityID)
        {
            try
            {

                StringBuilder SortorderQry = new StringBuilder();
                SortorderQry.Append(" DECLARE @UpdateId AS INT =  " + EntityID);
                SortorderQry.Append(" DECLARE @UniqueKey AS NVARCHAR(MAX) ");

                SortorderQry.Append(" SELECT @UniqueKey = SUBSTRING(pe.UniqueKey + '.', 0, CHARINDEX('.', pe.UniqueKey + '.')) ");
                SortorderQry.Append(" FROM   PM_Entity pe ");
                SortorderQry.Append(" WHERE  pe.ID = @UpdateId ");


                SortorderQry.Append(" DECLARE @TempTbl TABLE( ");
                SortorderQry.Append("             ID INT IDENTITY PRIMARY KEY CLUSTERED, ");
                SortorderQry.Append("             EntityID INT NOT NULL ");
                SortorderQry.Append("         ) ");

                SortorderQry.Append(" INSERT INTO @TempTbl ");
                SortorderQry.Append("   ( ");
                SortorderQry.Append("     EntityID ");
                SortorderQry.Append("   ) ");
                SortorderQry.Append(" SELECT pe.ID ");
                SortorderQry.Append(" FROM   PM_Entity pe ");
                SortorderQry.Append("        INNER JOIN MM_EntityType met ");
                SortorderQry.Append("             ON  met.ID = pe.TypeID ");
                SortorderQry.Append(" WHERE  pe.Active = 1 ");
                SortorderQry.Append("        AND met.IsAssociate = 0 ");
                SortorderQry.Append("        AND pe.UniqueKey LIKE @UniqueKey + '%' ");
                SortorderQry.Append("         ");
                SortorderQry.Append("        ");
                SortorderQry.Append(" DELETE  ");
                SortorderQry.Append(" FROM   PM_Entity_Sort ");
                SortorderQry.Append(" WHERE  id IN (SELECT tt.EntityID ");
                SortorderQry.Append("               FROM   @TempTbl tt) ");
                SortorderQry.Append("         ");
                SortorderQry.Append(" DECLARE @ID AS INT = 1 ");
                SortorderQry.Append(" DECLARE @TotalID AS INT  ");

                SortorderQry.Append(" SELECT @TotalID = COUNT(1) ");
                SortorderQry.Append(" FROM   @TempTbl ");

                SortorderQry.Append(" WHILE @ID <= @TotalID ");
                SortorderQry.Append(" BEGIN ");
                SortorderQry.Append("     DECLARE @Key AS NVARCHAR(MAX) ");
                SortorderQry.Append("     DECLARE @EntityID AS INT ");
                SortorderQry.Append("      ");
                SortorderQry.Append("     SELECT @Key = UniqueKey, ");
                SortorderQry.Append("            @EntityID         = ID ");
                SortorderQry.Append("     FROM   PM_Entity ");
                SortorderQry.Append("     WHERE  ID                = ( ");
                SortorderQry.Append("                SELECT TOP 1 EntityID ");
                SortorderQry.Append("                FROM   @TempTbl ");
                SortorderQry.Append("                WHERE  ID     = @ID ");
                SortorderQry.Append("            )   ");
                SortorderQry.Append("      ");
                SortorderQry.Append("     INSERT INTO PM_Entity_Sort ");
                SortorderQry.Append("     SELECT @EntityID, ");
                SortorderQry.Append("            L1, ");
                SortorderQry.Append("            S1, ");
                SortorderQry.Append("            L2, ");
                SortorderQry.Append("            S2, ");
                SortorderQry.Append("            L3, ");
                SortorderQry.Append("            S3, ");
                SortorderQry.Append("            L4, ");
                SortorderQry.Append("            S4, ");
                SortorderQry.Append("            L5, ");
                SortorderQry.Append("            S5, ");
                SortorderQry.Append("            L6, ");
                SortorderQry.Append("            S6, ");
                SortorderQry.Append("            L7, ");
                SortorderQry.Append("            S7, ");
                SortorderQry.Append("            L8, ");
                SortorderQry.Append("            S8, ");
                SortorderQry.Append("            L9, ");
                SortorderQry.Append("            S9, ");
                SortorderQry.Append("            L10, ");
                SortorderQry.Append("            S10 ");
                SortorderQry.Append("     FROM   dbo.tf_GetDateAndID(@Key, '.') ");
                SortorderQry.Append("      ");
                SortorderQry.Append("      ");
                SortorderQry.Append("     SET @ID = @ID + 1 ");
                SortorderQry.Append(" END ");
                tx.PersistenceManager.PlanningRepository.ExecuteQuery(SortorderQry.ToString());
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Entity is saved or updated  in PM_Entity_Sort with entityid : " + EntityID, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                return true;

            }
            catch (Exception ex)
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogError("Entity is not saved or updated in PM_Entity_Sort with follwing error  : " + EntityID, ex);

            }

            return false;
        }

        public bool DeleteEntitySortOrder(ITransaction tx, int EntityID)
        {
            try
            {
                tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam("delete from  PM_Entity_Sort where id=?", EntityID);
                return true;
            }
            catch
            {

            }
            return false;
        }

        public bool CheckForMemberAvailabilityForEntity(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                return true;
                //using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                //{
                //    var GlobalEditor = (from editor in tx.PersistenceManager.AccessRepository.GetAll<GlobalRoleUserDao>() where editor.Userid == proxy.MarcomManager.User.Id && (editor.GlobalRoleId == 1) select editor).ToList();
                //    var availability = (from member in tx.PersistenceManager.PlanningRepository.GetAll<EntityRoleUserDao>() where member.Entityid == EntityID && member.Userid == proxy.MarcomManager.User.Id && (member.Roleid == 1 || member.Roleid == 2) select member).ToList();

                //    if (GlobalEditor.Count() == 0 && availability.Count() == 0)
                //    {
                //        return false;
                //    }
                //    else if (GlobalEditor.Count() == 0 || availability.Count() == 1)
                //    {
                //        return true;
                //    }
                //    else if (GlobalEditor.Count() == 1 || availability.Count() == 0)
                //    {
                //        return true;
                //    }
                //    else
                //        return true;
                //}
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch
            {
                return false;
            }
        }
        public int CreateAttributeGroupRecord(PlanningManagerProxy proxy, int AttributeGroupRecordID, int EntityID, int typeId, int AttrGroupID, Boolean isLock, string name, int SortOrder, IList<IAttributeData> entityattributedata)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                FeedNotificationServer fs = new FeedNotificationServer();
                AttrGroupDynamicAttributesDao dynamicdao = new AttrGroupDynamicAttributesDao();
                bool IsNewRecord = false;
                var ownervalue = entityattributedata.Where(a => a.ID == (int)SystemDefinedAttributes.Owner).Select(a => a).FirstOrDefault();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == EntityID
                                     select item).FirstOrDefault();
                    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    IList<EntityTypeAttributeGroupRelationDao> entitygroupdao = new List<EntityTypeAttributeGroupRelationDao>();
                    entitygroupdao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(xmlpath);
                    var entityattribtuegroup = entitygroupdao.Where(a => a.ID == AttrGroupID);
                    int GroupID = entityattribtuegroup.ElementAt(0).AttributeGroupID;
                    typeId = entityattribtuegroup.ElementAt(0).EntityTypeID;
                    dynamicdao.EntityId = EntityID;
                    dynamicdao.SortOrder = SortOrder + 1;
                    dynamicdao.Id = AttributeGroupRecordID;
                    string entityName = "AttributeGroup" + GroupID + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    if (AttributeGroupRecordID == 0)
                    {
                        IsNewRecord = true;
                        string updSortOrder = "Update MM_AttributeGroup_" + GroupID + " set SortOrder = isnull(SortOrder,0)+1 where SortOrder > " + SortOrder;
                        tx.PersistenceManager.PlanningRepository.ExecuteQuery(updSortOrder);
                        tx.PersistenceManager.PlanningRepository.SaveByentity<AttrGroupDynamicAttributesDao>(entityName, dynamicdao);
                    }
                    if (entityattributedata != null)
                    {
                        var oldAttributeVals = proxy.MarcomManager.MetadataManager.GetAttributeGroupAttributeOptions(AttrGroupID, EntityID, AttributeGroupRecordID);
                        var result = InsertEntityAttributeGroups(tx, entityattributedata, dynamicdao.Id, typeId, GroupID, IsNewRecord);
                        //neews  feed code starts here 
                        var attributeGrpRecordName = (from item in entityattributedata where item.ID == 76 select item.Value).FirstOrDefault();

                        if (IsNewRecord == false) // when updating values of existing attribute group
                        {


                            NotificationFeedObjects objUpdate = new NotificationFeedObjects();
                            objUpdate.Actorid = proxy.MarcomManager.User.Id;
                            objUpdate.action = "update attribute group";
                            objUpdate.EntityId = EntityID;
                            objUpdate.AttributeRecordName = attributeGrpRecordName;
                            objUpdate.attrgrprel = oldAttributeVals;
                            objUpdate.attrdata = entityattributedata;
                            objUpdate.TypeName = name;

                            fs.AsynchronousNotify(objUpdate);

                            System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => UpdateEntityforSearchAsync(proxy, EntityID, dynamicdao.Id, entityObj.Name, attributeGrpRecordName, GroupID));
                            taskforaddentityforsearch.Start();


                        }
                        else      //when adding attribute   group
                        {
                            NotificationFeedObjects obj = new NotificationFeedObjects();
                            obj.Actorid = proxy.MarcomManager.User.Id;
                            obj.action = "add attribute group";
                            obj.EntityId = EntityID;
                            obj.TypeName = name;
                            obj.AttributeName = "";
                            obj.AttributeRecordName = attributeGrpRecordName;

                            fs.AsynchronousNotify(obj);
                            System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => AddEntityAsync(proxy, EntityID, dynamicdao.Id, entityObj.Name, attributeGrpRecordName, GroupID));
                            taskforaddentityforsearch.Start();


                        }
                        //news feed code ends here
                    }
                    tx.Commit();
                }
                return dynamicdao.Id;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }
        public bool InsertEntityAttributeGroups(ITransaction tx, IList<IAttributeData> attributeData, int GroupRecordID, int typeId, int GroupID, bool IsNewRecord)
        {
            if (attributeData != null)
            {
                IList<AttrGroupMultiSelectDao> listMultiselect = new List<AttrGroupMultiSelectDao>();
                IList<AttrGroupTreeValueDao> listreeval = new List<AttrGroupTreeValueDao>();
                listreeval.Clear();
                ArrayList entityids = new ArrayList();
                foreach (var obj in attributeData)
                {
                    entityids.Add(obj.ID);
                }
                var result = from item in tx.PersistenceManager.PlanningRepository.Query<AttributeDao>() where entityids.Contains(item.Id) select item;
                var entityTypeCategory = tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>().Where(a => a.Id == typeId).Select(a => a.Category).FirstOrDefault();
                var dynamicAttResult = result.Where(a => ((a.Id != 69) && (a.AttributeTypeID == 1 || a.AttributeTypeID == 2 || a.AttributeTypeID == 3 || a.AttributeTypeID == 5 || a.AttributeTypeID == 8 || a.AttributeTypeID == 9 || a.AttributeTypeID == 11)));
                var treenodeResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.Tree)));
                var treevalResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.DropDownTree)));
                var multiAttrResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.ListMultiSelection)));
                var systemDefinedResults = result.Where(a => a.IsSpecial == true);
                var multiselecttreevalResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.TreeMultiSelection)));
                if (systemDefinedResults.Count() > 0)
                {
                    foreach (var val in systemDefinedResults)
                    {
                        SystemDefinedAttributes systemType = (SystemDefinedAttributes)val.Id;
                        var dataResult = attributeData.Join(systemDefinedResults,
                                post => post.ID,
                                meta => meta.Id,
                                (post, meta) => new { databaseval = post }).Where(a => a.databaseval.ID == Convert.ToInt32(SystemDefinedAttributes.Owner));
                        switch (systemType)
                        {
                            case SystemDefinedAttributes.Owner:
                                break;
                        }
                    }
                }
                if (treevalResult.Count() > 0)
                {
                    var treeValQuery = attributeData.Join(treevalResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    if (treeValQuery.Count() > 0)
                    {
                        foreach (var treeattr in treeValQuery)
                        {
                            if (IsNewRecord == false)
                            {
                                string deletequery = "DELETE FROM MM_AttrGroupTreeValue WHERE GroupRecordID = ? AND AttributeID = ? ";
                                tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(deletequery.ToString(), Convert.ToInt32(GroupRecordID), Convert.ToInt32(treeattr.databaseval.ID));
                            }
                            foreach (var treevalobj in treeattr.databaseval.Value)
                            {
                                AttrGroupTreeValueDao tre = new AttrGroupTreeValueDao();
                                tre.Attributeid = treeattr.databaseval.ID;
                                tre.Nodeid = treevalobj;
                                tre.Level = treeattr.databaseval.Level;
                                tre.GroupID = GroupID;
                                tre.GroupRecordID = GroupRecordID;
                                listreeval.Add(tre);
                            }
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao>(listreeval);
                    }
                }
                if (multiselecttreevalResult.Count() > 0)
                {
                    var multiselecttreeValQuery = attributeData.Join(multiselecttreevalResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    if (multiselecttreeValQuery.Count() > 0)
                    {
                        foreach (var treeattr in multiselecttreeValQuery)
                        {
                            if (IsNewRecord == false)
                            {
                                string deletequery = "DELETE FROM MM_AttrGroupTreeValue WHERE GroupRecordID = ? AND AttributeID = ? ";
                                tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(deletequery.ToString(), Convert.ToInt32(GroupRecordID), Convert.ToInt32(treeattr.databaseval.ID));
                            }
                            foreach (var treevalobj in treeattr.databaseval.Value)
                            {
                                AttrGroupTreeValueDao tre = new AttrGroupTreeValueDao();
                                tre.Attributeid = treeattr.databaseval.ID;
                                tre.Nodeid = treevalobj;
                                tre.Level = treeattr.databaseval.Level;
                                tre.GroupID = GroupID;
                                tre.GroupRecordID = GroupRecordID;
                                listreeval.Add(tre);
                            }
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao>(listreeval);
                    }
                }
                if (multiAttrResult.Count() > 0)
                {
                    var query = attributeData.Join(multiAttrResult,
                             post => post.ID,
                             meta => meta.Id,
                             (post, meta) => new { databaseval = post, attrappval = meta });
                    foreach (var at in query)
                    {
                        if (IsNewRecord == false)
                        {
                            string deletequery = "DELETE FROM MM_AttrGroupMultiSelect WHERE GroupRecordID = ? AND AttributeID = ? ";
                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(deletequery.ToString(), Convert.ToInt32(GroupRecordID), Convert.ToInt32(at.databaseval.ID));
                        }
                        Marcom.Dal.Metadata.Model.AttrGroupMultiSelectDao mt = new Marcom.Dal.Metadata.Model.AttrGroupMultiSelectDao();
                        mt.Attributeid = at.databaseval.ID;
                        mt.GroupRecordID = GroupRecordID;
                        mt.GroupID = GroupID;
                        mt.Optionid = Convert.ToInt32(at.databaseval.Value);
                        listMultiselect.Add(mt);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.AttrGroupMultiSelectDao>(listMultiselect);
                }
                if (treenodeResult.Count() > 0)
                {
                    var treenodequery = attributeData.Join(treenodeResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    foreach (var et in treenodequery)
                    {
                        foreach (var treenodeobj in et.databaseval.Value)
                        {
                            Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao tre = new Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao();
                            tre.Attributeid = et.databaseval.ID;
                            tre.Nodeid = treenodeobj;
                            tre.GroupID = GroupID;
                            tre.GroupRecordID = GroupRecordID;
                            listreeval.Add(tre);
                        }
                    }
                    tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao>(listreeval);
                }
                if (dynamicAttResult.Count() > 0 || entityTypeCategory != 1)
                {
                    var dynamicAttrQuery = attributeData.Join(dynamicAttResult,
                                post => post.ID,
                                meta => meta.Id,
                                (post, meta) => new { databaseval = post });
                    foreach (var ab in dynamicAttrQuery)
                    {
                        var DynamicQuery = new StringBuilder();
                        string key = Convert.ToString((int)ab.databaseval.ID);
                        int attributedataType = ab.databaseval.TypeID;
                        // dynamic value = ab.databaseval.Value;
                        dynamic value = null;
                        switch (attributedataType)
                        {
                            case 1:
                            case 2:
                            case 11:
                                {
                                    value = Convert.ToString(ab.databaseval.Value == null ? "" : HttpUtility.HtmlEncode((string)ab.databaseval.Value));
                                    DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                    DynamicQuery.Append("");
                                    break;
                                }
                            case 3:
                                {
                                    value = Convert.ToString((Convert.ToString(ab.databaseval.Value) == null || Convert.ToString(ab.databaseval.Value) == "") ? 0 : (int)ab.databaseval.Value);
                                    DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                    DynamicQuery.Append("");
                                    break;
                                }
                            case 5:
                                {
                                    value = DateTime.Parse(ab.databaseval.Value == null ? "" : (string)ab.databaseval.Value.ToString());
                                    DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                    DynamicQuery.Append("");
                                    break;
                                }
                            case 8:
                                {
                                    value = Convert.ToInt32(((ab.databaseval.Value == null) ? 0 : (int)ab.databaseval.Value));
                                    DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                    DynamicQuery.Append("");
                                    break;
                                }
                            case 9:
                                {
                                    value = value = Convert.ToBoolean(ab.databaseval.Value != null ? 0 : (int)ab.databaseval.Value);
                                    DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                    DynamicQuery.Append("");
                                    break;
                                }
                        }
                    }
                }
            }
            return true;
        }

        public bool UpdateImageNameFromAttribtueGroup(PlanningManagerProxy proxy, int entityId, int attributeId, string imageName, int GroupID, int GroupRecordID)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    var entityTypeResult = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == entityId).FirstOrDefault();
                    string query = string.Empty;
                    query = "update  MM_AttributeGroup_" + GroupID + " set Attr_" + attributeId + "='" + imageName + "' where ID=" + GroupRecordID + "";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuery(query);
                    tx.Commit();
                    return true;
                }
                catch
                {
                    throw;
                }
            }
        }
        public bool DeleteEntityAttributeGroupRecord(PlanningManagerProxy proxy, int AttrGroupID, int GroupRecordID, int parentId)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(parentId, Modules.Planning);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == parentId
                                     select item).FirstOrDefault();
                    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    IList<EntityTypeAttributeGroupRelationDao> entitygroupdao = new List<EntityTypeAttributeGroupRelationDao>();
                    entitygroupdao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(xmlpath);
                    var entityattribtuegroup = entitygroupdao.Where(a => a.ID == AttrGroupID);
                    int GroupID = entityattribtuegroup.ElementAt(0).AttributeGroupID;

                    var attrIdForFeed = tx.PersistenceManager.PlanningRepository.ExecuteQuery("select attr_76 from MM_AttributeGroup_" + GroupID + " where ID = " + GroupRecordID + "").Cast<Hashtable>().ToList();
                    var attributeGrpRecordName = ((System.Collections.Hashtable)(attrIdForFeed)[0])["attr_76"];
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.action = "delete attribute group";
                    obj.EntityId = parentId;
                    obj.TypeName = entityattribtuegroup.ElementAt(0).Caption;
                    obj.AttributeRecordName = attributeGrpRecordName == null ? "" : attributeGrpRecordName.ToString();
                    fs.AsynchronousNotify(obj);

                    tx.PersistenceManager.PlanningRepository.ExecuteQuery("Delete from MM_AttributeGroup_" + GroupID + " where ID = " + GroupRecordID + "");
                    tx.Commit();
                    System.Threading.Tasks.Task taskforremoveentityforsearch = new System.Threading.Tasks.Task(() => RemoveEntityAsync(proxy, GroupRecordID));
                    taskforremoveentityforsearch.Start();
                    return true;
                }
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch
            {
                return false;
            }
        }


        public bool SaveUploaderImage(PlanningManagerProxy proxy, string sourcepath, int imgwidth, int imgheight, int imgX, int imgY)
        {
            try
            {

                string orgsourcepath = HttpContext.Current.Server.MapPath("~/" + sourcepath);

                orgsourcepath = orgsourcepath.Replace("user\\", "");
                using (SD.Image OriginalImage = SD.Image.FromFile(orgsourcepath))
                {
                    using (SD.Bitmap bmp = new SD.Bitmap(imgwidth, imgheight))
                    {
                        bmp.SetResolution(OriginalImage.HorizontalResolution, OriginalImage.VerticalResolution);
                        using (SD.Graphics Graphic = SD.Graphics.FromImage(bmp))
                        {
                            Graphic.SmoothingMode = SmoothingMode.AntiAlias;
                            Graphic.InterpolationMode = InterpolationMode.HighQualityBicubic;
                            Graphic.PixelOffsetMode = PixelOffsetMode.HighQuality;
                            Graphic.DrawImage(OriginalImage, new SD.Rectangle(0, 0, imgwidth, imgheight), imgX, imgY, imgwidth, imgheight, SD.GraphicsUnit.Pixel);

                            int maxPixels = 100;
                            int originalWidth = imgwidth;
                            int originalHeight = imgheight;
                            double factor;
                            if (originalWidth > originalHeight)
                            {
                                factor = (double)maxPixels / originalWidth;
                            }
                            else
                            {
                                factor = (double)maxPixels / originalHeight;
                            }

                            var cloned = new SD.Bitmap(bmp).Clone(new SD.Rectangle(new SD.Point(0, 0), bmp.Size), bmp.PixelFormat);
                            var nbmp = new SD.Bitmap(cloned, new SD.Size((int)(originalWidth * factor), (int)(originalHeight * factor)));

                            MemoryStream ms = new MemoryStream();
                            nbmp.Save(ms, OriginalImage.RawFormat);

                            byte[] CropImage = ms.GetBuffer();
                            using (MemoryStream ms1 = new MemoryStream(CropImage, 0, CropImage.Length))
                            {
                                ms.Write(CropImage, 0, CropImage.Length);
                                using (SD.Image CroppedImage = SD.Image.FromStream(ms, true))
                                {
                                    string destinationpath = HttpContext.Current.Server.MapPath("~/UploadedImages/" + sourcepath.ToString().Split('/')[2]);
                                    destinationpath = destinationpath.Replace("user\\", "");
                                    if (System.IO.File.Exists(destinationpath))
                                    {
                                        System.IO.File.Delete(destinationpath);
                                    }
                                    CroppedImage.Save(destinationpath, CroppedImage.RawFormat);
                                }
                            }
                        }
                    }
                }


            }
            catch (Exception ex)
            {

            }
            return false;

        }

        public IList<IMilestoneMetadata> GetMilestoneMetadataToDuplicate(PlanningManagerProxy proxy, int entityId, int entitytypeId, int newentityID)
        {
            IList<IMilestoneMetadata> listMilestone = new List<IMilestoneMetadata>();
            string entityName = "AttributeRecord" + entitytypeId + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
            List<int> attrIds = new List<int>();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                var attrResult = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => Convert.ToInt32(a.Attributes["" + Convert.ToInt32(SystemDefinedAttributes.MilestoneEntityID) + ""]) == entityId);
                var entityTypeResult = tx.PersistenceManager.PlanningRepository.Query<EntityTypeAttributeRelationDao>().Where(a => a.EntityTypeID == entitytypeId).ToList();
                var attributeResult = tx.PersistenceManager.PlanningRepository.Query<AttributeDao>();
                foreach (var obj in attrResult)
                {
                    MilestoneMetadata milestonedata = new MilestoneMetadata();
                    IList<IAttributeData> listAttr = new List<IAttributeData>();
                    milestonedata.EntityId = obj.Id;
                    milestonedata.AttributeData = null;

                    foreach (DictionaryEntry ob in obj.Attributes)
                    {
                        AttributeData attr = new AttributeData();
                        int attributeid = Convert.ToInt32((object)ob.Key);
                        if (attributeid == 66)
                        {
                        }
                        attr.ID = attributeResult.Where(a => a.Id == attributeid).Select(a => a.Id).First();
                        attr.TypeID = attributeResult.Where(a => a.Id == attributeid).Select(a => a.AttributeTypeID).First();
                        attr.Caption = entityTypeResult.Where(a => a.AttributeID == attributeid && a.EntityTypeID == entitytypeId).Select(a => a.Caption).First();
                        if (Convert.ToInt32(ob.Key) == Convert.ToInt32(SystemDefinedAttributes.DueDate))
                            attr.Value = ((System.DateTime)(ob.Value)).Date.ToString("yyyy-MM-dd");
                        else if (Convert.ToInt32(ob.Key) == Convert.ToInt32(SystemDefinedAttributes.MilestoneEntityID))
                            attr.Value = newentityID;
                        else
                            attr.Value = ob.Value;
                        listAttr.Add(attr);
                    }
                    milestonedata.AttributeData = listAttr;
                    listMilestone.Add(milestonedata);
                }
                tx.Commit();
            }

            return listMilestone;
        }
        public IList<IAttributeData> GetEntityAttributesDetailsUserDetails(PlanningManagerProxy proxy, int UserID)
        {
            int TypeID = (int)EntityTypeList.UserDetails;
            IList<IAttributeData> attributesWithValues = new List<IAttributeData>();
            IList<ITreeDropDownLabel> droplabel;
            IList<ITreeDropDownCaption> itreeCaption = new List<ITreeDropDownCaption>();
            AttributeData attributedate;
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    //var allattributes = tx.PersistenceManager.PlanningRepository.GetAll<BrandSystems.Marcom.Dal.Metadata.Model.AttributeDao>();
                    int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                    //string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(MarcomManagerFactory.AdminMetadataVersionNumber);
                    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    XDocument docx = XDocument.Load(xmlpath);
                    var rddd = (from EntityAttrRel in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation")
                                join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute") on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) equals Convert.ToInt32(Attr.Element("ID").Value)
                                where Convert.ToInt32(EntityAttrRel.Element("EntityTypeID").Value) == TypeID
                                orderby Convert.ToInt32(EntityAttrRel.Element("SortOrder").Value)
                                select new
                                {
                                    ID = Convert.ToInt16(Attr.Element("ID").Value),
                                    Caption = EntityAttrRel.Element("Caption").Value,
                                    AttributeTypeID = Convert.ToInt16(Attr.Element("AttributeTypeID").Value),
                                    Description = Attr.Element("Description").Value,
                                    IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSystemDefined").Value)),
                                    IsSpecial = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSpecial").Value)),
                                    InheritFromParent = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("InheritFromParent").Value)),
                                    ChooseFromParent = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("ChooseFromParentOnly").Value)),
                                    IsReadOnly = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("IsReadOnly").Value))
                                }).ToList();

                    var attributesdetails = rddd;
                    //var multiSelectValuedao = (from item in tx.PersistenceManager.PlanningRepository.Query<MultiSelectDao>()
                    //                           where item.Entityid == entityId
                    //                           select item).ToList();

                    List<UserDetailsTreeValueDao> treevaluedao = new List<UserDetailsTreeValueDao>();
                    List<int> treevalues = new List<int>();

                    List<UserDetailsTreeValueDao> multiselecttreevalues = new List<UserDetailsTreeValueDao>();
                    List<int> temptreevalues = new List<int>();

                    var entityName = "AttributeRecord" + TypeID + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    var dynamicvalues = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => a.Id == UserID).Select(a => a.Attributes).SingleOrDefault();

                    foreach (var val in attributesdetails)
                    {
                        AttributesList attypeid = (AttributesList)val.AttributeTypeID;
                        if (Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID || Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID)
                        {
                            treevaluedao = new List<UserDetailsTreeValueDao>();
                            treevaluedao = tx.PersistenceManager.PlanningRepository.Query<UserDetailsTreeValueDao>().Where(a => a.UserID == UserID && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                            treevalues = new List<int>();
                            treevalues = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                        }
                        if (Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID || Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID)
                        {
                            multiselecttreevalues = new List<UserDetailsTreeValueDao>();
                            multiselecttreevalues = tx.PersistenceManager.PlanningRepository.Query<UserDetailsTreeValueDao>().Where(a => a.UserID == UserID && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                            temptreevalues = new List<int>();
                            temptreevalues = (from treevalue in multiselecttreevalues where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                        }
                        switch (attypeid)
                        {
                            case AttributesList.TextSingleLine:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                if (dynamicvalues != null)
                                {
                                    attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                                    attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];
                                }
                                else
                                {
                                    attributedate.Caption = "-";
                                    attributedate.Value = 0;
                                }
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributedate.IsInheritFromParent = val.InheritFromParent;

                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.TextMultiLine:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                if (dynamicvalues != null)
                                {
                                    attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                                    attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];
                                }
                                else
                                {
                                    attributedate.Caption = "-";
                                    attributedate.Value = 0;
                                }
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributedate.IsInheritFromParent = val.InheritFromParent;

                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.ListSingleSelection:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.IsSpecial = val.IsSpecial;
                                if (val.IsSpecial == false)
                                {
                                    if (dynamicvalues == null)
                                    {
                                        attributedate.Value = 0;
                                        attributedate.Caption = "";
                                    }
                                    else
                                    {
                                        attributedate.Value = dynamicvalues[val.ID.ToString()] == null ? 0 : (dynamic)dynamicvalues[val.ID.ToString()];

                                        var singleCaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where item.Id == Convert.ToInt32(dynamicvalues[val.ID.ToString()]) select item.Caption).ToList();
                                        attributedate.Caption = singleCaption;
                                    }
                                }
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributedate.IsInheritFromParent = val.InheritFromParent;
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.ListMultiSelection:
                                var multiSelectValuedao = (from item in tx.PersistenceManager.PlanningRepository.Query<UserDetailsMultiSelectDao>()
                                                           where item.UserID == UserID
                                                           select item).ToList();
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.TypeID = val.AttributeTypeID;
                                var optionIDs = (from multiValues in multiSelectValuedao where multiValues.Attributeid == val.ID select multiValues.Optionid).ToArray();
                                var optioncaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where optionIDs.Contains(item.Id) select item.Caption).ToList();
                                string Multicaptionresults = string.Join<string>(", ", optioncaption);
                                attributedate.Caption = Multicaptionresults;
                                attributedate.Value = optionIDs;
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributedate.IsInheritFromParent = val.InheritFromParent;

                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.DateTime:
                                attributedate = new AttributeData();
                                attributedate.Caption = val.Caption.Trim();
                                attributedate.ID = val.ID;
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                if (dynamicvalues != null)
                                    if ((object)dynamicvalues[val.ID.ToString()] != null)
                                        attributedate.Value = (object)dynamicvalues[val.ID.ToString()];
                                    else
                                        attributedate.Value = null;
                                else
                                    attributedate.Value = null;
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.DropDownTree:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.IsSpecial = val.IsSpecial;
                                droplabel = new List<ITreeDropDownLabel>();

                                var treeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();
                                List<int> dropdownResults = new List<int>();
                                if (treevaluedao.Count > 0)
                                {
                                    foreach (var lvlObj in treevaluedao)
                                    {
                                        treeLevelList.Remove(treeLevelList.Where(a => a.Level == lvlObj.Level).FirstOrDefault());
                                    }
                                    var entityTreeLevelList = treevaluedao.Select(a => a.Level).ToList();
                                    dropdownResults = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                                    var nodes = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where dropdownResults.Contains(item.Id) select item.Level);
                                    var distinctNodes = nodes.Distinct();
                                    int lastRow = 0;
                                    foreach (var dropnode in distinctNodes)
                                    {
                                        ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                        ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                        var nodelevels = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>() where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                        treecaption.Level = nodelevels.Level;
                                        dropdownlabel.Level = nodelevels.Level;
                                        dropdownlabel.Label = nodelevels.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                        if (lastRow == distinctNodes.Count() - 1)
                                        {
                                            foreach (var levelObj in treeLevelList)
                                            {
                                                ITreeDropDownLabel dropdownlabel2 = new TreeDropDownLabel();
                                                ITreeDropDownCaption treecaption2 = new TreeDropDownCaption();
                                                treecaption2.Level = levelObj.Level;
                                                dropdownlabel2.Level = levelObj.Level;
                                                dropdownlabel2.Label = levelObj.LevelName.Trim();
                                                itreeCaption.Add(treecaption2);
                                                droplabel.Add(dropdownlabel2);
                                            }
                                        }
                                        lastRow++;
                                    }
                                    attributedate.Lable = droplabel;
                                    var captionlist = from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where treevalues.Contains(item.Id) orderby item.Level select item.Caption;
                                    string result = string.Join<string>(",", captionlist);
                                    attributedate.Caption = result;
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = treevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                else
                                {
                                    foreach (var levelObj in treeLevelList)
                                    {
                                        ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                        ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                        treecaption.Level = levelObj.Level;
                                        dropdownlabel.Level = levelObj.Level;
                                        dropdownlabel.Label = levelObj.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                    }
                                    attributedate.Lable = droplabel;
                                    attributedate.Caption = "-";
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = treevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.Tree:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.IsSpecial = val.IsSpecial;
                                var treeCaptionList = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where treevalues.Contains(item.Id) select item.Caption).ToList();
                                string treeCaptionResult = string.Join<string>(", ", treeCaptionList);
                                attributedate.Caption = treeCaptionResult;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Value = treevalues;
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributedate.IsInheritFromParent = val.InheritFromParent;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.TreeMultiSelection:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.IsReadOnly = val.IsReadOnly;

                                droplabel = new List<ITreeDropDownLabel>();

                                var multiselecttreeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();
                                List<int> multiselectdropdownResults = new List<int>();
                                if (multiselecttreevalues.Count > 0)
                                {
                                    foreach (var lvlObj in multiselecttreevalues)
                                    {
                                        multiselecttreeLevelList.Remove(multiselecttreeLevelList.Where(a => a.Level == lvlObj.Level).FirstOrDefault());
                                    }
                                    var entityTreeLevelList = multiselecttreevalues.Select(a => a.Level).ToList();
                                    multiselectdropdownResults = (from treevalue in multiselecttreevalues where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                                    var nodes = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where multiselectdropdownResults.Contains(item.Id) select item.Level);
                                    var distinctNodes = nodes.Distinct();
                                    int lastRow = 0;
                                    foreach (var dropnode in distinctNodes)
                                    {
                                        ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                        ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                        var nodelevels = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>() where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                        treecaption.Level = nodelevels.Level;
                                        dropdownlabel.Level = nodelevels.Level;
                                        dropdownlabel.Label = nodelevels.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                        if (lastRow == distinctNodes.Count() - 1)
                                        {
                                            foreach (var levelObj in multiselecttreeLevelList)
                                            {
                                                ITreeDropDownLabel dropdownlabel2 = new TreeDropDownLabel();
                                                ITreeDropDownCaption treecaption2 = new TreeDropDownCaption();
                                                treecaption2.Level = levelObj.Level;
                                                dropdownlabel2.Level = levelObj.Level;
                                                dropdownlabel2.Label = levelObj.LevelName.Trim();
                                                itreeCaption.Add(treecaption2);
                                                droplabel.Add(dropdownlabel2);
                                            }
                                        }
                                        lastRow++;
                                    }
                                    attributedate.Lable = droplabel;
                                    attributedate.Caption = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where temptreevalues.Contains(item.Id) orderby item.Level select item.Caption).ToList();
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = multiselecttreevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                else
                                {
                                    foreach (var levelObj in multiselecttreeLevelList)
                                    {
                                        ITreeDropDownLabel dropdownlabel = new TreeDropDownLabel();
                                        ITreeDropDownCaption treecaption = new TreeDropDownCaption();
                                        treecaption.Level = levelObj.Level;
                                        dropdownlabel.Level = levelObj.Level;
                                        dropdownlabel.Label = levelObj.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                    }
                                    attributedate.Lable = droplabel;
                                    attributedate.Caption = "-";
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = multiselecttreevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                attributesWithValues.Add(attributedate);
                                break;

                            default:

                                break;
                        }
                    }
                    tx.Commit();
                }
                return attributesWithValues;
            }
            catch (Exception ex)
            {

            }
            return null;
        }



        public bool SaveFinancialDynamicValues(PlanningManagerProxy proxy, int finID, int AttributeTypeid, int attributeid, List<object> NewValue)
        {
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var DynamicQuery = new StringBuilder();
                    IList<MultiProperty> prplst = new List<MultiProperty>();

                    if (AttributeTypeid == 3)
                    {
                        IList<MultiProperty> parList3 = new List<MultiProperty>();
                        string str = "select * from PM_FundingCostCentreRecords where ID= ? ";
                        IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(finID));
                        parList3.Add(new MultiProperty { propertyName = "NewValue", propertyValue = (int)NewValue[0] });
                        parList3.Add(new MultiProperty { propertyName = "finID", propertyValue = finID });
                        DynamicQuery.Append("update  PM_FundingCostCentreRecords set Attr_" + attributeid + "= :NewValue where ID= :finID");
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(DynamicQuery.ToString(), parList3);
                        tx.Commit();
                    }
                    else if (AttributeTypeid == 1)
                    {
                        string str = "select * from PM_FundingCostCentreRecords where ID= ? ";
                        IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(finID));
                        DynamicQuery.Append("update  PM_FundingCostCentreRecords set Attr_" + attributeid + "= ?  where ID= ?");
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), finID);
                        tx.Commit();
                    }

                    else if (AttributeTypeid == 2)
                    {
                        string str = "select * from PM_FundingCostCentreRecords where ID= ? ";
                        IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(finID));
                        DynamicQuery.Append("update  PM_FundingCostCentreRecords set Attr_" + attributeid + "= ? where ID= ? ");
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), finID);
                        tx.Commit();
                    }
                    else if (AttributeTypeid == 4)
                    {

                        IList<FinancialMultiSelectDao> listMultiselect = new List<FinancialMultiSelectDao>();
                        string query = "DELETE FROM MM_Fin_MultiSelect WHERE FinID = ? AND FinAttributeID = ? and  FinTypeID = ?";
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(query.ToString(), Convert.ToInt32(finID), attributeid, (int)FinancialMetadaTypes.FundingCostcenter);
                        foreach (var at in NewValue)
                        {
                            Marcom.Dal.Metadata.Model.FinancialMultiSelectDao mt = new Marcom.Dal.Metadata.Model.FinancialMultiSelectDao();
                            mt.FinAttributeID = attributeid;
                            mt.FinID = Convert.ToInt32(finID);
                            mt.FinOptionID = Convert.ToInt32(at);
                            mt.FinTypeID = (int)FinancialMetadaTypes.FundingCostcenter;
                            listMultiselect.Add(mt);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.FinancialMultiSelectDao>(listMultiselect);
                        tx.Commit();
                    }

                }

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }


        public string GetCaptionofPeriod(PlanningManagerProxy proxy, int entityId)
        {
            string CaptionofPeriod = "";
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == entityId
                                     select item).FirstOrDefault();

                    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    XDocument docx = XDocument.Load(xmlpath);

                    var rddd = (from EntityAttrRel in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation")
                                join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute")
                                on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value)
                                equals Convert.ToInt32(Attr.Element("ID").Value)
                                where Convert.ToInt32(EntityAttrRel.Element("EntityTypeID").Value) == entityObj.Typeid
                                && Convert.ToInt32(Attr.Element("AttributeTypeID").Value) == 10
                                && Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) == Convert.ToInt32(Attr.Element("ID").Value)
                                select new
                                {
                                    Caption = EntityAttrRel.Element("Caption").Value
                                }).ToList();


                    foreach (var val in rddd)
                    {
                        CaptionofPeriod = val.Caption;
                    }
                    return CaptionofPeriod;
                }
            }
            catch (Exception ex)
            {
            }
            return null;
        }

        /// <summary>
        /// Create New Purchase Order from the API
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="EntityID">The EntityID</param>
        /// <param name="CostCenterID">The Cost Center ID </param>
        /// <param name="IPurchaseOrder">The IPurchaseOrder</param>
        /// <param name="IList<IAttributeData>">The client specific attribute IDs and values</param>
        /// <returns>Purchase order ID</returns>
        public int InsertUpdatePO(PlanningManagerProxy proxy, int EntityID, int CostCenterID, IPurchaseOrder ipurchaseOrder, IList<IAttributeData> MetadataValues)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    IList<PurchaseOrderDao> ipurchaseOrd = new List<PurchaseOrderDao>();
                    IList<PurchaseOrderDetailDao> ipurchaseOrdDet = new List<PurchaseOrderDetailDao>();
                    IPurchaseOrder ipurObj = new PurchaseOrder();
                    PurchaseOrderDao purchaseOrddao = new PurchaseOrderDao();
                    PurchaseOrderDetailDao purchaseOrdDetdao = new PurchaseOrderDetailDao();
                    AdditionalSettingsDao defaultCurrency = new AdditionalSettingsDao();
                    defaultCurrency = tx.PersistenceManager.PlanningRepository.Query<AdditionalSettingsDao>().Where(a => a.SettingName == "CurrencyFormat").Select(a => a).FirstOrDefault();

                    purchaseOrddao = (from pd in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDao>()
                                      join od in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDetailDao>() on pd.Id equals od.POID
                                      where pd.EntityID == EntityID && od.CostCenterID == CostCenterID && pd.PONumber == ipurchaseOrder.PONumber
                                      orderby pd.Id
                                      select pd).FirstOrDefault();
                    if (purchaseOrddao == null)
                        purchaseOrddao = new PurchaseOrderDao();
                    else
                        purchaseOrddao.Id = purchaseOrddao != null ? purchaseOrddao.Id : 0;
                    if (ipurchaseOrder != null)
                    {
                        purchaseOrddao.ExpectedSpentDate = null;
                        purchaseOrddao.ApprovedDate = ipurchaseOrder.ApprovedDate;
                        purchaseOrddao.CreatedDate = ipurchaseOrder.CreateDate;
                        purchaseOrddao.ApproverID = null;
                        purchaseOrddao.Description = ipurchaseOrder.Description;
                        purchaseOrddao.EntityID = EntityID;
                        purchaseOrddao.PONumber = ipurchaseOrder.PONumber;
                        purchaseOrddao.SentDate = ipurchaseOrder.SentDate;
                        int status = (int)PurchaseOrderStates.Approved;
                        purchaseOrddao.Status = status;
                        IList<ISupplier> listSupplier = new List<ISupplier>();
                        ISupplier isupp = new Supplier();
                        isupp.CompanyName = ipurchaseOrder.SupplierName;
                        listSupplier.Add(isupp);
                        int supllierid = 0;
                        supllierid = CreateNewApiSupplier(proxy, listSupplier); //Insert New Supplier
                        purchaseOrddao.SupplierID = supllierid;
                        purchaseOrddao.UserID = ipurchaseOrder.UserID;
                        purchaseOrddao.IsExternal = true;
                        ipurchaseOrd.Add(purchaseOrddao);
                        tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(ipurchaseOrd);

                        //Saving Purchase Order detail

                        purchaseOrdDetdao = new PurchaseOrderDetailDao();
                        if (purchaseOrddao.Id > 0)
                        {
                            purchaseOrdDetdao = tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDetailDao>().Where(a => a.POID == purchaseOrddao.Id).FirstOrDefault();
                            if (purchaseOrdDetdao == null)
                                purchaseOrdDetdao = new PurchaseOrderDetailDao();
                            else
                                purchaseOrdDetdao.Id = purchaseOrdDetdao.Id;
                        }
                        purchaseOrdDetdao.CostCenterID = CostCenterID;
                        purchaseOrdDetdao.POID = ipurchaseOrd.FirstOrDefault().Id;
                        purchaseOrdDetdao.Amount = ipurchaseOrder.amount;
                        purchaseOrdDetdao.CurrencyType = Convert.ToInt32(defaultCurrency.SettingValue);
                        ipurchaseOrdDet.Add(purchaseOrdDetdao);

                        tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDetailDao>(ipurchaseOrdDet);
                        if (MetadataValues.Count > 0)
                        {
                            var result = InsertFinancialEntityAttributes(tx, MetadataValues, ipurchaseOrd.FirstOrDefault().Id, (int)FinancialMetadaTypes.PO);
                        }
                        else
                        {

                            //for funding costcenter dynamic table
                            IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                            DynamicAttributesDao dynamicdao = new DynamicAttributesDao();

                            dynamicdao = (from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>("PORecords") where item.Id == ipurchaseOrd.FirstOrDefault().Id select item).FirstOrDefault();
                            if (dynamicdao == null)
                            {
                                foreach (var val in ipurchaseOrd)
                                {
                                    dynamicdao = new DynamicAttributesDao();
                                    dynamicdao.Id = ipurchaseOrd.FirstOrDefault().Id;
                                    idynObj.Add(dynamicdao);

                                }
                                if (idynObj.Count > 0)
                                    tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("PORecords", idynObj);
                            }
                        }
                        tx.Commit();
                        EntityDirectApiCommittedAmountInsert(proxy, EntityID, CostCenterID, 0, ipurchaseOrder.amount);
                        return ipurchaseOrd.FirstOrDefault().Id;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return 0;
        }


        /// <summary>
        /// Create New Purchase Order from the API
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="EntityID">The EntityID</param>
        /// <param name="CostCenterID">The Cost Center ID </param>
        /// <param name="IPurchaseOrder">The IPurchaseOrder</param>
        /// <param name="IList<IAttributeData>">The client specific attribute IDs and values</param>
        /// <returns>Purchase order ID</returns>
        public int UpdateApiPO(PlanningManagerProxy proxy, int EntityID, int CostCenterID, ArrayList jattributes, IPurchaseOrder ipurchaseOrder, IList<IAttributeData> MetadataValues)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    IList<PurchaseOrderDao> ipurchaseOrd = new List<PurchaseOrderDao>();
                    IList<PurchaseOrderDetailDao> ipurchaseOrdDet = new List<PurchaseOrderDetailDao>();
                    IPurchaseOrder ipurObj = new PurchaseOrder();
                    PurchaseOrderDao purchaseOrddao = new PurchaseOrderDao();
                    PurchaseOrderDetailDao purchaseOrdDetdao = new PurchaseOrderDetailDao();
                    AdditionalSettingsDao defaultCurrency = new AdditionalSettingsDao();
                    defaultCurrency = tx.PersistenceManager.PlanningRepository.Query<AdditionalSettingsDao>().Where(a => a.SettingName == "CurrencyFormat").Select(a => a).FirstOrDefault();

                    purchaseOrddao = (from pd in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDao>()
                                      join od in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDetailDao>() on pd.Id equals od.POID
                                      where pd.EntityID == EntityID && od.CostCenterID == CostCenterID && pd.PONumber == ipurchaseOrder.PONumber
                                      orderby pd.Id
                                      select pd).FirstOrDefault();
                    if (purchaseOrddao == null)
                        purchaseOrddao = new PurchaseOrderDao();
                    else
                        purchaseOrddao.Id = purchaseOrddao != null ? purchaseOrddao.Id : 0;
                    if (ipurchaseOrder != null)
                    {

                        if (jattributes != null)
                        {
                            if (jattributes.Contains("7"))
                            {
                                purchaseOrddao.CreatedDate = ipurchaseOrder.CreateDate; jattributes.Remove("7");
                            }
                            if (jattributes.Contains("8"))
                            {
                                IList<ISupplier> listSupplier = new List<ISupplier>();
                                ISupplier isupp = new Supplier();
                                isupp.CompanyName = ipurchaseOrder.SupplierName;
                                listSupplier.Add(isupp);
                                int supllierid = 0;
                                supllierid = CreateNewApiSupplier(proxy, listSupplier); //Insert New Supplier
                                purchaseOrddao.SupplierID = supllierid;
                                jattributes.Remove("8");
                            }
                            if (jattributes.Contains("9"))
                            {
                                purchaseOrddao.Description = ipurchaseOrder.Description; jattributes.Remove("9");
                            }
                        }
                        purchaseOrddao.UserID = ipurchaseOrder.UserID;
                        purchaseOrddao.IsExternal = true;
                        ipurchaseOrd.Add(purchaseOrddao);
                        tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(ipurchaseOrd);

                        //Saving Purchase Order detail

                        purchaseOrdDetdao = new PurchaseOrderDetailDao();
                        if (purchaseOrddao.Id > 0)
                        {
                            purchaseOrdDetdao = tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDetailDao>().Where(a => a.POID == purchaseOrddao.Id).FirstOrDefault();
                            if (purchaseOrdDetdao == null)
                                purchaseOrdDetdao = new PurchaseOrderDetailDao();
                            else
                                purchaseOrdDetdao.Id = purchaseOrdDetdao.Id;
                        }
                        purchaseOrdDetdao.CostCenterID = CostCenterID;
                        purchaseOrdDetdao.POID = ipurchaseOrd.FirstOrDefault().Id;
                        if (jattributes != null)
                        {
                            if (jattributes.Contains("6"))
                            {
                                purchaseOrdDetdao.Amount = ipurchaseOrder.amount; jattributes.Remove("6");
                            }
                        }
                        purchaseOrdDetdao.Amount = ipurchaseOrder.amount;
                        purchaseOrdDetdao.CurrencyType = Convert.ToInt32(defaultCurrency.SettingValue);
                        ipurchaseOrdDet.Add(purchaseOrdDetdao);

                        tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDetailDao>(ipurchaseOrdDet);
                        if (MetadataValues.Count > 0)
                        {
                            var result = InsertFinancialEntityAttributes(tx, MetadataValues, ipurchaseOrd.FirstOrDefault().Id, (int)FinancialMetadaTypes.PO);
                        }
                        else
                        {

                            //for funding costcenter dynamic table
                            IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                            DynamicAttributesDao dynamicdao = new DynamicAttributesDao();

                            dynamicdao = (from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>("PORecords") where item.Id == ipurchaseOrd.FirstOrDefault().Id select item).FirstOrDefault();
                            if (dynamicdao == null)
                            {
                                foreach (var val in ipurchaseOrd)
                                {
                                    dynamicdao = new DynamicAttributesDao();
                                    dynamicdao.Id = ipurchaseOrd.FirstOrDefault().Id;
                                    idynObj.Add(dynamicdao);

                                }
                                if (idynObj.Count > 0)
                                    tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("PORecords", idynObj);
                            }
                        }
                        tx.Commit();
                        EntityDirectSpentCommittedAmountInsert(proxy, EntityID, CostCenterID, 0, ipurchaseOrder.amount);
                        return ipurchaseOrd.FirstOrDefault().Id;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return 0;
        }


        public int InsertApiSpentTransaction(PlanningManagerProxy proxy, int EntityID, int CostCenterID, IInvoice iInvoiceObj, IList<IAttributeData> MetadataValues)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (iInvoiceObj != null)
                    {
                        IList<InvoiceDao> iInvoiceOrd = new List<InvoiceDao>();
                        IList<InvoiceDetailDao> iInvoiceDet = new List<InvoiceDetailDao>();
                        InvoiceDao invoicedao = new InvoiceDao();
                        InvoiceDetailDao invoiceDetdao = new InvoiceDetailDao();
                        AdditionalSettingsDao defaultCurrency = new AdditionalSettingsDao();
                        defaultCurrency = tx.PersistenceManager.PlanningRepository.Query<AdditionalSettingsDao>().Where(a => a.SettingName == "CurrencyFormat").Select(a => a).FirstOrDefault();

                        invoicedao = (from pd in tx.PersistenceManager.PlanningRepository.Query<InvoiceDao>()
                                      join od in tx.PersistenceManager.PlanningRepository.Query<InvoiceDetailDao>() on pd.Id equals od.InvoiceID
                                      where pd.Entityid == EntityID && od.CostCenterID == CostCenterID && pd.InvoiceNumber == iInvoiceObj.InvoiceNumber
                                      orderby pd.Id
                                      select pd).FirstOrDefault();

                        if (invoicedao == null)
                            invoicedao = new InvoiceDao();
                        else
                            invoicedao.Id = invoicedao != null ? invoicedao.Id : 0;
                        invoicedao.CreateDate = iInvoiceObj.CreateDate != null ? iInvoiceObj.CreateDate : invoicedao.CreateDate;
                        invoicedao.Description = iInvoiceObj.Description;
                        invoicedao.Entityid = EntityID;
                        invoicedao.PaymentDate = DateTime.Now;
                        IList<ISupplier> listSupplier = new List<ISupplier>();
                        ISupplier isupp = new Supplier();
                        isupp.CompanyName = iInvoiceObj.SupplierName;
                        listSupplier.Add(isupp);
                        int supllierid = 0;
                        supllierid = CreateNewApiSupplier(proxy, listSupplier); //Insert New Supplier
                        invoicedao.SupplierID = supllierid;
                        invoicedao.UserID = iInvoiceObj.UserID;
                        invoicedao.PoNumber = iInvoiceObj.PONumber;
                        invoicedao.POID = iInvoiceObj.POID;
                        invoicedao.InvoiceNumber = iInvoiceObj.InvoiceNumber;
                        invoicedao.IsExternal = true;
                        invoicedao.InvoiceCopy = new byte[] { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 };
                        iInvoiceOrd.Add(invoicedao);
                        tx.PersistenceManager.PlanningRepository.Save<InvoiceDao>(iInvoiceOrd);

                        IList<PurchaseOrderDao> ipurchaseOrd = new List<PurchaseOrderDao>();
                        PurchaseOrderDao purDao = new PurchaseOrderDao();
                        purDao = (from item in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDao>() where item.PONumber == iInvoiceObj.POID select item).FirstOrDefault();
                        if (purDao != null)
                        {
                            purDao.Status = (int)PurchaseOrderStates.Invoiced;
                            ipurchaseOrd.Add(purDao);
                            tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(ipurchaseOrd);
                        }


                        invoiceDetdao = new InvoiceDetailDao();

                        if (invoicedao.Id > 0)
                        {
                            invoiceDetdao = tx.PersistenceManager.PlanningRepository.Query<InvoiceDetailDao>().Where(a => a.InvoiceID == invoicedao.Id).FirstOrDefault();
                            if (invoiceDetdao == null)
                                invoiceDetdao = new InvoiceDetailDao();
                            else
                                invoiceDetdao.Id = invoiceDetdao.Id;
                        }
                        invoiceDetdao.CostCenterID = CostCenterID;
                        invoiceDetdao.InvoiceID = iInvoiceOrd.FirstOrDefault().Id;
                        invoiceDetdao.Amount = iInvoiceObj.amount;
                        invoiceDetdao.CurrencyType = Convert.ToInt32(defaultCurrency.SettingValue);
                        iInvoiceDet.Add(invoiceDetdao);
                        tx.PersistenceManager.PlanningRepository.Save<InvoiceDetailDao>(iInvoiceDet);

                        if (MetadataValues != null)
                        {
                            var result = InsertFinancialEntityAttributes(tx, MetadataValues, iInvoiceOrd.FirstOrDefault().Id, (int)FinancialMetadaTypes.Spent);
                        }
                        else
                        {
                            //for funding costcenter dynamic table
                            IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                            DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                            dynamicdao = (from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>("SpentRecords") where item.Id == iInvoiceOrd.FirstOrDefault().Id select item).FirstOrDefault();
                            if (dynamicdao == null)
                            {
                                dynamicdao.Id = iInvoiceOrd.FirstOrDefault().Id;
                                idynObj.Add(dynamicdao);
                                if (idynObj.Count > 0)
                                    tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("SpentRecords", idynObj);
                            }
                        }
                        tx.Commit();
                        EntitySpendAmountInsert(proxy, EntityID, CostCenterID, 0, iInvoiceObj.amount);

                        return iInvoiceOrd.FirstOrDefault().Id;
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return 0;
        }

        public int UpdateApiSpentTransaction(PlanningManagerProxy proxy, int EntityID, int CostCenterID, ArrayList UpdateAttributes, IInvoice iInvoiceObj, IList<IAttributeData> MetadataValues)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (iInvoiceObj != null)
                    {
                        IList<InvoiceDao> iInvoiceOrd = new List<InvoiceDao>();
                        IList<InvoiceDetailDao> iInvoiceDet = new List<InvoiceDetailDao>();
                        InvoiceDao invoicedao = new InvoiceDao();
                        InvoiceDetailDao invoiceDetdao = new InvoiceDetailDao();
                        AdditionalSettingsDao defaultCurrency = new AdditionalSettingsDao();
                        defaultCurrency = tx.PersistenceManager.PlanningRepository.Query<AdditionalSettingsDao>().Where(a => a.SettingName == "CurrencyFormat").Select(a => a).FirstOrDefault();
                        var invoiceExists = (from item in tx.PersistenceManager.PlanningRepository.Query<InvoiceDao>() where item.InvoiceNumber == iInvoiceObj.InvoiceNumber select item).ToList();


                        //if (invoiceExists.Count == 0)
                        {
                            invoicedao = (from pd in tx.PersistenceManager.PlanningRepository.Query<InvoiceDao>()
                                          join od in tx.PersistenceManager.PlanningRepository.Query<InvoiceDetailDao>() on pd.Id equals od.InvoiceID
                                          where pd.Entityid == EntityID && od.CostCenterID == CostCenterID && pd.InvoiceNumber == iInvoiceObj.InvoiceNumber
                                          orderby pd.Id
                                          select pd).FirstOrDefault();

                            if (invoicedao == null)
                                invoicedao = new InvoiceDao();
                            else
                                invoicedao.Id = invoicedao != null ? invoicedao.Id : 0;
                            if (UpdateAttributes != null)
                            {
                                if (UpdateAttributes.Contains("16"))
                                {
                                    invoicedao.CreateDate = iInvoiceObj.CreateDate != null ? iInvoiceObj.CreateDate : invoicedao.CreateDate; ; UpdateAttributes.Remove("16");
                                }
                                if (UpdateAttributes.Contains("18"))
                                {
                                    IList<ISupplier> listSupplier = new List<ISupplier>();
                                    ISupplier isupp = new Supplier();
                                    isupp.CompanyName = iInvoiceObj.SupplierName;
                                    listSupplier.Add(isupp);
                                    int supllierid = 0;
                                    supllierid = CreateNewApiSupplier(proxy, listSupplier); //Insert New Supplier
                                    invoicedao.SupplierID = supllierid;
                                    UpdateAttributes.Remove("18");
                                }
                                if (UpdateAttributes.Contains("19"))
                                {
                                    invoicedao.Description = iInvoiceObj.Description;
                                    UpdateAttributes.Remove("19");
                                }
                            }
                            invoicedao.Entityid = EntityID;
                            invoicedao.PaymentDate = DateTime.Now;
                            invoicedao.UserID = iInvoiceObj.UserID;
                            iInvoiceOrd.Add(invoicedao);
                            tx.PersistenceManager.PlanningRepository.Save<InvoiceDao>(iInvoiceOrd);

                            IList<PurchaseOrderDao> ipurchaseOrd = new List<PurchaseOrderDao>();
                            PurchaseOrderDao purDao = new PurchaseOrderDao();
                            purDao = (from item in tx.PersistenceManager.PlanningRepository.Query<PurchaseOrderDao>() where item.PONumber == iInvoiceObj.POID select item).FirstOrDefault();
                            if (purDao != null)
                            {
                                purDao.Status = (int)PurchaseOrderStates.Invoiced;
                                ipurchaseOrd.Add(purDao);
                                tx.PersistenceManager.PlanningRepository.Save<PurchaseOrderDao>(ipurchaseOrd);
                            }


                            invoiceDetdao = new InvoiceDetailDao();

                            if (invoicedao.Id > 0)
                            {
                                invoiceDetdao = tx.PersistenceManager.PlanningRepository.Query<InvoiceDetailDao>().Where(a => a.InvoiceID == invoicedao.Id).FirstOrDefault();
                                if (invoiceDetdao == null)
                                    invoiceDetdao = new InvoiceDetailDao();
                                else
                                    invoiceDetdao.Id = invoiceDetdao.Id;
                            }
                            invoiceDetdao.CostCenterID = CostCenterID;
                            invoiceDetdao.InvoiceID = iInvoiceOrd.FirstOrDefault().Id;
                            if (UpdateAttributes != null)
                            {
                                if (UpdateAttributes.Contains("20"))
                                {
                                    invoiceDetdao.Amount = iInvoiceObj.amount; UpdateAttributes.Remove("20");
                                }
                            }
                            invoiceDetdao.CurrencyType = Convert.ToInt32(defaultCurrency.SettingValue);
                            iInvoiceDet.Add(invoiceDetdao);
                            tx.PersistenceManager.PlanningRepository.Save<InvoiceDetailDao>(iInvoiceDet);

                            if (MetadataValues != null)
                            {
                                var result = InsertFinancialEntityAttributes(tx, MetadataValues, iInvoiceOrd.FirstOrDefault().Id, (int)FinancialMetadaTypes.Spent);
                            }
                            else
                            {
                                //for funding costcenter dynamic table
                                IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                                DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                                dynamicdao = (from item in tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>("SpentRecords") where item.Id == iInvoiceOrd.FirstOrDefault().Id select item).FirstOrDefault();
                                if (dynamicdao == null)
                                {
                                    dynamicdao.Id = iInvoiceOrd.FirstOrDefault().Id;
                                    idynObj.Add(dynamicdao);
                                    if (idynObj.Count > 0)
                                        tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("SpentRecords", idynObj);
                                }
                            }
                            tx.Commit();
                            EntityApiSpendAmountInsert(proxy, EntityID, CostCenterID, 0, iInvoiceObj.amount);
                            return iInvoiceOrd.FirstOrDefault().Id;
                        }

                    }
                    else
                    {
                        return 0;
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return 0;
        }


        public bool UpdateFinancialMetadata(PlanningManagerProxy proxy, int EntityId, int CostCenterID, IList<IAttributeData> MetadataValues)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    FinancialDao finDao = new FinancialDao();
                    finDao = tx.PersistenceManager.PlanningRepository.Query<FinancialDao>().Where(a => a.Entityid == EntityId && a.CostCenterid == CostCenterID).FirstOrDefault();

                    if (finDao != null)
                        if (MetadataValues != null)
                        {
                            var result = InsertFinancialEntityAttributes(tx, MetadataValues, finDao.Id, (int)FinancialMetadaTypes.FundingCostcenter);
                            tx.Commit();
                            return true;
                        }
                        else
                        {
                            tx.Commit();
                            return false;
                        }
                    else
                    {
                        tx.Commit();
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return false;

        }

        public List<bool> GetFinanncailforecastData(PlanningManagerProxy proxy)
        {
            List<bool> values = new List<bool>();
            //bool isexternalsource,ismoneytransfer,isfinancailforecast
            try
            {
                string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
                string xelementName = "FinancialSettings";
                var xelementFilepath = XElement.Load(xmlpath);
                var xmlElement = xelementFilepath.Element(xelementName);
                foreach (var des in xmlElement.Descendants())
                {
                    if (des.Name.ToString() == "IsExternalsource")
                    {
                        values.Add(Convert.ToBoolean(des.Value));
                    }
                    if (des.Name.ToString() == "IsMoneyTransfer")
                    {
                        values.Add(Convert.ToBoolean(des.Value));
                    }
                    if (des.Name.ToString() == "IsFinancialforecast")
                    {
                        values.Add(Convert.ToBoolean(des.Value));
                    }

                }
                return values;
            }
            catch (Exception ex)
            {
                return null;
            }


        }

        public IEntity GetEntityDetailsByID(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IEntity Entity = new Entity();
                    var CurrentData = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == EntityID).SingleOrDefault();
                    if (CurrentData != null)
                    {
                        Entity.Id = CurrentData.Id;
                        Entity.IsLock = CurrentData.IsLock;
                        Entity.Level = CurrentData.Level;
                        Entity.Name = CurrentData.Name;
                        Entity.Parentid = CurrentData.Parentid;
                        Entity.Typeid = CurrentData.Typeid;
                        Entity.UniqueKey = CurrentData.UniqueKey;
                        Entity.Version = CurrentData.Version;
                        Entity.Active = CurrentData.Active;
                        Entity.ActiveEntityStateID = CurrentData.ActiveEntityStateID;
                        Entity.EnableDisableWorkflow = CurrentData.EnableDisableWorkflow;
                        Entity.EntityID = CurrentData.EntityID;
                        Entity.EnableDisableWorkflow = CurrentData.EnableDisableWorkflow;
                        Entity.EntityStateID = CurrentData.EntityStateID;
                        return Entity;
                    }

                }
            }
            catch
            {

            }
            return null;
        }


        public bool UpdateFFData(PlanningManagerProxy proxy, string financialdata, bool staus)
        {
            try
            {
                string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
                string xelementName = "FinancialSettings";
                var xelementFilepath = XElement.Load(xmlpath);
                var xmlElement = xelementFilepath.Element(xelementName);
                foreach (var des in xmlElement.Descendants())
                {
                    if (financialdata == "Linkedresource" && des.Name.ToString() == "IsExternalsource")
                    {
                        des.Value = staus.ToString();
                    }
                    if (financialdata == "Moneytransfer" && des.Name.ToString() == "IsMoneyTransfer")
                    {
                        des.Value = staus.ToString();
                    }
                    if (financialdata == "Financialforecast" && des.Name.ToString() == "IsFinancialforecast")
                    {
                        des.Value = staus.ToString();
                    }

                }
                xelementFilepath.Save(xmlpath);
                CopyAdminSettingsfiletoAPI();
                return true;

            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Getting API Entity Financial Details 
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The entityid.</param>
        /// <returns>IList</returns>
        public IList<IFinancialDetail> GetApiEntityFinancialdDetails(PlanningManagerProxy proxy, int entityid, int userID, int costcenterid = 0)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //Get Default division calculation  forecast setting

                    string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
                    XDocument adminXdoc = XDocument.Load(xmlpath);
                    var ForeCastresult = adminXdoc.Descendants("DivisonIds").ElementAt(0).Value;

                    //Get Unique Key for entityid from proxy.MarcomManager.EntitySortorderIdColle
                    var parentEntity = (from item in tx.PersistenceManager.TaskRepository.Query<EntityDao>()
                                        where item.Id == entityid && item.Active == true
                                        select item).FirstOrDefault();

                    //add additional criteria like contain the unique key
                    var sbMain = new StringBuilder();

                    var costCenterDetails = new StringBuilder();

                    var financialDetails = new StringBuilder();

                    var spentAmount = new StringBuilder();

                    var EntityCostCenterRelations = new StringBuilder();

                    sbMain.Append("	declare @EntityID AS INT = " + entityid + "  ");
                    sbMain.Append("	declare @UserID AS INT = " + userID + " ");
                    sbMain.Append("		DECLARE @ListOfID AS TABLE (ID INT IDENTITY(1, 1) NOT NULL, [Value] INT) ");

                    //-- Entity Level selection

                    sbMain.Append("		DECLARE @ELevel AS INT  ");
                    sbMain.Append("		SELECT @ELevel = LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', '')) ");
                    sbMain.Append("		FROM   PM_Entity pe ");
                    sbMain.Append("		WHERE  pe.ID = @EntityID ");

                    sbMain.Append("		INSERT INTO @ListOfID ");
                    sbMain.Append("		  ( ");
                    sbMain.Append("		    [Value] ");
                    sbMain.Append("		  ) ");
                    sbMain.Append("		SELECT FilterItem.ID ");
                    sbMain.Append("		FROM   ( ");


                    sbMain.Append("		           SELECT DISTINCT pe2.ID, ");
                    sbMain.Append("		                  pe2.UniqueKey ");
                    sbMain.Append("		           FROM   PM_Entity pe2 ");
                    sbMain.Append("		                  INNER JOIN PM_Entity pe ");
                    sbMain.Append("		                        ON  pe2.UniqueKey LIKE pe.UniqueKey + '.%' OR  pe2.UniqueKey = pe.UniqueKey ");
                    sbMain.Append("		                       AND pe2.[Active] = 1 ");
                    sbMain.Append("		                  INNER JOIN MM_EntityType vmet ");
                    sbMain.Append("		                       ON  pe.TypeId = vmet.ID ");
                    sbMain.Append("		                       AND pe.ID = @EntityID ");
                    sbMain.Append("		       ) AS FilterItem ");
                    sbMain.Append("		ORDER BY ");
                    sbMain.Append("		       FilterItem.UniqueKey ASC ");

                    //--financial details
                    financialDetails.Append(sbMain);
                    financialDetails.Append("		SELECT (SELECT pf.ID FROM PM_Financial pf WHERE pf.EntityID= MasterTable.EntityID AND pf.CostCenterID= MasterTable.CostCenterID) AS 'FinId', MasterTable.EntityID, ");
                    financialDetails.Append("		       Ent.ParentID, ");
                    financialDetails.Append("		       Ent.TypeId, ");
                    financialDetails.Append("		       Ent.UniqueKey,  dbo.financialAvailableAmount(MasterTable.EntityID,MasterTable.CostCenterID, Ent.ParentID) AS 'availableamount',");
                    financialDetails.Append("		  ISNULL( ");
                    financialDetails.Append("		           ( ");
                    financialDetails.Append("		              SELECT CONVERT( ");
                    financialDetails.Append("		                          NVARCHAR(22), ");
                    financialDetails.Append("		                          CONVERT(DATETIME, pccab2.ApproveTime, 20), ");
                    financialDetails.Append("		                          20 ");
                    financialDetails.Append("		                      ) ");
                    financialDetails.Append("		               FROM   PM_CostCenterApprovedBudget pccab2 ");
                    financialDetails.Append("		               WHERE  pccab2.CostCentreID = MasterTable.CostCenterID ");
                    financialDetails.Append("		           ), ");
                    financialDetails.Append("		           '' ");
                    financialDetails.Append("		       )               AS CCApprovedBudgetDate, ");
                    financialDetails.Append("		       ent.Level, ");
                    financialDetails.Append("		       (SELECT met.ColorCode FROM MM_EntityType met WHERE met.ID = Ent.TypeId ) AS ColorCode, ");
                    financialDetails.Append("		       (SELECT met.ShortDescription FROM MM_EntityType met WHERE met.ID = Ent.TypeId ) AS ShortDescription, ");
                    financialDetails.Append("		       (SELECT met.ColorCode FROM MM_EntityType met WHERE met.ID = (SELECT TOP 1 pe.TypeID FROM PM_Entity pe WHERE pe.ID=MasterTable.CostCenterID) ) AS CCColorCode, ");
                    financialDetails.Append("		       (SELECT met.ShortDescription FROM MM_EntityType met WHERE met.ID = (SELECT TOP 1 pe.TypeID FROM PM_Entity pe WHERE pe.ID=MasterTable.CostCenterID) ) AS CCShortDescription, ");
                    financialDetails.Append(" CASE WHEN (SELECT COUNT(*) FROM PM_Entity pe2 WHERE pe2.ParentID=ent.ID and pe2.active=1 and pe2.typeid in(SELECT ID FROM MM_EntityType met WHERE met.Category=2 AND met.IsAssociate=0)) =0 THEN 0 ELSE 1 end AS IsChildPresent, ");
                    financialDetails.Append("		       Ent.Name, ");
                    financialDetails.Append("		       MasterTable.CostCenterID, ");
                    financialDetails.Append("		       CC.Name     AS CostCenterName, ");
                    financialDetails.Append("		       MasterTable.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    MasterTable.Y AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    MasterTable.M1 AS M1,");
                        financialDetails.Append("                    MasterTable.M2 AS M2, ");
                        financialDetails.Append("                    MasterTable.M3 AS M3, ");
                        financialDetails.Append("                    MasterTable.M4 AS M4,");
                        financialDetails.Append("                    MasterTable.M5 AS M5,");
                        financialDetails.Append("                    MasterTable.M6 AS M6, ");
                        financialDetails.Append("                    MasterTable.M7 AS M7, ");
                        financialDetails.Append("                    MasterTable.M8 AS M8,");
                        financialDetails.Append("                    MasterTable.M9 AS M9,");
                        financialDetails.Append("                    MasterTable.M10 AS M10, ");
                        financialDetails.Append("                    MasterTable.M11 AS M11, ");
                        financialDetails.Append("                    MasterTable.M12 AS M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    MasterTable.Q1 AS Q1,");
                        financialDetails.Append("                    MasterTable.Q2 AS Q2, ");
                        financialDetails.Append("                    MasterTable.Q3 AS Q3, ");
                        financialDetails.Append("                    MasterTable.Q4 AS Q4,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    MasterTable.H1 AS H1,");
                        financialDetails.Append("                    MasterTable.H2 AS H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    MasterTable.Y AS Y,");
                    }


                    financialDetails.Append("		       MasterTable.SubPlanned, ");
                    financialDetails.Append("		       MasterTable.NonResPlan, ");
                    financialDetails.Append("		       MasterTable.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		       MasterTable.SubAllocated, ");
                    financialDetails.Append("		       MasterTable.NonResAlloc, ");
                    financialDetails.Append("		       MasterTable.ApprovedBudget, ");
                    financialDetails.Append("		       MasterTable.Commited, ");
                    financialDetails.Append("		       MasterTable.Spent, ");
                    financialDetails.Append("		       per.UserID  AS CostCenterOwnerID ");
                    financialDetails.Append("		FROM   ( ");
                    financialDetails.Append("		           SELECT rootlevel.EntityID, ");
                    financialDetails.Append("		                  rootlevel.CostCenterID, ");
                    financialDetails.Append("		                  SUM(rootlevel.PlannedAmount) AS PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(rootlevel.Y) AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(rootlevel.M1) AS M1,");
                        financialDetails.Append("                    SUM(rootlevel.M2) AS M2, ");
                        financialDetails.Append("                    SUM(rootlevel.M3) AS M3, ");
                        financialDetails.Append("                    SUM(rootlevel.M4) AS M4,");
                        financialDetails.Append("                    SUM(rootlevel.M5) AS M5,");
                        financialDetails.Append("                    SUM(rootlevel.M6) AS M6, ");
                        financialDetails.Append("                    SUM(rootlevel.M7) AS M7, ");
                        financialDetails.Append("                    SUM(rootlevel.M8) AS M8,");
                        financialDetails.Append("                    SUM(rootlevel.M9) AS M9,");
                        financialDetails.Append("                    SUM(rootlevel.M10) AS M10, ");
                        financialDetails.Append("                    SUM(rootlevel.M11) AS M11, ");
                        financialDetails.Append("                    SUM(rootlevel.M12) AS M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                             SUM(rootlevel.Q1) AS Q1, ");
                        financialDetails.Append("		                             SUM(rootlevel.Q2) AS Q2, ");
                        financialDetails.Append("		                             SUM(rootlevel.Q3) AS Q3, ");
                        financialDetails.Append("		                             SUM(rootlevel.Q4) AS Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(rootlevel.H1) AS H1,");
                        financialDetails.Append("                    SUM(rootlevel.H2) AS H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    SUM(rootlevel.Y) AS Y,");
                    }

                    financialDetails.Append("		                  SUM(rootlevel.ApprovedAllocatedAmount) AS  ");
                    financialDetails.Append("		                  ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                  SUM(rootlevel.ApprovedBudget) AS ApprovedBudget, ");
                    financialDetails.Append("		                  ( ");
                    financialDetails.Append("		                      SELECT TOP 1 CONVERT(NVARCHAR(22), CONVERT(DATETIME, pccab.Attr_73, 20), 20) ");
                    financialDetails.Append("		                      FROM   MM_AttributeRecord_5 pccab ");
                    financialDetails.Append("		                      WHERE  pccab.ID = rootlevel.CostCenterID ");
                    financialDetails.Append("		                  )  AS ApprovedBudgetDate, ");
                    financialDetails.Append("		                  ISNULL( ");
                    financialDetails.Append("		                      ( ");
                    financialDetails.Append("		                          SELECT SUM(pefav.Commited) ");
                    financialDetails.Append("		                          FROM   PM_Financial ");
                    financialDetails.Append("		                                 pefav ");
                    financialDetails.Append("		                                 INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                      ON  pe.ID = pefav.EntityID ");
                    financialDetails.Append("		                                      AND pe.[Active] = 1 ");

                    financialDetails.Append("		                                 INNER JOIN PM_Entity pe2 ");
                    financialDetails.Append("		                                      ON  pe.UniqueKey LIKE pe2.UniqueKey  ");
                    financialDetails.Append("		                                          + '.%' ");
                    financialDetails.Append("		                                 INNER JOIN @ListOfID LOI ");
                    financialDetails.Append("		                                      ON  pe.ID = LOI.[Value] ");
                    financialDetails.Append("		                          WHERE  pe2.ID = rootlevel.EntityID ");
                    financialDetails.Append("		                                 AND pefav.CostCenterID = rootlevel.CostCenterID ");
                    financialDetails.Append("		                      ), ");
                    financialDetails.Append("		                      0 ");
                    financialDetails.Append("		                  )  AS Commited, ");
                    financialDetails.Append("		                  ISNULL( ");
                    financialDetails.Append("		                      ( ");
                    financialDetails.Append("		                          SELECT SUM(pefav.Spent) ");
                    financialDetails.Append("		                          FROM   PM_Financial ");
                    financialDetails.Append("		                                 pefav ");
                    financialDetails.Append("		                                 INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                      ON  pe.ID = pefav.EntityID ");
                    financialDetails.Append("		                                      AND pe.[Active] = 1 ");

                    financialDetails.Append("		                                 INNER JOIN PM_Entity pe2 ");
                    financialDetails.Append("		                                      ON  pe.UniqueKey LIKE pe2.UniqueKey  ");
                    financialDetails.Append("		                                          + '.%' ");
                    financialDetails.Append("		                                 INNER JOIN @ListOfID LOI ");
                    financialDetails.Append("		                                      ON  pe.ID = LOI.[Value] ");
                    financialDetails.Append("		                          WHERE  pe2.ID = rootlevel.EntityID ");
                    financialDetails.Append("		                                 AND pefav.CostCenterID = rootlevel.CostCenterID ");
                    financialDetails.Append("		                      ), ");
                    financialDetails.Append("		                      0 ");
                    financialDetails.Append("		                  )  AS Spent, ");
                    financialDetails.Append("		                  SUM(rootlevel.PlannedAmount) AS SubPlanned, ");
                    financialDetails.Append("		                  SUM(rootlevel.ApprovedAllocatedAmount) AS SubAllocated, ");
                    financialDetails.Append("		                  SUM(rootlevel.NonResPlan) AS NonResPlan,	 ");
                    financialDetails.Append("		                  SUM(rootlevel.NonResAlloc) AS NonResAlloc ");
                    financialDetails.Append("		           FROM   ( ");
                    financialDetails.Append("		                      SELECT pefav.EntityID, ");
                    financialDetails.Append("		                             pefav.CostCenterID, ");
                    financialDetails.Append("		                             0  AS PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    0 AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    0 AS M1,");
                        financialDetails.Append("                    0 AS M2, ");
                        financialDetails.Append("                    0 AS M3, ");
                        financialDetails.Append("                    0 AS M4,");
                        financialDetails.Append("                    0 AS M5,");
                        financialDetails.Append("                    0 AS M6, ");
                        financialDetails.Append("                    0 AS M7, ");
                        financialDetails.Append("                    0 AS M8,");
                        financialDetails.Append("                    0 AS M9,");
                        financialDetails.Append("                    0 AS M10, ");
                        financialDetails.Append("                    0 AS M11, ");
                        financialDetails.Append("                    0 AS M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                             0  AS Q1, ");
                        financialDetails.Append("		                             0  AS Q2, ");
                        financialDetails.Append("		                             0  AS Q3, ");
                        financialDetails.Append("		                             0  AS Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    0 AS H1,");
                        financialDetails.Append("                    0 AS H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    0 AS Y,");
                    }


                    financialDetails.Append("		                             0  AS ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             0  AS ApprovedBudget, ");
                    financialDetails.Append("		                             0  AS Commited, ");
                    financialDetails.Append("		                             0  AS Spent, ");
                    financialDetails.Append("		                             0  AS SubPlanned, ");
                    financialDetails.Append("		                             0  AS SubAllocated, ");
                    financialDetails.Append("		                             0  AS NonResPlan, ");
                    financialDetails.Append("		                             0  AS NonResAlloc ");
                    financialDetails.Append("		                      FROM   PM_Financial pefav ");
                    financialDetails.Append("		                             INNER JOIN @ListOfID ");
                    financialDetails.Append("		                                  tss ");
                    financialDetails.Append("		                                  ON  tss.[Value] = pefav.EntityID ");
                    financialDetails.Append("		                             INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                  ON  pefav.EntityID = pe.ID ");
                    financialDetails.Append("		                      WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                             AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) = 0 ");

                    financialDetails.Append("		                      UNION ALL ");


                    financialDetails.Append("		                      SELECT main.ParentID, ");
                    financialDetails.Append("		                             main.CostCenterID, ");
                    financialDetails.Append("		                             SUM(main.PlannedAmount) AS PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(main.Y) AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(main.M1) AS M1,");
                        financialDetails.Append("                    SUM(main.M2) AS M2, ");
                        financialDetails.Append("                    SUM(main.M3) AS M3, ");
                        financialDetails.Append("                    SUM(main.M4) AS M4,");
                        financialDetails.Append("                    SUM(main.M5) AS M5,");
                        financialDetails.Append("                    SUM(main.M6) AS M6, ");
                        financialDetails.Append("                    SUM(main.M7) AS M7, ");
                        financialDetails.Append("                    SUM(main.M8) AS M8,");
                        financialDetails.Append("                    SUM(main.M9) AS M9,");
                        financialDetails.Append("                    SUM(main.M10) AS M10, ");
                        financialDetails.Append("                    SUM(main.M11) AS M11, ");
                        financialDetails.Append("                    SUM(main.M12) AS M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                             SUM(main.Q1) AS Q1, ");
                        financialDetails.Append("		                             SUM(main.Q2) AS Q2, ");
                        financialDetails.Append("		                             SUM(main.Q3) AS Q3, ");
                        financialDetails.Append("		                             SUM(main.Q4) AS Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    SUM(main.H1) AS H1,");
                        financialDetails.Append("                    SUM(main.H2) AS H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    SUM(main.Y) AS Y,");
                    }

                    financialDetails.Append("		                             SUM(main.ApprovedAllocatedAmount) AS  ");
                    financialDetails.Append("		                             ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             SUM(main.ApprovedBudget) AS ApprovedBudget, ");
                    financialDetails.Append("		                             SUM(main.Commited) AS Commited, ");
                    financialDetails.Append("		                             SUM(main.Spent) AS Spent, ");
                    financialDetails.Append("		                             SUM(main.SubPlanned) AS SubPlanned, ");
                    financialDetails.Append("		                             SUM(main.SubAllocated) AS SubAllocated, ");
                    financialDetails.Append("		                             SUM(main.PlannedAmount) - SUM(main.SubPlanned) AS  ");
                    financialDetails.Append("		                             NonResPlan, ");
                    financialDetails.Append("		                             SUM(main.ApprovedAllocatedAmount) - SUM(main.SubAllocated) AS  ");
                    financialDetails.Append("		                             NonResAlloc ");
                    financialDetails.Append("		                      FROM   ( ");
                    financialDetails.Append("		                                 SELECT children.EntityID, ");
                    financialDetails.Append("		                                        children.ParentID, ");
                    financialDetails.Append("		                                        children.CostCenterID, ");
                    financialDetails.Append("		                                        children.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.M1,");
                        financialDetails.Append("                    children.M2, ");
                        financialDetails.Append("                    children.M3, ");
                        financialDetails.Append("                    children.M4,");
                        financialDetails.Append("                    children.M5,");
                        financialDetails.Append("                    children.M6, ");
                        financialDetails.Append("                    children.M7, ");
                        financialDetails.Append("                    children.M8,");
                        financialDetails.Append("                    children.M9,");
                        financialDetails.Append("                    children.M10, ");
                        financialDetails.Append("                    children.M11, ");
                        financialDetails.Append("                    children.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                                        children.Q1, ");
                        financialDetails.Append("		                                        children.Q2, ");
                        financialDetails.Append("		                                        children.Q3, ");
                        financialDetails.Append("		                                        children.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.H1,");
                        financialDetails.Append("                    children.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    children.Y,");
                    }

                    financialDetails.Append("		                                        children.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                        children.ApprovedBudget, ");
                    financialDetails.Append("		                                        children.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                        children.Commited, ");
                    financialDetails.Append("		                                        children.Spent, ");
                    financialDetails.Append("		                                        SUM(children.SubPlanned) AS  ");
                    financialDetails.Append("		                                        SubPlanned, ");
                    financialDetails.Append("		                                        SUM(children.SubAllocated) AS  ");
                    financialDetails.Append("		                                        SubAllocated ");
                    financialDetails.Append("		                                 FROM   ( ");
                    financialDetails.Append("		                                            SELECT tbl.EntityID, ");
                    financialDetails.Append("		                                                   tbl.ParentID, ");
                    financialDetails.Append("		                                                   tbl.CostCenterID, ");
                    financialDetails.Append("		                                                   tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }

                    financialDetails.Append("		                                                   tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudget, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                   tbl.Commited, ");
                    financialDetails.Append("		                                                   tbl.Spent, ");
                    financialDetails.Append("		                                                   0 AS SubPlanned, ");
                    financialDetails.Append("		                                                   0 AS SubAllocated ");
                    financialDetails.Append("		                                            FROM   ( ");
                    financialDetails.Append("		                                                       SELECT  pefav.EntityID, ");
                    financialDetails.Append("		                                                              pe.ParentID, ");
                    financialDetails.Append("		                                                              pefav.CostCenterID, ");
                    financialDetails.Append("		                                                              pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                    }

                    financialDetails.Append("		                                                              pefav.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                              pefav.ApprovedBudget, ");
                    financialDetails.Append("		                                                              CONVERT(NVARCHAR(50), pefav.ApprovedBudgetDate, 20) AS  ");
                    financialDetails.Append("		                                                              ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                              pefav.Commited, ");
                    financialDetails.Append("		                                                              pefav.Spent ");
                    financialDetails.Append("		                                                       FROM    ");
                    financialDetails.Append("		                                                              PM_Financial  ");
                    financialDetails.Append("		                                                              pefav ");
                    financialDetails.Append("		                                                              INNER JOIN  ");
                    financialDetails.Append("		                                                                   @ListOfID ");
                    financialDetails.Append("		                                                                   tss ");
                    financialDetails.Append("		                                                                   ON   ");
                    financialDetails.Append("		                                                                       tss.[Value] =  ");
                    financialDetails.Append("		                                                                       pefav.EntityID ");
                    financialDetails.Append("		                                                              INNER JOIN  ");
                    financialDetails.Append("		                                                                   PM_Entity  ");
                    financialDetails.Append("		                                                                   pe ");
                    financialDetails.Append("		                                                                   ON   ");
                    financialDetails.Append("		                                                                       pefav.EntityID =  ");
                    financialDetails.Append("	                                                                       pe.ID ");
                    financialDetails.Append("		                                                       WHERE  pe.[Active] =  ");
                    financialDetails.Append("		                                                              1 ");
                    financialDetails.Append("		                                                              AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', '')))  ");
                    financialDetails.Append("		                                                                  != 0 ");
                    financialDetails.Append("		                                                   ) AS tbl ");

                    financialDetails.Append("		                                            UNION ALL  ");

                    financialDetails.Append("		                                            SELECT tbl.EntityID, ");
                    financialDetails.Append("		                                                   tbl.ParentID, ");
                    financialDetails.Append("		                                                   tbl.CostCenterID, ");
                    financialDetails.Append("		                                                   tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }

                    financialDetails.Append("		                                                   tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudget, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                   tbl.Commited, ");
                    financialDetails.Append("		                                                   tbl.Spent, ");
                    financialDetails.Append("		                                                   SUM(ISNULL(tblchildren.PlannedAmount, 0)) AS  ");
                    financialDetails.Append("		                                                   SubPlanned, ");
                    financialDetails.Append("		                                                   SUM(ISNULL(tblchildren.ApprovedAllocatedAmount, 0)) AS  ");
                    financialDetails.Append("		                                                   SubAllocated ");
                    financialDetails.Append("		                                            FROM   ( ");
                    financialDetails.Append("		                                                       SELECT  pe.ParentID, ");
                    financialDetails.Append("		                                                              pefav.EntityID, ");
                    financialDetails.Append("		                                                              pefav.CostCenterID, ");
                    financialDetails.Append("		                                                              pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                    }

                    financialDetails.Append("		                                                              pefav.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                              pefav.ApprovedBudget, ");
                    financialDetails.Append("		                                                              CONVERT(NVARCHAR(50), pefav.ApprovedBudgetDate, 20) AS  ");
                    financialDetails.Append("		                                                              ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                              pefav.Commited, ");
                    financialDetails.Append("		                                                              pefav.Spent, ");
                    financialDetails.Append("		                                                              pe.UniqueKey ");
                    financialDetails.Append("		                                                       FROM    ");
                    financialDetails.Append("		                                                              PM_Financial  ");
                    financialDetails.Append("		                                                              pefav ");
                    financialDetails.Append("		                                                              INNER JOIN  ");
                    financialDetails.Append("		                                                                   @ListOfID ");
                    financialDetails.Append("		                                                                   tss ");
                    financialDetails.Append("		                                                                   ON   ");
                    financialDetails.Append("		                                                                       tss.[Value] =  ");
                    financialDetails.Append("		                                                                       pefav.EntityID ");
                    financialDetails.Append("		                                                              INNER JOIN  ");
                    financialDetails.Append("		                                                                   PM_Entity  ");
                    financialDetails.Append("		                                                                   pe ");
                    financialDetails.Append("		                                                                   ON   ");
                    financialDetails.Append("		                                                                       pefav.EntityID =  ");
                    financialDetails.Append("		                                                                       pe.ID ");
                    financialDetails.Append("		                                                       WHERE  pe.[Active] =  ");
                    financialDetails.Append("		                                                              1 ");
                    financialDetails.Append("		                                                              AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) ");
                    financialDetails.Append("		                                                                  != 0 ");
                    financialDetails.Append("		                                                   ) AS tbl ");
                    financialDetails.Append("		                                                   INNER JOIN ( ");
                    financialDetails.Append("		                                                            SELECT pe.ParentID, ");
                    financialDetails.Append("		                                                                   pefav.EntityID, ");
                    financialDetails.Append("		                                                                   pefav.CostCenterID, ");
                    financialDetails.Append("		                                                                   pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                    }

                    financialDetails.Append("	                                                                   pefav.ApprovedAllocatedAmount ");
                    financialDetails.Append("		                                                            FROM    ");
                    financialDetails.Append("		                                                                   PM_Financial  ");
                    financialDetails.Append("		                                                                   pefav ");
                    financialDetails.Append("		                                                                   INNER JOIN  ");
                    financialDetails.Append("		                                                                        @ListOfID  ");
                    financialDetails.Append("		                                                                        tss ");
                    financialDetails.Append("		                                                                        ON   ");
                    financialDetails.Append("		                                                                            tss.[Value] =  ");
                    financialDetails.Append("		                                                                            pefav.EntityID ");
                    financialDetails.Append("		                                                                   INNER JOIN  ");
                    financialDetails.Append("		                                                                        PM_Entity  ");
                    financialDetails.Append("		                                                                        pe ");
                    financialDetails.Append("		                                                                        ON   ");
                    financialDetails.Append("		                                                                            pefav.EntityID =  ");
                    financialDetails.Append("		                                                                            pe.ID ");
                    financialDetails.Append("		                                                            WHERE  pe.[Active] =  ");
                    financialDetails.Append("		                                                                   1 ");
                    financialDetails.Append("		                                                                   AND  ");
                    financialDetails.Append("		                                                                       (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) ");
                    financialDetails.Append("		                                                                       !=  ");
                    financialDetails.Append("		                                                                       0 ");
                    financialDetails.Append("		                                                        ) AS tblchildren ");
                    financialDetails.Append("		                                                        ON  tbl.EntityID =  ");
                    financialDetails.Append("		                                                            tblchildren.ParentID ");
                    financialDetails.Append("		                                                        AND tbl.CostCenterID =  ");
                    financialDetails.Append("		                                                            tblchildren.CostCenterID ");
                    financialDetails.Append("		                                            GROUP BY ");
                    financialDetails.Append("		                                                   tbl.EntityID, ");
                    financialDetails.Append("		                                                   tbl.ParentID, ");
                    financialDetails.Append("		                                                   tbl.CostCenterID, ");
                    financialDetails.Append("		                                                   tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }

                    financialDetails.Append("		                                                   tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudget, ");
                    financialDetails.Append("		                                                   tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                                   tbl.Commited, ");
                    financialDetails.Append("		                                                   tbl.Spent, ");
                    financialDetails.Append("		                                                   tbl.UniqueKey ");
                    financialDetails.Append("		                                        ) AS children ");
                    financialDetails.Append("		                                 GROUP BY ");
                    financialDetails.Append("		                                        children.EntityID, ");
                    financialDetails.Append("		                                        children.ParentID, ");
                    financialDetails.Append("		                                        children.CostCenterID, ");
                    financialDetails.Append("		                                        children.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.M1,");
                        financialDetails.Append("                    children.M2, ");
                        financialDetails.Append("                    children.M3, ");
                        financialDetails.Append("                    children.M4,");
                        financialDetails.Append("                    children.M5,");
                        financialDetails.Append("                    children.M6, ");
                        financialDetails.Append("                    children.M7, ");
                        financialDetails.Append("                    children.M8,");
                        financialDetails.Append("                    children.M9,");
                        financialDetails.Append("                    children.M10, ");
                        financialDetails.Append("                    children.M11, ");
                        financialDetails.Append("                    children.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		                                        children.Q1, ");
                        financialDetails.Append("		                                        children.Q2, ");
                        financialDetails.Append("		                                        children.Q3, ");
                        financialDetails.Append("		                                        children.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    children.H1,");
                        financialDetails.Append("                    children.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    children.Y,");
                    }

                    financialDetails.Append("		                                        children.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                        children.ApprovedBudget, ");
                    financialDetails.Append("		                                        children.ApprovedBudgetDate, ");
                    financialDetails.Append("		                                        children.Commited, ");
                    financialDetails.Append("		                                        children.Spent ");
                    financialDetails.Append("		                             ) AS main ");
                    financialDetails.Append("		                      GROUP BY ");
                    financialDetails.Append("		                             main.ParentID, ");
                    financialDetails.Append("		                             main.CostCenterID ");
                    financialDetails.Append("		                  )  AS rootlevel ");
                    financialDetails.Append("		                  INNER JOIN @ListOfID  ");
                    financialDetails.Append("		                       tss ");
                    financialDetails.Append("		                       ON  tss.[Value] = rootlevel.EntityID ");
                    financialDetails.Append("		                  INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                       ON  rootlevel.EntityID = pe.ID ");
                    financialDetails.Append("		           WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                  AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) = 0 ");
                    financialDetails.Append("		           GROUP BY ");
                    financialDetails.Append("		                  rootlevel.EntityID, ");
                    financialDetails.Append("		                  rootlevel.CostCenterID ");

                    financialDetails.Append("		           UNION ALL  ");

                    //        --Get financial detail for entities level = 1 or less than 1 along with SubPlanned and SubAllocated
                    financialDetails.Append("		           SELECT  main.EntityID, ");
                    financialDetails.Append("		                  main.CostCenterID, ");
                    financialDetails.Append("		                  main.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.M1,");
                        financialDetails.Append("                    main.M2, ");
                        financialDetails.Append("                    main.M3, ");
                        financialDetails.Append("                    main.M4,");
                        financialDetails.Append("                    main.M5,");
                        financialDetails.Append("                    main.M6, ");
                        financialDetails.Append("                    main.M7, ");
                        financialDetails.Append("                    main.M8,");
                        financialDetails.Append("                    main.M9,");
                        financialDetails.Append("                    main.M10 , ");
                        financialDetails.Append("                    main.M11, ");
                        financialDetails.Append("                    main.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              main.Q1, ");
                        financialDetails.Append("		              main.Q2, ");
                        financialDetails.Append("		              main.Q3, ");
                        financialDetails.Append("		              main.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.H1,");
                        financialDetails.Append("                    main.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    main.Y,");
                    }


                    financialDetails.Append("		                  main.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                  main.ApprovedBudget, ");
                    financialDetails.Append("		                  main.ApprovedBudgetDate, ");
                    financialDetails.Append("		                  main.Commited, ");
                    financialDetails.Append("		                  main.Spent, ");
                    financialDetails.Append("		                  SUM(main.SubPlanned) AS SubPlanned, ");
                    financialDetails.Append("		                  SUM(main.SubAllocated) AS SubAllocated, ");
                    financialDetails.Append("		                  main.PlannedAmount - SUM(main.SubPlanned) AS  ");
                    financialDetails.Append("		                  NonResPlan, ");
                    financialDetails.Append("		                  main.ApprovedAllocatedAmount - SUM(main.SubAllocated) AS  ");
                    financialDetails.Append("		                  NonResAlloc ");
                    financialDetails.Append("		           FROM   ( ");
                    //--Get financial detail for entities level = 1 or less than 1 along with out SubPlanned and SubAllocated	
                    financialDetails.Append("		                      SELECT tbl.EntityID, ");
                    financialDetails.Append("		                             tbl.CostCenterID, ");
                    financialDetails.Append("		                             tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }


                    financialDetails.Append("		                             tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             tbl.ApprovedBudget, ");
                    financialDetails.Append("		                             tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                             tbl.Commited, ");
                    financialDetails.Append("		                             tbl.Spent, ");
                    financialDetails.Append("		                             0  AS SubPlanned, ");
                    financialDetails.Append("		                             0  AS SubAllocated ");
                    financialDetails.Append("		                      FROM   ( ");
                    financialDetails.Append("		                                 SELECT pefav.EntityID, ");
                    financialDetails.Append("		                                        pefav.CostCenterID, ");
                    financialDetails.Append("		                                        pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y AS Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                    }


                    financialDetails.Append("		                                        pefav.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                        pefav.ApprovedBudget, ");
                    financialDetails.Append("		                                        CONVERT(NVARCHAR(50), pefav.ApprovedBudgetDate, 20) AS  ");
                    financialDetails.Append("		                                        ApprovedBudgetDate, ");
                    financialDetails.Append("		                                        pefav.Commited, ");
                    financialDetails.Append("		                                        pefav.Spent ");
                    financialDetails.Append("		                                 FROM    ");
                    financialDetails.Append("		                                        PM_Financial  ");
                    financialDetails.Append("		                                        pefav ");
                    financialDetails.Append("		                                        INNER JOIN @ListOfID ");
                    financialDetails.Append("		                                             tss ");
                    financialDetails.Append("		                                             ON  tss.[Value] = pefav.EntityID ");
                    financialDetails.Append("		                                        INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                             ON  pefav.EntityID = pe.ID ");
                    financialDetails.Append("		                                 WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                                        AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) != 0 ");
                    financialDetails.Append("		                             )  AS tbl ");

                    financialDetails.Append("		                      UNION ALL  ");

                    //                      --Get financial detail for entities level = 1 or less than 1 along with SubPlanned and SubAllocated	those are having childrens
                    financialDetails.Append("		                      SELECT tbl.EntityID, ");
                    financialDetails.Append("		                             tbl.CostCenterID, ");
                    financialDetails.Append("		                             tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }

                    financialDetails.Append("		                             tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             tbl.ApprovedBudget, ");
                    financialDetails.Append("		                             tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                             tbl.Commited, ");
                    financialDetails.Append("		                             tbl.Spent, ");
                    financialDetails.Append("		                             SUM(ISNULL(tblchildren.PlannedAmount, 0)) AS  ");
                    financialDetails.Append("		                             SubPlanned, ");
                    financialDetails.Append("		                             SUM(ISNULL(tblchildren.ApprovedAllocatedAmount, 0)) AS  ");
                    financialDetails.Append("		                             SubAllocated ");
                    financialDetails.Append("		                      FROM   ( ");
                    financialDetails.Append("		                                 SELECT  pefav.EntityID, ");
                    financialDetails.Append("		                                        pefav.CostCenterID, ");
                    financialDetails.Append("		                                        pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8 ,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                    }

                    financialDetails.Append("		                                        pefav.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                                        pefav.ApprovedBudget, ");
                    financialDetails.Append("		                                        CONVERT(NVARCHAR(50), pefav.ApprovedBudgetDate, 20) AS  ");
                    financialDetails.Append("		                                        ApprovedBudgetDate, ");
                    financialDetails.Append("		                                        pefav.Commited, ");
                    financialDetails.Append("		                                        pefav.Spent, ");
                    financialDetails.Append("		                                        pe.UniqueKey ");
                    financialDetails.Append("		                                 FROM    ");
                    financialDetails.Append("		                                        PM_Financial  ");
                    financialDetails.Append("		                                        pefav ");
                    financialDetails.Append("		                                        INNER JOIN @ListOfID ");
                    financialDetails.Append("		                                             tss ");
                    financialDetails.Append("		                                             ON  tss.[Value] = pefav.EntityID ");
                    financialDetails.Append("		                                        INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                             ON  pefav.EntityID = pe.ID ");
                    financialDetails.Append("		                                 WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                                        AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) != 0 ");
                    financialDetails.Append("		                             ) AS tbl ");
                    financialDetails.Append("		                             INNER JOIN ( ");
                    financialDetails.Append("		                                      SELECT pe.ParentID, ");
                    financialDetails.Append("		                                             pefav.EntityID, ");
                    financialDetails.Append("		                                             pefav.CostCenterID, ");
                    financialDetails.Append("		                                             pefav.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.M1,");
                        financialDetails.Append("                    pefav.M2, ");
                        financialDetails.Append("                    pefav.M3, ");
                        financialDetails.Append("                    pefav.M4,");
                        financialDetails.Append("                    pefav.M5,");
                        financialDetails.Append("                    pefav.M6, ");
                        financialDetails.Append("                    pefav.M7, ");
                        financialDetails.Append("                    pefav.M8,");
                        financialDetails.Append("                    pefav.M9,");
                        financialDetails.Append("                    pefav.M10, ");
                        financialDetails.Append("                    pefav.M11, ");
                        financialDetails.Append("                    pefav.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		             pefav.Q1, ");
                        financialDetails.Append("		             pefav.Q2, ");
                        financialDetails.Append("		             pefav.Q3, ");
                        financialDetails.Append("		             pefav.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    pefav.H1,");
                        financialDetails.Append("                    pefav.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    pefav.Y,");
                    }

                    financialDetails.Append("		                                             pefav.ApprovedAllocatedAmount ");
                    financialDetails.Append("		                                      FROM    ");
                    financialDetails.Append("		                                             PM_Financial  ");
                    financialDetails.Append("		                                             pefav ");
                    financialDetails.Append("		                                             INNER JOIN @ListOfID  ");
                    financialDetails.Append("		                                                  tss ");
                    financialDetails.Append("		                                                  ON  tss.[Value] =  ");
                    financialDetails.Append("		                                                      pefav.EntityID ");
                    financialDetails.Append("		                                             INNER JOIN PM_Entity pe ");
                    financialDetails.Append("		                                                  ON  pefav.EntityID =  ");
                    financialDetails.Append("		                                                      pe.ID ");
                    financialDetails.Append("		                                      WHERE  pe.[Active] = 1 ");

                    financialDetails.Append("		                                             AND (LEN(pe.UniqueKey) - LEN(REPLACE(pe.UniqueKey, '.', ''))) != 0 ");
                    financialDetails.Append("		                                  ) AS tblchildren ");
                    financialDetails.Append("		                                  ON  tbl.EntityID = tblchildren.ParentID ");
                    financialDetails.Append("		                                  AND tbl.CostCenterID = tblchildren.CostCenterID ");
                    financialDetails.Append("		                      GROUP BY ");
                    financialDetails.Append("		                              tbl.EntityID, ");
                    financialDetails.Append("		                             tbl.CostCenterID, ");
                    financialDetails.Append("		                             tbl.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.M1,");
                        financialDetails.Append("                    tbl.M2, ");
                        financialDetails.Append("                    tbl.M3, ");
                        financialDetails.Append("                    tbl.M4,");
                        financialDetails.Append("                    tbl.M5,");
                        financialDetails.Append("                    tbl.M6, ");
                        financialDetails.Append("                    tbl.M7, ");
                        financialDetails.Append("                    tbl.M8,");
                        financialDetails.Append("                    tbl.M9,");
                        financialDetails.Append("                    tbl.M10, ");
                        financialDetails.Append("                    tbl.M11, ");
                        financialDetails.Append("                    tbl.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              tbl.Q1, ");
                        financialDetails.Append("		              tbl.Q2, ");
                        financialDetails.Append("		              tbl.Q3, ");
                        financialDetails.Append("		              tbl.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    tbl.H1,");
                        financialDetails.Append("                    tbl.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    tbl.Y,");
                    }


                    financialDetails.Append("		                             tbl.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                             tbl.ApprovedBudget, ");
                    financialDetails.Append("		                             tbl.ApprovedBudgetDate, ");
                    financialDetails.Append("		                             tbl.Commited, ");
                    financialDetails.Append("		                             tbl.Spent, ");
                    financialDetails.Append("		                             tbl.UniqueKey ");
                    financialDetails.Append("		                  ) AS main ");
                    financialDetails.Append("		           GROUP BY ");
                    financialDetails.Append("		                  main.EntityID, ");
                    financialDetails.Append("		                  main.CostCenterID, ");
                    financialDetails.Append("		                  main.PlannedAmount, ");

                    if (Convert.ToInt32(enumDivisonIds.Yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.Y,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Monthly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.M1,");
                        financialDetails.Append("                    main.M2, ");
                        financialDetails.Append("                    main.M3, ");
                        financialDetails.Append("                    main.M4,");
                        financialDetails.Append("                    main.M5,");
                        financialDetails.Append("                    main.M6, ");
                        financialDetails.Append("                    main.M7, ");
                        financialDetails.Append("                    main.M8,");
                        financialDetails.Append("                    main.M9,");
                        financialDetails.Append("                    main.M10 , ");
                        financialDetails.Append("                    main.M11, ");
                        financialDetails.Append("                    main.M12,");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Quaterly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("		              main.Q1, ");
                        financialDetails.Append("		              main.Q2, ");
                        financialDetails.Append("		              main.Q3, ");
                        financialDetails.Append("		              main.Q4, ");
                    }
                    else if (Convert.ToInt32(enumDivisonIds.Half_yearly) == Convert.ToInt32(ForeCastresult.ToString()))
                    {
                        financialDetails.Append("                    main.H1,");
                        financialDetails.Append("                    main.H2, ");
                    }
                    else
                    {
                        financialDetails.Append("                    main.Y,");
                    }

                    financialDetails.Append("		                  main.ApprovedAllocatedAmount, ");
                    financialDetails.Append("		                  main.ApprovedBudget, ");
                    financialDetails.Append("		                  main.ApprovedBudgetDate, ");
                    financialDetails.Append("		                  main.Commited, ");
                    financialDetails.Append("	                  main.Spent ");
                    financialDetails.Append("		       )           AS MasterTable ");
                    financialDetails.Append("		       INNER JOIN PM_Entity Ent ");
                    financialDetails.Append("		            ON  Ent.ID = MasterTable.EntityID ");
                    financialDetails.Append("		       INNER JOIN PM_Entity CC ");
                    financialDetails.Append("		            ON  CC.ID = MasterTable.CostCenterID ");
                    financialDetails.Append("		       INNER JOIN AM_Entity_Role_User per ");
                    financialDetails.Append("		            ON  CC.ID = per.EntityID ");
                    financialDetails.Append("		            AND per.RoleID = 1 ");

                    financialDetails.Append("		       INNER JOIN @ListOfID AS tss ");
                    financialDetails.Append("		            ON  tss.[Value] = MasterTable.EntityID  INNER JOIN PM_Entity_Sort pes on Ent.id = pes.id ");
                    financialDetails.Append("		ORDER BY ");
                    financialDetails.Append("		pes.S1   ASC, ");
                    financialDetails.Append("       pes.L1   ASC, ");
                    financialDetails.Append("       pes.S2   ASC, ");
                    financialDetails.Append("       pes.L2   ASC, ");
                    financialDetails.Append("       pes.S3   ASC, ");
                    financialDetails.Append("       pes.L3   ASC, ");
                    financialDetails.Append("       pes.S4   ASC, ");
                    financialDetails.Append("       pes.L4   ASC, ");
                    financialDetails.Append("       pes.S5   ASC, ");
                    financialDetails.Append("       pes.L5   ASC, ");
                    financialDetails.Append("       pes.S6   ASC, ");
                    financialDetails.Append("       pes.L6   ASC, ");
                    financialDetails.Append("       pes.S7   ASC, ");
                    financialDetails.Append("       pes.L7   ASC, ");
                    financialDetails.Append("       pes.S8   ASC, ");
                    financialDetails.Append("       pes.L8   ASC, ");
                    financialDetails.Append("       pes.S9   ASC, ");
                    financialDetails.Append("       pes.L9   ASC, ");
                    financialDetails.Append("       pes.S10  ASC, ");
                    financialDetails.Append("       pes.L10  ASC  ");

                    IList financialResult = tx.PersistenceManager.PlanningRepository.ExecuteQuery(financialDetails.ToString());
                    List<object> commitAmountObj = new List<object>();
                    IList<IFinancialMetadataAttributewithValues> metadata = new List<IFinancialMetadataAttributewithValues>();
                    var entityfinancialccCount = (from item in tx.PersistenceManager.TaskRepository.Query<FinancialDao>()
                                                  where item.Entityid == entityid
                                                  select item).ToList().Count();
                    if (financialResult.Count > 0)
                    {

                        metadata = FundingCostcenterMetadataValues(proxy, financialResult, entityfinancialccCount);
                        commitAmountObj = GetCommitTransactions(proxy, financialResult);
                    }

                    IList<IFinancialDetail> iifinList = new List<IFinancialDetail>();
                    IList<IFinancialDetail> iifinResultList = new List<IFinancialDetail>();

                    foreach (var val in financialResult)
                    {
                        IFinancialDetail ifinLst = new FinancialDetail();
                        ifinLst.FinId = (int)((System.Collections.Hashtable)(val))["FinId"];
                        ifinLst.ApprovedAllocatedAmount = (decimal)((System.Collections.Hashtable)(val))["ApprovedAllocatedAmount"];
                        ifinLst.ApprovedBudget = (decimal)((System.Collections.Hashtable)(val))["ApprovedBudget"];
                        ifinLst.Commited = (decimal)((System.Collections.Hashtable)(val))["Commited"];
                        ifinLst.CostCenterID = (int)((System.Collections.Hashtable)(val))["CostCenterID"];
                        ifinLst.CostCenterOwnerID = (int)((System.Collections.Hashtable)(val))["CostCenterID"];
                        ifinLst.EntityID = (int)((System.Collections.Hashtable)(val))["EntityID"];
                        ifinLst.EntityName = (string)((System.Collections.Hashtable)(val))["Name"];
                        ifinLst.CostCenterName = (string)((System.Collections.Hashtable)(val))["CostCenterName"];
                        ifinLst.NonResAlloc = (decimal)((System.Collections.Hashtable)(val))["NonResAlloc"];
                        ifinLst.NonResPlan = (decimal)((System.Collections.Hashtable)(val))["NonResPlan"];
                        ifinLst.ParentID = (int)((System.Collections.Hashtable)(val))["ParentID"];
                        ifinLst.PlannedAmount = (decimal)((System.Collections.Hashtable)(val))["PlannedAmount"];
                        ifinLst.Spent = (decimal)((System.Collections.Hashtable)(val))["Spent"];
                        ifinLst.SubAllocated = (decimal)((System.Collections.Hashtable)(val))["SubAllocated"];
                        ifinLst.SubPlanned = (decimal)((System.Collections.Hashtable)(val))["SubPlanned"];
                        ifinLst.TypeId = (int)((System.Collections.Hashtable)(val))["TypeId"];
                        ifinLst.UniqueKey = (string)((System.Collections.Hashtable)(val))["UniqueKey"];
                        iifinList.Add(ifinLst);

                    }

                    decimal Spent = 0;
                    decimal ApprovedBudget = 0;
                    decimal NonResAlloc = 0;
                    decimal ApprovedAllocatedAmount = 0;
                    decimal NonResPlan = 0;
                    decimal PlannedAmount = 0;
                    decimal SubAllocated = 0;
                    decimal SubPlanned = 0;
                    decimal Commited = 0;
                    decimal budgetdev = 0;
                    IList<IFinancialDetail> CostCenterObject = new List<IFinancialDetail>();

                    foreach (var val in iifinList)
                    {
                        CostCenterObject = new List<IFinancialDetail>();
                        IList<IFinancialDetail> uniqueResult = iifinResultList.Where(a => a.EntityID == val.EntityID).ToList();
                        if (uniqueResult.Count == 0)
                        {
                            IList<IFinancialDetail> ifinTemp = new List<IFinancialDetail>();
                            ifinTemp = iifinList.Where(a => a.EntityID == val.EntityID).ToList();
                            foreach (var finObj in ifinTemp)
                            {

                                Spent += finObj.Spent;
                                ApprovedBudget += finObj.ApprovedBudget;
                                NonResAlloc += finObj.NonResAlloc;
                                ApprovedAllocatedAmount += finObj.ApprovedAllocatedAmount;
                                NonResPlan += finObj.NonResPlan;
                                PlannedAmount += finObj.PlannedAmount;
                                SubAllocated += finObj.SubAllocated;
                                SubPlanned += finObj.SubPlanned;
                                Commited += finObj.Commited;
                                if (finObj.ApprovedBudgetDate != "")
                                {
                                    budgetdev += finObj.ApprovedAllocatedAmount - finObj.ApprovedBudget;
                                }

                                decimal ccavailable = 0, amount = 0;
                                foreach (var data in commitAmountObj)
                                {
                                    var CCID = data.GetType().GetProperty("CCID").GetValue(data, null);
                                    var EID = data.GetType().GetProperty("EID").GetValue(data, null);
                                    var ccamount = data.GetType().GetProperty("Amount").GetValue(data, null);
                                    if ((int)EID == val.EntityID && (int)CCID == val.CostCenterID)
                                    {
                                        amount += Convert.ToDecimal((int)ccamount);
                                    }
                                }
                                ccavailable += finObj.NonResAlloc - amount;

                                IFinancialDetail iccfinLst = new FinancialDetail();
                                iccfinLst.FinId = finObj.FinId;
                                iccfinLst.ApprovedAllocatedAmount = finObj.ApprovedAllocatedAmount;
                                iccfinLst.ApprovedBudget = finObj.ApprovedBudget;
                                iccfinLst.Commited = finObj.Commited;
                                iccfinLst.CostCenterID = finObj.CostCenterID;
                                iccfinLst.CostCenterOwnerID = finObj.CostCenterOwnerID;
                                iccfinLst.EntityID = finObj.EntityID;
                                iccfinLst.InRequest = finObj.PlannedAmount - finObj.ApprovedAllocatedAmount;
                                iccfinLst.EntityName = finObj.EntityName;
                                iccfinLst.CostCenterName = finObj.CostCenterName;
                                iccfinLst.NonResAlloc = finObj.NonResAlloc;
                                iccfinLst.NonResPlan = finObj.NonResPlan;
                                iccfinLst.ParentID = finObj.ParentID;
                                iccfinLst.PlannedAmount = finObj.PlannedAmount;
                                iccfinLst.Spent = finObj.Spent;
                                iccfinLst.SubAllocated = finObj.SubAllocated;
                                iccfinLst.SubPlanned = finObj.SubPlanned;
                                iccfinLst.TypeId = finObj.TypeId;
                                iccfinLst.UniqueKey = finObj.UniqueKey;
                                iccfinLst.available = ccavailable;
                                iccfinLst.BudgetDeviation = finObj.ApprovedBudgetDate != "" ? (finObj.ApprovedAllocatedAmount - finObj.ApprovedBudget) : 0;
                                iccfinLst.DynamicData = FinancialTransactionMetadataValues(proxy, finObj.FinId, finObj.EntityID, finObj.CostCenterID, (int)FinancialMetadaTypes.FundingCostcenter);
                                CostCenterObject.Add(iccfinLst);

                            }
                            decimal available = 0, entityAmount = 0;
                            foreach (var data in commitAmountObj)
                            {
                                var CCID = data.GetType().GetProperty("CCID").GetValue(data, null);
                                var EID = data.GetType().GetProperty("EID").GetValue(data, null);
                                var ccamount = data.GetType().GetProperty("Amount").GetValue(data, null);
                                if ((int)EID == val.EntityID)
                                {
                                    entityAmount += Convert.ToDecimal((int)ccamount);
                                }
                            }
                            available += NonResAlloc - entityAmount;
                            IFinancialDetail ifinLst = new FinancialDetail();
                            ifinLst.FinId = val.FinId;
                            ifinLst.ApprovedAllocatedAmount = ApprovedAllocatedAmount;
                            ifinLst.ApprovedBudget = ApprovedBudget; ;
                            ifinLst.Commited = Commited;
                            ifinLst.CostCenterID = val.CostCenterID;
                            ifinLst.CostCenterOwnerID = val.CostCenterOwnerID;
                            ifinLst.EntityID = val.EntityID;
                            ifinLst.EntityName = val.EntityName;
                            ifinLst.CostCenterName = val.CostCenterName;
                            ifinLst.NonResAlloc = NonResAlloc;
                            ifinLst.NonResPlan = NonResPlan;
                            ifinLst.ParentID = val.ParentID;
                            ifinLst.PlannedAmount = PlannedAmount;
                            ifinLst.Spent = Spent;
                            ifinLst.SubAllocated = SubAllocated;
                            ifinLst.SubPlanned = SubPlanned;
                            ifinLst.TypeId = val.TypeId;
                            ifinLst.UniqueKey = val.UniqueKey;
                            ifinLst.available = available;
                            ifinLst.BudgetDeviation = budgetdev;
                            ifinLst.CostCenterList = CostCenterObject;
                            iifinResultList.Add(ifinLst);

                            Spent = 0;
                            ApprovedBudget = 0;
                            NonResAlloc = 0;
                            ApprovedAllocatedAmount = 0;
                            NonResPlan = 0;
                            PlannedAmount = 0;
                            SubAllocated = 0;
                            SubPlanned = 0;
                            Commited = 0;
                            budgetdev = 0;

                        }
                    }

                    iifinResultList = iifinResultList.Where(a => a.EntityID == entityid).ToList();

                    if (costcenterid > 0)
                    {
                        iifinResultList = iifinResultList[0].CostCenterList.Where(a => a.CostCenterID == costcenterid).ToList();
                    }
                    else
                        iifinResultList = iifinResultList[0].CostCenterList.ToList();

                    return iifinResultList;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            return null;

        }

        private void CopyAdminSettingsfiletoAPI()
        {
            string fileName = "AdminSettings.xml";
            string sourcePath = ConfigurationManager.AppSettings["OriginalXMLpath"];
            string targetPath = ConfigurationManager.AppSettings["APIXMLPath"];
            string sourceFile = System.IO.Path.Combine(sourcePath, fileName);
            string destFile = System.IO.Path.Combine(targetPath, fileName);
            System.IO.File.Copy(sourceFile, destFile, true);
        }
        /// <summary>
        /// GetLockStatus
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="EntityID"></param>
        /// <returns>bool of entity lock status</returns>
        public Tuple<bool, bool> GetLockStatus(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder str_getlock = new StringBuilder();
                    str_getlock.Append("Select CASE WHEN pe.IsLock = 1 THEN 1 WHEN ( ( SELECT COUNT(*) FROM   ");
                    str_getlock.Append(" AM_GlobalRole_User agru WHERE  agru.UserId = " + proxy.MarcomManager.User.Id + " AND agru.GlobalRoleId in (1) ) > 0 )THEN 0 ");
                    str_getlock.Append(" WHEN ( ( SELECT COUNT(*) FROM   AM_Entity_Role_User aeru  inner join AM_EntityTypeRoleAcl aera on aera.ID = aeru.RoleID ");
                    str_getlock.Append(" WHERE  aeru.EntityID = " + EntityID + " AND aeru.UserID = " + proxy.MarcomManager.User.Id + " AND aera.EntityRoleID IN (1,2,8) ) >0 ");
                    str_getlock.Append(" or ");
                    str_getlock.Append(" ((select COUNT(*) from AM_GlobalAcl where GlobalRoleID in (");
                    str_getlock.Append(" select GlobalRoleId from AM_GlobalRole_User agu");
                    str_getlock.Append(" where UserId=" + proxy.MarcomManager.User.Id + ") and ModuleID=3 and FeatureID=22 and AccessPermission=1)=1) ");
                    str_getlock.Append(" ) THEN 0 ");
                    str_getlock.Append(" ELSE 1 END AS IsReadOnly");
                    str_getlock.Append(" from PM_Entity pe where pe.ID=" + EntityID + "");
                    var islockvalue = tx.PersistenceManager.PlanningRepository.ExecuteQuery(str_getlock.ToString());
                    Tuple<bool, bool> IsReadOnly = Tuple.Create(Convert.ToBoolean((int)((System.Collections.Hashtable)(islockvalue)[0])["IsReadOnly"]), tx.PersistenceManager.PlanningRepository.Get<BaseEntityDao>(EntityID).IsLock);
                    //return Convert.ToBoolean((int)((System.Collections.Hashtable)(islockvalue)[0])["IsReadOnly"]);
                    return IsReadOnly;
                }
            }
            catch
            {
                return null;
            }
        }
        /// <summary>
        /// GetEntityLevelAccess
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="EntityID"></param>
        /// <param name="UserID"></param>
        /// <returns>string of user access and entityrole access to convert into json</returns>
        public string GetEntityLevelAccess(PlanningManagerProxy proxy, int UserID, int EntityID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //get user details for userid
                    UserDao user = new UserDao();
                    user = tx.PersistenceManager.UserRepository.Get<UserDao>(UserID);
                    string UserName = user.FirstName + " " + user.LastName;
                    //get global role details for the userid
                    var globalrls = tx.PersistenceManager.UserRepository.GetAll<GlobalRoleUserDao>().Where(a => a.Userid == UserID).ToList();
                    List<string> GlobalRoles = new List<string>();
                    bool IsGlobalAdmin = false;
                    bool EntityLevelAccess = false;
                    //loop is to fetch the global role caption and to find whether userid is admin or not
                    for (int i = 0; i < globalrls.Count; i++)
                    {
                        var glblrls = tx.PersistenceManager.UserRepository.Get<GlobalRoleDao>(globalrls[i].GlobalRoleId);
                        GlobalRoles.Add(glblrls.Caption.ToString());
                        if (glblrls.Id == 1)
                        {
                            if (IsGlobalAdmin != true)
                                IsGlobalAdmin = true;
                        }
                    }
                    //fetch Entityrole user details for particular entityid and userid
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    prplst.Add(new MultiProperty { propertyName = EntityRoleUserDao.PropertyNames.Entityid, propertyValue = EntityID });
                    prplst.Add(new MultiProperty { propertyName = EntityRoleUserDao.PropertyNames.Userid, propertyValue = UserID });
                    var entityroleusers = (tx.PersistenceManager.UserRepository.GetEquals<EntityRoleUserDao>(prplst)).ToList();
                    List<string> EntityRoles = new List<string>();
                    //loop is to get entity level role caption and to find user is having owner, editor permission
                    for (int i = 0; i < entityroleusers.Count; i++)
                    {
                        var entyrls = tx.PersistenceManager.UserRepository.Get<EntityTypeRoleAclDao>(entityroleusers[i].Roleid);
                        EntityRoles.Add(entyrls.Caption.ToString());
                        if (entyrls.EntityRoleID == 1 || entyrls.EntityRoleID == 2)
                        {
                            if (EntityLevelAccess != true)
                                EntityLevelAccess = true;
                        }
                    }
                    //generating the string for the access 
                    StringBuilder entityrolesAccess = new StringBuilder();
                    entityrolesAccess.Append("{\"UserAccess\":{\"UserID\":\"" + UserID + "\",\"UserName\":\"" + UserName + "\",");
                    entityrolesAccess.Append("\"GlobalRoles\":");
                    int count = 0;
                    for (int i = 0; i < GlobalRoles.Count; i++)
                    {
                        if (count > 0)
                            entityrolesAccess.Append(",");
                        if (i == 0)
                            entityrolesAccess.Append("[");
                        entityrolesAccess.Append("\"" + GlobalRoles[i] + "\"");
                        if (GlobalRoles.Count == 1 || i == GlobalRoles.Count - 1)
                            entityrolesAccess.Append("]");
                        count++;
                    }
                    entityrolesAccess.Append(",\"IsAdmin\":\"");
                    if (IsGlobalAdmin == true)
                        entityrolesAccess.Append("true\"");
                    else
                        entityrolesAccess.Append("false\"");

                    if (EntityID != 0)
                    {
                        int countrole = 0;
                        entityrolesAccess.Append(",\"EntityLevelAccess\":{\"EntityID\":\"" + EntityID + "\",\"EntityRoles\":");
                        for (int i = 0; i < EntityRoles.Count; i++)
                        {
                            if (countrole > 0)
                                entityrolesAccess.Append(",");
                            if (i == 0)
                                entityrolesAccess.Append("[");
                            entityrolesAccess.Append("\"" + EntityRoles[i] + "\"");
                            if (EntityRoles.Count == 1 || i == EntityRoles.Count - 1)
                                entityrolesAccess.Append("]");
                            countrole++;
                        }
                        if (EntityRoles.Count == 0)
                        {
                            entityrolesAccess.Append("\"\"");
                        }
                        entityrolesAccess.Append(",\"FinancialAccess\":\"");
                        if (IsGlobalAdmin == true || EntityLevelAccess == true)
                            entityrolesAccess.Append("true\"}");
                        else
                            entityrolesAccess.Append("false\"}");
                    }
                    entityrolesAccess.Append("}}");
                    return entityrolesAccess.ToString();
                }
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public string InsertUpdateEntityPeriodLst(PlanningManagerProxy proxy, JObject jobj, int EntityID)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    JArray arr = (JArray)jobj["GanttCurrentDateCollections"];
                    IList<EntityPeriodDao> entPeriodlst = new List<EntityPeriodDao>();
                    for (int i = 0; i < arr.Count; i++)
                    {
                        EntityPeriodDao prd = new EntityPeriodDao();
                        prd.Id = (int)arr[i]["Id"];
                        prd.Description = (string)arr[i]["Description"];
                        prd.EndDate = (DateTime)arr[i]["EndDate"];
                        prd.Entityid = EntityID;
                        prd.SortOrder = (int)arr[i]["SortOrder"];
                        prd.Startdate = (DateTime)arr[i]["Startdate"];
                        entPeriodlst.Add(prd);

                    }

                    tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(entPeriodlst);
                    tx.Commit();


                }

                //InsertUpdateGanttEntitySortorder(proxy, EntityID);
                string XmlReturn = "";
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder EntityPeriodQry = new StringBuilder();
                    EntityPeriodQry.Append(" SELECT(SELECT ( ");
                    EntityPeriodQry.Append(" SELECT CONVERT(NVARCHAR(10), pep.StartDate, 120) '@s', ");
                    EntityPeriodQry.Append("  CONVERT(NVARCHAR(10), pep.EndDate, 120) '@e', ");
                    EntityPeriodQry.Append(" pep.[Description] '@d',ROW_NUMBER() over(ORDER BY pep.Startdate) '@sid', ");
                    EntityPeriodQry.Append(" pep.ID '@o' ");
                    EntityPeriodQry.Append(" FROM   PM_EntityPeriod pep ");
                    EntityPeriodQry.Append(" WHERE  pep.EntityID = ? ORDER BY pep.Startdate FOR XML PATH('p'), TYPE ");
                    EntityPeriodQry.Append(" ) FOR XML PATH('root'))as 'root' ");
                    var entityResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(EntityPeriodQry.ToString(), EntityID).Cast<Hashtable>();
                    foreach (var res in entityResult)
                    {
                        XmlReturn = res["root"].ToString();
                    }
                    tx.Commit();
                    return XmlReturn;
                }
            }
            catch
            {
            }
            return "";
        }

        public bool GetAttachmentEditFeature(PlanningManagerProxy proxy)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                StringBuilder str_getlockattchment = new StringBuilder();
                str_getlockattchment.Append(" SELECT COUNT(*) as permissioncount ");
                str_getlockattchment.Append(" FROM   AM_GlobalAcl ac ");
                str_getlockattchment.Append(" INNER JOIN MM_Module mm ");
                str_getlockattchment.Append(" ON  mm.ID = ac.ModuleID ");
                str_getlockattchment.Append(" AND mm.IsEnable = 1 ");
                str_getlockattchment.Append(" INNER JOIN MM_Feature mf ");
                str_getlockattchment.Append(" ON  mf.ID = ac.FeatureID ");
                str_getlockattchment.Append(" AND mf.IsEnable = 1 ");
                str_getlockattchment.Append(" WHERE  GlobalRoleID IN (SELECT GlobalRoleID ");
                str_getlockattchment.Append(" FROM   AM_GlobalRole_User ");
                str_getlockattchment.Append(" WHERE  UserId = " + proxy.MarcomManager.User.Id + ") ");
                str_getlockattchment.Append(" AND ac.AccessPermission = 1 AND ac.FeatureID=" + (int)FeatureID.AttchmentEdit + " ");
                var permissioncount = tx.PersistenceManager.PlanningRepository.ExecuteQuery(str_getlockattchment.ToString());
                return Convert.ToBoolean((int)((System.Collections.Hashtable)(permissioncount)[0])["permissioncount"]);
            }



        }



        public int CreateCalender(PlanningManagerProxy proxy, string CalenderName, bool status, string CalenderDescription, IList<ICalenderFulfillCondtions> objCalenderFullfilConditionsList, IList<IEntityRoleUser> objMembersList, List<int> selectedEntities, DateTime CalenderPublishedOn, int CalenderVisPeriod, int CalenderVisType, bool CalenderisExternal, List<int> selectedTabs)
        {
            try
            {
                int calenderid = 0;
                var email = proxy.MarcomManager.User.Email;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    Guid calguid = Guid.NewGuid();
                    calenderid = GetBaseEntityID(35, CalenderName, tx, 0, true);

                    CalenderDao calobjDao = new CalenderDao();
                    calobjDao.Name = HttpUtility.HtmlEncode(CalenderName);
                    calobjDao.CalenderStatus = status;
                    calobjDao.Description = HttpUtility.HtmlEncode(CalenderDescription);
                    calobjDao.PublishedOn = CalenderPublishedOn;
                    calobjDao.IsExternal = CalenderisExternal;
                    calobjDao.Visibilityperiod = CalenderVisPeriod;
                    calobjDao.Visibilitytype = CalenderVisType;
                    calobjDao.Typeid = 0;
                    calobjDao.OwnerID = proxy.MarcomManager.User.Id;
                    calobjDao.CreatedOn = DateTime.Now;
                    calobjDao.Id = calenderid;
                    calobjDao.ExternalUrlID = calguid;
                    tx.PersistenceManager.PlanningRepository.Save<CalenderDao>(calobjDao);
                    //calenderid = calobjDao.Id;
                    if (selectedEntities != null)
                    {
                        foreach (int entityID in selectedEntities)
                        {
                            CalenderEntityValueDao objCalentVal = new CalenderEntityValueDao();
                            objCalentVal.Calenderid = calenderid;
                            objCalentVal.Entityid = entityID;
                            tx.PersistenceManager.PlanningRepository.Save<CalenderEntityValueDao>(objCalentVal);
                        }
                    }

                    if (selectedTabs != null)
                    {
                        foreach (int tabID in selectedTabs)
                        {
                            CalenderTabDao objCalenTabval = new CalenderTabDao();
                            objCalenTabval.Calenderid = calenderid;
                            objCalenTabval.CustomTabid = tabID;
                            tx.PersistenceManager.PlanningRepository.Save<CalenderTabDao>(objCalenTabval);
                        }
                    }
                    if (objCalenderFullfilConditionsList != null)
                    {
                        IList<CalenderConditionDao> Iobjcondao = new List<CalenderConditionDao>();
                        IList<CalenderConditionValueDao> listObjfulfullValue = new List<CalenderConditionValueDao>();
                        foreach (var ab in objCalenderFullfilConditionsList)
                        {
                            CalenderConditionDao objCon = new CalenderConditionDao();
                            objCon.Calenderid = calenderid;
                            objCon.EntityTypeid = ab.EntityTypeid;
                            objCon.Attributeid = ab.Attributeid;
                            objCon.ConditionType = ab.ConditionType;
                            objCon.AttributeLevel = ab.AttributeLevel;
                            objCon.SortOrder = 1;
                            tx.PersistenceManager.PlanningRepository.Save<CalenderConditionDao>(objCon);

                            var conditionId = objCon.Id;
                            if (ab.CalenderConditionValue != null)
                            {
                                var conditionValueObj = ab.CalenderConditionValue;
                                foreach (var objew in conditionValueObj)
                                {
                                    CalenderConditionValueDao conditionDao = new CalenderConditionValueDao();
                                    conditionDao.Conditionid = conditionId;
                                    conditionDao.Value = Convert.ToInt32(objew);
                                    listObjfulfullValue.Add(conditionDao);
                                }
                            }
                            else
                            {
                                CalenderConditionValueDao conditionDao = new CalenderConditionValueDao();
                                conditionDao.Conditionid = conditionId;
                                listObjfulfullValue.Add(conditionDao);
                            }
                            tx.PersistenceManager.PlanningRepository.Save<CalenderConditionValueDao>(listObjfulfullValue);
                        }
                    }

                    if (objMembersList != null)
                    {
                        IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                        foreach (var a in objMembersList)
                        {
                            EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                            int RoleID = a.Roleid;
                            if (a.Roleid == 1)
                            {
                                //check with entity type id to be used
                                var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == 35 && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                RoleID = NewObj.ID;
                            }

                            entityroledao.Entityid = calenderid;
                            entityroledao.Roleid = RoleID;
                            entityroledao.Userid = a.Userid;
                            entityroledao.IsInherited = a.IsInherited;
                            entityroledao.InheritedFromEntityid = a.InheritedFromEntityid;
                            Ientitroledao.Add(entityroledao);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientitroledao);
                    }
                    tx.Commit();


                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    //fs.AddNewsFeed( 1, entityId, entityTypeName, "", name, "", 0);
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.action = "create entity";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.EntityId = calenderid;
                    obj.EntityTypeId = 35;
                    obj.AttributeName = CalenderName;
                    obj.TypeName = "Calender";
                    obj.CreatedOn = DateTimeOffset.Now;
                    obj.ParentId = 0;
                    fs.AsynchronousNotify(obj);

                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Updated the Feeds", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs1 = new Utility.FeedNotificationServer();
                    NotificationFeedObjects obj1 = new NotificationFeedObjects();
                    obj1.action = "entity member added";
                    obj1.Actorid = proxy.MarcomManager.User.Id;
                    obj1.EntityId = calenderid;
                    obj1.EntityTypeId = 35;
                    obj1.AttributeName = CalenderName;
                    obj1.TypeName = "Calender";
                    obj1.CreatedOn = DateTimeOffset.Now;
                    obj1.ParentId = 0;
                    obj1.obj3 = tx.PersistenceManager.AccessRepository.ExecuteQuery("select * from AM_Entity_Role_User where EntityID='" + calenderid + "' or EntityID='" + 0 + "'");

                    fs1.AsynchronousNotify(obj1);

                    InsertUpdateGanttEntitySortorder(proxy, calenderid);
                }
                return calenderid;
            }
            catch (Exception)
            {

                return 0;
            }
        }

        public IList<IEntity> GetEntitiesfrCalender(PlanningManagerProxy planningManagerProxy, IList<ICalenderFulfillCondtions> objFullfilConditions)
        {
            try
            {
                IList<IEntity> ientLst = new List<IEntity>();
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {
                    var attributeResult = tx.PersistenceManager.PlanningRepository.Query<AttributeDao>();
                    StringBuilder querySb = new StringBuilder();
                    querySb.Append("SELECT DISTINCT pe.ID ,pe.Name as [EntityName],UU.FirstName +' ' + UU.LastName AS [OwnerName] ");
                    querySb.Append(" FROM   PM_Entity pe");
                    querySb.Append(" INNER JOIN AM_Entity_Role_User AERU ");
                    querySb.Append(" INNER JOIN AM_EntityTypeRoleAcl AETRA ON AETRA.ID = AERU.RoleID ");
                    querySb.Append(" on AERU.EntityID = pe.ID   AND AETRA.EntityRoleID = 1 AND pe.Active = 1");
                    querySb.Append(" INNER JOIN UM_User UU ON UU.ID = AERU.UserID");
                    querySb.Append(" WHERE AETRA.EntityRoleID = 1  AND ");
                    Boolean BraketStart = false;
                    for (int i = 0; i < objFullfilConditions.Count; i++)
                    {
                        int attributeId = Convert.ToInt32(objFullfilConditions[i].Attributeid);
                        int attributeTypeId = attributeResult.Where(a => a.Id == attributeId).Select(a => a.AttributeTypeID).FirstOrDefault();

                        bool IsAnd = false;
                        if (i > 0)
                        {
                            if (objFullfilConditions[i].ConditionType == 1)
                            {
                                querySb.AppendLine("     OR");
                                if (objFullfilConditions.Count - 1 > i)
                                {
                                    if (objFullfilConditions[i + 1].ConditionType == 2)
                                    {
                                        querySb.AppendLine("  (");
                                        BraketStart = true;
                                    }
                                }
                            }
                            else
                            {
                                querySb.AppendLine(" AND");
                                if (objFullfilConditions.Count - 1 > i)
                                {
                                    if (objFullfilConditions[i + 1].ConditionType == 1)
                                    {
                                        IsAnd = true;
                                    }
                                }
                                else
                                {
                                    IsAnd = true;
                                }
                            }
                        }
                        else
                        {
                            if (objFullfilConditions.Count - 1 > i)
                            {
                                if (objFullfilConditions[i + 1].ConditionType == 2)
                                {
                                    querySb.AppendLine(" (");
                                    BraketStart = true;
                                }
                            }
                        }

                        string idString = "";
                        if (objFullfilConditions[i].CalenderConditionValue != null)
                        {
                            var d = objFullfilConditions[i].CalenderConditionValue;
                            idString = String.Join(",", objFullfilConditions[i].CalenderConditionValue);
                        }
                        if (idString != "")
                        {
                            if (attributeTypeId == 3)//Single Select
                            {
                                querySb.Append(" pe.id IN (SELECT mar.Id");
                                querySb.Append(" FROM   MM_AttributeRecord_" + objFullfilConditions[i].EntityTypeid + " mar");
                                querySb.Append(" WHERE  mar.Attr_" + attributeId + " IN (" + idString + "))");
                            }
                            else if (attributeTypeId == 4)//Multi Select
                            {
                                querySb.Append(" pe.id IN (SELECT mms.EntityID");
                                querySb.Append(" FROM   MM_MultiSelect mms");
                                querySb.Append(" INNER JOIN PM_Entity pe2");
                                querySb.Append(" ON  pe2.ID = mms.EntityID");
                                querySb.Append(" AND pe2.TypeID = " + objFullfilConditions[i].EntityTypeid + "");
                                querySb.Append(" WHERE  mms.AttributeID = " + attributeId + "");
                                querySb.Append(" AND mms.OptionID IN (" + idString + "))");
                            }
                            else if (attributeTypeId == 6)//Tree
                            {
                                querySb.Append(" pe.id IN (SELECT mtv.EntityID");
                                querySb.Append(" FROM   MM_TreeValue mtv");
                                querySb.Append(" INNER JOIN PM_Entity pe2");
                                querySb.Append(" ON  pe2.ID = mtv.EntityID");
                                querySb.Append(" AND pe2.TypeID = " + objFullfilConditions[i].EntityTypeid + "");
                                querySb.Append(" WHERE  mtv.AttributeID = " + attributeId + "");
                                querySb.Append(" AND mtv.NodeID IN (" + idString + "))");
                            }
                            else if (attributeTypeId == 0)//Tree
                            {
                                querySb.Append(" pe.TypeID = " + objFullfilConditions[i].EntityTypeid + "");
                            }
                        }
                        else
                        {
                            querySb.Append(" pe.TypeID = " + objFullfilConditions[i].EntityTypeid + "");
                        }
                        if (IsAnd && BraketStart)
                        {
                            querySb.AppendLine(" )");
                            BraketStart = false;
                        }
                    }
                    var entityData = tx.PersistenceManager.PlanningRepository.ExecuteQuery(querySb.ToString()).Cast<Hashtable>().ToList();

                    if (entityData.Count > 0)
                    {
                        foreach (var entData in entityData)
                        {
                            IEntity objentity = new Entity();
                            objentity.EntityID = Convert.ToInt32(entData["ID"]);
                            objentity.Name = Convert.ToString(entData["EntityName"]);
                            objentity.OwnerName = Convert.ToString(entData["OwnerName"]);
                            ientLst.Add(objentity);
                        }
                    }
                    tx.Commit();
                }
                return ientLst;
            }
            catch (Exception)
            {
                return null;
            }
        }


        public IList<ICalender> GetCalenders(PlanningManagerProxy planningManagerProxy)
        {
            try
            {
                IList<ICalender> icalLst = new List<ICalender>();
                //IList<IEntity> ientLst = new List<IEntity>();
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {
                    StringBuilder calQuery = new StringBuilder();
                    calQuery.Append("SELECT [ID],[Name],[Description],[IsExternal] FROM PM_Calender");
                    var calenders = tx.PersistenceManager.PlanningRepository.ExecuteQuery(calQuery.ToString()).Cast<Hashtable>().ToList();
                    foreach (var cal in calenders)
                    {
                        ICalender objCal = new Calenderclass();
                        objCal.Id = Convert.ToInt32(cal["ID"]);
                        objCal.Name = Convert.ToString(cal["Name"]);
                        objCal.Description = Convert.ToString(cal["Description"]);
                        objCal.IsExternal = Convert.ToBoolean(cal["IsExternal"]);
                        icalLst.Add(objCal);
                    }
                    tx.Commit();
                }
                return icalLst;
            }
            catch (Exception)
            {
                return null;
            }
        }


        public IList<int> GetEntitiesforSelectedCalender(PlanningManagerProxy planningManagerProxy, int calID)
        {
            try
            {
                IList<int> entityIDS = new List<int>();
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {
                    var entityIds = tx.PersistenceManager.PlanningRepository.Query<CalenderEntityValueDao>().Where(a => a.Calenderid == calID).ToList().Select(a => a.Entityid);
                    foreach (int entityID in entityIds)
                    {
                        entityIDS.Add(entityID);
                    }
                    tx.Commit();
                }
                return entityIDS;
            }
            catch (Exception)
            {
                return null;
            }
        }



        public ICalenderFulfillCondtions GettingCalenderFulfillmentBlockDetails(PlanningManagerProxy proxy, int calenderId)
        {
            try
            {
                IList<ICalenderFulfillCondtions> objfulfillList = new List<ICalenderFulfillCondtions>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var entityResult = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == calenderId);
                    //var calenderResult = tx.PersistenceManager.PlanningRepository.Query<CalenderDao>().Where(a => a.Id == calenderId).ToList();
                    StringBuilder condQuery = new StringBuilder();

                    condQuery.Append("   DECLARE @GetAttribute AS INT ");
                    condQuery.Append(" SET @GetAttribute =( SELECT COUNT(1) FROM PM_CalenderCondition poc WHERE poc.CalenderID = ? AND poc.AttributeID is NOT  NULL) ");
                    condQuery.Append(" IF(@GetAttribute = 0) ");
                    condQuery.Append(" BEGIN ");
                    condQuery.Append(" SELECT pe.ID,       pec.EntityTypeID,      isnull(pec.AttributeID,0),       pec.ConditionType,       pec.AttributeLevel,       peobc.ConditionID, ");
                    condQuery.Append(" peobc.[Value],       me.Caption  AS 'EntityTypeCaption'       FROM   PM_Entity pe       INNER JOIN PM_CalenderCondition pec ");
                    condQuery.Append(" ON  pec.CalenderID = pe.ID       INNER JOIN PM_CalenderConditionValue peobc            ON  peobc.ConditionID = pec.ID ");
                    condQuery.Append(" INNER JOIN MM_EntityType me            ON  me.ID = pec.EntityTypeID  WHERE  pe.ID = ? END  ELSE ");
                    condQuery.Append(" BEGIN ");

                    condQuery.Append(" SELECT pe.ID,");
                    condQuery.Append(" 	pec.ID as 'OID',");
                    condQuery.Append("  pec.EntityTypeID,");
                    condQuery.Append(" pec.AttributeID,");
                    condQuery.Append(" pec.ConditionType,");
                    condQuery.Append("  pec.AttributeLevel,");
                    condQuery.Append("  peobc.ConditionID,");
                    condQuery.Append("  peobc.[Value],");
                    condQuery.Append("  me.Caption  AS 'EntityTypeCaption',");
                    condQuery.Append("  CASE ");
                    condQuery.Append("      WHEN ma.AttributeTypeID = 3 OR ma.AttributeTypeID = 4 THEN ma.Caption");
                    condQuery.Append("       ELSE (");
                    condQuery.Append("         SELECT TOP 1 mtl.LevelName");
                    condQuery.Append("         FROM   MM_TreeLevel mtl");
                    condQuery.Append("         WHERE  mtl.[Level] = pec.AttributeLevel");
                    condQuery.Append("                AND mtl.AttributeID = pec.AttributeID");
                    condQuery.Append("      )");
                    condQuery.Append("   END         AS 'AttributeCaption',");
                    condQuery.Append("   CASE ");
                    condQuery.Append("   WHEN ma.AttributeTypeID = 3 OR ma.AttributeTypeID = 4 THEN ( ");
                    condQuery.Append("   SELECT TOP 1 mo.Caption ");
                    condQuery.Append("   FROM   MM_Option mo ");
                    condQuery.Append("    WHERE  mo.ID = peobc.[Value] ");
                    condQuery.Append("   ) ");
                    condQuery.Append("   ELSE ( ");
                    condQuery.Append("   SELECT TOP 1 mtn.Caption ");
                    condQuery.Append("   FROM   MM_TreeNode mtn ");
                    condQuery.Append("   WHERE  mtn.ID = peobc.Value ");
                    condQuery.Append("   ) ");
                    condQuery.Append("   END         AS 'OptionCaption' ");
                    condQuery.Append(" FROM   PM_Entity pe");
                    condQuery.Append("  INNER JOIN PM_CalenderCondition pec");
                    condQuery.Append("      ON  pec.CalenderID = pe.ID");
                    condQuery.Append(" INNER JOIN PM_CalenderConditionValue peobc");
                    condQuery.Append("      ON  peobc.ConditionID = pec.ID");
                    condQuery.Append("  INNER JOIN MM_EntityType me");
                    condQuery.Append("       ON  me.ID = pec.EntityTypeID");
                    condQuery.Append("  INNER JOIN MM_Attribute ma");
                    condQuery.Append("       ON  ma.ID = pec.AttributeID");
                    condQuery.Append(" WHERE  pe.ID = ? ");
                    condQuery.Append(" UNION ");
                    condQuery.Append(" select");
                    condQuery.Append(" 0 AS 'ID',");
                    condQuery.Append(" pec.ID as 'OID', ");
                    condQuery.Append(" pec.EntityTypeID AS 'EntityTypeID',");
                    condQuery.Append(" pec.AttributeID AS 'AttributeID',");
                    condQuery.Append(" pec.ConditionType AS 'ConditionType',");
                    condQuery.Append(" 0 AS 'AttributeLevel',");
                    condQuery.Append(" 0 AS 'ConditionID',");
                    condQuery.Append(" 0 AS 'Value',");
                    condQuery.Append(" mm.Caption AS 'EntityTypeCaption',");
                    condQuery.Append(" '' AS AttributeCaption,");
                    condQuery.Append(" '' AS 'OptionCaption'");
                    condQuery.Append(" FROM PM_calenderCondition pec");
                    condQuery.Append(" INNER JOIN mm_entitytype mm");
                    condQuery.Append(" ON mm.ID = pec.EntityTypeID");
                    condQuery.Append(" WHERE pec.CalenderID = ?");
                    condQuery.Append(" AND pec.AttributeID IS NULL");
                    condQuery.Append(" ORDER by pec.ID");
                    condQuery.Append(" END ");

                    var condQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(condQuery.ToString(), calenderId, calenderId, calenderId, calenderId).Cast<Hashtable>().ToList();
                    var CondtionData = tx.PersistenceManager.PlanningRepository.Query<CalenderDao>().Where(a => a.Id == calenderId).FirstOrDefault();
                    // var entityRolesDao = tx.PersistenceManager.PlanningRepository.GetEquals<EntityRoleUserDao>(EntityRoleUserDao.PropertyNames.Entityid, objectiveId).Where(a => a.Roleid == 1).FirstOrDefault();
                    var entityRolesDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityRoleUserDao>()
                                          join EntityTypeRole in tx.PersistenceManager.UserRepository.Query<EntityTypeRoleAclDao>() on item.Roleid equals EntityTypeRole.ID
                                          where item.Entityid == calenderId && EntityTypeRole.EntityRoleID == 1
                                          select item).FirstOrDefault();
                    var ownerDao = tx.PersistenceManager.UserRepository.Query<UserDao>().Where(a => a.Id == Convert.ToInt32(entityRolesDao.Userid)).Select(a => new { a.FirstName, a.LastName, a.Email }).FirstOrDefault();

                    StringBuilder sb = new StringBuilder();

                    if (condQueryResult.Count() > 0)
                    {
                        for (int i = 0; i < condQueryResult.Count(); i++)
                        {

                            if (i == 0)
                            {
                                sb.Append("\"if type is " + (string)condQueryResult[i]["EntityTypeCaption"] + "");
                                if ((int?)condQueryResult[i]["AttributeID"] == null)
                                {
                                    sb.Append("\"");
                                }
                                if ((int?)condQueryResult[i]["AttributeID"] != 0 && (int?)condQueryResult[i]["AttributeID"] != null)
                                {
                                    sb.Append(" Where ");
                                    sb.Append((string)condQueryResult[i]["AttributeCaption"] + " Equals ");
                                }
                            }
                            if (i - 1 != -1)
                            {

                                if (((string)condQueryResult[i]["EntityTypeCaption"] != (string)condQueryResult[i - 1]["EntityTypeCaption"]) || (((string)condQueryResult[i]["EntityTypeCaption"] == (string)condQueryResult[i - 1]["EntityTypeCaption"]) && ((string)condQueryResult[i]["AttributeCaption"] != (string)condQueryResult[i - 1]["AttributeCaption"])))
                                {
                                    if ((int)condQueryResult[i]["ConditionType"] != 0)
                                    {
                                        if ((string)condQueryResult[i]["EntityTypeCaption"] != (string)condQueryResult[i - 1]["EntityTypeCaption"])
                                        {
                                            sb.Append("\"");
                                        }
                                        string Condtiontype = (int)condQueryResult[i]["ConditionType"] == 1 ? "\"OR\"" : "\"AND\"";
                                        sb.Append(" " + Condtiontype + " ");
                                        sb.Replace(" \"OR\"", " \"OR\"");
                                        sb.Replace(" \"AND\"", " \"AND\"");
                                    }
                                    sb.Append(" " + "\"if type is " + (string)condQueryResult[i]["EntityTypeCaption"]);
                                    if ((int?)condQueryResult[i]["AttributeID"] != 0 && (int?)condQueryResult[i]["AttributeID"] != null)
                                    {
                                        sb.Append(" Where ");
                                        sb.Append((string)condQueryResult[i]["AttributeCaption"] + " Equals ");
                                    }
                                }
                            }
                            if ((int?)condQueryResult[i]["AttributeID"] != 0 && (int?)condQueryResult[i]["AttributeID"] != null)
                            {
                                sb.Append(",");
                                sb.Replace("Equals ,", "Equals ");
                                sb.Append((string)condQueryResult[i]["OptionCaption"] + "");
                            }
                        }
                        if (sb[sb.Length - 1].ToString() != "\"")
                        {
                            sb.Append("\"");
                        }
                    }

                    CalenderFulfillCondtions objcalFulfillCond = new CalenderFulfillCondtions();
                    objcalFulfillCond.Id = CondtionData.Id;
                    objcalFulfillCond.CalenderName = HttpUtility.HtmlEncode(CondtionData.Name);
                    objcalFulfillCond.OwnerId = Convert.ToInt32(entityRolesDao.Userid);
                    objcalFulfillCond.OwnerName = ownerDao.FirstName + " " + ownerDao.LastName;
                    objcalFulfillCond.CalenderDescription = HttpUtility.HtmlEncode(CondtionData.Description);

                    //objcalFulfillCond.StartDate = CondtionData.StartDate.ToString("yyyy-MM-dd");
                    //objcalFulfillCond.EndDate = CondtionData.EndDate.ToString("yyyy-MM-dd");
                    //objcalFulfillCond.DateRule = CondtionData.DateRule == 1 ? "Starts & Ends" : "are Active";
                    //objcalFulfillCond.Mandatory = (Convert.ToInt32(CondtionData.IsMandatory) == 1 ? "Yes" : "No");
                    objcalFulfillCond.FulfillCondition = sb.ToString();
                    return objcalFulfillCond;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        public Tuple<IList<ICalenderFulfillCondtions>, IList<int>> GettingEditCalenderFulfillmentDetails(PlanningManagerProxy proxy, int calenderId)
        {
            try
            {
                IList<ICalenderFulfillCondtions> objfulfillList = new List<ICalenderFulfillCondtions>();
                IList<int> entityIDS = new List<int>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityResult = tx.PersistenceManager.PlanningRepository.Query<EntityDao>().Where(a => a.Id == calenderId);
                    var objectiveResult = tx.PersistenceManager.PlanningRepository.Query<CalenderDao>().Where(a => a.Id == calenderId).ToList();
                    StringBuilder condQuery = new StringBuilder();
                    condQuery.Append(" SELECT DISTINCT poc.ID AS 'ConditionID',");
                    condQuery.Append(" poc.CalenderID,");
                    condQuery.Append(" poc.EntityTypeID,");
                    condQuery.Append("  poc.AttributeID,");
                    condQuery.Append(" poc.ConditionType,");
                    condQuery.Append(" poc.AttributeLevel,");
                    condQuery.Append(" CalenderValue.[Value],");
                    condQuery.Append("  poc.SortOrder");
                    condQuery.Append(" FROM   PM_CalenderCondition poc");
                    condQuery.Append(" INNER JOIN (");
                    condQuery.Append(" SELECT pocv.ConditionID,");
                    condQuery.Append(" STUFF(");
                    condQuery.Append(" (");
                    condQuery.Append("  SELECT DISTINCT ',' + CAST(pocv2.[Value] AS NVARCHAR(10))");
                    condQuery.Append(" FROM   PM_CalenderConditionValue pocv2");
                    condQuery.Append("  WHERE  pocv2.ConditionID = pocv.ConditionID FOR ");
                    condQuery.Append("  XML PATH('')");
                    condQuery.Append(" ),");
                    condQuery.Append(" 1,");
                    condQuery.Append(" 1,");
                    condQuery.Append(" ''");
                    condQuery.Append(" ) AS Value");
                    condQuery.Append(" FROM   PM_CalenderConditionValue pocv");
                    condQuery.Append(" ) AS CalenderValue");
                    condQuery.Append(" ON  poc.ID = CalenderValue.ConditionID");
                    condQuery.Append(" WHERE  poc.CalenderID = ?");
                    condQuery.Append(" ORDER BY");
                    condQuery.Append(" poc.SortOrder");

                    // "SELECT pe.ID,pec.EntityTypeID, pec.AttributeID, pec.ConditionType,pec.AttributeLevel,peobc.ConditionID, peobc.[Value] FROM PM_Entity pe INNER JOIN PM_ObjectiveCondition pec ON pec.ObjectiveID = pe.ID INNER JOIN PM_ObjectiveConditionValue peobc ON peobc.ConditionID = pec.ID WHERE pe.ID =" + objectiveId + "";
                    var condQueryResult = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(condQuery.ToString(), calenderId).Cast<Hashtable>().ToList();
                    var CondtionData = tx.PersistenceManager.PlanningRepository.Query<CalenderDao>().Where(a => a.Id == calenderId).FirstOrDefault();
                    if (condQueryResult.Count() > 0)
                    {
                        foreach (var obj in condQueryResult)
                        {
                            CalenderFulfillCondtions objFulfillCond = new CalenderFulfillCondtions();
                            objFulfillCond.Id = CondtionData.Id;
                            objFulfillCond.CalenderName = CondtionData.Name;
                            objFulfillCond.CalenderDescription = CondtionData.Description;
                            //objFulfillCond.StartDate = CondtionData.StartDate.ToString("yyyy/MM/dd");
                            //objFulfillCond.EndDate = CondtionData.EndDate.ToString("yyyy/MM/dd");
                            //objFulfillCond.IsDateRule = Convert.ToInt32(CondtionData.DateRule);
                            //objFulfillCond.IsMandatory = Convert.ToBoolean(CondtionData.IsMandatory);
                            objFulfillCond.ConditionType = (int)obj["ConditionType"];
                            objFulfillCond.ConditionId = (int)obj["ConditionID"];
                            objFulfillCond.EntityTypeid = (int)obj["EntityTypeID"];
                            if (obj["AttributeID"] != null)
                            {
                                objFulfillCond.Attributeid = (int)obj["AttributeID"];
                                objFulfillCond.AttributeLevel = (int)obj["AttributeLevel"];
                                objFulfillCond.CalenderOptionValue = (string)obj["Value"];
                            }
                            else
                            {
                                objFulfillCond.Attributeid = 0;
                                objFulfillCond.AttributeLevel = 0;
                                objFulfillCond.CalenderOptionValue = string.Empty;
                            }

                            objfulfillList.Add(objFulfillCond);
                        }
                    }
                    else
                    {
                        CalenderFulfillCondtions objFulfillCond = new CalenderFulfillCondtions();
                        objFulfillCond.Id = CondtionData.Id;
                        objFulfillCond.CalenderName = CondtionData.Name;
                        objFulfillCond.CalenderDescription = CondtionData.Description;
                        //objFulfillCond.StartDate = CondtionData.StartDate.ToString("yyyy/MM/dd");
                        //objFulfillCond.EndDate = CondtionData.EndDate.ToString("yyyy/MM/dd");
                        //objFulfillCond.IsDateRule = Convert.ToInt32(CondtionData.DateRule);
                        //objFulfillCond.IsMandatory = Convert.ToBoolean(CondtionData.IsMandatory);
                        objfulfillList.Add(objFulfillCond);
                    }
                    var entityIds = tx.PersistenceManager.PlanningRepository.Query<CalenderEntityValueDao>().Where(a => a.Calenderid == calenderId).ToList().Select(a => a.Entityid);
                    foreach (int entityID in entityIds)
                    {
                        entityIDS.Add(entityID);
                    }
                    tx.Commit();

                }

                Tuple<IList<ICalenderFulfillCondtions>, IList<int>> FullfillmentEditdets = Tuple.Create(objfulfillList, entityIDS);
                return FullfillmentEditdets;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }




        public int UpdateCalenderFulfillmentCondition(PlanningManagerProxy proxy, int calenderId, IList<ICalenderFulfillCondtions> calFullfilConditions, string FromvalueFullfullCondtion, List<int> selectedEntities)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    //public bool checkisupdated(tx, proxy,  objectiveId,0, null, false,  0,  0,  0, string startdate =null,string enddate=null , int daterule = 0, bool objmandatory = false, IList<IObjectiveFulfillCondtions> objFullfilConditions = null);
                    checkisupdatedfrCalender(tx, proxy, calenderId, 0, calFullfilConditions, FromvalueFullfullCondtion);

                    DeleteCalenderFulfillmentCondition(tx, calenderId);
                    StringBuilder objUpdateQuery = new StringBuilder();

                    IList<CalenderConditionValueDao> listObjfulfullValue = new List<CalenderConditionValueDao>();
                    if (calFullfilConditions != null)
                    {
                        IList<CalenderConditionDao> Iobjcondao = new List<CalenderConditionDao>();
                        foreach (var ab in calFullfilConditions)
                        {
                            CalenderConditionDao objCon = new CalenderConditionDao();
                            objCon.Calenderid = calenderId;
                            objCon.EntityTypeid = ab.EntityTypeid;
                            objCon.Attributeid = ab.Attributeid;
                            objCon.ConditionType = ab.ConditionType;
                            objCon.AttributeLevel = ab.AttributeLevel;
                            objCon.SortOrder = 1;
                            var conditionValueObj = ab.CalenderConditionValue;
                            tx.PersistenceManager.PlanningRepository.Save<CalenderConditionDao>(objCon);
                            var conditionId = objCon.Id;
                            if (conditionValueObj != null)
                            {
                                foreach (var objew in conditionValueObj)
                                {
                                    CalenderConditionValueDao conditionDao = new CalenderConditionValueDao();
                                    conditionDao.Conditionid = conditionId;
                                    conditionDao.Value = Convert.ToInt32(objew);
                                    listObjfulfullValue.Add(conditionDao);
                                }
                            }
                            else
                            {
                                CalenderConditionValueDao conditionDao = new CalenderConditionValueDao();
                                conditionDao.Conditionid = conditionId;
                                listObjfulfullValue.Add(conditionDao);

                            }

                            tx.PersistenceManager.PlanningRepository.Save<CalenderConditionValueDao>(listObjfulfullValue);
                        }
                    }

                    objUpdateQuery.Clear();

                    objUpdateQuery.Append("DELETE FROM PM_CalenderEntityValue WHERE CalenderID= ? ");
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(objUpdateQuery.ToString(), calenderId);


                    if (selectedEntities != null)
                    {
                        foreach (int entityID in selectedEntities)
                        {
                            CalenderEntityValueDao objCalentVal = new CalenderEntityValueDao();
                            objCalentVal.Calenderid = calenderId;
                            objCalentVal.Entityid = entityID;
                            tx.PersistenceManager.PlanningRepository.Save<CalenderEntityValueDao>(objCalentVal);
                        }
                    }

                    tx.Commit();
                    return calenderId;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public bool DeleteCalenderFulfillmentCondition(ITransaction tx, int CalenderID)
        {
            try
            {
                tx.PersistenceManager.PlanningRepository.DeleteByID<CalenderEntityValueDao>(CalenderEntityValueDao.PropertyNames.Calenderid, CalenderID);
                StringBuilder additionObjQuery = new StringBuilder();
                additionObjQuery.Append(" DELETE PM_CalenderCondition");
                additionObjQuery.Append(" FROM PM_CalenderCondition t1");
                additionObjQuery.Append(" INNER JOIN PM_CalenderConditionValue t2 ON t1.ID = t2.ConditionID");
                additionObjQuery.Append(" WHERE t1.CalenderID IN (" + CalenderID + ")");
                tx.PersistenceManager.PlanningRepository.ExecuteQuery(additionObjQuery.ToString());
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool UpdatingCalenderOverDetails(PlanningManagerProxy proxy, int calenderId, string calenderName, string calenderDescription, string Typeid)
        {

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    checkcaldetailisupdated(tx, proxy, calenderId, calenderName, calenderDescription);
                    string entityUpdateQuery = "Update PM_Entity set Name = ? where ID = ?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(entityUpdateQuery, HttpUtility.HtmlEncode(calenderName), calenderId);
                    string objUpdateQuery = "Update PM_Calender set Name = ? ,Description= ? where ID = ?";
                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(objUpdateQuery, HttpUtility.HtmlEncode(calenderName), HttpUtility.HtmlEncode(calenderDescription), calenderId);
                    tx.Commit();
                    //Update SearchEngine
                    //UpdateEntityforSearch(proxy, objectiveId.ToString(), objectiveName);
                    return true;
                }
                catch (Exception ex)
                {

                    if (tx != null)
                        tx.Rollback();
                    throw;
                }
                finally
                {

                }

            }
        }


        public bool checkcaldetailisupdated(ITransaction tx, PlanningManagerProxy proxy, int calenderId, string calenderName, string calenderDescription)
        {
            try
            {
                FeedNotificationServer fs = new FeedNotificationServer();
                NotificationFeedObjects obj = new NotificationFeedObjects();
                obj.EntityId = calenderId;
                obj.action = "calender summary update";
                obj.Actorid = proxy.MarcomManager.User.Id;


                var Calenderdetails = (from tt in tx.PersistenceManager.PlanningRepository.Query<CalenderDao>() where tt.Id == calenderId select tt).ToList();

                foreach (var item in Calenderdetails)
                {
                    if (item.Name != calenderName)
                    {
                        obj.FromValue = item.Name.ToString();
                        obj.ToValue = calenderName;
                        obj.AttributeName = "Name";
                        fs.AsynchronousNotify(obj);
                    }
                    if (item.Description != calenderDescription)
                    {
                        obj.FromValue = item.Description.ToString();
                        obj.ToValue = calenderDescription;
                        obj.AttributeName = "Description";
                        fs.AsynchronousNotify(obj);
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public bool checkcaldetailisupdated(ITransaction tx, PlanningManagerProxy proxy, int calenderId, bool isExternal, int VisibilityPeriod, int VisibilityType, DateTime Publishedon, List<int> selectedTabs)
        {
            try
            {
                FeedNotificationServer fs = new FeedNotificationServer();
                NotificationFeedObjects obj = new NotificationFeedObjects();
                obj.EntityId = calenderId;
                obj.action = "calender summary update";
                obj.Actorid = proxy.MarcomManager.User.Id;


                var Calenderdetails = (from tt in tx.PersistenceManager.PlanningRepository.Query<CalenderDao>() where tt.Id == calenderId select tt).ToList();

                foreach (var item in Calenderdetails)
                {
                    if (item.IsExternal != isExternal)
                    {
                        if (item.IsExternal)
                        {
                            obj.FromValue = "true";
                        }
                        else
                        {
                            obj.FromValue = "false";
                        }

                        if (isExternal)
                        {
                            obj.ToValue = "true";
                        }
                        else
                        {
                            obj.ToValue = "false";
                        }
                        obj.AttributeName = "Is External";
                        fs.AsynchronousNotify(obj);
                    }
                    if (item.Visibilityperiod != VisibilityPeriod || item.Visibilitytype != VisibilityType)
                    {
                        Dictionary<int, string> dicVisibilityperiod = new Dictionary<int, string>();
                        dicVisibilityperiod.Add(0, "Day(s)");
                        dicVisibilityperiod.Add(1, "Week(s)");
                        dicVisibilityperiod.Add(2, "Month(s)");
                        dicVisibilityperiod.Add(3, "Year(s)");
                        obj.FromValue = item.Visibilityperiod.ToString() + dicVisibilityperiod[item.Visibilitytype].ToString();
                        obj.ToValue = VisibilityPeriod.ToString() + dicVisibilityperiod[VisibilityType].ToString();
                        obj.AttributeName = "Visibility period";
                        fs.AsynchronousNotify(obj);
                    }

                    if (item.PublishedOn != Publishedon)
                    {
                        //CurrentData.PublishedOn.Date.ToString("yyyy-MM-dd");
                        obj.FromValue = item.PublishedOn.ToString("yyyy-MM-dd");
                        obj.ToValue = Publishedon.ToString("yyyy-MM-dd");
                        obj.AttributeName = "Published on";
                        fs.AsynchronousNotify(obj);
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public ICalender GetCalenderDetailsByID(PlanningManagerProxy proxy, int EntityID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    ICalender Entity = new Calenderclass();
                    var CurrentData = tx.PersistenceManager.PlanningRepository.Query<CalenderDao>().Where(a => a.Id == EntityID).SingleOrDefault();
                    if (CurrentData != null)
                    {
                        Entity.Id = CurrentData.Id;
                        Entity.Name = CurrentData.Name;
                        Entity.Visibilityperiod = CurrentData.Visibilityperiod;
                        Entity.Visibilitytype = CurrentData.Visibilitytype;
                        //Entity.PublishedOn = CurrentData.PublishedOn;
                        //.Date.ToString("dd-MM-yyyy");
                        Entity.PublishedData = CurrentData.PublishedOn.Date.ToString("yyyy-MM-dd");
                        Entity.IsExternal = CurrentData.IsExternal;
                        return Entity;
                    }

                }
            }
            catch
            {

            }
            return null;
        }


        public int SaveCalenderDetails(PlanningManagerProxy planningManagerProxy, int calID, bool isExternal, int VisibilityPeriod, int VisibilityType, DateTime Publishedon, List<int> selectedTabs)
        {
            try
            {
                ICalender calender = new Calenderclass();
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {
                    checkcaldetailisupdated(tx, planningManagerProxy, calID, isExternal, VisibilityPeriod, VisibilityType, Publishedon, selectedTabs);
                    var CurrentData = tx.PersistenceManager.PlanningRepository.Query<CalenderDao>().Where(a => a.Id == calID).SingleOrDefault();

                    CalenderDao calobjDao = new CalenderDao();
                    calobjDao.Name = HttpUtility.HtmlEncode(CurrentData.Name);
                    calobjDao.CalenderStatus = CurrentData.CalenderStatus;
                    calobjDao.Description = HttpUtility.HtmlEncode(CurrentData.Description);
                    calobjDao.PublishedOn = Publishedon;
                    calobjDao.IsExternal = isExternal;
                    calobjDao.Visibilityperiod = VisibilityPeriod;
                    calobjDao.Visibilitytype = VisibilityType;
                    calobjDao.Typeid = CurrentData.Typeid;
                    calobjDao.OwnerID = CurrentData.OwnerID;
                    calobjDao.CreatedOn = CurrentData.CreatedOn;
                    calobjDao.Id = calID;
                    calobjDao.ExternalUrlID = CurrentData.ExternalUrlID;
                    tx.PersistenceManager.PlanningRepository.Save<CalenderDao>(calobjDao);

                    tx.PersistenceManager.PlanningRepository.DeleteByID<CalenderTabDao>(CalenderTabDao.PropertyNames.Calenderid, calID);
                    if (selectedTabs != null)
                    {
                        foreach (int tabID in selectedTabs)
                        {
                            CalenderTabDao objCalenTabval = new CalenderTabDao();
                            objCalenTabval.Calenderid = calID;
                            objCalenTabval.CustomTabid = tabID;
                            tx.PersistenceManager.PlanningRepository.Save<CalenderTabDao>(objCalenTabval);
                        }
                    }
                    tx.Commit();
                    return calID;
                }

            }
            catch (Exception)
            {

                throw;
            }
        }

        public int CreateImportedAttributeGroupRecord(PlanningManagerProxy proxy, int AttributeGroupRecordID, int EntityID, int typeId, int AttrGroupID, Boolean isLock, string name, int SortOrder, IList<IAttributeData> entityattributedata)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                return InsertImportedAttributeGroupRecord(proxy, AttributeGroupRecordID, EntityID, typeId, AttrGroupID, isLock, name, SortOrder, entityattributedata);
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public int InsertImportedAttributeGroupRecord(PlanningManagerProxy proxy, int AttributeGroupRecordID, int EntityID, int typeId, int AttrGroupID, Boolean isLock, string name, int SortOrder, IList<IAttributeData> entityattributedata)
        {
            try
            {
                FeedNotificationServer fs = new FeedNotificationServer();
                AttrGroupDynamicAttributesDao dynamicdao = new AttrGroupDynamicAttributesDao();
                var ownervalue = entityattributedata.Where(a => a.ID == (int)SystemDefinedAttributes.Owner).Select(a => a).FirstOrDefault();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == EntityID
                                     select item).FirstOrDefault();
                    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    IList<EntityTypeAttributeGroupRelationDao> entitygroupdao = new List<EntityTypeAttributeGroupRelationDao>();
                    entitygroupdao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(xmlpath);
                    var entityattribtuegroup = entitygroupdao.Where(a => a.ID == AttrGroupID);
                    int GroupID = entityattribtuegroup.ElementAt(0).AttributeGroupID;
                    typeId = entityattribtuegroup.ElementAt(0).EntityTypeID;
                    dynamicdao.EntityId = EntityID;
                    dynamicdao.SortOrder = SortOrder + 1;
                    dynamicdao.Id = AttributeGroupRecordID;
                    string entityName = "AttributeGroup" + GroupID + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    if (AttributeGroupRecordID == 0)
                    {
                        string updSortOrder = "Update MM_AttributeGroup_" + GroupID + " set SortOrder = isnull(SortOrder,0)+1 where SortOrder > " + SortOrder;
                        tx.PersistenceManager.PlanningRepository.ExecuteQuery(updSortOrder);
                        tx.PersistenceManager.PlanningRepository.SaveByentity<AttrGroupDynamicAttributesDao>(entityName, dynamicdao);
                    }
                    if (entityattributedata != null)
                    {
                        var oldAttributeVals = proxy.MarcomManager.MetadataManager.GetAttributeGroupAttributeOptions(AttrGroupID, EntityID, AttributeGroupRecordID);

                        var result = InsertImportedDynamicAttributeGroups(tx, entityattributedata, dynamicdao.Id, typeId, GroupID, xmlpath);

                        //neews  feed code starts here 
                        var attributeGrpRecordName = (from item in entityattributedata where item.ID == 76 select item.Value).FirstOrDefault();

                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.action = "add attribute group";
                        obj.EntityId = EntityID;
                        obj.TypeName = name;
                        obj.AttributeName = "";
                        obj.AttributeRecordName = attributeGrpRecordName;

                        fs.AsynchronousNotify(obj);
                        System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => AddEntityAsync(proxy, EntityID, dynamicdao.Id, entityObj.Name, attributeGrpRecordName, GroupID));
                        taskforaddentityforsearch.Start();

                        //news feed code ends here
                    }
                    tx.Commit();
                }
                return dynamicdao.Id;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public bool InsertImportedDynamicAttributeGroups(ITransaction tx, IList<IAttributeData> attributeData, int GroupRecordID, int typeId, int GroupID, string xmlpath)
        {
            if (attributeData != null)
            {
                int dynval;
                string cap = "";
                IList<AttrGroupMultiSelectDao> listMultiselect = new List<AttrGroupMultiSelectDao>();
                IList<AttrGroupTreeValueDao> listreeval = new List<AttrGroupTreeValueDao>();
                listreeval.Clear();
                ArrayList entityids = new ArrayList();
                foreach (var obj in attributeData)
                {
                    entityids.Add(obj.ID);
                }
                var result = from item in tx.PersistenceManager.PlanningRepository.Query<AttributeDao>() where entityids.Contains(item.Id) select item;
                var entityTypeCategory = tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>().Where(a => a.Id == typeId).Select(a => a.Category).FirstOrDefault();
                var dynamicAttResult = result.Where(a => ((a.Id != 69) && (a.AttributeTypeID == 1 || a.AttributeTypeID == 2 || a.AttributeTypeID == 3 || a.AttributeTypeID == 5 || a.AttributeTypeID == 8 || a.AttributeTypeID == 9 || a.AttributeTypeID == 11)));
                var treenodeResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.Tree)));
                var treevalResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.DropDownTree)));
                var multiAttrResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.ListMultiSelection)));
                var systemDefinedResults = result.Where(a => a.IsSpecial == true);
                var multiselecttreevalResult = result.Where(a => a.AttributeTypeID == (Convert.ToInt32(AttributesList.TreeMultiSelection)));
                if (systemDefinedResults.Count() > 0)
                {
                    foreach (var val in systemDefinedResults)
                    {
                        SystemDefinedAttributes systemType = (SystemDefinedAttributes)val.Id;
                        var dataResult = attributeData.Join(systemDefinedResults,
                                post => post.ID,
                                meta => meta.Id,
                                (post, meta) => new { databaseval = post }).Where(a => a.databaseval.ID == Convert.ToInt32(SystemDefinedAttributes.Owner));
                        switch (systemType)
                        {
                            case SystemDefinedAttributes.Owner:
                                break;
                        }
                    }
                }
                if (treevalResult.Count() > 0)
                {
                    var treeValQuery = attributeData.Join(treevalResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    if (treeValQuery.Count() > 0)
                    {
                        int levelcnt = 1;
                        foreach (var treeattr in treeValQuery)
                        {
                            cap = Convert.ToString(treeattr.databaseval.Value);
                            AttrGroupTreeValueDao tre = new AttrGroupTreeValueDao();
                            tre.Attributeid = treeattr.databaseval.ID;
                            tre.Nodeid = tx.PersistenceManager.MetadataRepository.Query<TreeNodeDao>().Where(a => a.AttributeID == treeattr.databaseval.ID && a.Level == levelcnt && cap.Split(',').Contains(a.Caption)).Select(a => a.Id).FirstOrDefault();
                            tre.Level = treeattr.databaseval.Level;
                            tre.GroupID = GroupID;
                            tre.GroupRecordID = GroupRecordID;
                            listreeval.Add(tre);

                            levelcnt++;
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao>(listreeval);
                    }
                }
                if (multiselecttreevalResult.Count() > 0)
                {
                    int cnt = 1;
                    int levelcnt = 0;
                    var multiselecttreeValQuery = attributeData.Join(multiselecttreevalResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    if (multiselecttreeValQuery.Count() > 0)
                    {
                        foreach (var treeattr in multiselecttreeValQuery)
                        {
                            levelcnt = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).Where(a => a.AttributeID == treeattr.databaseval.ID).Count();
                            cap = Convert.ToString(treeattr.databaseval.Value);
                            if (levelcnt == cnt)
                            {
                                int[] nodeoptionid = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).Where(a => a.AttributeID == treeattr.databaseval.ID && a.Level == cnt && cap.Split(',').Contains(a.Caption)).Select(a => a.Id).ToArray();

                                foreach (int val in nodeoptionid)
                                {
                                    AttrGroupTreeValueDao tre = new AttrGroupTreeValueDao();
                                    tre.Attributeid = treeattr.databaseval.ID;
                                    tre.Nodeid = val;
                                    tre.Level = treeattr.databaseval.Level;
                                    tre.GroupID = GroupID;
                                    tre.GroupRecordID = GroupRecordID;
                                    listreeval.Add(tre);
                                }
                            }
                            else
                            {
                                AttrGroupTreeValueDao tre = new AttrGroupTreeValueDao();
                                tre.Attributeid = treeattr.databaseval.ID;
                                tre.Nodeid = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).Where(a => a.AttributeID == treeattr.databaseval.ID && a.Level == cnt && cap.Split(',').Contains(a.Caption)).Select(a => a.Id).FirstOrDefault();
                                tre.Level = treeattr.databaseval.Level;
                                tre.GroupID = GroupID;
                                tre.GroupRecordID = GroupRecordID;
                                listreeval.Add(tre);
                            }
                            cnt++;
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao>(listreeval);
                    }
                }
                if (multiAttrResult.Count() > 0)
                {
                    var query = attributeData.Join(multiAttrResult,
                             post => post.ID,
                             meta => meta.Id,
                             (post, meta) => new { databaseval = post, attrappval = meta }).FirstOrDefault();

                    cap = Convert.ToString(query.databaseval.Value);
                    int[] multioptionid = tx.PersistenceManager.MetadataRepository.Query<OptionDao>().Where(a => a.AttributeID == query.databaseval.ID && cap.Split(',').Contains(a.Caption)).Select(a => a.Id).ToArray();

                    foreach (int val in multioptionid)
                    {
                        Marcom.Dal.Metadata.Model.AttrGroupMultiSelectDao mt = new Marcom.Dal.Metadata.Model.AttrGroupMultiSelectDao();
                        mt.Attributeid = query.databaseval.ID;
                        mt.GroupRecordID = GroupRecordID;
                        mt.GroupID = GroupID;
                        mt.Optionid = val;
                        listMultiselect.Add(mt);
                    }

                    tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.AttrGroupMultiSelectDao>(listMultiselect);
                }
                if (treenodeResult.Count() > 0)
                {
                    var treenodequery = attributeData.Join(treenodeResult,
                                 post => post.ID,
                                 meta => meta.Id,
                                 (post, meta) => new { databaseval = post });
                    foreach (var et in treenodequery)
                    {
                        foreach (var treenodeobj in et.databaseval.Value)
                        {
                            Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao tre = new Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao();
                            tre.Attributeid = et.databaseval.ID;
                            tre.Nodeid = treenodeobj;
                            tre.GroupID = GroupID;
                            tre.GroupRecordID = GroupRecordID;
                            listreeval.Add(tre);
                        }
                    }
                    tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.AttrGroupTreeValueDao>(listreeval);
                }
                if (dynamicAttResult.Count() > 0 || entityTypeCategory != 1)
                {
                    var dynamicAttrQuery = attributeData.Join(dynamicAttResult,
                                post => post.ID,
                                meta => meta.Id,
                                (post, meta) => new { databaseval = post });

                    DateTime dateTimeval;

                    string[] formats = {"M/d/yyyy h:mm:ss tt", "M/d/yyyy h:mm tt", 
                                           "MM/dd/yyyy hh:mm:ss", "M/d/yyyy h:mm:ss", 
                                           "M/d/yyyy hh:mm tt", "M/d/yyyy hh tt", 
                                            "M/d/yyyy h:mm", "M/d/yyyy h:mm", 
                                             "MM/dd/yyyy hh:mm", "M/dd/yyyy hh:mm",
                                             "M/d/yyyy", "d/M/yyyy", "M-d-yyyy",
                                            "d-M-yyyy", "d-MMM-yy", "d-MMMM-yyyy",
                                            "dd/MM/yyyy","dd-MM-yyyy",
                                             };

                    foreach (var ab in dynamicAttrQuery)
                    {
                        var DynamicQuery = new StringBuilder();
                        string key = Convert.ToString((int)ab.databaseval.ID);
                        int attributedataType = ab.databaseval.TypeID;
                        dynamic value = null;
                        switch (attributedataType)
                        {
                            case 1:
                            case 2:
                            case 11:
                                {
                                    value = Convert.ToString(ab.databaseval.Value == null ? "" : HttpUtility.HtmlEncode((string)ab.databaseval.Value));
                                    DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                    tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                    DynamicQuery.Append("");
                                    break;
                                }
                            case 3:
                                {
                                    if (ab.databaseval.Value != null || ab.databaseval.Value != "")
                                    {
                                        string capval = Convert.ToString(ab.databaseval.Value);

                                        value = tx.PersistenceManager.MetadataRepository.Query<OptionDao>().Where(a => a.AttributeID == int.Parse(key) && capval.Split(',').Contains(a.Caption)).Select(a => a.Id).FirstOrDefault();
                                        DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                        DynamicQuery.Append("");

                                    }
                                    break;
                                }
                            case 5:
                                {
                                    if (ab.databaseval.Value != null || ab.databaseval.Value != "")
                                    {
                                        if (DateTime.TryParseExact(Convert.ToString(ab.databaseval.Value), formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTimeval))
                                        {
                                            value = dateTimeval.ToString("yyyy/MM/dd");
                                            DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                            DynamicQuery.Append("");
                                        }
                                    }
                                    break;
                                }
                            case 8:
                                {
                                    if (ab.databaseval.Value != null || ab.databaseval.Value != "")
                                    {
                                        if (int.TryParse(Convert.ToString(ab.databaseval.Value), out dynval))
                                        {
                                            value = Convert.ToInt32(ab.databaseval.Value);
                                            DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                            DynamicQuery.Append("");
                                        }
                                    }
                                    break;
                                }
                            case 9:
                                {
                                    if (ab.databaseval.Value != null || ab.databaseval.Value != "")
                                    {
                                        if (int.TryParse(Convert.ToString(ab.databaseval.Value), out dynval))
                                        {
                                            value = Convert.ToInt32(ab.databaseval.Value);
                                            DynamicQuery.Append("update  MM_AttributeGroup_" + GroupID + " set Attr_" + key + "= ?  where ID= ?");
                                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), value, GroupRecordID);
                                            DynamicQuery.Append("");
                                        }
                                    }
                                    break;
                                }
                        }
                    }
                }
            }
            return true;
        }

        public int[] GetOptionIdByCaption(ITransaction tx, int attrTypeID, int attrId, string caption)
        {
            try
            {
                string[] cap = caption.Split(',');
                switch (attrTypeID)
                {
                    case 4:
                        return tx.PersistenceManager.MetadataRepository.Query<OptionDao>().Where(a => a.AttributeID == attrId && cap.Contains(a.Caption)).Select(a => a.Id).ToArray();
                        break;
                    case 12:
                        return tx.PersistenceManager.MetadataRepository.Query<TreeNodeDao>().Where(a => a.AttributeID == attrId && cap.Contains(a.Caption)).Select(a => a.Id).ToArray();
                        break;
                    default:
                        break;
                }
            }
            catch (Exception ex)
            {
            }
            return null;
        }

        public Dictionary<int, int> DuplicateAssetsEntityCreation(PlanningManagerProxy proxy, ITransaction tx, int sourceentityID, int entityID, int[] assetid, int[] folderID)
        {
            int newasset = 0;
            Dictionary<int, int> Assetmappingdict = new Dictionary<int, int>();
            try
            {


                if (assetid.Length > 0 || folderID.Length > 0)
                {
                    //int[] folderIds = tx.PersistenceManager.DamRepository.Query<FolderDao>().Where(a => a.EntityID == entityID).Select(a => a.).Distinct().ToArray();
                    //int[] folderIds = tx.PersistenceManager.DamRepository.Query<AssetsDao>().Where(a => assetid.Contains(a.ID)).Select(a => a.FolderID).Distinct().ToArray();
                    var iflderDao = tx.PersistenceManager.DamRepository.Query<FolderDao>().Where(a => a.EntityID == sourceentityID).ToList();
                    Dictionary<int, int> foldermappingdict = new Dictionary<int, int>();

                    FolderDao fdao = new FolderDao();
                    if (iflderDao != null)
                    {
                        foreach (var folder in iflderDao)
                        {

                            fdao = new FolderDao();
                            fdao.Id = 0;
                            fdao.Caption = folder.Caption;
                            fdao.Description = folder.Description;
                            fdao.EntityID = entityID;
                            fdao.KEY = folder.KEY.Replace(sourceentityID.ToString(), entityID.ToString());
                            fdao.Level = folder.Level;
                            fdao.NodeID = folder.NodeID;
                            fdao.ParentNodeID = (folder.ParentNodeID == 0 ? 0 : Convert.ToInt32(foldermappingdict[folder.ParentNodeID]));
                            fdao.SortOrder = folder.SortOrder;
                            fdao.Colorcode = (folder.Colorcode != null) ? folder.Colorcode : "ffd300";
                            tx.PersistenceManager.DamRepository.Save<FolderDao>(fdao);
                            if (!foldermappingdict.ContainsKey(fdao.Id))
                            {
                                foldermappingdict.Add(folder.Id, fdao.Id);
                            }

                        }
                        tx.Commit();


                        if (iflderDao != null && assetid.Length > 0)
                        {

                            for (int i = 0; i < assetid.Length; i++)
                            {

                                List<IAssets> assetdet = new List<IAssets>();
                                IAssets asset = new Assets();
                                asset = proxy.MarcomManager.DigitalAssetManager.GetAssetAttributesDetails(assetid[i]);

                                // IAssets assetdata = proxy.MarcomManager.DigitalAssetManager.GetAssetAttributesDetails(AssetID);
                                IList<IAttributeData> AttributeDatanew = new List<IAttributeData>();
                                AttributeDatanew = asset.AttributeData;
                                if (asset.Category == 0)
                                {

                                    var Filesassest = asset.Files.Where(a => a.ID == asset.ActiveFileID).Select(a => a).ToList();
                                    newasset = proxy.MarcomManager.DigitalAssetManager.CreateAsset(Convert.ToInt32(foldermappingdict[asset.FolderID]), Convert.ToInt32(asset.AssetTypeid), asset.Name, AttributeDatanew, Filesassest[0].Name, 1, Filesassest[0].MimeType, Filesassest[0].Extension, Convert.ToInt64(Filesassest[0].Size), entityID, Filesassest[0].Fileguid.ToString(), Filesassest[0].Description, true, Filesassest[0].Status, 0, Filesassest[0].Additionalinfo, asset.AssetAccess, asset.ID);
                                    if (!Assetmappingdict.ContainsKey(newasset))
                                        Assetmappingdict.Add(asset.ID, newasset);
                                }
                                else
                                {
                                    newasset = proxy.MarcomManager.DigitalAssetManager.CreateBlankAsset(Convert.ToInt32(foldermappingdict[asset.FolderID]), Convert.ToInt32(asset.AssetTypeid), asset.Name, AttributeDatanew, entityID, asset.Category, asset.Url, true, 0, asset.AssetAccess, asset.ID);
                                    if (!Assetmappingdict.ContainsKey(newasset))
                                        Assetmappingdict.Add(asset.ID, newasset);

                                }
                            }
                        }

                    }
                }


            }
            catch (Exception ex)
            {
                return null;
            }

            return Assetmappingdict;
        }

        public bool updateOverviewStatus(PlanningManagerProxy proxy, JArray statusObject)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FeedNotificationServer fs = new FeedNotificationServer();
                    NotificationFeedObjects obj = new NotificationFeedObjects();
                    obj.EntityId = (int)statusObject[0]["EntityId"]; ;
                    obj.action = "entity status update";
                    obj.Actorid = proxy.MarcomManager.User.Id; ;


                    IList<TreeValueDao> itreeDao = new List<TreeValueDao>();
                    itreeDao = tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>().Where(a => a.Attributeid == (int)statusObject[0]["AttributeId"] && a.Entityid == (int)statusObject[0]["EntityId"] && a.ParentNode == (int)statusObject[0]["ParentNode"]).Select(a => a).ToList<TreeValueDao>();
                    if ((string)statusObject[0]["type"] == "comment")
                    {
                        obj.AttributeName = (string)statusObject[0]["optioncaption"] + " comment";
                        if (itreeDao.Count > 0)
                        {
                            obj.FromValue = itreeDao[0].Value.ToString();
                            obj.ToValue = (string)statusObject[0]["comment"];
                            itreeDao[0].Value = (string)statusObject[0]["comment"];
                            tx.PersistenceManager.PlanningRepository.Save<TreeValueDao>(itreeDao[0]);
                            tx.Commit();
                            fs.AsynchronousNotify(obj);
                            return true;
                        }
                        else
                        {

                            obj.FromValue = "-";
                            obj.ToValue = (string)statusObject[0]["comment"];
                            TreeValueDao tvdao = new TreeValueDao();
                            tvdao.Attributeid = (int)statusObject[0]["AttributeId"];
                            tvdao.Entityid = (int)statusObject[0]["EntityId"];
                            tvdao.Level = (int)statusObject[0]["Level"];
                            tvdao.Nodeid = (int)statusObject[0]["NodeId"];
                            tvdao.Value = (string)statusObject[0]["comment"];
                            tvdao.ParentNode = (int)statusObject[0]["ParentNode"];
                            tx.PersistenceManager.PlanningRepository.Save<TreeValueDao>(tvdao);
                            tx.Commit();
                            fs.AsynchronousNotify(obj);
                            return false;
                        }
                    }
                    if ((string)statusObject[0]["type"] == "option")
                    {

                        IList<TreeNodeDao> optNode = new List<TreeNodeDao>();

                        optNode = tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>().Where(a => a.AttributeID == (int)statusObject[0]["AttributeId"] && a.ParentNodeID == (int)statusObject[0]["ParentNode"]).Select(a => a).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                        var Parentname = tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>().Where(a => a.AttributeID == (int)statusObject[0]["AttributeId"] && a.Id == (int)statusObject[0]["ParentNode"]).Select(a => a.Caption).ToList();
                        obj.AttributeName = Parentname[0].ToString();
                        if (itreeDao.Count > 0)
                        {
                            var FromValue = optNode.Where(a => a.Id == (int)itreeDao[0].Nodeid).Select(a => a.Caption).ToList();
                            obj.FromValue = FromValue[0].ToString();
                            var ToValue = optNode.Where(a => a.Id == (int)statusObject[0]["NodeId"]).Select(a => a.Caption).ToList();
                            obj.ToValue = ToValue[0].ToString();
                            itreeDao[0].Nodeid = (int)statusObject[0]["NodeId"];
                            tx.PersistenceManager.PlanningRepository.Save<TreeValueDao>(itreeDao[0]);
                            tx.Commit();
                            fs.AsynchronousNotify(obj);
                            return true;
                        }
                        else
                        {
                            obj.FromValue = "-";
                            var ToValue = optNode.Where(a => a.Id == (int)statusObject[0]["NodeId"]).Select(a => a.Caption).ToList();
                            obj.ToValue = ToValue[0].ToString();
                            TreeValueDao tvdao = new TreeValueDao();
                            tvdao.Attributeid = (int)statusObject[0]["AttributeId"];
                            tvdao.Entityid = (int)statusObject[0]["EntityId"];
                            tvdao.Level = (int)statusObject[0]["Level"];
                            tvdao.Nodeid = (int)statusObject[0]["NodeId"];
                            tvdao.Value = (string)statusObject[0]["comment"];
                            tvdao.ParentNode = (int)statusObject[0]["ParentNode"];
                            tx.PersistenceManager.PlanningRepository.Save<TreeValueDao>(tvdao);
                            tx.Commit();
                            fs.AsynchronousNotify(obj);
                            return false;
                        }
                    }
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public IList<int> GetTabsforCalender(PlanningManagerProxy planningManagerProxy, int calenderID)
        {
            try
            {
                IList<int> tabIds = new List<int>();
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {
                    var tabIdsfrCal = tx.PersistenceManager.PlanningRepository.Query<CalenderTabDao>().Where(a => a.Calenderid == calenderID).ToList().Select(a => a.CustomTabid);
                    foreach (int tabID in tabIdsfrCal)
                    {
                        tabIds.Add(tabID);
                    }
                    tx.Commit();
                }
                return tabIds;
            }
            catch (Exception)
            {

                throw;
            }


        }


        public bool checkisupdatedfrCalender(ITransaction tx, PlanningManagerProxy proxy, int CalenderId, int CalenderTypeId, IList<ICalenderFulfillCondtions> objFullfilConditions = null, string FromCalenderFullfillmentCondition = null)
        {
            try
            {
                FeedNotificationServer fs = new FeedNotificationServer();

                List<string> objcsondtion = new List<string>();

                ICalenderFulfillCondtions objectivces = new CalenderFulfillCondtions();
                StringBuilder objCondition = new StringBuilder();
                StringBuilder ToValue = new StringBuilder();
                foreach (ICalenderFulfillCondtions item in objFullfilConditions)
                {
                    objectivces.EntityTypeid = item.EntityTypeid;
                    objectivces.Attributeid = item.Attributeid == null ? 0 : item.Attributeid;
                    IList<int> calenderconditionvalue = item.CalenderConditionValue;
                    int j = 0;
                    List<int> data = new List<int>();
                    if (calenderconditionvalue != null)
                    {
                        foreach (int condition in calenderconditionvalue)
                        {
                            j = condition;
                            data.Add(j);
                        }
                    }
                    string result = "";
                    string ConditionType = "";
                    if (item.ConditionType >= 1)
                    {
                        ConditionType = item.ConditionType == 1 ? "OR" : "AND";
                    }
                    if (data.Count != 0)
                    {
                        result = string.Join(",", data.Select(n => n.ToString()).ToArray());
                    }
                    StringBuilder query = new StringBuilder();

                    if (objectivces.Attributeid == 0 || result == null)
                    {
                        query.Append("select caption as [entitycaption] from mm_entitytype where id='" + objectivces.EntityTypeid + "' ");
                    }
                    else
                    {
                        query.Append("SELECT optionvalue.ID,entityattr.AttributeID as [AttributeID], entitytype.Caption as [entitycaption],entityattr.Caption [attributecaption] ,");
                        query.Append(" optionValue.Caption as [optoincaption]  FROM MM_EntityType entitytype ");
                        query.Append(" inner JOIN MM_EntityTypeAttributeRelation entityattr on  ");
                        query.Append(" entitytype.ID = entityattr.EntityTypeID INNER JOIN MM_Option ");
                        query.Append(" optionValue ON entityattr.AttributeID = optionValue.AttributeID ");
                        query.Append(" where entityattr.EntityTypeID = " + objectivces.EntityTypeid + " ");
                        query.Append(" AND entityattr.AttributeID = " + objectivces.Attributeid + " AND optionValue.ID IN (" + result + ")");
                    }
                    var items = tx.PersistenceManager.PlanningRepository.ExecuteQuery(query.ToString()).Cast<Hashtable>().ToList();
                    StringBuilder Condition = new StringBuilder();
                    int i = 0;

                    string cb = "";
                    for (int ii = 0; ii < items.Count(); ii++)
                    {
                        if (cb.Length == 0)
                        {
                            if (Convert.ToInt32(item.ConditionType) >= 1)
                            {
                                Condition.Append(" " + ConditionType + "");
                            }
                            Condition.Append("\"if type is " + (string)items[ii]["entitycaption"] + "");
                            if (objectivces.Attributeid != 0)
                            {
                                Condition.Append(" Where " + (string)items[ii]["attributecaption"] + " Equals ");
                            }
                        }
                        if ((string)items[ii]["attributecaption"] != null)
                        {
                            Condition.Append(",");
                            Condition.Replace("Equals ,", "Equals ");
                            Condition.Append(" " + (string)items[ii]["optoincaption"]);
                        }
                        cb = Condition.ToString();
                        cb = cb + "\"";
                    }
                    objcsondtion.Add(cb);
                }
                ToValue.Append(string.Join("", objcsondtion.ToArray()));
                //Objective fullfullment condtion
                string Fromvalueconditin = ""; string Tovalueconditioin = "";
                Fromvalueconditin = System.Text.RegularExpressions.Regex.Replace(FromCalenderFullfillmentCondition, "[^0-9a-zA-Z]+", "");
                Tovalueconditioin = System.Text.RegularExpressions.Regex.Replace(ToValue.ToString(), "[^0-9a-zA-Z]+", "");
                if (Fromvalueconditin != Tovalueconditioin)
                {

                    NotificationFeedObjects objfullfilmentcondition = new NotificationFeedObjects();
                    objfullfilmentcondition.EntityId = CalenderId;
                    objfullfilmentcondition.action = "calender summary update";
                    objfullfilmentcondition.Actorid = proxy.MarcomManager.User.Id;
                    objfullfilmentcondition.EntityTypeId = 10;
                    objfullfilmentcondition.FromValue = FromCalenderFullfillmentCondition;
                    objfullfilmentcondition.ToValue = ToValue.ToString();
                    objfullfilmentcondition.AttributeName = "Fullfilment condition";
                    fs.AsynchronousNotify(objfullfilmentcondition);
                }

                return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }
        public Tuple<object, object> getfinancialForecastIds(PlanningManagerProxy proxy)
        {

            dynamic Forecastdivisionid = Enum.GetValues(typeof(enumDivisonIds)).Cast<enumDivisonIds>().Select(e => new { divisionforecastingIds = e, DivisionforecastingName = e.ToString().Replace("_", " ") });
            dynamic Forecastbasisdivisionid = Enum.GetValues(typeof(enumbasisforecating)).Cast<enumbasisforecating>().Select(e => new { basisforecastingIds = e, basisforecastingIdsName = e.ToString().Replace("_", " ") });
            Tuple<object, object> financialForecastIds = Tuple.Create(Forecastdivisionid, Forecastbasisdivisionid);

            return financialForecastIds;
        }


        //public static int GetQuarter(this DateTime dt)
        //{
        //    return (dt.Month - 1) / 3 + 1;
        //}

        public IFinancialForecastSettings GetFinancialForecastsettings(PlanningManagerProxy planningManagerProxy)
        {
            try
            {
                //int qurter = (7 - 1) / 3 + 1;
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {
                    IFinancialForecastSettings objfinSettings = new FinancialForecastSettings();
                    var CurrentData = tx.PersistenceManager.PlanningRepository.Query<FinancialForecastSettingsDao>().SingleOrDefault();
                    if (CurrentData != null)
                    {
                        objfinSettings.ID = CurrentData.ID;
                        objfinSettings.ForecastBasis = CurrentData.ForecastBasis;
                        objfinSettings.ForecastDeadlines = CurrentData.ForecastDeadlines;
                        objfinSettings.ForecastDivision = CurrentData.ForecastDivision;
                        objfinSettings.ForecastLevel = CurrentData.ForecastLevel;
                        objfinSettings.IsFinancialForecast = CurrentData.IsFinancialForecast;
                        // objfinSettings.ForecastDivision = CurrentData.ForecastDivision;
                        return objfinSettings;
                    }

                }
            }
            catch (Exception)
            {

                return null;
            }
            return null;
        }

        public int UpdateFinancialForecastsettings(PlanningManagerProxy planningManagerProxy, int Id, bool IsFinancialforecast, int ForecastDivision, int ForecastBasis, int ForecastLevel, int Forecastdeadlines)
        {
            try
            {
                IFinancialForecastSettings financialforecast = new FinancialForecastSettings();
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {
                    var CurrentData = tx.PersistenceManager.PlanningRepository.Query<FinancialForecastSettingsDao>().Where(a => a.ID == Id).SingleOrDefault();
                    FinancialForecastSettingsDao finobjDao = new FinancialForecastSettingsDao();
                    if (CurrentData != null)
                    {
                        finobjDao.ID = CurrentData.ID;
                    }
                    if (CurrentData.ForecastDivision != ForecastDivision)
                    {
                        StringBuilder strqry = new StringBuilder();
                        strqry.Append(" UPDATE PM_Financial SET Q1 = 0,Q2 = 0,Q3 = 0,Q4 = 0,M1 = 0,M2 = 0,M3 = 0,M4 = 0,M5 = 0,M6 = 0,M7 = 0,M8 = 0,M9 = 0,M10 = 0,M11 = 0,M12 = 0,H1 = 0,H2 = 0,Y = 0 ");
                        tx.PersistenceManager.PlanningRepository.ExecuteQuery(strqry.ToString());
                    }

                    finobjDao.ForecastBasis = ForecastBasis;
                    finobjDao.ForecastDeadlines = Forecastdeadlines;
                    finobjDao.ForecastDivision = ForecastDivision;
                    finobjDao.ForecastLevel = ForecastLevel;
                    finobjDao.IsFinancialForecast = IsFinancialforecast;
                    tx.PersistenceManager.PlanningRepository.Save<FinancialForecastSettingsDao>(finobjDao);
                    tx.Commit();
                    return finobjDao.ID;
                }

            }
            catch (Exception)
            {

                throw;
                return 0;
            }
        }


        public int GetCalendarDetailsbyExternalID(PlanningManagerProxy planningManagerProxy, string ExternalUrlID)
        {
            try
            {
                int CalID = 0;
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {

                    StringBuilder sb = new StringBuilder();
                    sb.Append("SELECT ID FROM PM_Calender where ExternalUrlID = '" + ExternalUrlID + "'");
                    var entiyID = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sb.ToString()).Cast<Hashtable>().ToList();
                    //CalID = tx.PersistenceManager.PlanningRepository.Query<CalenderDao>().Where(a => a.ExternalUrlID == ExternalUrlID).ToList().Select(a => a.Id);
                    CalID = Convert.ToInt32(entiyID[0]["ID"]);
                    tx.Commit();
                }
                return CalID;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public int CreateCmsPageEntity(PlanningManagerProxy proxy, int parentId, int typeId, Boolean active, Boolean isLock, string name, IList<IEntityRoleUser> entityMembers, IList<IEntityCostReleations> entityCostcentres, IList<IEntityPeriod> entityPeriods, IList<IFundingRequest> listFundrequest, IList<IAttributeData> entityattributedata, int NavID, int TemplateID, string PublishedDate, string PublishedTime, int[] assetIdArr = null, IList<IObjectiveEntityValue> entityObjectvalues = null, IList<object> attributes = null)
        {
            int IdExist = 0;
            try
            {
                if (parentId == 0)
                {
                    proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.Plan, OperationId.Create);
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(Modules.Planning, typeId);
                }
                else
                    proxy.MarcomManager.AccessManager.TryEntityTypeAccess(Modules.Planning, parentId, typeId);

                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Started creating Entity", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                EntityDao dao = new EntityDao();
                EntityRoleUserDao entitymemberdao = new EntityRoleUserDao();
                IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                NotificationFeedObjects obj1 = new NotificationFeedObjects();
                int entityId;
                var ownervalue = entityattributedata.Where(a => a.ID == (int)SystemDefinedAttributes.Owner).Select(a => a).FirstOrDefault();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    // Business logic of EntityCreation 
                    entityId = GetBaseEntityID(typeId, name, tx, parentId, active, isLock, true);
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Entity is saved in PM_Entity with entityid : " + entityId, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    IdExist = tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>().Where(a => a.Id == typeId && a.IsAssociate == false).Select(a => a.Id).FirstOrDefault();

                    CmsEntityDao Entitydao = new CmsEntityDao();
                    Entitydao.ID = entityId;
                    Entitydao.Version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                    Entitydao.Description = "";
                    Entitydao.Level = 0;
                    Entitydao.Name = "";
                    Entitydao.NavID = NavID;
                    Entitydao.ParentID = parentId;
                    Entitydao.PublishedDate = PublishedDate;
                    Entitydao.PublishedTime = PublishedTime;
                    Entitydao.PublishedStatus = true;
                    Entitydao.TemplateID = TemplateID;
                    Entitydao.UniqueKey = "0";
                    Entitydao.Active = true;
                    tx.PersistenceManager.PlanningRepository.Save<CmsEntityDao>(Entitydao);

                    string templatePath = Path.Combine(HttpRuntime.AppDomainAppPath);
                    templatePath = templatePath + "CMSFiles\\Templates\\Files\\CMSTemplate-" + TemplateID + ".html";
                    if (System.IO.File.Exists(templatePath))
                    {
                        using (StreamReader reader = new StreamReader(templatePath))
                        {
                            StringBuilder Content = new StringBuilder();
                            Content.Append(reader.ReadToEnd());

                            bool blnActive = true;
                            if (tx.PersistenceManager.CmsRepository.Query<RevisedEntityContentDao>().Where(a => a.EntityID == entityId).Count() > 0)
                            {
                                blnActive = false;
                            }
                            RevisedEntityContentDao revEntityDao = new RevisedEntityContentDao();
                            revEntityDao.ID = 0;
                            revEntityDao.Content = Content.ToString();
                            revEntityDao.Active = blnActive;
                            revEntityDao.EntityID = entityId;
                            revEntityDao.CreatedOn = System.DateTime.Now.ToString();
                            tx.PersistenceManager.CmsRepository.Save<RevisedEntityContentDao>(revEntityDao);
                        }
                    }


                    if (entityMembers != null)
                    {
                        //IList<EntityRoleUserDao> Ientitroledao = new List<EntityRoleUserDao>();
                        foreach (var a in entityMembers)
                        {
                            //var distinctCount = 0;
                            //if (Ientitroledao.Count() > 0)
                            //    distinctCount = Ientitroledao.Where(i => i.Roleid == a.Roleid && i.Userid == a.Userid).Count();
                            //if (distinctCount == 0)
                            //{
                            EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                            entityroledao.Entityid = entityId;
                            int RoleID = a.Roleid;
                            if (IdExist != 0)
                            {
                                int CurrenttypeRoleID = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(ax => ax.ID == a.Roleid).Select(ax => ax.EntityRoleID).First();
                                if (CurrenttypeRoleID == 1)
                                {
                                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                    RoleID = NewObj.ID;
                                }
                                else if (CurrenttypeRoleID == 8)
                                {
                                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.BudgerApprover).SingleOrDefault();
                                    RoleID = NewObj.ID;
                                }

                            }
                            else
                            {
                                if (a.Roleid == 1)
                                {
                                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.Owner).SingleOrDefault();
                                    RoleID = NewObj.ID;
                                }
                                else if (a.Roleid == 8)
                                {
                                    var NewObj = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(t => t.EntityTypeID == typeId && (EntityRoles)t.EntityRoleID == EntityRoles.BudgerApprover).SingleOrDefault();
                                    RoleID = NewObj.ID;
                                }
                            }
                            entityroledao.Roleid = RoleID;
                            entityroledao.Userid = a.Userid;
                            entityroledao.IsInherited = a.IsInherited;
                            entityroledao.InheritedFromEntityid = a.InheritedFromEntityid;
                            Ientitroledao.Add(entityroledao);
                            //}

                        }
                    }
                    if (parentId != 0)
                    {
                        var GlobalMembers = from item in tx.PersistenceManager.UserRepository.Query<EntityRoleUserDao>() where item.Entityid == parentId select item;
                        foreach (var item in GlobalMembers)
                        {
                            if (IdExist != 0)
                            {
                                int CurrenttypeRoleID = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(ax => ax.ID == item.Roleid).Select(ax => ax.EntityRoleID).First();
                                if ((CurrenttypeRoleID != 1 || ownervalue.Value != item.Userid))
                                {

                                    EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                                    entityroledao.Entityid = entityId;
                                    if (CurrenttypeRoleID == 1)
                                        entityroledao.Roleid = tx.PersistenceManager.PlanningRepository.Query<EntityTypeRoleAclDao>().Where(ay => ay.EntityTypeID == typeId && ay.EntityRoleID == 2).Select(ay => ay.ID).First();
                                    else
                                        entityroledao.Roleid = item.Roleid;
                                    entityroledao.Userid = item.Userid;
                                    entityroledao.IsInherited = true;
                                    entityroledao.InheritedFromEntityid = parentId;
                                    Ientitroledao.Add(entityroledao);
                                    obj1.ToValue = entityroledao.Roleid.ToString();
                                }
                            }
                            else
                            {
                                if ((item.Roleid != 1 || ownervalue.Value != item.Userid))
                                {

                                    EntityRoleUserDao entityroledao = new EntityRoleUserDao();
                                    entityroledao.Entityid = entityId;
                                    if (item.Roleid == 1)
                                        entityroledao.Roleid = 2;
                                    else
                                        entityroledao.Roleid = item.Roleid;
                                    entityroledao.Userid = item.Userid;
                                    entityroledao.IsInherited = true;
                                    entityroledao.InheritedFromEntityid = parentId;
                                    Ientitroledao.Add(entityroledao);
                                    obj1.ToValue = entityroledao.Roleid.ToString();
                                }
                            }
                        }
                    }
                    if (Ientitroledao.Count > 0)
                    {
                        tx.PersistenceManager.PlanningRepository.Save<EntityRoleUserDao>(Ientitroledao);
                        obj1.obj2 = Ientitroledao.ToList<Object>();
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Entity Role Users", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    //if (listFundrequest != null)
                    //{
                    //    IList<FundingRequestDao> IfundRequestdao = new List<FundingRequestDao>();
                    //    foreach (var a in listFundrequest)
                    //    {
                    //        FundingRequestDao fundrequestdao = new FundingRequestDao();
                    //        fundrequestdao.Id = entityId;
                    //        fundrequestdao.RequestedBy = a.RequestedBy;
                    //        fundrequestdao.CostCenterid = a.CostCenterid;
                    //        fundrequestdao.Entityid = a.Entityid;
                    //        fundrequestdao.LastUpdatedOn = a.LastUpdatedOn;
                    //        fundrequestdao.FundRequestSTATUS = 0;
                    //        IfundRequestdao.Add(fundrequestdao);
                    //    }
                    //    tx.PersistenceManager.PlanningRepository.Save<FundingRequestDao>(IfundRequestdao);
                    //    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Funding Request", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    //}

                    //IList<FinancialDao> Ifinancial = new List<FinancialDao>();

                    //if (entityCostcentres != null)
                    //{
                    //    IList<EntityCostReleationsDao> Ientitycostcenterdao = new List<EntityCostReleationsDao>();
                    //    foreach (var a in entityCostcentres)
                    //    {
                    //        EntityCostReleationsDao entitycostcenterdao = new EntityCostReleationsDao();
                    //        entitycostcenterdao.EntityId = entityId;
                    //        entitycostcenterdao.CostcenterId = a.CostcenterId;
                    //        entitycostcenterdao.Sortorder = a.Sortorder;
                    //        entitycostcenterdao.Isassociate = a.Isassociate;
                    //        entitycostcenterdao.Isactive = a.Isactive;
                    //        Ientitycostcenterdao.Add(entitycostcenterdao);
                    //    }
                    //    tx.PersistenceManager.PlanningRepository.Save<EntityCostReleationsDao>(Ientitycostcenterdao);

                    //    foreach (var a in entityCostcentres)
                    //    {
                    //        FinancialDao financialdao = new FinancialDao();
                    //        financialdao.Entityid = entityId;
                    //        financialdao.CostCenterid = a.CostcenterId;
                    //        financialdao.ApprovedAllocatedAmount = 0;
                    //        financialdao.ApprovedBudget = 0;
                    //        financialdao.Commited = 0;
                    //        financialdao.LastUpdateOn = DateTimeOffset.UtcNow;
                    //        financialdao.PlannedAmount = 0;
                    //        financialdao.RequestedAmount = 0;
                    //        financialdao.Spent = 0;
                    //        financialdao.Status = 0;
                    //        Ifinancial.Add(financialdao);
                    //    }
                    //    tx.PersistenceManager.PlanningRepository.Save<FinancialDao>(Ifinancial);
                    //    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Financial", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    //}

                    ////for inserting data into dynamic table
                    //IList<DynamicAttributesDao> idynObj = new List<DynamicAttributesDao>();
                    //DynamicAttributesDao dynamicdao = new DynamicAttributesDao();
                    //foreach (var val in Ifinancial)
                    //{
                    //    dynamicdao = new DynamicAttributesDao();
                    //    dynamicdao.Id = val.Id;
                    //    idynObj.Add(dynamicdao);

                    //}
                    //if (idynObj.Count > 0)
                    //    tx.PersistenceManager.PlanningRepository.SaveDynamicEntity<DynamicAttributesDao>("FundingCostCentreRecords", idynObj);

                    //if (entityPeriods != null)
                    //{
                    //    IList<EntityPeriodDao> Ientityper = new List<EntityPeriodDao>();
                    //    EntityPeriodDao perioddao = new EntityPeriodDao();
                    //    int sortOrder = 1;
                    //    foreach (var a in entityPeriods)
                    //    {
                    //        perioddao = null;
                    //        perioddao = new EntityPeriodDao();
                    //        perioddao.Entityid = entityId;
                    //        perioddao.Startdate = a.Startdate;
                    //        perioddao.EndDate = a.EndDate;
                    //        perioddao.Description = a.Description;
                    //        perioddao.SortOrder = sortOrder;
                    //        sortOrder = sortOrder + 1;
                    //        Ientityper.Add(perioddao);
                    //    }
                    //    tx.PersistenceManager.PlanningRepository.Save<EntityPeriodDao>(Ientityper);
                    //    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Entity Period", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);

                    //}
                    //if (entityObjectvalues != null)
                    //{
                    //    IList<ObjectiveEntityValueDao> listObjentityvaluesdao = new List<ObjectiveEntityValueDao>();
                    //    foreach (var objent in entityObjectvalues)
                    //    {
                    //        ObjectiveEntityValueDao objentityvalues = new ObjectiveEntityValueDao();
                    //        objentityvalues.Objectiveid = objent.Objectiveid;
                    //        objentityvalues.Entityid = entityId;
                    //        objentityvalues.PlannedTarget = objent.PlannedTarget;
                    //        objentityvalues.TargetOutcome = objent.TargetOutcome;
                    //        objentityvalues.RatingObjective = objent.RatingObjective;
                    //        objentityvalues.Comments = objent.Comments;
                    //        objentityvalues.Status = objent.Status;
                    //        objentityvalues.Fulfilment = objent.Fulfilment;
                    //        listObjentityvaluesdao.Add(objentityvalues);
                    //    }
                    //    tx.PersistenceManager.PlanningRepository.Save<ObjectiveEntityValueDao>(listObjentityvaluesdao);
                    //    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved Objectives", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    //}


                    if (entityattributedata != null)
                    {
                        var result = InsertEntityAttributes(tx, entityattributedata, entityId, typeId);
                    }

                    IList<BrandSystems.Marcom.Core.Metadata.Interface.IEntityTypeStatusOptions> _iEntityStatus = proxy.MarcomManager.MetadataManager.GetEntityStatus(typeId, false);

                    if (_iEntityStatus.Count > 0)
                    {
                        EntityStatusDao entitystatusvalues = new EntityStatusDao();
                        entitystatusvalues.EntityID = entityId;
                        entitystatusvalues.StatusID = _iEntityStatus[0].ID;
                        entitystatusvalues.IntimeStatus = 0;

                        tx.PersistenceManager.PlanningRepository.Save<EntityStatusDao>(entitystatusvalues);
                    }

                    tx.Commit();

                    string versionXmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(MarcomManagerFactory.ActiveMetadataVersionNumber);
                    var xDoc = XDocument.Load(versionXmlPath);
                    string entityTypeName = Convert.ToString(xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(typeId)).Select(a => a.Element("Caption").Value).First());
                    try
                    {
                        BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                        NotificationFeedObjects obj = new NotificationFeedObjects();
                        obj.action = "create entity";
                        obj.Actorid = proxy.MarcomManager.User.Id;
                        obj.EntityId = entityId;
                        obj.EntityTypeId = typeId;
                        obj.AttributeName = name;
                        obj.TypeName = entityTypeName;
                        obj.CreatedOn = DateTimeOffset.Now;
                        obj.ParentId = parentId;
                        fs.AsynchronousNotify(obj);

                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Updated the Feeds", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                        //notification for adding memebrs while creating entity in wizard
                        BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs1 = new Utility.FeedNotificationServer();

                        obj1.action = "entity member added";
                        obj1.Actorid = proxy.MarcomManager.User.Id;
                        obj1.EntityId = entityId;
                        obj1.EntityTypeId = typeId;
                        obj1.AttributeName = name;
                        obj1.TypeName = entityTypeName;
                        obj1.CreatedOn = DateTimeOffset.Now;
                        obj1.ParentId = parentId;

                        fs1.AsynchronousNotify(obj1);
                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("error in feed" + " " + ex.Message, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }


                }
                try
                {
                    //Adding to the Search Engine
                    System.Threading.Tasks.Task taskforaddentityforsearch = new System.Threading.Tasks.Task(() => AddEntityAsync(proxy, entityId.ToString(), name, "CmsNavigation"));
                    taskforaddentityforsearch.Start();

                    //Adding Admin Task to the entity
                    int[] attrTypeIdforTask = { 3, 4, 6 };
                    IList<IAttributeData> itaskAttributedata = entityattributedata.Where(a => attrTypeIdforTask.Contains(a.TypeID) && a.IsSpecial == false).Select(a => a).ToList<IAttributeData>();
                    System.Threading.Tasks.Task taskforaddtaskContenttosearch = new System.Threading.Tasks.Task(() => GettingPredefineTemplatesForEntityMetadata(proxy, itaskAttributedata, typeId, entityId));
                    taskforaddtaskContenttosearch.Start();

                    //Linking assets to the entity
                    if (assetIdArr != null)
                        LinkAssettoEntity(entityId, assetIdArr);


                }
                catch (Exception ex)
                {
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Mail sending error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                }
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Successully created entity with ID: " + entityId, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------" + entityId, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);


                if (IdExist != 0)
                {
                    InsertUpdateGanttEntitySortorder(proxy, entityId);
                }
                return entityId;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogError("Failed to create entity", ex);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                return 0;
            }

        }



        public object GetEntityFinancialdForecastHeadings(PlanningManagerProxy planningManagerProxy, int entityID, int divisionID, bool Iscc)
        {
            try
            {
                IList<string> Headings = new List<string>();
                //int year = DateTime.Now.Year;
                //DateTime todayDate = DateTime.UtcNow;
                //DateTime firstDay = new DateTime(year, 1, 1);
                int presentQuarter = (DateTime.Today.Month - 1) / 3 + 1;
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {
                    StringBuilder sbCC = new StringBuilder();
                    if (Iscc != true)
                    {
                        sbCC.AppendLine("SELECT");
                        sbCC.AppendLine("	TypeID");
                        sbCC.AppendLine("FROM PM_Entity");
                        sbCC.AppendLine("WHERE ID = (SELECT");
                        sbCC.AppendLine("	CostCenterID");
                        sbCC.AppendLine("FROM PM_Financial");
                        sbCC.AppendLine("WHERE EntityID =" + entityID + ")");
                    }
                    else
                    {
                        sbCC.AppendLine("SELECT");
                        sbCC.AppendLine("	TypeID");
                        sbCC.AppendLine("  FROM PM_Entity");
                        sbCC.AppendLine("WHERE ID = " + entityID);
                        //WHERE ID = 2021
                    }
                    IList typeIDList = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sbCC.ToString());
                    int typeID = (int)((System.Collections.Hashtable)(typeIDList)[0])["TypeID"];

                    StringBuilder sbYear = new StringBuilder();
                    if (Iscc != true)
                    {
                        sbYear.AppendLine("SELECT");
                        sbYear.AppendLine("	MO.Caption");
                        sbYear.AppendLine("FROM MM_AttributeRecord_" + typeID + " AS MA");
                        sbYear.AppendLine("INNER JOIN MM_Option MO");
                        sbYear.AppendLine("	ON MA.Attr_1 = MO.ID");
                        sbYear.AppendLine("WHERE MA.Id = (SELECT");
                        sbYear.AppendLine("	CostCenterID");
                        sbYear.AppendLine("FROM PM_Financial");
                        sbYear.AppendLine("WHERE EntityID = " + entityID + " )");
                    }
                    else
                    {
                        sbYear.AppendLine("SELECT");
                        sbYear.AppendLine("	MO.Caption");
                        sbYear.AppendLine("FROM MM_AttributeRecord_" + typeID + " AS MA");
                        sbYear.AppendLine("INNER JOIN MM_Option MO");
                        sbYear.AppendLine("	ON MA.Attr_1 = MO.ID");
                        sbYear.AppendLine("WHERE MA.Id = " + entityID);
                        //sbYear.AppendLine("	CostCenterID");
                        //sbYear.AppendLine("FROM PM_Financial");
                        //sbYear.AppendLine("WHERE EntityID = " + entityID + " )");
                    }
                    IList yearValue = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sbYear.ToString());
                    int year = Convert.ToInt32(((System.Collections.Hashtable)(yearValue)[0])["Caption"]);
                    DateTime todayDate = DateTime.UtcNow;
                    DateTime firstDay = new DateTime(year, 1, 1);

                    var CurrentData = tx.PersistenceManager.PlanningRepository.Query<FinancialForecastSettingsDao>().SingleOrDefault();
                    switch ((enumDivisonIds)CurrentData.ForecastDivision)
                    {
                        case enumDivisonIds.Monthly:
                            int month = DateTime.Now.Month;

                            DateTime M1LastDate = firstDay.AddMonths(1).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M2LastDate = firstDay.AddMonths(2).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M3LastDate = firstDay.AddMonths(3).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M4LastDate = firstDay.AddMonths(4).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M5LastDate = firstDay.AddMonths(5).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M6LastDate = firstDay.AddMonths(6).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M7LastDate = firstDay.AddMonths(7).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M8LastDate = firstDay.AddMonths(8).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M9LastDate = firstDay.AddMonths(9).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M10LastDate = firstDay.AddMonths(10).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M11LastDate = firstDay.AddMonths(11).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime M12LastDate = firstDay.AddMonths(12).AddDays((int)CurrentData.ForecastDeadlines);

                            if (todayDate <= M1LastDate)
                            {
                                Headings.Add("FC M1");
                                Headings.Add("FC M2");
                                Headings.Add("FC M3");
                                Headings.Add("FC M4");
                                Headings.Add("FC M5");
                                Headings.Add("FC M6");
                                Headings.Add("FC M7");
                                Headings.Add("FC M8");
                                Headings.Add("FC M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M1LastDate && todayDate <= M2LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("FC M2");
                                Headings.Add("FC M3");
                                Headings.Add("FC M4");
                                Headings.Add("FC M5");
                                Headings.Add("FC M6");
                                Headings.Add("FC M7");
                                Headings.Add("FC M8");
                                Headings.Add("FC M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M2LastDate && todayDate <= M3LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("FC M3");
                                Headings.Add("FC M4");
                                Headings.Add("FC M5");
                                Headings.Add("FC M6");
                                Headings.Add("FC M7");
                                Headings.Add("FC M8");
                                Headings.Add("FC M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M3LastDate && todayDate <= M4LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("FC M4");
                                Headings.Add("FC M5");
                                Headings.Add("FC M6");
                                Headings.Add("FC M7");
                                Headings.Add("FC M8");
                                Headings.Add("FC M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M4LastDate && todayDate <= M5LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("Actual M4");
                                Headings.Add("FC M5");
                                Headings.Add("FC M6");
                                Headings.Add("FC M7");
                                Headings.Add("FC M8");
                                Headings.Add("FC M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M5LastDate && todayDate <= M6LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("Actual M4");
                                Headings.Add("Actual M5");
                                Headings.Add("FC M6");
                                Headings.Add("FC M7");
                                Headings.Add("FC M8");
                                Headings.Add("FC M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M6LastDate && todayDate <= M7LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("Actual M4");
                                Headings.Add("Actual M5");
                                Headings.Add("Actual M6");
                                Headings.Add("FC M7");
                                Headings.Add("FC M8");
                                Headings.Add("FC M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M7LastDate && todayDate <= M8LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("Actual M4");
                                Headings.Add("Actual M5");
                                Headings.Add("Actual M6");
                                Headings.Add("Actual M7");
                                Headings.Add("FC M8");
                                Headings.Add("FC M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");

                            }
                            else if (todayDate > M8LastDate && todayDate <= M9LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("Actual M4");
                                Headings.Add("Actual M5");
                                Headings.Add("Actual M6");
                                Headings.Add("Actual M7");
                                Headings.Add("Actual M8");
                                Headings.Add("FC M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M9LastDate && todayDate <= M10LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("Actual M4");
                                Headings.Add("Actual M5");
                                Headings.Add("Actual M6");
                                Headings.Add("Actual M7");
                                Headings.Add("Actual M8");
                                Headings.Add("Actual M9");
                                Headings.Add("FC M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M10LastDate && todayDate <= M11LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("Actual M4");
                                Headings.Add("Actual M5");
                                Headings.Add("Actual M6");
                                Headings.Add("Actual M7");
                                Headings.Add("Actual M8");
                                Headings.Add("Actual M9");
                                Headings.Add("Actual M10");
                                Headings.Add("FC M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M11LastDate && todayDate <= M12LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("Actual M4");
                                Headings.Add("Actual M5");
                                Headings.Add("Actual M6");
                                Headings.Add("Actual M7");
                                Headings.Add("Actual M8");
                                Headings.Add("Actual M9");
                                Headings.Add("Actual M10");
                                Headings.Add("Actual M11");
                                Headings.Add("FC M12");
                            }
                            else if (todayDate > M12LastDate)
                            {
                                Headings.Add("Actual M1");
                                Headings.Add("Actual M2");
                                Headings.Add("Actual M3");
                                Headings.Add("Actual M4");
                                Headings.Add("Actual M5");
                                Headings.Add("Actual M6");
                                Headings.Add("Actual M7");
                                Headings.Add("Actual M8");
                                Headings.Add("Actual M9");
                                Headings.Add("Actual M10");
                                Headings.Add("Actual M11");
                                Headings.Add("Actual M12");
                            }





                            break;
                        case enumDivisonIds.Half_yearly:

                            int currentHalf = (DateTime.Today.Month - 1) / 6 + 1;
                            DateTime H1LastDate = firstDay.AddMonths(6).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime H2LastDate = firstDay.AddMonths(12).AddDays((int)CurrentData.ForecastDeadlines);

                            if (todayDate <= H1LastDate)
                            {
                                Headings.Add("FC H1");
                                Headings.Add("FC H2");
                            }
                            else if (todayDate > H1LastDate && todayDate <= H2LastDate)
                            {
                                Headings.Add("Actual H1");
                                Headings.Add("FC H2");
                            }
                            else if (todayDate > H2LastDate)
                            {
                                Headings.Add("Actual H1");
                                Headings.Add("Actual H2");
                            }


                            break;
                        case enumDivisonIds.Quaterly:
                            int currentQuarter = (DateTime.Today.Month - 1) / 3 + 1;

                            DateTime Q1LastDate = firstDay.AddMonths(3).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime Q2LastDate = firstDay.AddMonths(6).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime Q3LastDate = firstDay.AddMonths(9).AddDays((int)CurrentData.ForecastDeadlines);
                            DateTime Q4LastDate = firstDay.AddMonths(12).AddDays((int)CurrentData.ForecastDeadlines);
                            if (todayDate <= Q1LastDate)
                            {
                                Headings.Add("FC Q1");
                                Headings.Add("FC Q2");
                                Headings.Add("FC Q3");
                                Headings.Add("FC Q4");
                            }
                            else if (todayDate > Q1LastDate && todayDate <= Q2LastDate)
                            {
                                Headings.Add("Actual Q1");
                                Headings.Add("FC Q2");
                                Headings.Add("FC Q3");
                                Headings.Add("FC Q4");
                            }
                            else if (todayDate > Q2LastDate && todayDate <= Q3LastDate)
                            {
                                Headings.Add("Actual Q1");
                                Headings.Add("Actual Q2");
                                Headings.Add("FC Q3");
                                Headings.Add("FC Q4");
                            }
                            else if (todayDate > Q3LastDate && todayDate <= Q4LastDate)
                            {
                                Headings.Add("Actual Q1");
                                Headings.Add("Actual Q2");
                                Headings.Add("Actual Q3");
                                Headings.Add("FC Q4");
                            }
                            else if (todayDate > Q4LastDate)
                            {
                                Headings.Add("Actual Q1");
                                Headings.Add("Actual Q2");
                                Headings.Add("Actual Q3");
                                Headings.Add("Actual Q4");
                            }

                            break;

                        case enumDivisonIds.Yearly:
                            DateTime YLastDate = firstDay.AddYears(1).AddDays((int)CurrentData.ForecastDeadlines);
                            if (todayDate <= YLastDate)
                            {
                                Headings.Add("FC Y");
                            }
                            else if (todayDate > YLastDate)
                            {
                                Headings.Add("Actual Y");
                            }

                            break;
                        default:

                            break;
                    }
                }

                return Headings;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public Tuple<string, string> GetlastUpdatedtime(PlanningManagerProxy planningManagerProxy, int entityID)
        {
            try
            {
                using (ITransaction tx = planningManagerProxy.MarcomManager.GetTransaction())
                {
                    StringBuilder sbLastUpdated = new StringBuilder();
                    sbLastUpdated.AppendLine("SELECT");
                    sbLastUpdated.AppendLine("  LastUpdateOn,");
                    sbLastUpdated.AppendLine("  LastUpdatedAmountOn");
                    sbLastUpdated.AppendLine("  FROM PM_Financial");
                    sbLastUpdated.AppendLine("  WHERE EntityID = " + entityID);
                    IList dateList = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sbLastUpdated.ToString());
                    DateTimeOffset lastUpdated = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where item.Entityid == entityID select item.LastUpdateOn).FirstOrDefault();
                    DateTimeOffset lastUpdatedAmount = (from item in tx.PersistenceManager.PlanningRepository.Query<FinancialDao>() where item.Entityid == entityID select item.LastUpdatedAmountOn).FirstOrDefault();

                    ////var d  = 
                    ////DateTime d = new DateTime.UT
                    //string lastUpdated = Convert.ToString(Convert.ToDateTime(((System.Collections.Hashtable)(dateList)[0])["LastUpdateOn"]));
                    //string lastUpdatedAmount = Convert.ToString(Convert.ToDateTime(((System.Collections.Hashtable)(dateList)[0])["LastUpdatedAmountOn"]));
                    Tuple<string, string> datedata = Tuple.Create(lastUpdated.ToString("yyyy-MM-dd"), lastUpdatedAmount.ToString("yyyy-MM-dd"));
                    tx.Commit();
                    return datedata;
                }

            }
            catch (Exception)
            {

                throw;
            }
        }
    }
}