using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Data;
using System.IO;
using System.Reflection;
using BrandSystems.Marcom.Core.Interface;
using BrandSystems.Marcom.Core.Metadata;
using BrandSystems.Marcom.Core.Metadata.Interface;
using BrandSystems.Marcom.Core.Managers.Proxy;
using BrandSystems.Marcom.Dal.Metadata.Model;
using BrandSystems.Marcom.Dal.Base;
using NHibernate.Cfg;
using System.Collections;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.Design.WebControls;
using NHibernate.Mapping;
using System.Dynamic;
using Microsoft.CSharp;
using System.CodeDom.Compiler;
using System.CodeDom;
using NHibernate.Dialect;
using System.Collections.Specialized;
using NHibernate.Cfg.MappingSchema;
using NHibernate.Mapping.ByCode;
using System.Net;
using System.Xml.Linq;
using System.Configuration;
using BrandSystems.Marcom.Metadata.Interface;
using BrandSystems.Marcom.Metadata;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Converters;
using BrandSystems.Marcom.Dal.Planning.Model;
using BrandSystems.Marcom.Dal.User.Model;
using BrandSystems.Marcom.Dal.Base;
using BrandSystems.Marcom.Core.Planning;
using BrandSystems.Marcom.Core.Planning.Interface;
using BrandSystems.Marcom.Core.Common;
using BrandSystems.Marcom.Core.Common.Interface;
using BrandSystems.Marcom.Dal.Common.Model;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.Globalization;
using BrandSystems.Marcom.Dal.Access.Model;
using System.Diagnostics;
using BrandSystems.Marcom.Core.Access.Interface;
using BrandSystems.Marcom.Core.Access;
using BrandSystems.Marcom.Dal.DAM.Model;
using System.Data.OleDb;

namespace BrandSystems.Marcom.Core.Managers
{
    /// <summary>
    /// 
    /// </summary>
    internal partial class MetadataManager : IManager
    {
        /// <summary>
        /// The instance
        /// </summary>
        private static MetadataManager instance = new MetadataManager();

        /// <summary>
        /// Gets the instance.
        /// </summary>
        /// <value>
        /// The instance.
        /// </value>
        internal static MetadataManager Instance
        {
            get { return instance; }
        }

        /// <summary>
        /// Initializes the specified marcom manager.
        /// </summary>
        /// <param name="marcomManager">The marcom manager.</param>
        void IManager.Initialize(IMarcomManager marcomManager)
        {
            // Cache and initialize things here...

        }

        /// <summary>
        /// Commit all caches since the transaction has been commited.
        /// </summary>
        void IManager.CommitCaches()
        {

        }

        /// <summary>
        /// Rollback all caches since the transaction has been rollbacked.
        /// </summary>
        void IManager.RollbackCaches()
        {

        }

        /// <summary>
        /// The working metadata
        /// </summary>
        string currentworkingMetadata = Path.Combine(HttpRuntime.AppDomainAppPath, ConfigurationManager.AppSettings["currentworkingMetadata"]);



        /// <summary>
        /// The history metadata
        /// </summary>
        string currentSyncDBXML = Path.Combine(HttpRuntime.AppDomainAppPath, ConfigurationManager.AppSettings["currentSyncDBXML"]);




        /// <summary>
        /// The version of metadata
        /// </summary>
        string versionMetadata = Path.Combine(HttpRuntime.AppDomainAppPath, ConfigurationManager.AppSettings["versionMetadata"]);

        //string currentMetadata = Path.Combine(HttpRuntime.AppDomainAppPath, ConfigurationManager.AppSettings["CurrentMetadata"]);

        /// <summary>
        /// Gets the module.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns></returns>
        public IList<IModule> GetModule(MetadataManagerProxy proxy)
        {
            try
            {
                int version = 0;
                IList<IModule> _iimodule = new List<IModule>();
                IList<ModuleDao> dao = new List<ModuleDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<ModuleDao>();
                        tx.Commit();
                    }
                    else
                    {
                        string xmlpath = GetXmlWorkingPath();
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<ModuleDao>(xmlpath);
                    }
                    foreach (var item in dao)
                    {
                        IModule _imodule = new BrandSystems.Marcom.Core.Metadata.Module();
                        _imodule.Id = item.Id;
                        _imodule.Caption = item.Caption;
                        _imodule.Description = item.Description;
                        _imodule.IsEnable = item.IsEnable;
                        _iimodule.Add(_imodule);
                    }
                }
                return _iimodule;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        /// <summary>
        /// Gets the module.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="ID">The ID.</param>
        /// <returns></returns>
        public IList<IModule> GetModuleByID(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                IList<IModule> _iimodule = new List<IModule>();
                ModuleDao dao = new ModuleDao();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    dao = tx.PersistenceManager.MetadataRepository.Get<ModuleDao>(ID);
                    tx.Commit();

                    IModule _imodule = new BrandSystems.Marcom.Core.Metadata.Module();
                    _imodule.Id = dao.Id;
                    _imodule.Caption = dao.Caption;
                    _imodule.Description = dao.Description;
                    _imodule.IsEnable = dao.IsEnable;
                    _iimodule.Add(_imodule);

                }
                return _iimodule;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        /// <summary>
        /// Inserts the update module.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="caption">The caption.</param>
        /// <param name="description">The description.</param>
        /// <param name="isenable">if set to <c>true</c> [isenable].</param>
        /// <param name="id">The id.</param>
        /// <returns>INT</returns>
        public int InsertUpdateModule(MetadataManagerProxy metadataManagerProxy, string caption, string description, bool isenable, int id)
        {
            try
            {

                ModuleDao dao = new ModuleDao();
                dao.Caption = caption;
                dao.Description = description;
                dao.IsEnable = isenable;
                dao.Id = id;

                //ModuleDao obj = new ModuleDao(imodule.Id, caption, description, isenable);
                //XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<ModuleDao>(currentworkingMetadata, obj);
                //SavetoSynDBXml(SavedXML, "Module", currentSyncDBXML, id);
                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.PlanningRepository.Save<ModuleDao>(dao);
                    tx.Commit();
                }
                return dao.Id;

            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        /// <summary>
        /// Deletes the module.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="moduleid">The moduleid.</param>
        /// <returns>bool</returns>
        public bool DeleteModule(MetadataManagerProxy proxy, int moduleid)
        {
            try
            {
                ModuleDao obj = new ModuleDao(moduleid);

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    PersistenceManager.Instance.MetadataRepository.Delete<ModuleDao>(obj);
                    tx.Commit();
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the modulefeature.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IModuleFeature </returns>
        public IList<IModuleFeature> GetModulefeature(MetadataManagerProxy proxy, int version)
        {
            try
            {
                //IList<IModuleFeature> _iimoduleFeature = new List<IModuleFeature>();
                //IList<ModuleFeatureDao> dao = new List<ModuleFeatureDao>();
                //using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                //{
                //    if (version == 0)
                //    {
                //        dao = tx.PersistenceManager.MetadataRepository.GetAll<ModuleFeatureDao>();
                //        tx.Commit();
                //    }
                //    else
                //    {
                //        string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                //        dao = tx.PersistenceManager.MetadataRepository.GetObject<ModuleFeatureDao>(xmlpath);
                //    }
                //}
                //foreach (var item in dao)
                //{
                //    IModuleFeature _imodule = new ModuleFeature();
                //    _imodule.Moduleid = item.Moduleid;
                //    _imodule.Featureid = item.Featureid;
                //    _imodule.IsEnable = item.IsEnable;
                //    _iimoduleFeature.Add(_imodule);
                //}
                //return _iimoduleFeature;
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Inserts the update modulefeature.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="moduleid">The moduleid.</param>
        /// <param name="featureid">The featureid.</param>
        /// <param name="isenable">if set to <c>true</c> [isenable].</param>
        /// <returns>int.</returns>
        public int InsertUpdateModulefeature(MetadataManagerProxy metadataManagerProxy, int moduleid, int featureid, bool isenable, int ID)
        {
            try
            {
                //IModuleFeature modFeature = new ModuleFeature();
                //modFeature.Moduleid = moduleid;
                //modFeature.Featureid = featureid;
                //modFeature.IsEnable = isenable;
                //if (ID == 0)
                //{
                //    //int max;
                //    //using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                //    //{
                //    //    max = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<EntityTypeDao>("Id");
                //    //}
                //    //max = max + 1;
                //    modFeature.Id = ID;
                //}
                //else
                //{
                //    modFeature.Id = ID;
                //}

                //ModuleFeatureDao obj = new ModuleFeatureDao(moduleid, featureid, isenable);
                //obj.Id = modFeature.Id;
                //XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<ModuleFeatureDao>(currentworkingMetadata, obj);
                //SavetoSynDBXml(SavedXML, "Module_Feature", currentSyncDBXML, ID);

                //return modFeature.Id;
                return 0;

            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        /// <summary>
        /// Deletes the module feature.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="moduleid">The moduleid.</param>
        /// <param name="featureid">The featureid.</param>
        /// <returns>bool</returns>
        public bool DeleteModuleFeature(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                ModuleFeatureDao obj = new ModuleFeatureDao(ID);
                obj.Id = ID;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<ModuleFeatureDao>(currentworkingMetadata, obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the type of the entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IEntityType</returns>
        public IList<IEntityType> GetEntityType(MetadataManagerProxy proxy, int ModuleID)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string moduleCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityType> _iientitytype = new List<IEntityType>();
                IList<EntityTypeDao> dao = new List<EntityTypeDao>();
                string mappingfilesPath = "";

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    IList<EntitytasktypeDao> entityTasktypedao = new List<EntitytasktypeDao>();
                    xmlpath = GetXmlWorkingPath();
                    entityTasktypedao = tx.PersistenceManager.MetadataRepository.GetObject<EntitytasktypeDao>(xmlpath);
                    if (ModuleID > 0)
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath).Where(a => a.Id != (int)EntityTypeList.UserDetails && a.ModuleID == ModuleID).ToList();
                    else
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath).Where(a => a.Id != (int)EntityTypeList.UserDetails).ToList();
                    if (entityTasktypedao != null)
                        if (entityTasktypedao.ToList().Count > 0)
                        {
                            int[] typeids = entityTasktypedao.Select(a => a.EntitytypeId).ToArray();
                            dao = dao.Where(a => !typeids.Contains(a.Id)).ToList();
                        }
                    foreach (var item in dao)
                    {
                        IEntityType _ientitytype = new EntityType();
                        _ientitytype.Id = item.Id;
                        _ientitytype.Caption = item.Caption.Trim();
                        _ientitytype.ModuleID = item.ModuleID;
                        var xDoc = XDocument.Load(xmlpath);
                        _ientitytype.ModuleCaption = Convert.ToString(xDoc.Root.Elements("Module_Table").Elements("Module").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.ModuleID)).Select(a => a.Element("Caption").Value).First()); ;
                        _ientitytype.Description = item.Description.Trim();
                        _ientitytype.Category = item.Category;
                        //_ientitytype.IsSystemDefined = item.IsSystemDefined;
                        //_ientitytype.ParentEntityTypeId = item.ParentEntityTypeId;
                        _ientitytype.ShortDescription = item.ShortDescription.Trim();
                        _ientitytype.ColorCode = item.ColorCode.Trim();
                        _ientitytype.IsAssociate = item.IsAssociate;
                        _ientitytype.WorkFlowID = item.WorkFlowID;
                        _ientitytype.IsRootLevel = item.IsRootLevel;
                        string workflowname = null;
                        if (_ientitytype.WorkFlowID != 0)
                            workflowname = (from val in tx.PersistenceManager.PlanningRepository.Query<WorkFlowTypeDao>() where val.Id == item.WorkFlowID select val.Name).FirstOrDefault().ToString();
                        _ientitytype.WorkFlowName = (workflowname == null) ? "-" : workflowname;
                        _iientitytype.Add(_ientitytype);
                    }
                    tx.Commit();
                }

                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        /// <summary>
        /// Gets the details of WorkflowType.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IWorkFlowType</returns>
        public IList<IWorkFlowType> GetWorkFlowDetails(MetadataManagerProxy proxy)
        {
            try
            {

                IList<IWorkFlowType> _iiworkflowtype = new List<IWorkFlowType>();
                IList<WorkFlowTypeDao> dao = new List<WorkFlowTypeDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    dao = tx.PersistenceManager.MetadataRepository.GetAll<WorkFlowTypeDao>();
                }
                foreach (var item in dao)
                {
                    IWorkFlowType _iworkflowtype = new WorkFlowType();
                    _iworkflowtype.Id = item.Id;
                    _iworkflowtype.Name = item.Name;
                    _iworkflowtype.Description = item.Description;
                    _iiworkflowtype.Add(_iworkflowtype);
                }
                return _iiworkflowtype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        /// <summary>
        /// Gets the type of the entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IEntityType</returns>
        public IList<IEntityType> GetEntityTypeIsAssociate(MetadataManagerProxy proxy)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string moduleCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityType> _iientitytype = new List<IEntityType>();
                IList<EntityTypeDao> dao = new List<EntityTypeDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeDao>();
                        tx.Commit();
                    }
                    else
                    {
                        xmlpath = GetXmlWorkingPath();
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath).Where(a => Convert.ToInt32(a.IsAssociate) == 0 && a.Category == 2 && a.ModuleID == 3).ToList();
                        tx.Commit();

                    }
                }
                foreach (var item in dao)
                {
                    IEntityType _ientitytype = new EntityType();
                    _ientitytype.Id = item.Id;
                    _ientitytype.Caption = item.Caption.Trim();
                    _ientitytype.ModuleID = item.ModuleID;
                    var xDoc = XDocument.Load(xmlpath);
                    _ientitytype.ModuleCaption = Convert.ToString(xDoc.Root.Elements("Module_Table").Elements("Module").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.ModuleID)).Select(a => a.Element("Caption").Value).First()); ;
                    _ientitytype.Description = item.Description.Trim();
                    _ientitytype.Category = item.Category;
                    //_ientitytype.ParentEntityTypeId = item.ParentEntityTypeId;
                    _ientitytype.ShortDescription = item.ShortDescription.Trim();
                    _ientitytype.ColorCode = item.ColorCode.Trim();
                    _ientitytype.IsAssociate = item.IsAssociate;
                    _iientitytype.Add(_ientitytype);
                }
                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        // <summary>
        /// Gets the type of the entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IEntityType</returns>
        public IList<IEntityType> GetEntityTypefromDB(MetadataManagerProxy proxy)
        {
            try
            {

                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string moduleCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityType> _iientitytype = new List<IEntityType>();
                IList<EntityTypeDao> dao = new List<EntityTypeDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeDao>().Where(a => Convert.ToInt32(a.IsAssociate) == 0).ToList();
                        tx.Commit();
                    }
                    else
                    {
                        xmlpath = GetXmlWorkingPath();
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath).Where(a => Convert.ToInt32(a.IsAssociate) == 0).ToList();
                        tx.Commit();

                    }
                }
                foreach (var item in dao)
                {
                    IEntityType _ientitytype = new EntityType();
                    _ientitytype.Id = item.Id;
                    _ientitytype.Caption = item.Caption.Trim();
                    _ientitytype.ModuleID = item.ModuleID;
                    //var xDoc = XDocument.Load(xmlpath);
                    _ientitytype.ModuleCaption = "-";  //Convert.ToString(xDoc.Root.Elements("Module_Table").Elements("Module").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.ModuleID)).Select(a => a.Element("Caption").Value).First()); ;
                    _ientitytype.Description = (item.Description == null) ? "-" : item.Description.Trim();
                    _ientitytype.Category = item.Category;
                    //_ientitytype.ParentEntityTypeId = item.ParentEntityTypeId;
                    _ientitytype.ShortDescription = (item.ShortDescription == null) ? "-" : item.ShortDescription.Trim();
                    _ientitytype.ColorCode = (item.ColorCode == null) ? "0" : item.ColorCode.Trim();
                    _ientitytype.IsAssociate = item.IsAssociate;
                    _iientitytype.Add(_ientitytype);
                }
                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        /// <summary>
        /// Getting list of Options for Fulfillment Entity Type Attributes
        /// </summary>
        /// <param name="proxy">The Proxy</param>
        /// <param name="entityTypeId">The EntityTypeID</param>
        /// <returns>IList of IAttribute</returns>
        public IList<IAttribute> GetFulfillmentFinicalAttribute(MetadataManagerProxy proxy, int entityTypeId)
        {
            IList<IAttribute> listAttributes = new List<IAttribute>();




            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {



                IList<EntityTypeAttributeRelationDao> entityTypeRealtionDao = new List<EntityTypeAttributeRelationDao>();
                IList<AttributeDao> attributesDao = new List<AttributeDao>();


                // entityTypeRealtionDao = tx.PersistenceManager.MetadataRepository.Query<EntityTypeAttributeRelationDao>().Where(a => a.EntityTypeID == entityTypeId).ToList();
                // attributesDao = tx.PersistenceManager.MetadataRepository.Query<AttributeDao>().Join(entityTypeRealtionDao, a => a.Id, b => b.AttributeID, (ab, bc) =>
                //new { ab, bc }).Where(a => (a.ab.AttributeTypeID == Convert.ToInt32(AttributesList.ListSingleSelection)) && a.bc.EntityTypeID == entityTypeId).Select
                //           (a => a.ab).ToList();
                // var attributeslist = (from entityTypeAttribute in tx.PersistenceManager.MetadataRepository.Query<EntityTypeAttributeRelationDao>()
                //                       join attribute in tx.PersistenceManager.MetadataRepository.Query<AttributeDao>() on entityTypeAttribute.AttributeID equals attribute.Id
                //                       where entityTypeAttribute.EntityTypeID == entityTypeId && attribute.AttributeTypeID == Convert.ToInt32(AttributesList.ListSingleSelection)
                //                       // group attribute by new { Id = attribute.Id, Caption = attribute.Caption} into gattribute

                //                     select new
                //                     {
                //                      Id = attribute.Id,
                //                         Caption = attribute.Caption

                //                     }).ToList();
                //int[]  x = attributeslist.ToList().Select(a => a.Id).Distinct().Select(a => a).ToArray();
                //var y = attributeslist.Where(a => x.Contains(a.Id)).ToList();
                //attributesDao = tx.PersistenceManager.MetadataRepository.Query<AttributeDao>().Where(a => a.AttributeTypeID == Convert.ToInt32(AttributesList.ListSingleSelection)).ToList();

                StringBuilder strqry = new StringBuilder();

                strqry.Append("select distinct ma.id AS Id,(select  top 1 Caption from MM_EntityTypeAttributeRelation where AttributeID=ma.id  order by id desc) as Caption    from   MM_Attribute as ma  ");
                strqry.Append("join MM_EntityTypeAttributeRelation as mer ");
                strqry.Append("on ma.ID=mer.AttributeID  where ma.AttributeTypeID= ? and  mer.EntityTypeID = ?  ");
                var attributeslist = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(strqry.ToString(), Convert.ToInt32(AttributesList.ListSingleSelection), entityTypeId);

                foreach (var obj in attributeslist)
                {
                    if (obj != null)
                    {
                        IAttribute FulfillmentFinicalattributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                        FulfillmentFinicalattributeObj.Id = (int)((System.Collections.Hashtable)(obj))["Id"];
                        FulfillmentFinicalattributeObj.Caption = ((System.Collections.Hashtable)(obj))["Caption"].ToString();
                        FulfillmentFinicalattributeObj.Level = 0;
                        FulfillmentFinicalattributeObj.AttributeTypeID = Convert.ToInt32(AttributesList.ListSingleSelection);
                        listAttributes.Add(FulfillmentFinicalattributeObj);
                    }

                }

                return listAttributes;
            }
        }
        /// <summary>
        /// Gets the type of the entity by ID.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="ID">The ID.</param>
        /// <returns>List of IEntityType</returns>
        public IList<IEntityType> GetEntityTypeByID(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                IList<IEntityType> _iientitytype = new List<IEntityType>();
                EntityTypeDao dao = new EntityTypeDao();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    dao = tx.PersistenceManager.MetadataRepository.Get<EntityTypeDao>(ID);
                    tx.Commit();
                }

                IEntityType _ientitytype = new EntityType();
                _ientitytype.Caption = dao.Caption;
                _ientitytype.ModuleID = dao.ModuleID;
                _ientitytype.Description = dao.Description;
                _ientitytype.ShortDescription = dao.ShortDescription;
                _ientitytype.ColorCode = dao.ColorCode;
                _ientitytype.IsAssociate = dao.IsAssociate;
                _ientitytype.WorkFlowID = dao.WorkFlowID;
                _ientitytype.IsRootLevel = dao.IsRootLevel;
                _ientitytype.Category = dao.Category;
                _ientitytype.Id = dao.Id;
                _iientitytype.Add(_ientitytype);

                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Inserts the type of the update entity.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="caption">The caption.</param>
        /// <param name="description">The description.</param>
        /// <param name="ModuleId">The module id.</param>
        /// <param name="IsSystemDefined">if set to <c>true</c> [is system defined].</param>
        /// <param name="Category">The category.</param>
        /// <param name="shortDescription">The ShortDescription.</param>
        /// <param name="colorCode">The ColorCode.</param>
        /// <param name="Id">The ID as Optional Parameter</param>
        /// <returns>INT.</returns>
        public int InsertUpdateEntityType(MetadataManagerProxy metadataManagerProxy, string caption, string description, int moduleId, int category, string shortDescription, string colorCode, bool isassociate, int workFlowID, bool IsRootLevel, int Id = 0)
        {
            try
            {
                int typeid = Id;
                metadataManagerProxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                  using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        if (Id > 0)
                        {
                            var entitytasktype = (from type in tx.PersistenceManager.PlanningRepository.Query<EntitytasktypeDao>() where type.EntitytypeId == Id select type).FirstOrDefault();
                            if (entitytasktype != null)
                            { typeid = entitytasktype.TaskTypeId; }
                        }
                       
                    }
                  if (Id > 0)
                  {
                      if (AssociateEntitypes.Additional_Objectives_Assignments == (AssociateEntitypes)typeid || AssociateEntitypes.Approval_Task == (AssociateEntitypes)typeid ||
                        AssociateEntitypes.Attachment == (AssociateEntitypes)typeid || AssociateEntitypes.Funding_Request == (AssociateEntitypes)typeid || AssociateEntitypes.Milestone == (AssociateEntitypes)typeid ||
                        AssociateEntitypes.PAttachment == (AssociateEntitypes)typeid || AssociateEntitypes.PresentationAttachmentLink == (AssociateEntitypes)typeid || AssociateEntitypes.Review_Task == (AssociateEntitypes)typeid || AssociateEntitypes.Task == (AssociateEntitypes)typeid ||
                        AssociateEntitypes.Work_Task == (AssociateEntitypes)typeid)
                    isassociate = true;
                else
                    isassociate = false;
                  }

                EntityTypeDao obj = new EntityTypeDao(caption, description, moduleId, category, shortDescription, colorCode, isassociate, workFlowID, IsRootLevel);
                obj.Id = Id;

                int EntityType_MaxID = 0;
                if (Id == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR EntityType_MaxID AS EntityType_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        EntityType_MaxID = Convert.ToInt32(sequenceNoVal[0]["EntityType_MaxID"]);
                    }
                }

                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<EntityTypeDao>(GetXmlWorkingPath(), obj, EntityType_MaxID);
                SavetoSynDBXml(SavedXML, "EntityType", GetSynchXMLPath(), Id);
                return EntityType_MaxID;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        /// <summary>
        /// Deletes the type of the entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Entitytypeid">The entitytypeid.</param>
        /// <returns>int</returns>
        public int DeleteEntityType(MetadataManagerProxy proxy, int Entitytypeid)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                EntityTypeDao entitytypeobj = new EntityTypeDao(Entitytypeid);
                EntityTypeHierarchyDao entitytypehierarchyobj = new EntityTypeHierarchyDao();
                entitytypehierarchyobj.ParentActivityTypeID = Entitytypeid;
                EntityTypeFeatureDao entitytypefeatureobj = new EntityTypeFeatureDao();
                entitytypefeatureobj.TypeID = Entitytypeid;
                EntityTypeAttributeRelationDao entitytypeattribute = new EntityTypeAttributeRelationDao();
                entitytypeattribute.EntityTypeID = Entitytypeid;
                int ModuleID = 0;

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var EntityTypeinfo = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(GetXmlWorkingPath()).Where(a => a.Id == Entitytypeid).Select(a => a).ToList();
                    ModuleID = EntityTypeinfo[0].ModuleID;
                    if (ModuleID == 3)
                    {
                        var entity = (from tt in tx.PersistenceManager.CommonRepository.Query<EntityDao>() where tt.Typeid == Entitytypeid select tt).FirstOrDefault();
                        if (entity != null)
                        {
                            return 2;
                        }


                    }
                    else if (ModuleID == 5)
                    {

                        var Asset = (from tt in tx.PersistenceManager.CommonRepository.Query<AssetsDao>() where tt.AssetTypeid == Entitytypeid select tt).FirstOrDefault();
                        if (Asset != null)
                        {
                            return 2;
                        }
                    }
                    else if (ModuleID == 6)
                    {
                        var pageentity = (from tt in tx.PersistenceManager.CommonRepository.Query<EntityDao>() where tt.Typeid == Entitytypeid select tt).FirstOrDefault();
                        if (pageentity != null)
                        {
                            return 2;
                }
                    }
                }
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeDao>(GetXmlWorkingPath(), entitytypeobj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeDao>(GetSynchXMLPath(), entitytypeobj) == true)
                {
                    if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeHierarchyDao>(GetXmlWorkingPath(), entitytypehierarchyobj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeHierarchyDao>(GetSynchXMLPath(), entitytypehierarchyobj) == true)
                    {
                        if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeFeatureDao>(GetXmlWorkingPath(), entitytypefeatureobj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeFeatureDao>(GetSynchXMLPath(), entitytypefeatureobj) == true)
                        {
                            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                            {
                                if (ModuleID != 5)
                                {
                                    IList<EntityTypeStatusOptionsDao> daoEntitytypeStatus = new List<EntityTypeStatusOptionsDao>();
                                    daoEntitytypeStatus = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeStatusOptionsDao>(GetXmlWorkingPath()).Where(a => a.EntityTypeID == Entitytypeid).Select(a => a).ToList();

                                    foreach (var obj in daoEntitytypeStatus)
                                    {
                                        if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeStatusOptionsDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeStatusOptionsDao>(GetSynchXMLPath(), obj) == false)
                                        {
                                            return 0;
                                        }
                                    }
                                }
                                else
                                {
                                    IList<DamTypeFileExtensionDao> daoDamTypeFileExtension = new List<DamTypeFileExtensionDao>();
                                    daoDamTypeFileExtension = tx.PersistenceManager.MetadataRepository.GetObject<DamTypeFileExtensionDao>(GetXmlWorkingPath()).Where(a => a.EntityTypeID == Entitytypeid).Select(a => a).ToList();

                                    foreach (var obj in daoDamTypeFileExtension)
                                    {
                                        if (PersistenceManager.Instance.MetadataRepository.DeleteObject<DamTypeFileExtensionDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<DamTypeFileExtensionDao>(GetSynchXMLPath(), obj) == false)
                                        {
                                            return 0;
                                        }
                                    }
                                }
                                IList<EntityTypeRoleAclDao> daoEntitytypeRole = new List<EntityTypeRoleAclDao>();
                                daoEntitytypeRole = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeRoleAclDao>(GetXmlWorkingPath()).Where(a => a.EntityTypeID == Entitytypeid).Select(a => a).ToList();

                                foreach (var obj in daoEntitytypeRole)
                                {
                                    if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeRoleAclDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeRoleAclDao>(GetSynchXMLPath(), obj) == false)
                                    {
                                        return 0;
                                    }
                                }

                                IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                                dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(GetXmlWorkingPath()).Where(a => a.EntityTypeID == Entitytypeid).Select(a => a).ToList();

                                foreach (var objEntityRel in dao)
                                {
                                    if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeRelationDao>(GetXmlWorkingPath(), objEntityRel) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeRelationDao>(GetSynchXMLPath(), objEntityRel) == false)
                                    {
                                        return 0;
                                    }
                                }

                                IList<EntityTypeAttributeGroupRelationDao> dao1 = new List<EntityTypeAttributeGroupRelationDao>();
                                dao1 = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(GetXmlWorkingPath()).Where(a => a.EntityTypeID == Entitytypeid).Select(a => a).ToList();

                                foreach (var obj in dao1)
                                {
                                    if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeGroupRelationDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeGroupRelationDao>(GetSynchXMLPath(), obj) == false)
                                    {
                                        return 0;
                                    }
                                }




                                return 1;
                            }
                        }

                        return 0;
                    }
                    return 0;
                }
                else
                    return 0;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        /// <summary>
        /// Gets the entity typefeature.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IEntityTypeFeature </returns>
        public IList<IEntityTypeFeature> GetEntityTypefeature(MetadataManagerProxy proxy, int version)
        {
            try
            {
                string featureName = string.Empty;
                IList<IEntityTypeFeature> _iientitytypeFeature = new List<IEntityTypeFeature>();
                IList<EntityTypeFeatureDao> dao = new List<EntityTypeFeatureDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeFeatureDao>();
                        tx.Commit();
                    }
                    else
                    {
                        string xmlpath = GetXmlWorkingPath();
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeFeatureDao>(xmlpath);
                        var featureId = dao.Select(a => a.FeatureID);
                        var xDoc = XDocument.Load(xmlpath);
                        featureName = xDoc.Root.Elements("Feature_Table").Elements("Feature").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(featureId)).Select(a => a.Element("Caption").Value).First();
                    }
                }
                foreach (var item in dao)
                {
                    IEntityTypeFeature _ientitytypeFeature = new EntityTypeFeature();
                    _ientitytypeFeature.Id = item.Id;
                    _ientitytypeFeature.TypeID = item.TypeID;
                    _ientitytypeFeature.FeatureID = item.FeatureID;
                    _ientitytypeFeature.FeatureName = featureName;
                    _iientitytypeFeature.Add(_ientitytypeFeature);
                }
                return _iientitytypeFeature;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        ///// <summary>
        ///// Gets the entity typefeature By ID.
        ///// </summary>
        ///// <param name="proxy">The proxy.</param>
        ///// <param name="ID">The ID.</param>
        ///// <returns>List </returns>
        //public IList<IFeature> GetEntityTypefeatureByID(MetadataManagerProxy proxy, int TypeID)
        //{
        //    try
        //    {
        //        IList<IFeature> _iifeature = new List<IFeature>();
        //        //IList<FeatureDao> featuredao = new List<FeatureDao>();
        //        dynamic featuredao = null;
        //        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
        //        {
        //            if (TypeID == 0)
        //            {
        //                featuredao = tx.PersistenceManager.MetadataRepository.GetAll<FeatureDao>();
        //                tx.Commit();
        //            }
        //            else
        //            {
        //                StringBuilder getGlobalAcl = new StringBuilder();
        //                getGlobalAcl.Append("select f.ID,f.Caption,f.Description from MM_EntityType_Feature ef left outer join MM_Feature f on ef.FeatureID=f.ID where ef.TypeID=" + TypeID);
        //                featuredao = tx.PersistenceManager.MetadataRepository.GetColumnName(getGlobalAcl.ToString());
        //            }
        //        }

        //        foreach (var item in featuredao)
        //        {
        //            IFeature feature = new Feature();
        //            feature.Id = item[0];
        //            feature.Caption = item[1];
        //            feature.Description = item[2];
        //            _iifeature.Add(feature);
        //        }
        //        return _iifeature;

        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}

        /// <summary>
        /// Gets the entity typefeature.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IEntityTypeFeature </returns>
        public IList<IEntityTypeFeature> GetEntityTypefeatureByID(MetadataManagerProxy proxy, int entitytypeId)
        {
            try
            {
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                string featureName = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityTypeFeature> _iientitytypeFeature = new List<IEntityTypeFeature>();
                IList<EntityTypeFeatureDao> dao = new List<EntityTypeFeatureDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    xmlpath = GetXmlWorkingPath();
                    if (versionNumber == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeFeatureDao>();
                        tx.Commit();
                    }
                    else
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeFeatureDao>(xmlpath);
                        tx.Commit();
                    }
                    var featureresult = dao.Where(a => a.TypeID == entitytypeId);
                    foreach (var item in featureresult)
                    {
                        IEntityTypeFeature _ientitytypeFeature = new EntityTypeFeature();
                        _ientitytypeFeature.TypeID = item.TypeID;
                        _ientitytypeFeature.FeatureID = item.FeatureID;
                        _ientitytypeFeature.Id = item.Id;
                        var xDoc = XDocument.Load(xmlpath);
                        _ientitytypeFeature.FeatureName = xDoc.Root.Elements("Feature_Table").Elements("Feature").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.FeatureID)).Select(a => a.Element("Caption").Value).First(); ;
                        _iientitytypeFeature.Add(_ientitytypeFeature);
                    }

                    return _iientitytypeFeature;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        /// <summary>
        /// Inserts the entity typefeature.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="typeid">The typeid.</param>
        /// <param name="featureid">The featureid.</param>
        /// <returns>IEntityTypeFeature Object.</returns>
        public int InsertEntityTypefeature(MetadataManagerProxy metadataManagerProxy, int typeid, int featureid, int id = 0)
        {
            try
            {
                metadataManagerProxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                var entityfeatureId = 0;
                IEntityTypeFeature entitytype = new EntityTypeFeature();
                entitytype.Id = id;
                entitytype.TypeID = typeid;
                entitytype.FeatureID = featureid;
                EntityTypeFeatureDao obj = new EntityTypeFeatureDao();
                obj.Id = id;
                obj.TypeID = typeid;
                obj.FeatureID = featureid;
                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<EntityTypeFeatureDao>(currentworkingMetadata, obj);
                SavetoSynDBXml(SavedXML, "EntityType_Feature", currentSyncDBXML, id);

                var docx = XDocument.Load(currentworkingMetadata);
                entityfeatureId = Convert.ToInt32(docx.Root.Elements("EntityType_Feature_Table").Select(a => a.Attribute("maxid").Value).First());
                return entityfeatureId;

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        /// <summary>
        /// Deletes the entity type feature.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Entitytypeid">The entitytypeid.</param>
        /// <param name="featureID">The feature ID.</param>
        /// <returns>bool</returns>
        public bool DeleteEntityTypeFeature(MetadataManagerProxy proxy, int id)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                EntityTypeFeatureDao obj = new EntityTypeFeatureDao();
                obj.TypeID = id;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeFeatureDao>(currentworkingMetadata, obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeFeatureDao>(currentSyncDBXML, obj) == true)
                    return true;
                else
                    return false;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Creates the entitytyperelation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entitytypeId">The entitytype id.</param>
        /// <param name="attributeId">The attribute id.</param>
        /// <param name="validationId">The validation id.</param>
        /// <param name="sortOrder">The sort order.</param>
        /// <returns>int .</returns>
        public int InsertUpdateEntityTypeAttributeRelation(MetadataManagerProxy proxy, int entitytypeId, int attributeId, string validationId, int sortOrder, string DefaultValue, bool InheritFromParent, bool IsReadOnly, bool ChooseFromParentOnly, bool IsValidationNeeded, string Caption, bool IsSystemDefined, string PlaceHolderValue, int ID = 0)
        {

            try
            {

                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                int EntityTypeAttributeRelation_MaxID = 0;
                if (ID == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR EntityTypeAttributeRelation_MaxID AS EntityTypeAttributeRelation_MaxID";
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        EntityTypeAttributeRelation_MaxID = Convert.ToInt32(sequenceNoVal[0]["EntityTypeAttributeRelation_MaxID"]);
                    }
                }

                if (attributeId == (int)SystemDefinedAttributes.Name || attributeId == (int)SystemDefinedAttributes.Owner)
                    IsSystemDefined = true;
                if (entitytypeId == 5)
                    if (attributeId == (int)SystemDefinedAttributes.AssignedAmount || attributeId == (int)SystemDefinedAttributes.FiscalYear)
                        IsSystemDefined = true;

                EntityTypeAttributeRelationDao obj = new EntityTypeAttributeRelationDao(ID, entitytypeId, attributeId, validationId, sortOrder, DefaultValue, InheritFromParent, IsReadOnly, ChooseFromParentOnly, IsValidationNeeded, Caption, IsSystemDefined, PlaceHolderValue);

                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<EntityTypeAttributeRelationDao>(GetXmlWorkingPath(), obj, EntityTypeAttributeRelation_MaxID);
                SavetoSynDBXml(SavedXML, "EntityTypeAttributeRelation", GetSynchXMLPath(), ID);

                //var docx = XDocument.Load(currentworkingMetadata);
                //var entityattributeId = Convert.ToInt32(docx.Root.Elements("EntityTypeAttributeRelation_Table").Select(a => a.Attribute("maxid").Value).First());

                return EntityTypeAttributeRelation_MaxID;
            }

            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;

            }
            return 0;
        }

        /// <summary>
        /// Gets the entitytype relation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IEntityTypeAttributeRelation</returns>
        public IList<IEntityTypeAttributeRelation> GetEntitytypeRelation(MetadataManagerProxy proxy, int version)
        {

            try
            {
                string attributeCaption = string.Empty;
                string entitytypeCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityTypeAttributeRelation> _iientitytyperelation = new List<IEntityTypeAttributeRelation>();
                IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeAttributeRelationDao>();
                        tx.Commit();
                    }
                    else
                    {
                        xmlpath = GetXmlWorkingPath();
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath);


                    }
                    foreach (var item in dao)
                    {
                        var xDoc = XDocument.Load(xmlpath);
                        IEntityTypeAttributeRelation _ientitytyperelation = new EntityTypeAttributeRelation();
                        _ientitytyperelation.EntityTypeID = item.EntityTypeID;
                        entitytypeCaption = Convert.ToString(xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.EntityTypeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.EntityTypeCaption = entitytypeCaption;
                        _ientitytyperelation.AttributeID = item.AttributeID;
                        attributeCaption = Convert.ToString(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.AttributeCaption = attributeCaption;
                        _ientitytyperelation.AttributeTypeID = Convert.ToInt32(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("AttributeTypeID").Value).First());
                        _ientitytyperelation.ValidationID = item.ValidationID;
                        _ientitytyperelation.SortOrder = item.SortOrder;
                        _ientitytyperelation.DefaultValue = item.DefaultValue;
                        _ientitytyperelation.InheritFromParent = item.InheritFromParent;
                        _ientitytyperelation.IsReadOnly = item.IsReadOnly;
                        _ientitytyperelation.ChooseFromParentOnly = item.ChooseFromParentOnly;
                        _ientitytyperelation.IsValidationNeeded = item.IsValidationNeeded;
                        _ientitytyperelation.Caption = item.Caption;
                        _ientitytyperelation.IsSystemDefined = item.IsSystemDefined;
                        _iientitytyperelation.Add(_ientitytyperelation);
                    }
                }
                return _iientitytyperelation;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the entitytype relation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IEntityTypeAttributeRelation</returns>
        public IList<IEntityTypeAttributeRelation> GetEntityTypeAttributeRelationByID(MetadataManagerProxy proxy, int id)
        {

            try
            {
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                string attributeCaption = string.Empty;
                string entitytypeCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityTypeAttributeRelation> _iientitytyperelation = new List<IEntityTypeAttributeRelation>();
                IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = GetXmlWorkingPath();
                    if (versionNumber == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeAttributeRelationDao>();
                        tx.Commit();
                    }
                    else
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath);
                        tx.Commit();
                    }
                    var entityttyperesult = dao.Where(a => a.EntityTypeID == id).OrderBy(a => a.SortOrder);
                    foreach (var item in entityttyperesult)
                    {
                        var xDoc = XDocument.Load(xmlpath);
                        IEntityTypeAttributeRelation _ientitytyperelation = new EntityTypeAttributeRelation();
                        _ientitytyperelation.ID = item.ID;
                        _ientitytyperelation.EntityTypeID = item.EntityTypeID;
                        entitytypeCaption = Convert.ToString(xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.EntityTypeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.EntityTypeCaption = entitytypeCaption;
                        _ientitytyperelation.AttributeID = item.AttributeID;
                        attributeCaption = Convert.ToString(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.AttributeCaption = attributeCaption.Trim();
                        _ientitytyperelation.AttributeTypeID = Convert.ToInt32(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("AttributeTypeID").Value).First());
                        _ientitytyperelation.ValidationID = item.ValidationID;
                        _ientitytyperelation.SortOrder = item.SortOrder;
                        _ientitytyperelation.DefaultValue = item.DefaultValue.Trim();
                        _ientitytyperelation.InheritFromParent = item.InheritFromParent;
                        _ientitytyperelation.IsReadOnly = item.IsReadOnly;
                        _ientitytyperelation.ChooseFromParentOnly = item.ChooseFromParentOnly;
                        _ientitytyperelation.IsValidationNeeded = item.IsValidationNeeded;
                        _ientitytyperelation.Caption = item.Caption.Trim();
                        _ientitytyperelation.IsSystemDefined = item.IsSystemDefined;
                        _ientitytyperelation.PlaceHolderValue = item.PlaceHolderValue;
                        _iientitytyperelation.Add(_ientitytyperelation);
                    }
                }
                return _iientitytyperelation;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the entitytype relation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IEntityTypeAttributeRelationWithLevels</returns>
        public IList<IEntityTypeAttributeRelationwithLevels> GetEntityTypeAttributeRelationWithLevelsByID(MetadataManagerProxy proxy, int id, int ParentID = 0)
        {

            try
            {
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                string attributeCaption = string.Empty;
                string entitytypeCaption = string.Empty;
                Boolean isSpecial = false;
                string xmlpath = string.Empty;
                IList<IEntityTypeAttributeRelationwithLevels> _iientitytyperelation = new List<IEntityTypeAttributeRelationwithLevels>();
                IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath);
                    var entityttyperesult = dao.Where(a => a.EntityTypeID == id).OrderBy(x => x.SortOrder);
                    var attrIDs = entityttyperesult.Select(a => a.AttributeID).ToList();
                    IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                    if (ParentID != 0)
                        entityAttrVal = proxy.MarcomManager.PlanningManager.GetEntityAttributesDetails(ParentID);
                    else
                        entityAttrVal = null;

                    IList<IAttributeData> entityUserAttrVal = new List<IAttributeData>();
                    entityUserAttrVal = proxy.MarcomManager.PlanningManager.GetEntityAttributesDetailsUserDetails(proxy.MarcomManager.User.Id);

                    IList<IOption> optionSelection = GetOptionList(proxy, attrIDs);
                    var xDoc = XDocument.Load(xmlpath);
                    foreach (var item in entityttyperesult)
                    {

                        IEntityTypeAttributeRelationwithLevels _ientitytyperelation = new EntityTypeAttributeRelationwithLevels();
                        _ientitytyperelation.ID = item.ID;
                        _ientitytyperelation.EntityTypeID = item.EntityTypeID;
                        var entitytypeObj = xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.EntityTypeID)).Select(a => a).First();
                        //entitytypeCaption = Convert.ToString(xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.EntityTypeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.EntityTypeCaption = Convert.ToString(entitytypeObj.Element("Caption").Value);
                        _ientitytyperelation.AttributeID = item.AttributeID;
                        //attributeCaption = Convert.ToString(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First());
                        isSpecial = Convert.ToBoolean(Convert.ToInt32(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("IsSpecial").Value).First()));
                        _ientitytyperelation.IsSpecial = isSpecial;
                        _ientitytyperelation.AttributeCaption = item.Caption; //Convert.ToString(xDoc.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation").Where(a => Convert.ToInt32(a.Element("AttributeID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.AttributeTypeID = Convert.ToInt32(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("AttributeTypeID").Value).First());
                        _ientitytyperelation.ValidationID = item.ValidationID;
                        _ientitytyperelation.SortOrder = item.SortOrder;
                        _ientitytyperelation.DefaultValue = item.DefaultValue;
                        _ientitytyperelation.InheritFromParent = item.InheritFromParent;
                        _ientitytyperelation.PlaceHolderValue = item.PlaceHolderValue;
                        _ientitytyperelation.ChooseFromParentOnly = item.ChooseFromParentOnly;
                        _ientitytyperelation.IsValidationNeeded = item.IsValidationNeeded;
                        _ientitytyperelation.Caption = item.Caption;
                        _ientitytyperelation.IsSystemDefined = item.IsSystemDefined;
                        _ientitytyperelation.IsReadOnly = item.IsReadOnly;

                        if (_ientitytyperelation.InheritFromParent)
                        {
                            if (entityAttrVal != null)
                            {
                                if (_ientitytyperelation.AttributeTypeID == 5)
                                {
                                    _ientitytyperelation.ParentValue = (dynamic)entityAttrVal.Where(a => a.ID == item.AttributeID).Select(a => (a.Value).ToString("yyyy-MM-dd"));
                                    _ientitytyperelation.ParentTreeLevelValueCaption = (dynamic)entityAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Caption);
                                    _ientitytyperelation.Lable = (dynamic)entityAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Lable);
                                }
                                else
                                {
                                    _ientitytyperelation.ParentValue = (dynamic)entityAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Value);
                                    _ientitytyperelation.ParentTreeLevelValueCaption = (dynamic)entityAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Caption);
                                    _ientitytyperelation.Lable = (dynamic)entityAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Lable);
                                }
                            }
                            else
                            {
                                _ientitytyperelation.ParentValue = null;
                                _ientitytyperelation.ParentTreeLevelValueCaption = null;
                                _ientitytyperelation.Lable = null;
                            }
                        }
                        else if (entityAttrVal != null && (!_ientitytyperelation.InheritFromParent && _ientitytyperelation.IsReadOnly && _ientitytyperelation.ChooseFromParentOnly))
                        {
                            _ientitytyperelation.ParentValue = (dynamic)entityAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Value);
                            _ientitytyperelation.ParentTreeLevelValueCaption = (dynamic)entityAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Caption);
                            _ientitytyperelation.Lable = (dynamic)entityAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Lable);
                        }
                        else if ((entityUserAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Value).ToList().Count) > 0)
                        {
                            _ientitytyperelation.InheritFromParent = (bool)entityUserAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.IsInheritFromParent).FirstOrDefault();
                            _ientitytyperelation.ParentValue = (dynamic)entityUserAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Value);
                            _ientitytyperelation.ParentTreeLevelValueCaption = (dynamic)entityUserAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Caption);
                            _ientitytyperelation.Lable = (dynamic)entityUserAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.Lable);
                            if (!item.IsReadOnly)
                                _ientitytyperelation.IsReadOnly = (bool)entityUserAttrVal.Where(a => a.ID == item.AttributeID).Select(a => a.IsReadOnly).FirstOrDefault();
                        }
                        else
                        {
                            _ientitytyperelation.ParentValue = null;
                            _ientitytyperelation.ParentTreeLevelValueCaption = null;
                            _ientitytyperelation.Lable = null;
                        }


                        if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DropDownTree)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly)
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                _ientitytyperelation.tree = GetTreeNodeFromParent(proxy, _ientitytyperelation.AttributeID, ParentID);
                            }
                            else
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);
                            }
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.ListSingleSelection)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly && entityAttrVal != null)
                            {
                                IList<IOption> optionSelectionfromparent = GetOptionListFromParent(proxy, entityAttrVal, item.AttributeID, _ientitytyperelation.AttributeTypeID);
                                _ientitytyperelation.Options = optionSelectionfromparent.OrderBy(a => a.SortOrder).ToList();

                            }
                            else
                            {
                                IList<IOption> optionSinglrSelection = (from options in optionSelection
                                                                        where options.AttributeID == _ientitytyperelation.AttributeID
                                                                        select options).OrderBy(a => a.Caption).ToList<IOption>();
                                _ientitytyperelation.Options = optionSinglrSelection.OrderBy(a => a.SortOrder).ToList();
                            }
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.ListMultiSelection)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly)
                            {
                                IList<IOption> optionSelectionfromparent = GetOptionListFromParent(proxy, entityAttrVal, item.AttributeID, _ientitytyperelation.AttributeTypeID);
                                _ientitytyperelation.Options = optionSelectionfromparent.OrderBy(a => a.SortOrder).ToList();
                            }
                            else
                            {
                                IList<IOption> optionmultiselection = (from options in optionSelection
                                                                       where options.AttributeID == _ientitytyperelation.AttributeID
                                                                       select options).OrderBy(a => a.SortOrder).ToList<IOption>();
                                _ientitytyperelation.Options = optionmultiselection;
                            }

                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TreeMultiSelection)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly)
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                _ientitytyperelation.tree = GetTreeNodeFromParent(proxy, _ientitytyperelation.AttributeID, ParentID);
                            }
                            else
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);
                            }
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DropDownTreePricing)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly)
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                //if (Convert.ToInt16(entitytypeObj.Element("IsRootLevel").Value) == 1)
                                //    _ientitytyperelation.DropDownPricing = GetDropDownTreePricingObjectFromParent(proxy, _ientitytyperelation.AttributeID, true, true, 0, ParentID);
                                //else
                                //    _ientitytyperelation.DropDownPricing = GetDropDownTreePricingObjectFromParent(proxy, _ientitytyperelation.AttributeID, false, true, 0, ParentID);
                                _ientitytyperelation.DropDownPricing = GetDropDownTreePricingObjectFromParent(proxy, _ientitytyperelation.AttributeID, _ientitytyperelation.InheritFromParent, true, 0, ParentID);

                            }
                            else
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                //if (Convert.ToInt16(entitytypeObj.Element("IsRootLevel").Value) == 0)
                                //    _ientitytyperelation.DropDownPricing = GetDropDownTreePricingObject(proxy, _ientitytyperelation.AttributeID, true, false, 0, 0);
                                //else
                                _ientitytyperelation.DropDownPricing = GetDropDownTreePricingObject(proxy, _ientitytyperelation.AttributeID, _ientitytyperelation.InheritFromParent, false, 0, ParentID);

                            }
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.Tree)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly || _ientitytyperelation.InheritFromParent)
                            {
                                _ientitytyperelation.tree = GetAttributeTreeNodeFromParent(proxy, _ientitytyperelation.AttributeID, ParentID, _ientitytyperelation.ChooseFromParentOnly, _ientitytyperelation.InheritFromParent);
                            }
                            else
                            {
                                _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);
                            }

                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.Tree)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly || _ientitytyperelation.InheritFromParent)
                            {
                                _ientitytyperelation.tree = GetAttributeTreeNodeFromParent(proxy, _ientitytyperelation.AttributeID, ParentID, _ientitytyperelation.ChooseFromParentOnly, _ientitytyperelation.InheritFromParent);
                            }
                            else
                            {
                                _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);
                            }

                        }
                        _iientitytyperelation.Add(_ientitytyperelation);
                    }
                }
                return _iientitytyperelation;
            }
            catch (Exception ex)
            {
                return null;
            }
        }



        /// <summary>
        /// Deletes the entity typerelation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="ID">ID</param>
        /// <returns>bool</returns>
        public bool DeleteEntityAttributeRelation(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                EntityTypeAttributeRelationDao obj = new EntityTypeAttributeRelationDao();
                obj.ID = ID;

                var tempvalobj = PersistenceManager.Instance.MetadataRepository.GetObject<ValidationDao>(GetXmlWorkingPath());
                if (tempvalobj != null)
                {
                    var ids = tempvalobj.Where(a => a.RelationShipID == ID).Select(a => a.Id);
                    foreach (var valid in ids.ToList())
                    {
                        ValidationDao valTemp = new ValidationDao();
                        valTemp.Id = valid;
                        PersistenceManager.Instance.MetadataRepository.DeleteObject<ValidationDao>(GetXmlWorkingPath(), valTemp);
                        PersistenceManager.Instance.MetadataRepository.DeleteObject<ValidationDao>(GetSynchXMLPath(), valTemp);
                    }
                }

                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeRelationDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeRelationDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Gets the feature.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IFeature </returns>
        public IList<IFeature> GetFeature(MetadataManagerProxy proxy)
        {
            try
            {
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                IList<IFeature> _iiFeature = new List<IFeature>();
                IList<FeatureDao> dao = new List<FeatureDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //if (versionNumber == 0)
                    //{
                    dao = tx.PersistenceManager.MetadataRepository.GetAll<FeatureDao>();
                    tx.Commit();
                    //}
                    //else
                    //{
                    //    string xmlpath = GetXmlWorkingPath();
                    //    dao = tx.PersistenceManager.MetadataRepository.GetObject<FeatureDao>(xmlpath);
                    //    tx.Commit();
                    //}
                    foreach (var item in dao)
                    {
                        IFeature _iFeature = new Feature();
                        _iFeature.Id = item.Id;
                        _iFeature.Caption = item.Caption;
                        _iFeature.Description = item.Description;
                        _iiFeature.Add(_iFeature);
                    }
                }
                return _iiFeature;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the attributetype.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IAttributeType</returns>
        public IList<IAttributeType> GetAttributetype(MetadataManagerProxy proxy)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                IList<IAttributeType> _iientitytypeFeature = new List<IAttributeType>();
                IList<AttributeTypeDao> dao = new List<AttributeTypeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //if (version == 0)
                    //{
                    dao = tx.PersistenceManager.MetadataRepository.GetAll<AttributeTypeDao>();
                    tx.Commit();
                    //}
                    //else
                    //{
                    //    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    //    dao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeTypeDao>(xmlpath);
                    //    tx.Commit();
                    //}
                    foreach (var item in dao)
                    {
                        IAttributeType _ientitytypeFeature = new AttributeType();
                        _ientitytypeFeature.Caption = item.Caption;
                        _ientitytypeFeature.ClassName = item.ClassName;
                        _ientitytypeFeature.IsSelectable = item.IsSelectable;
                        _ientitytypeFeature.DataType = item.DataType;
                        _ientitytypeFeature.SqlType = item.SqlType;
                        _ientitytypeFeature.Length = item.Length;
                        _ientitytypeFeature.IsNullable = item.IsNullable;
                        _ientitytypeFeature.Id = item.Id;
                        _iientitytypeFeature.Add(_ientitytypeFeature);

                    }
                }
                return _iientitytypeFeature;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<IAttribute> GetAttributeTypeByEntityTypeID(MetadataManagerProxy proxy, int EntityTypeId, bool IsAdmin)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                IList<IAttribute> _iiattribute = new List<IAttribute>();
                string xmlpath = string.Empty;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                    xmlpath = GetXmlWorkingPath();
                    if (IsAdmin == true)
                    {
                        StringBuilder strqry = new StringBuilder();
                        strqry.Append("SELECT ma.Id,ma.AttributeTypeID,ma.IsSystemDefined,ISNULL(ma.IsSpecial,0) as IsSpecial,ma.[Description],ISNULL(mtl.LevelName,ma.Caption) AS Caption,ISNULL(mtl.[Level],0) as Level ");
                        strqry.Append("FROM MM_Attribute ma ");
                        strqry.Append("LEFT OUTER JOIN MM_TreeLevel mtl ON ma.ID = mtl.AttributeID ");
                        strqry.Append("WHERE ma.ID IN (SELECT AttributeID FROM MM_EntityTypeAttributeRelation metar ");
                        strqry.Append(" WHERE metar.EntityTypeID IN (SELECT ID FROM  MM_EntityType met WHERE  (met.Category = 2 AND met.IsRootLevel = 1) or met.ID = 5))  AND ma.AttributeTypeID NOT IN (7,15)");
                        strqry.Append(" UNION ALL ");
                        strqry.Append(" SELECT 77,3,1,1,'EntityOnTimeStatus','EntityOnTimeStatus',0 ");
                        strqry.Append(" UNION ALL ");
                        strqry.Append(" SELECT ma1.Id, ");
                        strqry.Append(" ma1.AttributeTypeID, ");
                        strqry.Append(" ma1.IsSystemDefined, ");
                        strqry.Append(" ISNULL(ma1.IsSpecial, 0) AS IsSpecial, ");
                        strqry.Append(" ma1.[Description], ");
                        strqry.Append(" ma1.Caption  AS Caption, ");
                        strqry.Append(" 0         AS LEVEL ");
                        strqry.Append(" FROM   MM_Attribute ma1 WHERE ma1.AttributeTypeID in( " + (int)AttributesList.Tree + ", " + (int)AttributesList.EntityOverviewStatus + ") ");

                        IList attributes;
                        attributes = tx.PersistenceManager.MetadataRepository.ExecuteQuery(strqry.ToString());
                        tx.Commit();
                        foreach (var item in attributes)
                        {
                            IAttribute _iAttribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                            _iAttribute.Caption = (string)((System.Collections.Hashtable)(item))["Caption"];
                            _iAttribute.Description = (string)((System.Collections.Hashtable)(item))["Description"];
                            _iAttribute.AttributeTypeID = (int)((System.Collections.Hashtable)(item))["AttributeTypeID"];
                            _iAttribute.IsSystemDefined = Convert.ToBoolean(((System.Collections.Hashtable)(item))["IsSystemDefined"]);
                            _iAttribute.IsSpecial = Convert.ToBoolean(((System.Collections.Hashtable)(item))["IsSpecial"]);
                            _iAttribute.Id = (int)((System.Collections.Hashtable)(item))["Id"];
                            _iAttribute.Level = (int)((System.Collections.Hashtable)(item))["Level"];
                            _iiattribute.Add(_iAttribute);
                        }
                        return _iiattribute.OrderBy(a => a.Caption).ToList();
                    }
                    else
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath);
                        if (EntityTypeId == 0)
                        {
                            foreach (var item in dao)
                            {
                                IAttribute _iattribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                                _iattribute.Id = item.AttributeID;
                                var xDoc = XDocument.Load(xmlpath);
                                _iattribute.Caption = xDoc.Root.Elements("Attribute_Table").Descendants("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First(); ;
                                _iattribute.AttributeTypeID = xDoc.Root.Elements("Attribute_Table").Descendants("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => Convert.ToInt32(a.Element("AttributeTypeID").Value)).First(); ;
                                _iiattribute.Add(_iattribute);
                            }
                        }
                        else
                        {
                            var alttributerelationresult = dao.Where(a => a.EntityTypeID == EntityTypeId);
                            foreach (var item in alttributerelationresult)
                            {
                                IAttribute _iattribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                                //_iattribute.AttributeTypeID = item.AttributeID;
                                //_iattribute.Caption = item.Caption;
                                _iattribute.Id = item.AttributeID;
                                var xDoc = XDocument.Load(xmlpath);
                                _iattribute.Caption = xDoc.Root.Elements("Attribute_Table").Descendants("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First(); ;
                                _iattribute.AttributeTypeID = xDoc.Root.Elements("Attribute_Table").Descendants("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => Convert.ToInt32(a.Element("AttributeTypeID").Value)).First(); ;

                                _iiattribute.Add(_iattribute);
                            }
                        }
                        return _iiattribute;
                    }
                }
            }
            catch
            {

                return null;
            }
        }

        /// <summary>
        /// Inserts the upadate attributetype.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Caption">The caption.</param>
        /// <param name="ClassName">Name of the class.</param>
        /// <param name="IsSelectable">if set to <c>true</c> [is selectable].</param>
        /// <param name="DataType">Type of the data.</param>
        /// <param name="SqlType">Type of the SQL.</param>
        /// <param name="Length">The length.</param>
        /// <param name="IsNullable">if set to <c>true</c> [is nullable].</param>
        /// <param name="Id">The id.</param>
        /// <returns>INT</returns>
        public int InsertUpadateAttributetype(MetadataManagerProxy proxy, string Caption, string ClassName, bool IsSelectable, string DataType, string SqlType, int Length, bool IsNullable, int Id)
        {
            try
            {
                IAttributeType iattibtype = new AttributeType();
                iattibtype.Caption = Caption;
                iattibtype.ClassName = ClassName;
                iattibtype.IsSelectable = IsSelectable;
                iattibtype.DataType = DataType;
                iattibtype.SqlType = SqlType;
                iattibtype.Length = Length;
                iattibtype.IsNullable = IsNullable;

                if (Id == 0)
                {
                    //int max;
                    //using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    //{
                    //    max = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<AttributeTypeDao>("Id");
                    //}
                    //max = max + 1;
                    iattibtype.Id = Id;
                }
                else
                {
                    iattibtype.Id = Id;
                }

                AttributeTypeDao obj = new AttributeTypeDao(Caption, ClassName, IsSelectable, DataType, SqlType, Length, IsNullable);
                obj.Id = iattibtype.Id;
                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<AttributeTypeDao>(currentworkingMetadata, obj);
                SavetoSynDBXml(SavedXML, "AttributeType", currentSyncDBXML, Id);

                return iattibtype.Id;

            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        /// <summary>
        /// Gets the attribute.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IAttribute</returns>
        public IList<IAttribute> GetAttributeByID(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                IList<IAttribute> _iiAttribute = new List<IAttribute>();
                AttributeDao dao = new AttributeDao();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    dao = tx.PersistenceManager.MetadataRepository.Get<AttributeDao>(ID);
                    tx.Commit();

                }

                IAttribute _iAttribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                _iAttribute.Caption = dao.Caption;
                _iAttribute.AttributeTypeID = dao.AttributeTypeID;
                _iAttribute.IsSystemDefined = dao.IsSystemDefined;
                _iAttribute.IsSpecial = dao.IsSpecial;
                _iAttribute.Id = dao.Id;
                _iiAttribute.Add(_iAttribute);

                return _iiAttribute;
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        /// <summary>
        /// Deletes the attributetype.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Id">The id.</param>
        /// <returns>bool</returns>
        public bool DeleteAttributetype(MetadataManagerProxy proxy, int Id)
        {
            try
            {
                AttributeTypeDao obj = new AttributeTypeDao();
                obj.Id = Id;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeTypeDao>(currentworkingMetadata, obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }
        public IList<IAttribute> GetAttributefromDB(MetadataManagerProxy proxy)
        {
            try
            {
                StringBuilder strqry = new StringBuilder();
                strqry.Append("SELECT ma.Id,ma.AttributeTypeID,ma.IsSystemDefined,ISNULL(ma.IsSpecial,0) as IsSpecial,ma.[Description],ISNULL(mtl.LevelName,ma.Caption) AS Caption,ISNULL(mtl.[Level],0) AS Level ");
                strqry.Append("FROM MM_Attribute ma ");
                strqry.Append("LEFT OUTER JOIN MM_TreeLevel mtl ON ma.ID = mtl.AttributeID where ma.AttributeTypeID !=7  and ma.AttributeTypeID !=15");

                IList<IAttribute> _iiAttribute = new List<IAttribute>();
                IList<AttributeDao> dao = new List<AttributeDao>();
                IList attributes;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    attributes = tx.PersistenceManager.MetadataRepository.ExecuteQuery(strqry.ToString());
                    tx.Commit();
                }
                foreach (var item in attributes)
                {
                    IAttribute _iAttribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                    _iAttribute.Caption = (string)((System.Collections.Hashtable)(item))["Caption"];
                    _iAttribute.Description = (string)((System.Collections.Hashtable)(item))["Description"];
                    _iAttribute.AttributeTypeID = (int)((System.Collections.Hashtable)(item))["AttributeTypeID"];
                    _iAttribute.IsSystemDefined = (bool)((System.Collections.Hashtable)(item))["IsSystemDefined"];
                    _iAttribute.IsSpecial = (bool)((System.Collections.Hashtable)(item))["IsSpecial"];
                    _iAttribute.Id = (int)((System.Collections.Hashtable)(item))["Id"];
                    _iAttribute.Level = (int)((System.Collections.Hashtable)(item))["Level"];
                    _iiAttribute.Add(_iAttribute);
                }
                return _iiAttribute.OrderBy(a => a.Caption).ToList();
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public IList<IAttribute> GetAttributesforDetailFilter(MetadataManagerProxy proxy)
        {
            try
            {
                StringBuilder strqry = new StringBuilder();
                strqry.Append("SELECT ma.Id,ma.AttributeTypeID,ma.IsSystemDefined,ISNULL(ma.IsSpecial,0) as IsSpecial,ma.[Description],ISNULL(mtl.LevelName,ma.Caption) AS Caption,ISNULL(mtl.[Level],0) AS Level ");
                strqry.Append("FROM MM_Attribute ma ");
                strqry.Append("LEFT OUTER JOIN MM_TreeLevel mtl ON ma.ID = mtl.AttributeID");
                strqry.Append(" WHERE ma.AttributeTypeID IN (3,4,6,10,12,13) UNION ALL ");
                strqry.Append(" SELECT ma1.Id,ma1.AttributeTypeID,ma1.IsSystemDefined,ISNULL(ma1.IsSpecial,0) as IsSpecial,ma1.[Description],ma1.Caption AS Caption,0 AS Level  ");
                strqry.Append(" FROM MM_Attribute ma1 where ma1.AttributeTypeID=7 ");
                strqry.Append(" order by Caption");
                IList<IAttribute> _iiAttribute = new List<IAttribute>();
                IList<AttributeDao> dao = new List<AttributeDao>();
                IList attributes;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    attributes = tx.PersistenceManager.MetadataRepository.ExecuteQuery(strqry.ToString());
                    tx.Commit();
                }
                foreach (var item in attributes)
                {
                    IAttribute _iAttribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                    _iAttribute.Caption = (string)((System.Collections.Hashtable)(item))["Caption"];
                    _iAttribute.Description = (string)((System.Collections.Hashtable)(item))["Description"];
                    _iAttribute.AttributeTypeID = (int)((System.Collections.Hashtable)(item))["AttributeTypeID"];
                    _iAttribute.IsSystemDefined = (bool)((System.Collections.Hashtable)(item))["IsSystemDefined"];
                    _iAttribute.IsSpecial = (bool)((System.Collections.Hashtable)(item))["IsSpecial"];
                    _iAttribute.Id = (int)((System.Collections.Hashtable)(item))["Id"];
                    _iAttribute.Level = (int)((System.Collections.Hashtable)(item))["Level"];
                    _iiAttribute.Add(_iAttribute);
                }
                return _iiAttribute;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the attribute.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IAttribute</returns>
        public IList<IAttribute> GetAttribute(MetadataManagerProxy proxy)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                IList<IAttribute> _iiAttribute = new List<IAttribute>();
                IList<AttributeDao> dao = new List<AttributeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string xmlpath = GetXmlWorkingPath();

                    var tet = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlpath).Join(tx.PersistenceManager.MetadataRepository.GetObject<AttributeTypeDao>(xmlpath),
                         attr => attr.AttributeTypeID, attrType => attrType.Id,
                        (attr, attrType) => new { Caption = attr.Caption, attr.Description, attr.Id, attr.AttributeTypeID, attr.IsSpecial, attr.IsSystemDefined, Type = attrType.Caption }).ToList();


                    // -----> THIS IS HARDCODED BECASUSE THIS SPECIAL ATTRIBUTE TYPE DOES NOT EXIST
                    _iiAttribute.Add(new BrandSystems.Marcom.Core.Metadata.Attribute { Id = 74, Caption = "MyRole Global Access", AttributeTypeID = 44, IsSystemDefined = true, IsSpecial = true, Description = "MyRole Global Access", Type = "List Multi Selection" });
                    _iiAttribute.Add(new BrandSystems.Marcom.Core.Metadata.Attribute { Id = 71, Caption = "EntityStatus", AttributeTypeID = 33, IsSystemDefined = true, IsSpecial = true, Description = "EntityStatus", Type = "List Single Selection" });
                    _iiAttribute.Add(new BrandSystems.Marcom.Core.Metadata.Attribute { Id = 75, Caption = "MyRole Entity Access", AttributeTypeID = 44, IsSystemDefined = true, IsSpecial = true, Description = "MyRole Entity Access", Type = "List Multi Selection" });
                    _iiAttribute.Add(new BrandSystems.Marcom.Core.Metadata.Attribute { Id = 78, Caption = "Attribute Group Start", AttributeTypeID = 5, IsSystemDefined = true, IsSpecial = false, Description = "Attribute Group Start", Type = "Date Time" });
                    _iiAttribute.Add(new BrandSystems.Marcom.Core.Metadata.Attribute { Id = 79, Caption = "Attribute Group End", AttributeTypeID = 5, IsSystemDefined = true, IsSpecial = false, Description = "Attribute Group End", Type = "Date Time" });
                    _iiAttribute.Add(new BrandSystems.Marcom.Core.Metadata.Attribute { Id = 80, Caption = "Attribute Group Color Code", AttributeTypeID = 1, IsSystemDefined = true, IsSpecial = false, Description = "Attribute Group Color Code", Type = "Text SingleLine" });
                    foreach (var item in tet)
                    {
                        IAttribute _iAttribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                        _iAttribute.Caption = item.Caption;
                        _iAttribute.Description = item.Description;
                        _iAttribute.AttributeTypeID = item.AttributeTypeID;
                        _iAttribute.IsSystemDefined = item.IsSystemDefined;
                        _iAttribute.IsSpecial = item.IsSpecial;
                        _iAttribute.Id = item.Id;
                        _iAttribute.Type = item.Type;
                        _iiAttribute.Add(_iAttribute);
                    }
                } return _iiAttribute;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        /// <summary>
        /// Gets the attribute with Tree level values.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IAttribute</returns>
        public IList<IAttribute> GetAttributeWithLevels(MetadataManagerProxy proxy)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                IList<IAttribute> _iiAttribute = new List<IAttribute>();
                IList<AttributeDao> dao = new List<AttributeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<AttributeDao>();
                        tx.Commit();
                    }
                    else
                    {
                        string xmlpath = GetXmlWorkingPath();
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlpath);


                    }
                }
                foreach (var item in dao)
                {
                    IAttribute _iAttribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                    if (item.AttributeTypeID == 6)
                    {
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {
                            var treedao = tx.PersistenceManager.PlanningRepository.GetAll<TreeLevelDao>().Where(a => a.AttributeID == item.Id);
                            foreach (var treeitem in treedao)
                            {
                                IAttribute _iAttribute2 = new BrandSystems.Marcom.Core.Metadata.Attribute();

                                _iAttribute2.Caption = treeitem.LevelName;
                                _iAttribute2.Description = item.Description;
                                _iAttribute2.AttributeTypeID = item.AttributeTypeID;
                                _iAttribute2.IsSystemDefined = item.IsSystemDefined;
                                _iAttribute2.IsSpecial = item.IsSpecial;
                                _iAttribute2.Id = item.Id;
                                _iiAttribute.Add(_iAttribute2);
                            }
                        }
                    }
                    else
                    {
                        _iAttribute.Caption = item.Caption;
                        _iAttribute.Description = item.Description;
                        _iAttribute.AttributeTypeID = item.AttributeTypeID;
                        _iAttribute.IsSystemDefined = item.IsSystemDefined;
                        _iAttribute.IsSpecial = item.IsSpecial;
                        _iAttribute.Id = item.Id;
                        _iiAttribute.Add(_iAttribute);
                    }
                }
                return _iiAttribute;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        /// <summary>
        /// Inserts the update attribute.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="caption">The caption.</param>
        /// <param name="attributetypeid">The attributetypeid.</param>
        /// <param name="issystemdefined">if set to <c>true</c> [issystemdefined].</param>
        /// <param name="isforeign">if set to <c>true</c> [isforeign].</param>
        /// <param name="ismultiselect">if set to <c>true</c> [ismultiselect].</param>
        /// <param name="foreigntablename">The foreigntablename.</param>
        /// <param name="foreignidcolumn">The foreignidcolumn.</param>
        /// <param name="foreignattributecolumn">The foreignattributecolumn.</param>
        /// <param name="foreignorderbytable">The foreignorderbytable.</param>
        /// <param name="foreignorderbyidcolumn">The foreignorderbyidcolumn.</param>
        /// <param name="foreignorderbycolumnname">The foreignorderbycolumnname.</param>
        /// <param name="id">The id.</param>
        /// <returns>IAttribute Object.</returns>
        public int InsertUpdateAttribute(MetadataManagerProxy metadataManagerProxy, string caption, string description, int attributetypeid, bool issystemdefined, bool isspecial, int id = 0)
        {
            try
            {
                IAttribute iattrDao = new BrandSystems.Marcom.Core.Metadata.Attribute();
                iattrDao.Caption = caption.Trim();
                iattrDao.AttributeTypeID = attributetypeid;
                iattrDao.IsSystemDefined = issystemdefined;
                iattrDao.IsSpecial = isspecial;

                iattrDao.Id = id;
                int Attribute_MaxID = 0;

                if (id == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR Attribute_MaxID AS Attribute_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        Attribute_MaxID = Convert.ToInt32(sequenceNoVal[0]["Attribute_MaxID"]);
                    }
                }

                AttributeDao obj = new AttributeDao(id, caption, description, attributetypeid, issystemdefined, isspecial);
                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<AttributeDao>(GetXmlWorkingPath(), obj, Attribute_MaxID);
                SavetoSynDBXml(SavedXML, "Attribute", GetSynchXMLPath(), id);

                return Attribute_MaxID;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        /// <summary>
        /// Deletes the attribute.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="attributeid">The attributeid.</param>
        /// <returns>bool</returns>
        public int DeleteAttribute(MetadataManagerProxy proxy, int attributeid)
        {
            try
            {
                AttributeDao obj = new AttributeDao();
                obj.Id = attributeid;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var IsUsed = (from item in tx.PersistenceManager.MetadataRepository.Query<EntityTypeAttributeRelationDao>() where item.AttributeID == attributeid select item).ToList();

                    int IsPresentInWorking = GetEntityTypeAttributeRelationByAttributeID(proxy, attributeid);

                    if (IsUsed.Count == 0 && IsPresentInWorking == 0)
                    {

                        if (PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeDao>(GetSynchXMLPath(), obj) == true)
                        {
                            return 1;
                        }
                        return -1;
                    }
                    else
                        return 0;
                }


            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        /// <summary>
        /// Gets the option.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IOption</returns>
        public IList<IOption> GetOption(MetadataManagerProxy proxy, int version)
        {
            try
            {
                IList<IOption> _iioption = new List<IOption>();
                IList<OptionDao> dao = new List<OptionDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<OptionDao>();
                        tx.Commit();
                    }
                    else
                    {
                        string xmlpath = GetXmlWorkingPath();
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath);
                        if (dao == null)
                        {
                            dao = null;
                        }
                    }
                }
                foreach (var item in dao)
                {
                    IOption _ioption = new Option();
                    _ioption.Caption = item.Caption;
                    _ioption.AttributeID = item.AttributeID;
                    _ioption.SortOrder = item.SortOrder;
                    _ioption.Id = item.Id;
                    _iioption.Add(_ioption);
                }
                return _iioption;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<IOption> GetOptionforDetailFilter(MetadataManagerProxy proxy, int version, int attributeid)
        {
            try
            {
                IList<IOption> _iioption = new List<IOption>();
                IList<OptionDao> dao = new List<OptionDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<OptionDao>();
                        tx.Commit();
                        dao = dao.Where(a => Convert.ToInt32(a.AttributeID) == attributeid).Select(a => a).ToList();
                        if (dao == null)
                        {
                            dao = null;
                        }
                    }
                    else
                    {
                        string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath);
                        dao = dao.Where(a => Convert.ToInt32(a.AttributeID) == attributeid).Select(a => a).ToList();
                        if (dao == null)
                        {
                            dao = null;
                        }
                    }
                }
                foreach (var item in dao)
                {
                    IOption _ioption = new Option();
                    _ioption.Caption = item.Caption;
                    _ioption.AttributeID = item.AttributeID;
                    _ioption.SortOrder = item.SortOrder;
                    _ioption.Id = item.Id;
                    _iioption.Add(_ioption);
                }
                return _iioption;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the Options
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IOption</returns>
        public IList<IOption> GetOptionListByID(MetadataManagerProxy proxy, int id, bool IsforAdmin = false)
        {

            try
            {
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                if (IsforAdmin)
                    version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string xmlpath = string.Empty;
                IList<IOption> _iioption = new List<IOption>();
                IList<OptionDao> dao = new List<OptionDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (IsforAdmin == false)
                        xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    else
                        xmlpath = GetXmlWorkingPath();

                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<OptionDao>().OrderBy(a => a.SortOrder).ToList<OptionDao>();
                        tx.Commit();
                    }
                    else
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath).OrderBy(a => a.SortOrder).ToList<OptionDao>();
                        tx.Commit();
                    }
                    var optionresult = dao.Where(a => a.AttributeID == id).OrderBy(a => a.SortOrder);

                    foreach (var item in optionresult)
                    {
                        //var xDoc = XDocument.Load(xmlpath);
                        IOption _ioption = new Option();
                        _ioption.Caption = item.Caption;
                        _ioption.AttributeID = item.AttributeID;
                        _ioption.SortOrder = item.SortOrder;
                        _ioption.Id = item.Id;
                        _iioption.Add(_ioption);
                    }
                }
                return _iioption;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the Options
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IOption</returns>
        public IList<IOption> GetOptionList(MetadataManagerProxy proxy, IList options, bool IsforAdmin = false)
        {

            try
            {
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                if (IsforAdmin)
                    version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string xmlpath = string.Empty;
                IList<IOption> _iioption = new List<IOption>();
                IList<OptionDao> dao = new List<OptionDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (IsforAdmin == false)
                        xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    else
                        xmlpath = GetXmlWorkingPath();

                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<OptionDao>();

                    }
                    else
                    {
                        dao = (from item in tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath) where options.Contains(item.AttributeID) select item).ToList<OptionDao>();

                    }


                    foreach (var item in dao)
                    {
                        IOption _ioption = new Option();
                        _ioption.Caption = item.Caption;
                        _ioption.AttributeID = item.AttributeID;
                        _ioption.SortOrder = item.SortOrder;
                        _ioption.Id = item.Id;
                        _iioption.Add(_ioption);
                    }
                    tx.Commit();
                }
                return _iioption;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the Options
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IOption</returns>
        public IList<IOption> GetOptionListFromParent(MetadataManagerProxy proxy, IList<IAttributeData> entityAttrVal, int attrID, int attrType)
        {

            try
            {
                IList<IOption> _iioption = new List<IOption>();
                IList<OptionDao> dao = new List<OptionDao>();

                if (attrType == 4)
                {
                    var ParentValue = entityAttrVal.Where(a => a.ID == attrID).Select(a => a.Value).ToList();
                    var ParentTreeLevelValueCaption = entityAttrVal.Where(a => a.ID == attrID).Select(a => a.Caption).ToList();
                    if (ParentTreeLevelValueCaption.Count > 0)
                    {
                        var capt = ParentTreeLevelValueCaption[0].ToString().Split(',');

                        for (int j = 0; j < ParentValue[0].Length; j++)
                        {
                            IOption _ioption = new Option();
                            _ioption.Caption = capt[j];
                            _ioption.AttributeID = attrID;
                            _ioption.SortOrder = 0;
                            _ioption.Id = ParentValue[0][j];
                            _iioption.Add(_ioption);
                        }
                    }
                }
                else if (attrType == 3)
                {
                    var ParentValue = entityAttrVal.Where(a => a.ID == attrID).Select(a => a.Value).ToList();
                    var ParentTreeLevelValueCaption = entityAttrVal.Where(a => a.ID == attrID).Select(a => a.Caption).ToList();
                    if (ParentTreeLevelValueCaption.Count > 0)
                    {
                        IOption _ioption = new Option();
                        _ioption.Caption = ParentTreeLevelValueCaption[0][0];
                        _ioption.AttributeID = attrID;
                        _ioption.SortOrder = 0;
                        _ioption.Id = ParentValue[0];
                        _iioption.Add(_ioption);
                    }
                }

                return _iioption;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        /// <summary>
        /// Gets the Options based on attributeid
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="attributeID">The AttributeID.</param>
        /// <param name="EntityID">The EntityID.</param>
        /// <returns>List of IOption</returns>
        public IList<IOption> GetOptionDetailListByID(MetadataManagerProxy proxy, int attributeID, int EntityID)
        {

            try
            {
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                string xmlpath = string.Empty;
                IList<IOption> _iioption = new List<IOption>();
                IList<OptionDao> dao = new List<OptionDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    //xmlpath = GetXmlWorkingPath();
                    //dao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath);

                    //----------------------------------

                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == EntityID
                                     select item).FirstOrDefault();


                    xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath).OrderBy(a => a.SortOrder).ToList<OptionDao>();


                    XDocument docx = XDocument.Load(xmlpath);
                    var rddd = (from EntityAttrRel in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation")
                                join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute") on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) equals Convert.ToInt32(Attr.Element("ID").Value)
                                where Convert.ToInt32(EntityAttrRel.Element("EntityTypeID").Value) == entityObj.Typeid && Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) == attributeID && Convert.ToInt32(EntityAttrRel.Element("ChooseFromParentOnly").Value) == 1
                                select new
                                {
                                    ID = Convert.ToInt16(Attr.Element("ID").Value),
                                    Caption = EntityAttrRel.Element("Caption").Value,
                                    AttributeTypeID = Convert.ToInt16(Attr.Element("AttributeTypeID").Value),
                                    Description = Attr.Element("Description").Value,
                                    IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSystemDefined").Value)),
                                    IsSpecial = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSpecial").Value))
                                }).ToList();
                    var attributesdetails1 = rddd;

                    //----------------------------------

                    //XDocument docx = XDocument.Load(xmlpath);
                    var attributesdetails = (from c in docx.Root.Elements("Attribute_Table").Elements("Attribute")
                                             where Convert.ToInt32(c.Element("ID").Value) == attributeID
                                             select new
                                             {
                                                 ID = Convert.ToInt16(c.Element("ID").Value),
                                                 Caption = c.Element("Caption").Value,
                                                 AttributeTypeID = Convert.ToInt16(c.Element("AttributeTypeID").Value),
                                                 Description = c.Element("Description").Value,
                                                 IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(c.Element("IsSystemDefined").Value)),
                                                 IsSpecial = Convert.ToBoolean(Convert.ToInt32(c.Element("IsSpecial").Value))
                                             }).ToList();
                    foreach (var val in attributesdetails)
                    {

                        if (val.IsSpecial == true && val.AttributeTypeID == 3)
                        {
                            SystemDefinedAttributes systemType = (SystemDefinedAttributes)val.ID;

                            switch (systemType)
                            {
                                case SystemDefinedAttributes.Owner:

                                    IList<BrandSystems.Marcom.Core.User.Interface.IEntityUsers> _iientityusers = new List<BrandSystems.Marcom.Core.User.Interface.IEntityUsers>();
                                    IList<BrandSystems.Marcom.Core.User.Interface.IUser> _iuser = new List<BrandSystems.Marcom.Core.User.Interface.IUser>();
                                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> userDao = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                                    BrandSystems.Marcom.Core.User.Interface.IUser user = new BrandSystems.Marcom.Core.User.User();
                                    BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao entityroleuser = new Dal.Access.Model.EntityRoleUserDao();
                                    IList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao> roleusers = new List<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                                    var memberList = (from item in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() where item.Entityid == EntityID select item).ToList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                                    var entitymembers = memberList.GroupBy(x => x.Userid).Select(x => x.FirstOrDefault()).ToList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                                    for (int i = 0; i < entitymembers.Count(); i++)
                                    {
                                        BrandSystems.Marcom.Core.User.Interface.IEntityUsers entityuser = new BrandSystems.Marcom.Core.User.EntityUsers();

                                        BrandSystems.Marcom.Dal.User.Model.UserDao users = new Dal.User.Model.UserDao();
                                        users = tx.PersistenceManager.MetadataRepository.Get<BrandSystems.Marcom.Dal.User.Model.UserDao>(entitymembers.ElementAt(i).Userid);

                                        if (entitymembers.ElementAt(i).Roleid == 1)
                                        {
                                            entityuser.IsOwner = true;
                                        }
                                        else
                                            entityuser.IsOwner = false;
                                        if (users != null)
                                        {
                                            IOption _ioption = new Option();
                                            _ioption.Caption = users.FirstName + " " + users.LastName;
                                            _ioption.AttributeID = attributeID;
                                            _ioption.SortOrder = 0;
                                            _ioption.Id = users.Id;
                                            _iioption.Add(_ioption);
                                        }

                                    }

                                    break;
                            }

                        }
                        else if (val.IsSpecial == false && (val.AttributeTypeID == 3 || val.AttributeTypeID == 4))
                        {
                            if (val.AttributeTypeID == 4 && attributesdetails1.Count > 0)
                            {
                                IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                                entityAttrVal = proxy.MarcomManager.PlanningManager.GetEntityAttributesDetails(entityObj.Parentid);

                                IList<IAttributeData> entityAttrVal1 = new List<IAttributeData>();
                                entityAttrVal1 = entityAttrVal.Where(a => a.ID == attributeID).Select(a => a).ToList();

                                var tempcaption = (dynamic)entityAttrVal1.Where(a => a.ID == attributeID).Select(a => a.Caption).ToList();
                                string[] optioncaptionArr = tempcaption[0].Split(',');

                                for (int i = 0; i < optioncaptionArr.Length; i++)
                                {
                                    IOption _ioption = new Option();
                                    _ioption.Caption = optioncaptionArr[i].ToString();
                                    _ioption.AttributeID = attributeID;
                                    _ioption.SortOrder = 0;
                                    _ioption.Id = entityAttrVal1[0].Value[i];
                                    _iioption.Add(_ioption);
                                }

                            }
                            else if (val.AttributeTypeID == 3 && attributesdetails1.Count > 0)
                            {
                                IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                                entityAttrVal = proxy.MarcomManager.PlanningManager.GetEntityAttributesDetails(entityObj.Parentid);

                                IList<IAttributeData> entityAttrVal1 = new List<IAttributeData>();
                                entityAttrVal1 = entityAttrVal.Where(a => a.ID == attributeID).Select(a => a).ToList();

                                if (entityAttrVal1 != null)
                                {
                                    IOption _ioption = new Option();
                                    _ioption.Caption = entityAttrVal1[0].Caption[0];
                                    _ioption.AttributeID = attributeID;
                                    _ioption.SortOrder = 0;
                                    _ioption.Id = entityAttrVal1[0].Value;
                                    _iioption.Add(_ioption);
                                }
                            }
                            else
                            {
                                var optionresult = dao.Where(a => a.AttributeID == attributeID);
                                foreach (var item in optionresult)
                                {
                                    IOption _ioption = new Option();
                                    _ioption.Caption = item.Caption;
                                    _ioption.AttributeID = item.AttributeID;
                                    _ioption.SortOrder = item.SortOrder;
                                    _ioption.Id = item.Id;
                                    _iioption.Add(_ioption);
                                }
                            }
                        }
                    }

                }
                return _iioption;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Inserts the update option.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="caption">The caption.</param>
        /// <param name="attributeid">The attributeid.</param>
        /// <param name="sortorder">The sortorder.</param>
        /// <param name="id">The id.</param>
        /// <returns>int</returns>
        public int InsertUpdateOption(MetadataManagerProxy metadataManagerProxy, string caption, int attributeid, int sortorder, int id)
        {

            try
            {
                IOption ioption = new Option();
                ioption.Caption = caption.Trim();
                ioption.AttributeID = attributeid;
                ioption.SortOrder = sortorder;

                int Option_MaxID = 0;
                if (id == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR Option_MaxID AS Option_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        Option_MaxID = Convert.ToInt32(sequenceNoVal[0]["Option_MaxID"]);
                    }
                }
                else
                {
                    ioption.Id = id;
                    Option_MaxID = id;
                }

                OptionDao obj = new OptionDao(ioption.Id, caption, attributeid, sortorder);
                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<OptionDao>(GetXmlWorkingPath(), obj, Option_MaxID);
                SavetoSynDBXml(SavedXML, "Option", GetSynchXMLPath(), id);

                return Option_MaxID;

            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        /// <summary>
        /// Deletes the option.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="optionid">The optionid.</param>
        /// <returns>bool</returns>
        public bool DeleteOption(MetadataManagerProxy proxy, int optionid)
        {
            try
            {
                OptionDao obj = new OptionDao();
                obj.Id = optionid;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<OptionDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<OptionDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public bool DeleteOptionByAttributeID(MetadataManagerProxy proxy, int attributeid)
        {
            try
            {
                OptionDao obj = new OptionDao();
                obj.AttributeID = attributeid;
                if (PersistenceManager.Instance.MetadataRepository.DeleteOptionByAttributeID<OptionDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteOptionByAttributeID<OptionDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the multi select.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IMultiSelect</returns>
        public IList<IMultiSelect> GetMultiSelect(MetadataManagerProxy proxy, int version)
        {
            try
            {
                IList<IMultiSelect> _iimultiselect = new List<IMultiSelect>();
                IList<MultiSelectDao> dao = new List<MultiSelectDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<MultiSelectDao>();
                        tx.Commit();
                    }
                    else
                    {
                        string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<MultiSelectDao>(xmlpath);
                    }
                }
                foreach (var item in dao)
                {
                    IMultiSelect _imultiselect = new MultiSelect();
                    _imultiselect.Optionid = item.Optionid;
                    _imultiselect.Entityid = item.Entityid;
                    _imultiselect.Attributeid = item.Attributeid;
                    _iimultiselect.Add(_imultiselect);
                }
                return _iimultiselect;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Inserts the multi select.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityid">The entityid.</param>
        /// <param name="attributeid">The attributeid.</param>
        /// <param name="optionid">The optionid.</param>
        /// <returns>int</returns>
        public int InsertMultiSelect(MetadataManagerProxy proxy, int entityid, int attributeid, string optionid)
        {
            try
            {
                IMultiSelect mulsel = new MultiSelect();
                mulsel.Entityid = entityid;
                mulsel.Attributeid = attributeid;
                MultiSelectDao obj = new MultiSelectDao();
                obj.Entityid = entityid;
                obj.Attributeid = attributeid;
                string[] parts = optionid.Split(',');
                for (int i = 0; i < parts.Length; i++)
                {
                    obj.Optionid = Convert.ToInt32(parts[i]);
                    mulsel.Optionid = obj.Optionid;
                    XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<MultiSelectDao>(currentworkingMetadata, obj);
                    SavetoSynDBXml(SavedXML, "MultiSelect", currentSyncDBXML, 0);

                }
                return mulsel.Id;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        /// <summary>
        /// Delete the multi select.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityid">The entityid.</param>
        /// <param name="attributeid">The attributeid.</param>
        /// <returns>bool</returns>
        public bool DeleteMultiSelect(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                MultiSelectDao obj = new MultiSelectDao();
                obj.Id = ID;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<MultiSelectDao>(currentworkingMetadata, obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the treelevel.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of ITreeLevel </returns>
        public IList<ITreeLevel> GetTreelevel(MetadataManagerProxy proxy, int version)
        {
            try
            {
                IList<ITreeLevel> _iitreelevel = new List<ITreeLevel>();
                IList<TreeLevelDao> dao = new List<TreeLevelDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<TreeLevelDao>();

                    }
                    else
                    {
                        string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath);
                    }
                    tx.Commit();
                }
                foreach (var item in dao)
                {
                    ITreeLevel _itreelevel = new TreeLevel();
                    _itreelevel.Id = item.Id;
                    _itreelevel.Level = item.Level;
                    _itreelevel.LevelName = item.LevelName;
                    _itreelevel.IsPercentage = item.IsPercentage;
                    _itreelevel.AttributeID = item.AttributeID;
                    _iitreelevel.Add(_itreelevel);
                }
                return _iitreelevel;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the treelevel by AttributeID.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <param name="AttributeID">The AttributeID.</param>
        /// <param name="isAdminsettings">The IsAdminsettingsPresent.</param>
        /// <returns>List of ITreeLevel </returns>
        public IList<ITreeLevel> GetTreelevelByAttributeID(MetadataManagerProxy proxy, int AttributeID, bool isAdminsettings)
        {
            try
            {

                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                if (isAdminsettings == true)
                    version = MarcomManagerFactory.AdminMetadataVersionNumber;
                IList<ITreeLevel> _iitreelevel = new List<ITreeLevel>();
                IList<TreeLevelDao> dao = new List<TreeLevelDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<TreeLevelDao>();
                        tx.Commit();
                    }
                    else
                    {
                        string xmlpath = GetXmlWorkingPath();
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath);
                    }
                }
                if (AttributeID != 0)
                {
                    var treelevelresult = dao.Where(a => a.AttributeID == AttributeID);
                    foreach (var item in treelevelresult)
                    {
                        ITreeLevel _itreelevel = new TreeLevel();
                        _itreelevel.Id = item.Id;
                        _itreelevel.Level = item.Level;
                        _itreelevel.LevelName = item.LevelName;
                        _itreelevel.AttributeID = item.AttributeID;
                        _itreelevel.IsPercentage = item.IsPercentage;
                        _iitreelevel.Add(_itreelevel);
                    }
                }
                else
                {
                    foreach (var item in dao)
                    {
                        ITreeLevel _itreelevel = new TreeLevel();
                        _itreelevel.Id = item.Id;
                        _itreelevel.Level = item.Level;
                        _itreelevel.LevelName = item.LevelName;
                        _itreelevel.IsPercentage = item.IsPercentage;
                        _itreelevel.AttributeID = item.AttributeID;
                        _iitreelevel.Add(_itreelevel);
                    }
                }
                return _iitreelevel;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Inserts the update treelevel.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="level">The level.</param>
        /// <param name="Levelname">The levelname.</param>
        /// <param name="attributeid">The attributeid.</param>
        /// <param name="id">The id.</param>
        /// <returns>int.</returns>
        public int InsertUpdateTreelevel(MetadataManagerProxy metadataManagerProxy, int level, string Levelname, int attributeid, bool ispercentage, int id)
        {
            try
            {
                ITreeLevel mDao = new TreeLevel();
                mDao.Level = level;
                mDao.LevelName = Levelname;
                mDao.AttributeID = attributeid;

                int TreeLevel_MaxID = 0;
                if (id == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR TreeLevel_MaxID AS TreeLevel_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        TreeLevel_MaxID = Convert.ToInt32(sequenceNoVal[0]["TreeLevel_MaxID"]);
                    }
                }

                TreeLevelDao obj = new TreeLevelDao(mDao.Id, level, Levelname, attributeid, ispercentage);
                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<TreeLevelDao>(GetXmlWorkingPath(), obj, TreeLevel_MaxID);
                SavetoSynDBXml(SavedXML, "TreeLevel", GetSynchXMLPath(), id);

                return TreeLevel_MaxID;

            }
            catch (Exception)
            {
                return 0;
            }
        }

        /// <summary>
        /// Deletes the tree level.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="treelevelid">The treelevelid.</param>
        /// <returns>bool</returns>
        public bool DeleteTreeLevel(MetadataManagerProxy proxy, int treelevelid)
        {
            try
            {
                TreeLevelDao obj = new TreeLevelDao();
                obj.Id = treelevelid;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<TreeLevelDao>(GetXmlWorkingPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the tree node.
        /// </summary>
        /// <param name="attributeID">The AttributeID.</param>
        /// <param name="isAdminSettings">The IsAdminSettings.</param>
        /// <returns>string</returns>
        public string GetTreeNode(MetadataManagerProxy proxy, int attributeID, bool isAdminsettings, int parententityID = 0)
        {
            try
            {
                IList<ITreeNode> _iitreenode = new List<ITreeNode>();
                IList<TreeNodeDao> dao = new List<TreeNodeDao>();
                IList<TreeLevelDao> daotreelevel = new List<TreeLevelDao>();
                string tree = string.Empty;

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (parententityID == 0)
                    {
                        string xmlpath = string.Empty;
                        if (isAdminsettings == true)
                            xmlpath = GetXmlWorkingPath();
                        else
                            xmlpath = GetActiveVersionXmlPath();

                        dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                        daotreelevel = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath);
                        var parentNode = from node in dao
                                         where node.AttributeID == attributeID
                                             && node.ParentNodeID == 0
                                         select node;
                        var treelevelList = from level in daotreelevel
                                            where level.AttributeID == attributeID
                                            select level.Level;
                        UITreeNode uiNode = new UITreeNode();
                        uiNode.Caption = "Root";
                        uiNode.Level = 0;
                        uiNode.id = 0;
                        uiNode.AttributeId = attributeID;
                        uiNode.SortOrder = 0;
                        uiNode.IsDeleted = false;
                        uiNode.isShow = true;
                        uiNode.ischecked = false;
                        uiNode.ColorCode = "";
                        uiNode.Children = new List<UITreeNode>();
                        RecursionTreeSerialization(uiNode, parentNode.OrderBy(a => a.SortOrder).ToList<TreeNodeDao>(), dao, attributeID);
                        tree = JsonConvert.SerializeObject(uiNode);
                    }
                    else
                    {
                        tree = GetTreeNodeFromParent(proxy, attributeID, parententityID);
                    }
                    tx.Commit();
                }
                return tree;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        /// <summary>
        /// Gets the tree node.
        /// </summary>
        /// <param name="attributeID">The AttributeID.</param>
        /// <param name="isAdminSettings">The IsAdminSettings.</param>
        /// <returns>string</returns>
        public string GetAttributeTreeNode(MetadataManagerProxy proxy, int attributeID, int entityid, bool isChoosefromParent = false)
        {
            try
            {
                IList<ITreeNode> _iitreenode = new List<ITreeNode>();
                IList<TreeNodeDao> dao = new List<TreeNodeDao>();
                int[] daotreevalues = { };
                string tree = string.Empty;

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    string xmlpath = string.Empty;

                    xmlpath = GetActiveVersionXmlPath();

                    dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();

                    daotreevalues = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Entityid == entityid).Select(a => a.Nodeid).ToArray();


                    var parentNode = from node in dao
                                     where node.AttributeID == attributeID
                                         && node.ParentNodeID == 0
                                     select node;

                    UITreeNode uiNode = new UITreeNode();
                    uiNode.Caption = "Root";
                    uiNode.Level = 0;
                    uiNode.id = 0;
                    uiNode.AttributeId = attributeID;
                    uiNode.SortOrder = 0;
                    uiNode.IsDeleted = false;
                    uiNode.isShow = true;
                    uiNode.ischecked = true;
                    uiNode.Children = new List<UITreeNode>();
                    RecursionAttributeTreeSerialization(uiNode, parentNode.OrderBy(a => a.SortOrder).ToList<TreeNodeDao>(), dao, attributeID, daotreevalues);
                    tree = JsonConvert.SerializeObject(uiNode);

                    tx.Commit();
                }
                return tree;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        /// <summary>
        /// Gets the tree node.
        /// </summary>
        /// <param name="attributeID">The AttributeID.</param>
        /// <param name="isAdminSettings">The IsAdminSettings.</param>
        /// <returns>string</returns>
        public string GetAttributeTreeNodeFromParent(MetadataManagerProxy proxy, int attributeID, int parentID, bool isChoosefromParent, bool isinheritfromParent = false)
        {
            try
            {
                IList<ITreeNode> _iitreenode = new List<ITreeNode>();
                IList<TreeNodeDao> dao = new List<TreeNodeDao>();
                int[] daotreevalues = { };
                int[] parentNodes = { };
                string tree = string.Empty;

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    if (parentID != 0)
                    {

                        string xmlpath = string.Empty;

                        xmlpath = GetActiveVersionXmlPath();

                        dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                        if (isChoosefromParent)
                        {
                            parentNodes = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Entityid == parentID).Select(a => a.Nodeid).ToArray();
                            if (parentNodes != null)
                                dao = dao.Where(a => parentNodes.Contains(a.Id)).ToList<TreeNodeDao>();
                        }

                        if (isinheritfromParent)
                            daotreevalues = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Entityid == parentID).Select(a => a.Nodeid).ToArray();
                        var parentNode = from node in dao
                                         where node.AttributeID == attributeID
                                             && node.ParentNodeID == 0
                                         select node;

                        UITreeNode uiNode = new UITreeNode();
                        uiNode.Caption = "Root";
                        uiNode.Level = 0;
                        uiNode.id = 0;
                        uiNode.AttributeId = attributeID;
                        uiNode.SortOrder = 0;
                        uiNode.IsDeleted = false;
                        uiNode.isShow = true;
                        uiNode.ischecked = true;
                        uiNode.Children = new List<UITreeNode>();
                        RecursionAttributeTreeSerialization(uiNode, parentNode.OrderBy(a => a.SortOrder).ToList<TreeNodeDao>(), dao, attributeID, daotreevalues);
                        tree = JsonConvert.SerializeObject(uiNode);

                        tx.Commit();
                    }
                    else
                        tree = GetTreeNode(proxy, attributeID, false);


                }
                return tree;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// Gets the tree node.
        /// </summary>
        /// <param name="attributeID">The AttributeID.</param>
        /// <param name="isAdminSettings">The IsAdminSettings.</param>
        /// <returns>string</returns>
        public string GetDetailAttributeTreeNodeFromParent(MetadataManagerProxy proxy, int attributeID, int entityID, bool isChoosefromParent)
        {
            try
            {
                IList<ITreeNode> _iitreenode = new List<ITreeNode>();
                IList<TreeNodeDao> dao = new List<TreeNodeDao>();
                int[] daotreevalues = { };
                int[] parentNodes = { };
                string tree = string.Empty;
                int parentID = 0;

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    if (entityID != 0)
                    {
                        parentID = tx.PersistenceManager.MetadataRepository.Query<BaseEntityDao>().Where(a => a.Id == entityID).Select(a => a.Parentid).FirstOrDefault();

                        if (parentID != 0)
                        {


                            string xmlpath = string.Empty;

                            xmlpath = GetActiveVersionXmlPath();

                            dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                            if (isChoosefromParent)
                            {
                                parentNodes = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Entityid == parentID).Select(a => a.Nodeid).ToArray();
                                if (parentNodes != null)
                                    dao = dao.Where(a => parentNodes.Contains(a.Id)).ToList<TreeNodeDao>();
                            }

                            daotreevalues = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Entityid == entityID).Select(a => a.Nodeid).ToArray();
                            var parentNode = from node in dao
                                             where node.AttributeID == attributeID
                                                 && node.ParentNodeID == 0
                                             select node;

                            UITreeNode uiNode = new UITreeNode();
                            uiNode.Caption = "Root";
                            uiNode.Level = 0;
                            uiNode.id = 0;
                            uiNode.AttributeId = attributeID;
                            uiNode.SortOrder = 0;
                            uiNode.IsDeleted = false;
                            uiNode.isShow = true;
                            uiNode.ischecked = true;
                            uiNode.Children = new List<UITreeNode>();
                            RecursionAttributeTreeSerialization(uiNode, parentNode.OrderBy(a => a.SortOrder).ToList<TreeNodeDao>(), dao, attributeID, daotreevalues);
                            tree = JsonConvert.SerializeObject(uiNode);

                        }
                        else
                            tree = GetAttributeTreeNode(proxy, attributeID, entityID, false);

                    }
                    else

                        tree = GetAttributeTreeNode(proxy, attributeID, entityID, false);



                    tx.Commit();
                }
                return tree;
            }
            catch (Exception ex)
            {
                return null;
            }
        }



        /// <summary>
        /// Gets the tree node from parent.
        /// </summary>
        /// <param name="attributeID">The AttributeID.</param>
        /// <param name="isAdminSettings">The IsAdminSettings.</param>
        /// <returns>string</returns>
        public string GetTreeNodeFromParent(MetadataManagerProxy proxy, int attributeID, int entityID)
        {
            try
            {
                IList<ITreeValue> _iitreevalue = new List<ITreeValue>();
                IList<TreeValueDao> dao = new List<TreeValueDao>();

                IList<ITreeNode> _iitreenode = new List<ITreeNode>();
                IList<TreeNodeDao> dao1 = new List<TreeNodeDao>();
                IList<TreeLevelDao> daotreelevel = new List<TreeLevelDao>();
                string tree = string.Empty;

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    dao = tx.PersistenceManager.MetadataRepository.GetAll<TreeValueDao>();

                    var res = from node in dao
                              where node.Attributeid == attributeID
                                  && node.Entityid == entityID
                              orderby node.Level ascending
                              select node;


                    //=========================

                    string xmlpath = GetActiveVersionXmlPath();
                    dao1 = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.Level).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                    daotreelevel = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath);

                    UITreeNode uiNode = new UITreeNode();
                    uiNode.Caption = "Root";
                    uiNode.Level = 0;
                    uiNode.id = 0;
                    uiNode.IsDeleted = false;
                    uiNode.isShow = true;
                    uiNode.ischecked = false;
                    uiNode.AttributeId = attributeID;
                    uiNode.Children = new List<UITreeNode>();

                    int cnt = 0;
                    var temptreelevel = daotreelevel.Where(a => a.AttributeID == Convert.ToInt32(attributeID)).Select(a => a.Level).Last();

                    UITreeNode tempnode = null;
                    foreach (var item in res)
                    {
                        var parentNode = from node in dao1
                                         where node.AttributeID == attributeID
                                             && node.Id == item.Nodeid
                                         orderby node.Level
                                         select node;

                        foreach (var itm in parentNode)
                        {
                            if (cnt > 0)
                            {
                                if (temptreelevel == itm.Level)
                                {
                                    UITreeNode uiNode1 = new UITreeNode();
                                    uiNode1.Caption = itm.Caption;
                                    uiNode1.Level = itm.Level;
                                    uiNode1.id = itm.Id;
                                    uiNode1.IsDeleted = false;
                                    uiNode.isShow = true;
                                    uiNode.ischecked = false;
                                    uiNode.AttributeId = item.Attributeid;
                                    tempnode.Children.Add(uiNode1);
                                }
                                else
                                {
                                    tempnode = RecursionTreeSerializationFromParent(tempnode, itm, attributeID);
                                }
                            }
                            else
                            {
                                tempnode = RecursionTreeSerializationFromParent(uiNode, itm, attributeID);
                            }
                        }
                        cnt += 1;
                    }
                    tree = JsonConvert.SerializeObject(uiNode);

                }

                return tree;
            }
            catch (Exception ex)
            {
                return null;
            }
        }



        public UITreeNode RecursionTreeSerializationFromParent(UITreeNode uiParentNode, TreeNodeDao node, int attributeID)
        {
            UITreeNode uiNode = new UITreeNode();
            uiNode.Caption = node.Caption;
            uiNode.Level = node.Level;
            uiNode.id = node.Id;
            uiNode.IsDeleted = false;
            uiNode.AttributeId = node.AttributeID;
            uiNode.isShow = true;
            uiNode.ischecked = false;
            uiNode.Children = new List<UITreeNode>();
            uiParentNode.Children.Add(uiNode);
            return uiNode;
        }



        public void RecursionTreeSerialization(UITreeNode uiParentNode, IList<TreeNodeDao> nodes, IList<TreeNodeDao> allNode, int attributeID)
        {
            foreach (TreeNodeDao node in nodes)
            {
                UITreeNode uiNode = new UITreeNode();
                uiNode.Caption = node.Caption;
                uiNode.Level = node.Level;
                uiNode.id = node.Id;
                uiNode.isShow = true;
                uiNode.ischecked = false;
                uiNode.SortOrder = node.SortOrder;
                uiNode.IsDeleted = false;
                uiNode.AttributeId = node.AttributeID;
                uiNode.ColorCode = node.ColorCode;
                uiNode.Children = new List<UITreeNode>();
                uiParentNode.Children.Add(uiNode);
                var children = from nodeChildren in allNode
                               where nodeChildren.ParentNodeID == node.Id &&
                               nodeChildren.AttributeID == attributeID
                               select nodeChildren;
                if (children.Count() > 0)
                    RecursionTreeSerialization(uiNode, children.OrderBy(a => a.SortOrder).ToList<TreeNodeDao>(), allNode, attributeID);
            }

        }

        public void RecursionAttributeTreeSerialization(UITreeNode uiParentNode, IList<TreeNodeDao> nodes, IList<TreeNodeDao> allNode, int attributeID, int[] valueArr)
        {


            foreach (TreeNodeDao node in nodes)
            {
                UITreeNode uiNode = new UITreeNode();
                uiNode.Caption = node.Caption;
                uiNode.Level = node.Level;
                uiNode.id = node.Id;
                uiNode.isShow = true;
                uiNode.ischecked = false;
                if (valueArr != null)
                    if (valueArr.Contains(node.Id))
                        uiNode.ischecked = true;
                uiNode.SortOrder = node.SortOrder;
                uiNode.IsDeleted = false;
                uiNode.AttributeId = node.AttributeID;
                uiNode.Children = new List<UITreeNode>();
                uiParentNode.Children.Add(uiNode);
                var children = from nodeChildren in allNode
                               where nodeChildren.ParentNodeID == node.Id &&
                               nodeChildren.AttributeID == attributeID
                               select nodeChildren;
                if (children.Count() > 0)
                    RecursionAttributeTreeSerialization(uiNode, children.OrderBy(a => a.SortOrder).ToList<TreeNodeDao>(), allNode, attributeID, valueArr);
            }

        }


        public IList<DropDownTreePricing> GetDropDownTreePricingObject(MetadataManagerProxy proxy, int attributeID, bool isinheritfromParent, bool isFetchParent = false, int entityid = 0, int parentId = 0)
        {
            IList<DropDownTreePricing> returnObj = new List<DropDownTreePricing>();
            try
            {
                IList<TreeLevelDao> tlDao = new List<TreeLevelDao>();
                IList<TreeValueDao> tvDao = new List<TreeValueDao>();
                int[] tvArr = { };
                IList<TreeNodeDao> tnDao = new List<TreeNodeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string xmlpath = GetActiveVersionXmlPath();
                    tnDao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.Level).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                    tlDao = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).OrderBy(a => a.Level).ToList<TreeLevelDao>();

                    if (isinheritfromParent)
                    {
                        if (parentId == 0)
                            parentId = tx.PersistenceManager.MetadataRepository.Query<BaseEntityDao>().Where(a => a.Id == entityid).Select(a => a.Parentid).First();
                        tvDao = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Attributeid == attributeID && a.Entityid == parentId).Select(a => a).ToList();
                    }
                    else
                    {
                        if (entityid != 0)
                            tvDao = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Attributeid == attributeID && a.Entityid == entityid).Select(a => a).ToList();
                    }

                    tlDao = tlDao.Where(a => a.AttributeID == attributeID).ToList();
                    tnDao = tnDao.Where(a => a.AttributeID == attributeID).ToList();
                    foreach (var val in tlDao)
                    {
                        DropDownTreePricing priObj = new DropDownTreePricing();
                        priObj.id = val.Id;
                        priObj.level = val.Level;
                        priObj.LevelName = val.LevelName;
                        priObj.TotalLevel = tlDao.Count;
                        priObj.isperc = val.IsPercentage;
                        if (isinheritfromParent || parentId == 0)
                            if (tvDao.Count > 0)
                                priObj.selection = tvDao.Where(a => a.Level == val.Level).Select(a => a.Nodeid.ToString()).ToArray();
                            else
                                priObj.selection = new string[] { };
                        else
                            priObj.selection = new string[] { };
                        var tlnodes = tnDao.Where(a => a.Level == val.Level).ToList();
                        priObj.LevelOptions = FetchPricingLevelOption(tvDao, isinheritfromParent, tlnodes);
                        returnObj.Add(priObj);
                    }

                }

                return returnObj;

            }
            catch (Exception ex)
            {
                return returnObj;
            }

        }


        public IList<DropDownTreePricing> GetDropDownTreePricingObjectDetail(MetadataManagerProxy proxy, int attributeID, bool isinheritfromParent, bool isFetchParent = false, int entityid = 0, int parentId = 0)
        {
            IList<DropDownTreePricing> returnObj = new List<DropDownTreePricing>();
            try
            {
                IList<TreeLevelDao> tlDao = new List<TreeLevelDao>();
                IList<TreeValueDao> tvDao = new List<TreeValueDao>();
                int[] tvArr = { };
                IList<TreeNodeDao> tnDao = new List<TreeNodeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string xmlpath = GetActiveVersionXmlPath();
                    tnDao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.Level).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                    tlDao = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).OrderBy(a => a.Level).ToList<TreeLevelDao>();
                    if (entityid != 0)
                        tvDao = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Attributeid == attributeID && a.Entityid == entityid).Select(a => a).ToList();
                    tlDao = tlDao.Where(a => a.AttributeID == attributeID).ToList();
                    tnDao = tnDao.Where(a => a.AttributeID == attributeID).ToList();
                    foreach (var val in tlDao)
                    {
                        DropDownTreePricing priObj = new DropDownTreePricing();
                        priObj.id = val.Id;
                        priObj.level = val.Level;
                        priObj.LevelName = val.LevelName;
                        priObj.TotalLevel = tlDao.Count;
                        priObj.isperc = val.IsPercentage;
                        if (isinheritfromParent || parentId == 0)
                            if (tvDao.Count > 0)
                                priObj.selection = tvDao.Where(a => a.Level == val.Level).Select(a => a.Nodeid.ToString()).ToArray();
                            else
                                priObj.selection = new string[] { };
                        else
                            priObj.selection = new string[] { };
                        var tlnodes = tnDao.Where(a => a.Level == val.Level).ToList();
                        priObj.LevelOptions = FetchPricingLevelOption(tvDao, isinheritfromParent, tlnodes);
                        returnObj.Add(priObj);
                    }
                    tx.Commit();
                }

                return returnObj;

            }
            catch (Exception ex)
            {
                return returnObj;
            }

        }


        public IList<DropDownTreePricing> GetDropDownTreePricingObjectFromParent(MetadataManagerProxy proxy, int attributeID, bool isinheritfromParent, bool isFetchParent = false, int entityid = 0, int parentId = 0)
        {
            IList<DropDownTreePricing> returnObj = new List<DropDownTreePricing>();
            try
            {
                IList<TreeLevelDao> tlDao = new List<TreeLevelDao>();
                IList<TreeValueDao> tvDao = new List<TreeValueDao>();
                int[] tvArr = { };
                IList<TreeNodeDao> tnDao = new List<TreeNodeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string xmlpath = GetActiveVersionXmlPath();
                    tnDao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.Level).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                    tlDao = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).OrderBy(a => a.Level).ToList<TreeLevelDao>();
                    if (isFetchParent)
                    {
                        if (parentId == 0)
                            parentId = tx.PersistenceManager.MetadataRepository.Query<BaseEntityDao>().Where(a => a.Id == entityid).Select(a => a.Parentid).First();
                        tvDao = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Attributeid == attributeID && a.Entityid == parentId).Select(a => a).ToList();
                    }
                    else
                    {
                        tvDao = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Attributeid == attributeID && a.Entityid == entityid).Select(a => a).ToList();
                    }
                    int[] optionsIds = tvDao.Select(a => a.Nodeid).ToArray();
                    tlDao = tlDao.Where(a => a.AttributeID == attributeID).ToList();
                    tnDao = tnDao.Where(a => a.AttributeID == attributeID).ToList();
                    if (isFetchParent)
                        if (optionsIds != null)
                            if (optionsIds.Length > 0)
                                tnDao = tnDao.Where(a => optionsIds.Contains(a.Id)).ToList();
                    foreach (var val in tlDao)
                    {
                        DropDownTreePricing priObj = new DropDownTreePricing();
                        priObj.id = val.Id;
                        priObj.level = val.Level;
                        priObj.LevelName = val.LevelName;
                        priObj.TotalLevel = tlDao.Count;
                        priObj.isperc = val.IsPercentage;
                        if (isinheritfromParent)
                            if (tvDao.Count > 0)
                                priObj.selection = tvDao.Where(a => a.Level == val.Level).Select(a => a.Nodeid.ToString()).ToArray();
                            else
                                priObj.selection = new string[] { };
                        else
                            priObj.selection = new string[] { };
                        var tlnodes = tnDao.Where(a => a.Level == val.Level).ToList();
                        priObj.LevelOptions = FetchPricingLevelOption(tvDao, isinheritfromParent, tlnodes);
                        returnObj.Add(priObj);
                    }

                }

                return returnObj;

            }
            catch (Exception ex)
            {
                return returnObj;
            }

        }

        public IList<DropDownTreePricing> GetDropDownTreePricingObjectFromParentDetail(MetadataManagerProxy proxy, int attributeID, bool isinheritfromParent, bool isFetchParent = false, int entityid = 0, int parentId = 0)
        {
            IList<DropDownTreePricing> returnObj = new List<DropDownTreePricing>();
            try
            {
                IList<TreeLevelDao> tlDao = new List<TreeLevelDao>();
                IList<TreeValueDao> tvDao = new List<TreeValueDao>();
                IList<TreeValueDao> tvParentDao = new List<TreeValueDao>();
                int[] tvArr = { };
                IList<TreeNodeDao> tnDao = new List<TreeNodeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string xmlpath = GetActiveVersionXmlPath();
                    tnDao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.Level).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                    tlDao = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).OrderBy(a => a.Level).ToList<TreeLevelDao>();
                    if (isFetchParent)
                    {
                        if (parentId == 0)
                            parentId = tx.PersistenceManager.MetadataRepository.Query<BaseEntityDao>().Where(a => a.Id == entityid).Select(a => a.Parentid).First();
                        tvParentDao = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Attributeid == attributeID && a.Entityid == parentId).Select(a => a).ToList();
                    }
                    tvDao = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Attributeid == attributeID && a.Entityid == entityid).Select(a => a).ToList();
                    int[] optionsIds = tvParentDao.Select(a => a.Nodeid).ToArray();
                    tlDao = tlDao.Where(a => a.AttributeID == attributeID).ToList();
                    tnDao = tnDao.Where(a => a.AttributeID == attributeID).ToList();
                    if (isFetchParent)
                        if (optionsIds != null)
                            if (optionsIds.Length > 0)
                                tnDao = tnDao.Where(a => optionsIds.Contains(a.Id)).ToList();
                    foreach (var val in tlDao)
                    {
                        DropDownTreePricing priObj = new DropDownTreePricing();
                        priObj.id = val.Id;
                        priObj.level = val.Level;
                        priObj.LevelName = val.LevelName;
                        priObj.TotalLevel = tlDao.Count;
                        priObj.isperc = val.IsPercentage;
                        if (tvDao.Count > 0)
                            priObj.selection = tvDao.Where(a => a.Level == val.Level).Select(a => a.Nodeid.ToString()).ToArray();
                        else
                            priObj.selection = new string[] { };
                        var tlnodes = tnDao.Where(a => a.Level == val.Level).ToList();
                        priObj.LevelOptions = FetchPricingLevelOption(tvDao, isinheritfromParent, tlnodes);
                        returnObj.Add(priObj);
                    }
                    tx.Commit();
                }

                return returnObj;

            }
            catch (Exception ex)
            {
                return returnObj;
            }

        }


        public IList<IUIDropDownPricing> FetchPricingLevelOption(IList<TreeValueDao> nodeselection, bool isroot, IList<TreeNodeDao> nodeoptions)
        {
            IList<IUIDropDownPricing> retoptions = new List<IUIDropDownPricing>();
            try
            {
                foreach (var val in nodeoptions)
                {
                    IUIDropDownPricing node = new UIDropDownPricing();
                    node.caption = val.Caption;
                    node.NodeId = val.Id;
                    node.LevelKey = val.KEY;
                    node.LevelParent = val.ParentNodeID;
                    node.level = val.Level;
                    //if (isroot)
                    if (nodeselection.Count > 0)
                    {
                        var value = nodeselection.Where(a => a.Nodeid == val.Id).Select(a => a.Value).FirstOrDefault();
                        node.value = value != null ? value : "";
                    }
                    else
                        node.value = "";
                    //else
                    //    node.value = "";
                    retoptions.Add(node);
                }
                return retoptions;
            }
            catch (Exception ex)
            {
                return retoptions;
            }
        }

        /// <summary>
        /// Inserts the tree node.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="NodeID">The node ID.</param>
        /// <param name="ParentNodeID">The parent node ID.</param>
        /// <param name="Level">The level.</param>
        /// <param name="KEY">The KEY.</param>
        /// <param name="AttributeID">The attribute ID.</param>
        /// <param name="Caption">The caption.</param>
        /// <param name="id">The id.</param>
        /// <returns>int.</returns>
        public int InsertTreeNode(MetadataManagerProxy metadataManagerProxy, int NodeID, int ParentNodeID, int Level, string KEY, int AttributeID, string Caption, int SortOrder, string colorcode, int id)
        {
            try
            {
                ITreeNode nDao = new TreeNode();
                nDao.AttributeID = nDao.AttributeID;
                nDao.Caption = nDao.Caption.Trim();
                nDao.NodeID = NodeID;
                nDao.ParentNodeID = ParentNodeID;
                nDao.Level = Level;
                nDao.KEY = KEY.Trim();
                nDao.ColorCode = colorcode.Trim();
                int TreeNode_MaxID = 0;
                if (id == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR TreeNode_MaxID AS TreeNode_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        TreeNode_MaxID = Convert.ToInt32(sequenceNoVal[0]["TreeNode_MaxID"]);
                    }
                }

                TreeNodeDao obj = new TreeNodeDao(nDao.Id, NodeID, ParentNodeID, Level, KEY, AttributeID, Caption, SortOrder, colorcode);
                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<TreeNodeDao>(GetXmlWorkingPath(), obj, TreeNode_MaxID);
                SavetoSynDBXml(SavedXML, "TreeNode", GetSynchXMLPath(), id);

                //var docx = XDocument.Load(currentworkingMetadata);
                //var result = Convert.ToInt32(docx.Root.Elements("TreeNode_Table").Select(a => a.Attribute("maxid").Value).First());
                //nDao.Id = result;

                return TreeNode_MaxID;

            }
            catch (Exception)
            {
                return 0;
            }
        }


        public int InsertUpdateTree(MetadataManagerProxy metadataManagerProxy, JObject jObject, JArray treeLevelObj, int attributID)
        {
            try
            {

                RecursionTreeNodeSave(metadataManagerProxy, jObject, 0, 0, attributID.ToString() + "-", attributID);
                TreeLevelSave(metadataManagerProxy, treeLevelObj, attributID);
                return 0;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public void RecursionTreeNodeSave(MetadataManagerProxy metadataManagerProxy, JObject jObject, int ParentID, int level, string ParentKey, int attributID)
        {
            int TreeNode_MaxID = 0;
            for (int i = 0; i < jObject["Children"].Count(); i++)
            {
                TreeNode node = new TreeNode();
                node.ParentNodeID = ParentID;
                node.Caption = (string)jObject["Children"][i]["Caption"];
                node.Level = (int)jObject["Children"][i]["Level"];
                node.AttributeID = attributID;
                node.Id = (int)jObject["Children"][i]["id"];
                node.SortOrder = (i + 1);
                if (ParentID == 0)
                    node.KEY = ParentKey + (i + 1);
                else
                    node.KEY = ParentKey + '.' + (i + 1);
                node.NodeID = i + 1;
                node.ColorCode = (string)jObject["Children"][i]["ColorCode"];

                var IsDeleted = (bool)jObject["Children"][i]["IsDeleted"];

                if (IsDeleted)
                {
                    //deleting nodes happens here
                    TreeNodeDao obj = new TreeNodeDao(node.Id, node.NodeID, node.ParentNodeID, node.Level, node.KEY, attributID, node.Caption, node.SortOrder, node.ColorCode);
                    bool deletedXML = PersistenceManager.Instance.MetadataRepository.DeleteObject<TreeNodeDao>(GetXmlWorkingPath(), obj);
                }
                else
                {

                    string sequencenumber = "SELECT NEXT VALUE FOR TreeNode_MaxID AS TreeNode_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        TreeNode_MaxID = Convert.ToInt32(sequenceNoVal[0]["TreeNode_MaxID"]);
                    }


                    //Insert or update happens here
                    TreeNodeDao obj = new TreeNodeDao(node.Id, node.NodeID, node.ParentNodeID, node.Level, node.KEY, attributID, node.Caption, node.SortOrder, node.ColorCode);
                    XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<TreeNodeDao>(GetXmlWorkingPath(), obj, TreeNode_MaxID);
                    SavetoSynDBXml(SavedXML, "TreeNode", GetSynchXMLPath(), node.Id);
                }

                //var docx = XDocument.Load(GetXmlWorkingPath());
                //var result = Convert.ToInt32(docx.Root.Elements("TreeNode_Table").Select(a => a.Attribute("maxid").Value).First());

                if (node.Id == 0)
                    node.Id = TreeNode_MaxID;

                //recursion starts here
                if (jObject["Children"][i]["Children"].Count() > 0)
                    RecursionTreeNodeSave(metadataManagerProxy, (JObject)jObject["Children"][i], node.Id, level + 1, node.KEY, attributID);


            }

        }

        public void TreeLevelSave(MetadataManagerProxy proxy, JArray treelevelObj, int attributID)
        {
            int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
            IList<TreeLevelDao> dao = new List<TreeLevelDao>();
            int TreeLevel_MaxID = 0;

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                string xmlpath = GetXmlWorkingPath();
                dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath);

                if (dao != null)
                {
                    var treelevelresult = dao.Where(a => a.AttributeID == attributID);

                    if (treelevelresult.Count() > 0)
                    {
                        int[] levelArr = treelevelObj.Select(jv => (int)jv["Level"]).ToArray();
                        treelevelresult = treelevelresult.Where(tL => !levelArr.Contains(tL.Level)).Select(tl => tl);
                        foreach (var res in treelevelresult)
                        {
                            TreeLevel level = new TreeLevel();
                            level.Level = res.Level;
                            level.LevelName = res.LevelName;
                            level.AttributeID = attributID;
                            level.IsPercentage = res.IsPercentage;
                            level.Id = res.Id;
                            //Deleting of Levels happens here
                            TreeLevelDao obj = new TreeLevelDao(level.Id, level.Level, level.LevelName, level.AttributeID, level.IsPercentage);
                            bool deletedXML = PersistenceManager.Instance.MetadataRepository.DeleteObject<TreeLevelDao>(GetXmlWorkingPath(), obj);
                        }
                    }
                }
            }

            for (int i = 0; i < treelevelObj.Count(); i++)
            {
                TreeLevel level = new TreeLevel();
                level.Level = (int)treelevelObj[i]["Level"];
                level.LevelName = (string)treelevelObj[i]["Caption"];
                level.IsPercentage = (bool)treelevelObj[i]["IsPercentage"];
                level.AttributeID = attributID;
                level.Id = (int)treelevelObj[i]["ID"];

                string sequencenumber = "SELECT NEXT VALUE FOR TreeLevel_MaxID AS TreeLevel_MaxID";
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                    TreeLevel_MaxID = Convert.ToInt32(sequenceNoVal[0]["TreeLevel_MaxID"]);
                }

                //Insert or update happens here
                TreeLevelDao obj = new TreeLevelDao(level.Id, level.Level, level.LevelName, level.AttributeID, level.IsPercentage);
                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<TreeLevelDao>(GetXmlWorkingPath(), obj, TreeLevel_MaxID);
                SavetoSynDBXml(SavedXML, "TreeLevel", GetSynchXMLPath(), level.Id);

                //var docx = XDocument.Load(GetXmlWorkingPath());
                //var result = Convert.ToInt32(docx.Root.Elements("TreeLevel_Table").Select(a => a.Attribute("maxid").Value).First());

            }
        }

        /// <summary>
        /// Deletes the tree node.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Id">The id.</param>
        /// <returns>bool</returns>
        public bool DeleteTreeNode(MetadataManagerProxy proxy, int Id)
        {
            try
            {
                TreeNodeDao obj = new TreeNodeDao();
                obj.Id = Id;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<TreeNodeDao>(GetXmlWorkingPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the tree value.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of ITreeValue</returns>
        public IList<ITreeValue> GetTreeValue(MetadataManagerProxy proxy, int version)
        {
            try
            {
                IList<ITreeValue> _iitreevalue = new List<ITreeValue>();
                IList<TreeValueDao> dao = new List<TreeValueDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<TreeValueDao>();
                        tx.Commit();
                    }
                    else
                    {
                        string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeValueDao>(xmlpath);
                    }
                }
                foreach (var item in dao)
                {
                    ITreeValue _itreevalue = new TreeValue();
                    _itreevalue.Attributeid = item.Attributeid;
                    _itreevalue.Nodeid = item.Nodeid;
                    _itreevalue.Id = item.Id;
                    _iitreevalue.Add(_itreevalue);
                }
                return _iitreevalue;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Inserts the update tree value.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="attributeid">The attributeid.</param>
        /// <param name="nodeid">The nodeid.</param>
        /// <param name="id">The id.</param>
        /// <returns>int.</returns>
        public int InsertUpdateTreeValue(MetadataManagerProxy metadataManagerProxy, int entityid, int attributeid, int nodeid, int id)
        {
            try
            {
                ITreeValue mDao = new TreeValue();
                mDao.Entityid = entityid;
                mDao.Nodeid = nodeid;
                mDao.Attributeid = attributeid;

                int TreeNode_MaxID = 0;
                if (id == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR TreeNode_MaxID AS TreeNode_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        TreeNode_MaxID = Convert.ToInt32(sequenceNoVal[0]["TreeNode_MaxID"]);
                    }
                }

                TreeValueDao obj = new TreeValueDao(mDao.Id, entityid, nodeid, attributeid, 0, "", 0);
                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<TreeValueDao>(GetXmlWorkingPath(), obj, TreeNode_MaxID);
                SavetoSynDBXml(SavedXML, "TreeValue", GetSynchXMLPath(), id);

                return TreeNode_MaxID;

            }
            catch (Exception)
            {
                return 0;
            }
        }

        /// <summary>
        /// Deletes the tree value.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>bool</returns>
        public bool DeleteTreeValue(MetadataManagerProxy proxy, int id)
        {
            try
            {
                TreeValueDao obj = new TreeValueDao();
                obj.Id = id;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<TreeValueDao>(GetXmlWorkingPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the validation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IValidation</returns>
        public IList<IValidation> GetValidation(MetadataManagerProxy proxy, int version)
        {
            try
            {
                IList<IValidation> _iivalidation = new List<IValidation>();
                IList<ValidationDao> dao = new List<ValidationDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<ValidationDao>();
                        tx.Commit();
                    }
                    else
                    {
                        string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<ValidationDao>(xmlpath);
                    }
                }
                foreach (var item in dao)
                {
                    IValidation _ivalidation = new Validation();
                    _ivalidation.Id = item.Id;
                    //_ivalidation.ValidationData = item.ValidationData;
                    _iivalidation.Add(_ivalidation);
                }
                return _iivalidation;
            }
            catch (Exception ex)
            {
                return null;
            }
        }



        /// <summary>
        /// Gets the validation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IValidation</returns>
        public IList<IValidation> GetAttributeValidationByEntityTypeId(MetadataManagerProxy proxy, int EntityTypeID, int AttributeId)
        {
            int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
            IList<IValidation> validationList = new List<IValidation>();
            string xmlpath = string.Empty;
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = GetXmlWorkingPath();
                    IList<MultiProperty> prpList = new List<MultiProperty>();

                    IList<ValidationDao> valDao = new List<ValidationDao>();
                    if (versionNumber == 0)
                    {
                        valDao = tx.PersistenceManager.MetadataRepository.GetAll<ValidationDao>();
                        tx.Commit();
                    }
                    else
                    {
                        valDao = tx.PersistenceManager.MetadataRepository.GetObject<ValidationDao>(xmlpath).Where(a => a.EntityTypeID == EntityTypeID).ToList();

                        tx.Commit();
                    }

                    foreach (var val in valDao)
                    {
                        IList<EntityTypeAttributeRelationDao> EntAttrDao = new List<EntityTypeAttributeRelationDao>();
                        EntAttrDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath).Where(a => a.ID == val.RelationShipID).ToList();

                        IValidation valdationList = new Validation();
                        valdationList.Id = val.Id;
                        valdationList.Name = val.Name;
                        valdationList.Value = val.Value;
                        valdationList.ValueType = val.ValueType;
                        valdationList.ErrorMessage = val.ErrorMessage;
                        valdationList.EntityTypeID = val.EntityTypeID;
                        valdationList.RelationShipID = val.RelationShipID;
                        valdationList.AttributeID = EntAttrDao.ElementAt(0).AttributeID;
                        validationList.Add(valdationList);
                    }

                }
                return validationList;
            }
            catch (Exception ex)
            {
                return null;
            }
            return validationList;
        }

        public List<List<string>> GetValidationDationByEntitytype(MetadataManagerProxy proxy, int EntityTypeID)
        {
            IList<IValidation> validationList = new List<IValidation>();
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string xmlpath = string.Empty;
                    xmlpath = GetXmlWorkingPath();
                    //var valList = tx.PersistenceManager.MetadataRepository.GetEquals<ValidationDao>(ValidationDao.PropertyNames.EntityTypeID, EntityTypeID);
                    var valList = tx.PersistenceManager.MetadataRepository.GetObject<ValidationDao>(xmlpath).Where(a => a.EntityTypeID == EntityTypeID).ToList();
                    List<List<string>> ValResult = new List<List<string>>();

                    for (var i = 0; i < valList.Count; i++)
                    {
                        ValResult.Add(new List<string>() { valList[i].Name, valList[i].ValueType + (valList[i].Value != null && valList[i].Value.ToString().Length > 0 ? ":" + valList[i].Value : ""), valList[i].ErrorMessage });


                        //ValResult[i] =  valList[i].Name;

                        //ValResult[i, 1] = valList[i].ValueType + " : " + valList[i].Value;

                        //ValResult[i, 2] = valList[i].ErrorMessage;
                    }
                    return ValResult;



                    //foreach (var val in valList)
                    //{

                    //    IValidation valdationList = new Validation();
                    //    valdationList.Id = val.Id;
                    //    valdationList.Name = val.Name;
                    //    valdationList.Value = val.Value;
                    //    valdationList.ValueType = val.ValueType;
                    //    valdationList.ErrorMessage = val.ErrorMessage;
                    //    valdationList.EntityTypeID = val.EntityTypeID;
                    //    valdationList.RelationShipID = val.RelationShipID;
                    //    validationList.Add(valdationList);
                    //}


                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            return null;

        }


        /// <summary>
        /// Inserts the update validation.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="Caption">The caption.</param>
        /// <param name="optionid">The optionid.</param>
        /// <param name="id">The id.</param>
        /// <returns>int.</returns>
        public int InsertUpdateValidation(MetadataManagerProxy metadataManagerProxy, IList<IValidation> ValList, int AttributeId, int EntityTypeID, int AttributeTypeID, int ID = 0)
        {

            string xmlpath = string.Empty;
            try
            {
                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    xmlpath = GetXmlWorkingPath();


                    IList<ValidationDao> listValidation = new List<ValidationDao>();
                    IList<EntityTypeAttributeRelationDao> attributeRelDao = new List<EntityTypeAttributeRelationDao>();
                    attributeRelDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath).Where(a => a.EntityTypeID == EntityTypeID && a.AttributeID == AttributeId).ToList();
                    AttributeTypeID = tx.PersistenceManager.MetadataRepository.Get<AttributeDao>(AttributeId).AttributeTypeID;
                    foreach (var val in ValList.ToList())
                    {
                        int Validation_MaxID = 0;
                        ValidationDao dao = new ValidationDao();
                        if (ID == 0)
                        {
                            string sequencenumber = "SELECT NEXT VALUE FOR Validation_MaxID AS Validation_MaxID";
                            var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                            Validation_MaxID = Convert.ToInt32(sequenceNoVal[0]["Validation_MaxID"]);
                            dao.Id = Validation_MaxID;
                        }
                        else
                            dao.Id = val.Id;
                        dao.EntityTypeID = EntityTypeID;
                        dao.ErrorMessage = val.ErrorMessage;
                        dao.RelationShipID = attributeRelDao[0].ID;
                        dao.ValueType = val.ValueType;
                        dao.Value = val.Value;
                        if ((AttributesList)AttributeTypeID == AttributesList.DropDownTree)
                            dao.Name = "#" + Convert.ToString((AttributesList)AttributeTypeID) + "_" + AttributeId.ToString() + "_1";
                        else if ((AttributesList)AttributeTypeID == AttributesList.TreeMultiSelection)
                            dao.Name = "#" + Convert.ToString((AttributesList)AttributeTypeID) + "_" + AttributeId.ToString() + "_1";
                        else if ((AttributesList)AttributeTypeID == AttributesList.Period)
                            dao.Name = "." + Convert.ToString((AttributesList)AttributeTypeID) + "_" + AttributeId.ToString();
                        else
                            dao.Name = "#" + Convert.ToString((AttributesList)AttributeTypeID) + "_" + AttributeId.ToString();

                        listValidation.Add(dao);

                        XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<ValidationDao>(GetXmlWorkingPath(), dao, Validation_MaxID);
                        SavetoSynDBXml(SavedXML, "Validation", GetSynchXMLPath(), ID);

                    }
                    tx.Commit();
                    return listValidation[0].Id;
                }
            }
            catch (Exception)
            {
                return 0;
            }
            return 0;
        }


        public IValidation CreateValidationInstace()
        {
            return new Validation();
        }

        public IWorkFlowSteps CreateWorkFlowStepsInstace()
        {
            return new WorkFlowSteps();
        }

        public IWorkFlowStepPredefinedTasks CreateWorkFlowStepPredefinedTasksInstace()
        {
            return new WorkFlowStepPredefinedTasks();
        }



        /// <summary>
        /// Deletes the validation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>bool</returns>
        public bool DeleteValidation(MetadataManagerProxy proxy, int id)
        {
            try
            {
                ValidationDao obj = new ValidationDao();
                obj.Id = id;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<ValidationDao>(currentworkingMetadata, obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<ValidationDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }
            return false;
        }

        /// <summary>
        /// Createmappings the specified table name.
        /// </summary>
        /// <param name="tableName">Name of the table.</param>
        /// <param name="listdict">The listdict.</param>
        public void Createmapping(string tableName, List<KeyValuePair<String, String>> listdict)
        {
            XmlDocument mappingdoc = new XmlDocument();
            XmlNode docNode = mappingdoc.CreateXmlDeclaration("1.0", "UTF-8", null);
            mappingdoc.AppendChild(docNode);
            XmlNode rootnode = mappingdoc.AppendChild(mappingdoc.CreateElement("hibernate-mapping"));
            XmlNode rootattr1 = rootnode.Attributes.Append(mappingdoc.CreateAttribute("xmlns"));
            rootattr1.InnerText = "urn:nhibernate-mapping-2.2";
            XmlNode rootattr2 = rootnode.Attributes.Append(mappingdoc.CreateAttribute("assembly"));
            rootattr2.InnerText = "BrandSystems.Marcom.Dal";
            XmlNode rootattr3 = rootnode.Attributes.Append(mappingdoc.CreateAttribute("namespace"));
            rootattr3.InnerText = "BrandSystems.Marcom.Dal";
            XmlNode child = rootnode.AppendChild(mappingdoc.CreateElement("class"));
            XmlAttribute childAtt = child.Attributes.Append(mappingdoc.CreateAttribute("name"));
            childAtt.InnerText = "BrandSystems.Marcom.Dal.Metadata.Model.DynamicAttributesDao,BrandSystems.Marcom.Dal";
            XmlAttribute childattr2 = child.Attributes.Append(mappingdoc.CreateAttribute("table"));
            childattr2.InnerText = tableName;
            XmlAttribute childattr3 = child.Attributes.Append(mappingdoc.CreateAttribute("lazy"));
            childattr3.InnerText = "true";
            XmlNode child2 = child.AppendChild(mappingdoc.CreateElement("id"));
            XmlAttribute child2Att = child2.Attributes.Append(mappingdoc.CreateAttribute("name"));
            child2Att.InnerText = "Id";
            XmlAttribute child2attr2 = child2.Attributes.Append(mappingdoc.CreateAttribute("column"));
            child2attr2.InnerText = "Id";
            XmlAttribute child2attr3 = child2.Attributes.Append(mappingdoc.CreateAttribute("type"));
            child2attr3.InnerText = "int";
            XmlNode child21 = child2.AppendChild(mappingdoc.CreateElement("generator"));
            XmlAttribute child3Att = child21.Attributes.Append(mappingdoc.CreateAttribute("class"));
            child3Att.InnerText = "native";
            XmlNode child3 = child.AppendChild(mappingdoc.CreateElement("property"));
            XmlAttribute child3attr2 = child3.Attributes.Append(mappingdoc.CreateAttribute("type"));
            child3attr2.InnerText = "int";
            XmlAttribute child3attr3 = child3.Attributes.Append(mappingdoc.CreateAttribute("not-null"));
            child3attr3.InnerText = "true";
            XmlAttribute child3attr4 = child3.Attributes.Append(mappingdoc.CreateAttribute("name"));
            child3attr4.InnerText = "EntityId";
            XmlAttribute child3attr5 = child3.Attributes.Append(mappingdoc.CreateAttribute("column"));
            child3attr5.InnerText = "EntityId";
            XmlNode bagParent = child.AppendChild(mappingdoc.CreateElement("bag"));
            XmlAttribute bagParentattr1 = bagParent.Attributes.Append(mappingdoc.CreateAttribute("name"));
            bagParentattr1.InnerText = "Attributes";
            XmlAttribute bagParentattr2 = bagParent.Attributes.Append(mappingdoc.CreateAttribute("cascade"));
            bagParentattr2.InnerText = "all";
            XmlNode bagchild1 = bagParent.AppendChild(mappingdoc.CreateElement("key"));
            XmlAttribute bagchild1attr1 = bagchild1.Attributes.Append(mappingdoc.CreateAttribute("column"));
            bagchild1attr1.InnerText = "Id";
            XmlNode bagchild2 = bagParent.AppendChild(mappingdoc.CreateElement("one-to-many"));
            XmlAttribute bagchild2attr1 = bagchild2.Attributes.Append(mappingdoc.CreateAttribute("class"));
            bagchild2attr1.InnerText = "BrandSystems.Marcom.Dal.Metadata.Model.DynamicAttributesDao, NHibernateOneToMany";
            string pths = "Marcom.Dal\\Dynamicxmlfiles\\";
            string root = HttpContext.Current.Server.MapPath("~");
            root = root.Substring(0, root.IndexOf("TestWebApp"));
            pths = root + pths;
            mappingdoc.Save(pths + tableName + ".hbm.xml");
        }

        /// <summary>
        /// Syncs to db.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns></returns>
        public bool SyncToDb(MetadataManagerProxy proxy)
        {

            BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
            LogHandler.LogInfo("************************ Started SyncToDbFunctionality at " + DateTime.Now + " ************************", LogHandler.LogType.General);

            int versionNumber = 0;
            string synchXMLPath, workingXMLPath = string.Empty;
            StringBuilder sbHeader = new StringBuilder();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                    synchXMLPath = tx.PersistenceManager.MetadataRepository.GetSynchXMLPath(MarcomManagerFactory.IsWorkingWithCurrentWorkingVersion);
                    workingXMLPath = GetXmlWorkingPath();
                    if (MarcomManagerFactory.IsWorkingWithCurrentWorkingVersion)
                        versionNumber = tx.PersistenceManager.MetadataRepository.Query<MetadataVersionDao>().Where(a => a.State == 1).SingleOrDefault<MetadataVersionDao>().ID;
                    else
                        versionNumber = tx.PersistenceManager.MetadataRepository.Query<MetadataVersionDao>().Where(a => a.State == 2).SingleOrDefault<MetadataVersionDao>().ID;

                    IList<EntityTypeDao> entityTypeDao = new List<EntityTypeDao>();
                    entityTypeDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(synchXMLPath);
                    if (entityTypeDao != null)
                    {
                        tx.PersistenceManager.CommonRepository.Save<EntityTypeDao>(entityTypeDao);
                        LogHandler.LogInfo("======================= EntityType Updated ======================", LogHandler.LogType.General);
                    }

                    var tempentitytype = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(synchXMLPath);
                    if (tempentitytype != null)
                    {
                        IList<GlobalEntityTypeAccessDao> ientitytypedao = new List<GlobalEntityTypeAccessDao>();
                        var tempglobalAclDao = tx.PersistenceManager.MetadataRepository.Query<GlobalEntityTypeAccessDao>().Select(a => a).Cast<GlobalEntityTypeAccessDao>().ToList();

                        var tempentitytypeDao = tempentitytype.Cast<EntityTypeDao>().ToList();
                        var queryRes = from c in tempentitytypeDao where !(from o in tempglobalAclDao select o.EntityTypeid).Contains(c.Id) select c;

                        if (queryRes.Count() > 0)
                        {
                            foreach (var entitytypeobj in queryRes)
                            {
                                GlobalEntityTypeAccessDao adminGlobalAclDao = new GlobalEntityTypeAccessDao();
                                adminGlobalAclDao.GlobalRoleid = 1;
                                adminGlobalAclDao.Moduleid = 3;
                                adminGlobalAclDao.EntityTypeid = entitytypeobj.Id;
                                adminGlobalAclDao.AccessPermission = true;

                                ientitytypedao.Add(adminGlobalAclDao);
                            }

                            tx.PersistenceManager.CommonRepository.Save<GlobalEntityTypeAccessDao>(ientitytypedao);
                            LogHandler.LogInfo("================================== Added EnittyTypeFeature ================================", LogHandler.LogType.General);
                        }
                    }

                    IList<EntityTypeFeatureDao> entitytypefeaturedao = new List<EntityTypeFeatureDao>();
                    entitytypefeaturedao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeFeatureDao>(synchXMLPath);

                    if (entitytypefeaturedao != null)
                    {
                        var entityFeaturecount = entitytypefeaturedao.GroupBy(a => a.TypeID);
                        IList<EntityTypeFeatureDao> databaseFeatureDao = new List<EntityTypeFeatureDao>();
                        foreach (var hierarchyDaoobj in entityFeaturecount)
                        {
                            databaseFeatureDao = tx.PersistenceManager.MetadataRepository.Query<EntityTypeFeatureDao>().Where(a => a.TypeID == Convert.ToInt32(hierarchyDaoobj.Key)).ToList();
                            if (databaseFeatureDao.Count > 0)
                            {
                                foreach (var entityfeature in databaseFeatureDao)
                                {
                                    entitytypefeaturedao.Remove(entitytypefeaturedao.Where(a => a.TypeID == entityfeature.TypeID && a.FeatureID == entityfeature.FeatureID).FirstOrDefault());
                                }
                            }
                        }
                        tx.PersistenceManager.CommonRepository.Save<EntityTypeFeatureDao>(entitytypefeaturedao);
                        LogHandler.LogInfo("================================== Added EnittyTypeFeature ================================", LogHandler.LogType.General);
                    }

                    IList<AttributeDao> attributedao = new List<AttributeDao>();
                    attributedao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(synchXMLPath);
                    if (attributedao != null)
                    {
                        tx.PersistenceManager.CommonRepository.Save<AttributeDao>(attributedao);
                        LogHandler.LogInfo("======================= Attribute Updated ===========================", LogHandler.LogType.General);
                    }
                    IList<OptionDao> optiondao = new List<OptionDao>();
                    optiondao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(synchXMLPath);
                    if (optiondao != null)
                    {
                        tx.PersistenceManager.CommonRepository.Save<OptionDao>(optiondao);
                        LogHandler.LogInfo("======================= Options Updated ==============================", LogHandler.LogType.General);
                    }
                    IList<TreeLevelDao> treeleveldao = new List<TreeLevelDao>();
                    treeleveldao = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(synchXMLPath);
                    if (treeleveldao != null)
                    {
                        tx.PersistenceManager.CommonRepository.Save<TreeLevelDao>(treeleveldao);
                        LogHandler.LogInfo("============================ TreeValues Updated ===========================", LogHandler.LogType.General);
                    }
                    IList<TreeNodeDao> treenodedao = new List<TreeNodeDao>();
                    treenodedao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(synchXMLPath);
                    if (treenodedao != null)
                    {
                        tx.PersistenceManager.CommonRepository.Save<TreeNodeDao>(treenodedao);
                        LogHandler.LogInfo("========================== TreeNode Updated =================================", LogHandler.LogType.General);
                    }

                    IList<EntityTypeAttributeRelationDao> entitytypeattributerelationdao = new List<EntityTypeAttributeRelationDao>();
                    entitytypeattributerelationdao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(synchXMLPath);
                    if (entitytypeattributerelationdao != null)
                    {
                        tx.PersistenceManager.CommonRepository.Save<EntityTypeAttributeRelationDao>(entitytypeattributerelationdao);
                        LogHandler.LogInfo("================================== Added EnittyTypeAttributeRelation ================================", LogHandler.LogType.General);
                    }

                    IList<AttributeGroupDao> attributegroupdao = new List<AttributeGroupDao>();
                    attributegroupdao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupDao>(synchXMLPath);
                    if (attributegroupdao != null)
                    {

                        tx.PersistenceManager.CommonRepository.Save<AttributeGroupDao>(attributegroupdao);
                        LogHandler.LogInfo("================================== Added Update Attribute Group ================================", LogHandler.LogType.General);
                    }

                    IList<AttributeGroupAttributeRelationDao> attrgrpattrReldao = new List<AttributeGroupAttributeRelationDao>();
                    attrgrpattrReldao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupAttributeRelationDao>(synchXMLPath);
                    if (attrgrpattrReldao != null)
                    {

                        tx.PersistenceManager.CommonRepository.Save<AttributeGroupAttributeRelationDao>(attrgrpattrReldao);
                        LogHandler.LogInfo("================================== Added Update Attribute Group ================================", LogHandler.LogType.General);
                    }

                    IList<EntityTypeAttributeGroupRelationDao> entitytypeattributeGrprelationdao = new List<EntityTypeAttributeGroupRelationDao>();
                    entitytypeattributeGrprelationdao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(synchXMLPath);

                    if (entitytypeattributeGrprelationdao != null)
                    {
                        tx.PersistenceManager.CommonRepository.Save<EntityTypeAttributeGroupRelationDao>(entitytypeattributeGrprelationdao);
                        int tempentityid = 0;
                        var planval = tx.PersistenceManager.MetadataRepository.Query<CustomTabDao>().Where(a => a.Typeid == 6).Select(a => a.SortOrder).Max();
                        var cmsval = tx.PersistenceManager.MetadataRepository.Query<CustomTabDao>().Where(a => a.Typeid == 6).Select(a => a.SortOrder).Max();
                        var tempentitytypeDao = tempentitytype.Cast<EntityTypeDao>().ToList();

                        for (int i = 0; i < entitytypeattributeGrprelationdao.Count(); i++)
                        {
                            if (tempentityid != entitytypeattributeGrprelationdao[i].EntityTypeID)
                            {
                                tempentityid = entitytypeattributeGrprelationdao[i].EntityTypeID;
                                string scustomtab = "delete CM_CustomTabs where EntityTypeID = " + entitytypeattributeGrprelationdao[i].EntityTypeID + " and  AttributeGroupid > 0 ";
                                tx.PersistenceManager.PlanningRepository.ExecuteQuery(scustomtab.ToString());
                            }

                            
                            var queryRes = (from c in tempentitytypeDao where c.Id == entitytypeattributeGrprelationdao[i].EntityTypeID select c.ModuleID).FirstOrDefault();

                            if (entitytypeattributeGrprelationdao[i].LocationType == 3)
                            {


                                CustomTabDao custdao = new CustomTabDao();
                                custdao.AddEntityID = true;
                                custdao.AddLanguageCode = true;
                                custdao.AddUserEmail = true;
                                custdao.AddUserID = true;
                                custdao.AddUserName = true;
                                custdao.AttributeGroupID = entitytypeattributeGrprelationdao[i].AttributeGroupID;
                                custdao.ControleID = "Attributegroup";
                                custdao.EntityTypeID = entitytypeattributeGrprelationdao[i].EntityTypeID;
                                custdao.ExternalUrl = "";
                                custdao.FeatureID = 0;
                                if (queryRes == 3)
                                {
                                    planval += 1;
                                custdao.Typeid = 6;
                                    custdao.SortOrder = planval;
                                }
                                else if (queryRes == 6)
                                {
                                    cmsval += 1;
                                    custdao.Typeid = 17;
                                    custdao.SortOrder = cmsval;
                                }

                                custdao.Name = entitytypeattributeGrprelationdao[i].Caption;
                                
                                tx.PersistenceManager.CommonRepository.Save<CustomTabDao>(custdao);
                            }
                        }
                        LogHandler.LogInfo("================================== Added EnittyTypeAttributeGroupRelation ================================", LogHandler.LogType.General);
                    }

                    IList<EntityTypeRoleAclDao> entitytperoleaclobj = new List<EntityTypeRoleAclDao>();
                    entitytperoleaclobj = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeRoleAclDao>(synchXMLPath);
                    if (entitytperoleaclobj != null)
                    {
                        tx.PersistenceManager.CommonRepository.Save<EntityTypeRoleAclDao>(entitytperoleaclobj);
                        LogHandler.LogInfo("================================== Added EntityTypeRoleAclDao ================================", LogHandler.LogType.General);
                    }

                    IList<EntityTypeHierarchyDao> entityHeirarchydao = new List<EntityTypeHierarchyDao>();
                    entityHeirarchydao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeHierarchyDao>(synchXMLPath);
                    if (entityHeirarchydao != null)
                    {
                        var entityHeirarchycount = entityHeirarchydao.GroupBy(a => a.ParentActivityTypeID);
                        IList<EntityTypeHierarchyDao> databaseHierarchyDao = new List<EntityTypeHierarchyDao>();
                        foreach (var hierarchyDaoobj in entityHeirarchycount)
                        {
                            databaseHierarchyDao = tx.PersistenceManager.MetadataRepository.Query<EntityTypeHierarchyDao>().Where(a => a.ParentActivityTypeID == Convert.ToInt32(hierarchyDaoobj.Key)).ToList();
                            foreach (var entityHier in databaseHierarchyDao)
                            {
                                entityHeirarchydao.Remove(entityHeirarchydao.Where(a => a.ParentActivityTypeID == entityHier.ParentActivityTypeID && a.ChildActivityTypeID == entityHier.ChildActivityTypeID).FirstOrDefault());
                            }
                        }
                        tx.PersistenceManager.CommonRepository.Save<EntityTypeHierarchyDao>(entityHeirarchydao);
                        LogHandler.LogInfo("================================== Added EnittyTypeHeirarchyRelation ================================", LogHandler.LogType.General);
                    }
                    IList<EntityTypeStatusOptionsDao> entitytypestatusoptiondao = new List<EntityTypeStatusOptionsDao>();
                    entitytypestatusoptiondao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeStatusOptionsDao>(synchXMLPath);
                    if (entitytypestatusoptiondao != null)
                    {

                        tx.PersistenceManager.CommonRepository.Save<EntityTypeStatusOptionsDao>(entitytypestatusoptiondao);
                        StringBuilder IsRemovedIds = new StringBuilder();
                        int count = entitytypestatusoptiondao.Count;
                        int i = 1;
                        StringBuilder entitytypeids = new StringBuilder();
                        foreach (var statusoption in entitytypestatusoptiondao)
                        {
                            IsRemovedIds.Append(statusoption.ID.ToString());
                            entitytypeids.Append(statusoption.EntityTypeID.ToString());
                            if (count > i)
                            {
                                IsRemovedIds.Append(",");
                                entitytypeids.Append(",");
                            }
                            i++;
                        }
                        string qry = "UPDATE MM_EntityTypeStatus_Options SET IsRemoved = 1 WHERE NOT ID IN (" + IsRemovedIds + ") and EntityTypeID in (" + entitytypeids + ")";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuery(qry);
                        LogHandler.LogInfo("================================== Added entitytypestatusoptions ================================", LogHandler.LogType.General);
                    }




                    IList<DamTypeFileExtensionDao> damTypeFileExtensiondao = new List<DamTypeFileExtensionDao>();
                    damTypeFileExtensiondao = tx.PersistenceManager.MetadataRepository.GetObject<DamTypeFileExtensionDao>(synchXMLPath);
                    if (damTypeFileExtensiondao != null)
                    {

                        tx.PersistenceManager.CommonRepository.Save<DamTypeFileExtensionDao>(damTypeFileExtensiondao);
                        StringBuilder IsRemovedIds = new StringBuilder();
                        int count = damTypeFileExtensiondao.Count;
                        int i = 1;
                        StringBuilder entitytypeids = new StringBuilder();
                        foreach (var statusoption in damTypeFileExtensiondao)
                        {
                            IsRemovedIds.Append(statusoption.ID.ToString());
                            entitytypeids.Append(statusoption.EntityTypeID.ToString());
                            if (count > i)
                            {
                                IsRemovedIds.Append(",");
                                entitytypeids.Append(",");
                            }
                            i++;
                        }
                        string qry = "UPDATE MM_DamType_FileExtension SET IsRemoved = 1 WHERE NOT ID IN (" + IsRemovedIds + ") and EntityTypeID in (" + entitytypeids + ")";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuery(qry);

                        LogHandler.LogInfo("================================== Added DamType  FileExtension options ================================", LogHandler.LogType.General);
                    }


                    IList<EntitytasktypeDao> entitytaskTypeDao = new List<EntitytasktypeDao>();
                    entitytaskTypeDao = tx.PersistenceManager.MetadataRepository.GetObject<EntitytasktypeDao>(synchXMLPath);
                    if (entitytaskTypeDao != null)
                    {
                        tx.PersistenceManager.CommonRepository.Save<EntitytasktypeDao>(entitytaskTypeDao);
                        LogHandler.LogInfo("======================= Entitytasktype Updated ==============================", LogHandler.LogType.General);
                    }

                    IList<ValidationDao> validationdao = new List<ValidationDao>();
                    validationdao = tx.PersistenceManager.MetadataRepository.GetObject<ValidationDao>(synchXMLPath);
                    if (validationdao != null)
                    {
                        tx.PersistenceManager.MetadataRepository.Save<ValidationDao>(validationdao);
                        LogHandler.LogInfo("================================== Added Validation ================================", LogHandler.LogType.General);

                    }

                    string qryuser = "Delete from MM_UserVisibleInfo";
                    tx.PersistenceManager.MetadataRepository.ExecuteQuery(qryuser);
                    IList<UserVisibleInfoDao> uservisibledao = new List<UserVisibleInfoDao>();
                    uservisibledao = tx.PersistenceManager.MetadataRepository.GetObject<UserVisibleInfoDao>(synchXMLPath);
                    if (uservisibledao != null)
                    {
                        tx.PersistenceManager.MetadataRepository.Save<UserVisibleInfoDao>(uservisibledao);
                        LogHandler.LogInfo("================================== Added UserVisibility Info ================================", LogHandler.LogType.General);

                    }

                    LogHandler.LogInfo("======================================== Inserted new values into the tables =================================", LogHandler.LogType.General);

                    LogHandler.LogInfo("======================================== Started creating Dynamic Tables =====================================", LogHandler.LogType.General);

                    BrandSystems.Marcom.Utility.DynamicTable dynamictentitytable = new BrandSystems.Marcom.Utility.DynamicTable();
                    List<BrandSystems.Marcom.Utility.DynamicColumn> idynamicttableColumns = new List<BrandSystems.Marcom.Utility.DynamicColumn>();
                    BrandSystems.Marcom.Utility.DynamicColumn entdynamictableColumns = new BrandSystems.Marcom.Utility.DynamicColumn();
                    var attributetypedao = tx.PersistenceManager.MetadataRepository.GetAll<AttributeTypeDao>();
                    var entitytypedaos = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(workingXMLPath);
                    var entitytyperelationDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(workingXMLPath);
                    var sdate = entitytyperelationDao.Where(a => a.EntityTypeID == 7);
                    int entitytypeId = 0;
                    var entityval = entitytypedaos.Join(entitytyperelationDao, et => et.Id, ew => ew.EntityTypeID, (ete, etret) => new { eent = ete, etrett = etret }).Where(e => e.eent.Category == 2 || e.eent.Category == 3).Select(a => a).Distinct();
                    //int[] entitytypescount = entityval.GroupBy(a => a.etrett.EntityTypeID).Select(lg => new { EntititypeID = lg.Key }).ToArray();
                    List<int> entitytypescount = entityval.GroupBy(a => a.etrett.EntityTypeID).Select(ap => ap.Key).ToList<int>();
                    //finding userdetail entity typeid is available, if not avaible adding entitytypeid to the list of entitytypes
                    var userdetailscount = entitytypescount.Where(a => a == 12);
                    if (userdetailscount.Count() == 0)
                    {
                        entitytypescount.Add(12);
                    }
                    var attributedatadao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(workingXMLPath);

                    sbHeader.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                    sbHeader.Append("<hibernate-mapping xmlns=\"urn:nhibernate-mapping-2.2\" assembly=\"BrandSystems.Marcom.Dal\" namespace=\"BrandSystems.Marcom.Dal\">");
                    foreach (var result in entitytypescount)
                    {
                        idynamicttableColumns.Clear();
                        var entitytypedao = entityval.Where(a => a.eent.Id == result).Select(at => at.eent).Distinct();
                        var attributeresult = entitytypedao.Join
                            (entitytyperelationDao, entitype => entitype.Id, entirel => entirel.EntityTypeID, (entitype, entirel) => new { entitype, entirel }).Join
                            (attributedatadao, attr1 => attr1.entirel.AttributeID, attribu2 => attribu2.Id, (attr1, attribu2) => new { attr1, attribu2 }).Join
                            (attributetypedao, attr3 => attr3.attribu2.AttributeTypeID, attributype => attributype.Id, (attr3, attributype) => new { attr3, attributype }).Where
                            (neet => neet.attr3.attr1.entirel.EntityTypeID == result && (neet.attr3.attr1.entitype.Category == 2 ||
                                neet.attr3.attr1.entitype.Category == 3) && neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Name) &&
                                neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Owner) &&
                                neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.EntityStatus) &&
                                neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Status) &&
                                neet.attr3.attribu2.IsSpecial == false && (
                                neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextSingleLine)) ||
                                neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextMultiLine)) ||
                                neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.ListSingleSelection)) ||
                                neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.DateTime)) ||
                                neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextMoney)) ||
                                neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.CheckBoxSelection)) ||
                                neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.Uploader)))).Select
                            (a => new
                            {
                                IsSpecial = a.attr3.attribu2.IsSpecial,
                                EntityTypeID = a.attr3.attr1.entirel.EntityTypeID,
                                EntityName = a.attr3.attr1.entitype.Caption,
                                AttributeID = a.attr3.attr1.entirel.AttributeID,
                                AttributeName = a.attr3.attribu2.Caption,
                                AttributeDataType = a.attributype.DataType,
                                AttributeSqlType = a.attributype.SqlType
                            });


                        entitytypeId = result;

                        dynamictentitytable.Name = "MM_AttributeRecord_" + entitytypeId;
                        dynamictentitytable.entityVersionNumber = versionNumber;
                        if (attributeresult.Count() > 0)
                        {
                            foreach (var a in attributeresult)
                            {
                                BrandSystems.Marcom.Utility.DynamicColumn attrdynamictableColumns = new BrandSystems.Marcom.Utility.DynamicColumn();
                                attrdynamictableColumns.AttributeId = a.AttributeID;
                                attrdynamictableColumns.Name = a.AttributeName;
                                attrdynamictableColumns.Type = a.AttributeSqlType.ToString();
                                attrdynamictableColumns.IsNullable = true;
                                attrdynamictableColumns.ColumnName = "Attr_" + a.AttributeID;
                                idynamicttableColumns.Add(attrdynamictableColumns);
                            }
                            dynamictentitytable.Columns = idynamicttableColumns;
                        }
                        else
                            dynamictentitytable.Columns = null;
                        LogHandler.LogInfo("======================================== Dynamic Table " + dynamictentitytable.Name + " started =====================================", LogHandler.LogType.General);
                        var mappingxmlfilestatus = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateOrUpdateTableUsingQuery(tx, dynamictentitytable);
                        LogHandler.LogInfo("======================================== Dynamic Table " + dynamictentitytable.Name + " Updated =====================================", LogHandler.LogType.General);

                        //var mappingxmlfilestatus = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.Createmapingxmlfile(dynamictentitytable);
                        sbHeader.Append(mappingxmlfilestatus.InnerXml);

                        //---------------> IF ANY CHANGES DONE FOR ENTITY TYPE USER DETAILS, AUTO CHANGES APPLIED TO USER REGISTRATION TABLE <----------
                        if (dynamictentitytable.Name == "MM_AttributeRecord_12")
                        {
                            BrandSystems.Marcom.Utility.DynamicTable dyntble = new BrandSystems.Marcom.Utility.DynamicTable();
                            dyntble.Columns = dynamictentitytable.Columns;
                            dyntble.entityVersionNumber = dynamictentitytable.entityVersionNumber;
                            dyntble.Name = "MM_AttributeRecord_12PendingUser";

                            var mappingxmlfilestatus1 = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateOrUpdateTableUsingQuery(tx, dyntble);
                            sbHeader.Append(mappingxmlfilestatus1.InnerXml);

                        }
                    }


                    //***********************************************************************************************


                    LogHandler.LogInfo("======================================== Started creating Dynamic Tables for Attribute Group =====================================", LogHandler.LogType.General);

                    BrandSystems.Marcom.Utility.DynamicTable dynamictentitytable1 = new BrandSystems.Marcom.Utility.DynamicTable();
                    List<BrandSystems.Marcom.Utility.DynamicColumn> idynamicttableColumns1 = new List<BrandSystems.Marcom.Utility.DynamicColumn>();
                    BrandSystems.Marcom.Utility.DynamicColumn entdynamictableColumns1 = new BrandSystems.Marcom.Utility.DynamicColumn();
                    var attributetypedao1 = tx.PersistenceManager.MetadataRepository.GetAll<AttributeTypeDao>();
                    var entitytypedaos1 = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupDao>(workingXMLPath);
                    var entitytyperelationDao1 = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupAttributeRelationDao>(workingXMLPath);
                    int entitytypeId1 = 0;
                    if (entitytyperelationDao1 != null)
                    {
                        var entityval1 = entitytypedaos1.Join(entitytyperelationDao1, et => et.Id, ew => ew.AttributeGroupID, (ete, etret) => new { eent = ete, etrett = etret }).Select(a => a).Distinct();
                        var entitytypescount1 = entityval1.GroupBy(a => a.etrett.AttributeGroupID).Select(lg => new { AttributeGroupID = lg.Key });

                        var attributedatadao1 = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(workingXMLPath);
                        foreach (var result in entitytypescount1)
                        {
                            idynamicttableColumns1.Clear();
                            var entitytypedao = entityval1.Where(a => a.eent.Id == result.AttributeGroupID).Select(at => at.eent).Distinct();
                            var attributeresult1 = entitytypedao.Join
                                (entitytyperelationDao1, entitype => entitype.Id, entirel => entirel.AttributeGroupID, (entitype, entirel) => new { entitype, entirel }).Join
                                (attributedatadao1, attr1 => attr1.entirel.AttributeID, attribu2 => attribu2.Id, (attr1, attribu2) => new { attr1, attribu2 }).Join
                                (attributetypedao1, attr3 => attr3.attribu2.AttributeTypeID, attributype => attributype.Id, (attr3, attributype) => new { attr3, attributype }).Where
                                (neet => neet.attr3.attr1.entirel.AttributeGroupID == result.AttributeGroupID && neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Name) &&
                                    neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Owner) &&
                                    neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.EntityStatus) &&
                                    neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Status) &&
                                    neet.attr3.attribu2.IsSpecial == false && (
                                    neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextSingleLine)) ||
                                    neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextMultiLine)) ||
                                    neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.ListSingleSelection)) ||
                                    neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.DateTime)) ||
                                    neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextMoney)) ||
                                    neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.CheckBoxSelection)) ||
                                    neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.Uploader)))).Select
                                (a => new
                                {
                                    IsSpecial = a.attr3.attribu2.IsSpecial,
                                    AttributeGroupID = a.attr3.attr1.entirel.AttributeGroupID,
                                    AttributeGroupName = a.attr3.attr1.entitype.Caption,
                                    AttributeID = a.attr3.attr1.entirel.AttributeID,
                                    AttributeName = a.attr3.attribu2.Caption,
                                    AttributeDataType = a.attributype.DataType,
                                    AttributeSqlType = a.attributype.SqlType
                                });

                            entitytypeId1 = result.AttributeGroupID;

                            dynamictentitytable1.Name = "MM_AttributeGroup_" + entitytypeId1;
                            dynamictentitytable1.entityVersionNumber = versionNumber;
                            if (attributeresult1.Count() > 0)
                            {
                                foreach (var a in attributeresult1)
                                {
                                    BrandSystems.Marcom.Utility.DynamicColumn attrdynamictableColumns = new BrandSystems.Marcom.Utility.DynamicColumn();
                                    attrdynamictableColumns.AttributeId = a.AttributeID;
                                    attrdynamictableColumns.Name = a.AttributeName;
                                    attrdynamictableColumns.Type = a.AttributeSqlType.ToString();
                                    attrdynamictableColumns.IsNullable = true;
                                    attrdynamictableColumns.ColumnName = "Attr_" + a.AttributeID;
                                    idynamicttableColumns1.Add(attrdynamictableColumns);
                                }
                                dynamictentitytable1.Columns = idynamicttableColumns1;
                            }
                            else
                                dynamictentitytable1.Columns = null;
                            LogHandler.LogInfo("======================================== Dynamic Table " + dynamictentitytable1.Name + " started =====================================", LogHandler.LogType.General);
                            var mappingxmlfilestatus = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateOrUpdateTableUsingQuery(tx, dynamictentitytable1, true);
                            LogHandler.LogInfo("======================================== Dynamic Table " + dynamictentitytable1.Name + " Updated =====================================", LogHandler.LogType.General);

                            sbHeader.Append(mappingxmlfilestatus.InnerXml);


                        }
                    }

                    tx.Commit();
                    //***********************************************************************************************
                }
                try
                {
                    UpdateTreeAdminSettings(proxy, 6);
                    UpdateTreeAdminSettings(proxy, 5);
                    UpdateTreeAdminSettings(proxy, 10);

                    UpdateTreeAdminSettings(proxy, 35);
                }
                catch (Exception e)
                { }
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //bool dynamicview;
                    //dynamicview = SyncToDbCreateDynamicView(tx, workingXMLPath);   
                    sbHeader.Append("</hibernate-mapping>");

                    string mappingfilesPath = AppDomain.CurrentDomain.BaseDirectory;
                    string xmlBackupFolder = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "MetadataXML", "backup");
                    string dynamicMappingFilePath = mappingfilesPath + "DynamicMappingfiles\\" + @"\DynamiccomponentMappingfile_V" + versionNumber + ".hbml.xml";
                    string versionXmlPath = mappingfilesPath + "MetadataXML\\" + @"\MetadataVersion_V" + versionNumber + ".xml";
                    string timeStamp = DateTime.Now.ToString("yyyy_MM_dd_hh_mm_ss");
                    //Take File Back-up
                    string synchXMLBackupPath = System.IO.Path.Combine(xmlBackupFolder, synchXMLPath.Substring(synchXMLPath.LastIndexOf("\\") + 1).Replace(".", "_" + timeStamp + "."));
                    string workingXMLBackupPath = System.IO.Path.Combine(xmlBackupFolder, workingXMLPath.Substring(workingXMLPath.LastIndexOf("\\") + 1).Replace(".", "_" + timeStamp + "."));
                    string dynamicMappingXMLBackupPath = System.IO.Path.Combine(xmlBackupFolder, "DynamiccomponentMappingfile_V" + versionNumber + "_" + timeStamp + ".hbml.xml");
                    string versionXMLBackupPath = System.IO.Path.Combine(xmlBackupFolder, versionXmlPath.Substring(versionXmlPath.LastIndexOf("\\") + 1).Replace(".", "_" + timeStamp + "."));

                    System.IO.File.Copy(synchXMLPath, synchXMLBackupPath);
                    System.IO.File.Copy(workingXMLPath, workingXMLBackupPath);
                    if (System.IO.File.Exists(dynamicMappingFilePath))
                        System.IO.File.Copy(dynamicMappingFilePath, dynamicMappingXMLBackupPath);
                    if (System.IO.File.Exists(versionXmlPath))
                        System.IO.File.Copy(versionXmlPath, versionXMLBackupPath);

                    //if (MarcomManagerFactory.IsWorkingWithCurrentWorkingVersion)
                    //{
                    using (StreamWriter outfile = new StreamWriter(dynamicMappingFilePath))
                    {
                        outfile.Write(sbHeader.ToString());
                    }
                    //}

                    //PersistenceManager.Instance.Readingxmlfiles("DynamiccomponentMappingfile_V" + versionNumber + ".hbml.xml");

                    LogHandler.LogInfo("============================= Dynamic Mapping got created with version : " + versionNumber + "======================================", LogHandler.LogType.General);
                    XDocument copyXml = XDocument.Load(workingXMLPath);
                    copyXml.Save(mappingfilesPath = mappingfilesPath + "MetadataXML\\" + @"\MetadataVersion_V" + versionNumber + ".xml");
                    if (!MarcomManagerFactory.IsWorkingWithCurrentWorkingVersion)
                        copyXml.Save(tx.PersistenceManager.MetadataRepository.GetXmlWorkingPath(true));
                    LogHandler.LogInfo("============================= New version got created with version : " + versionNumber + "======================================", LogHandler.LogType.General);

                    XDocument deleteSyncXml = XDocument.Load(synchXMLPath);
                    deleteSyncXml.Root.RemoveAll();
                    deleteSyncXml.Save(synchXMLPath);
                    if (!MarcomManagerFactory.IsWorkingWithCurrentWorkingVersion)
                    {
                        XDocument deleteCurrentSyncXml = XDocument.Load(tx.PersistenceManager.MetadataRepository.GetSynchXMLPath(true));
                        deleteCurrentSyncXml.Root.RemoveAll();
                        deleteCurrentSyncXml.Save(tx.PersistenceManager.MetadataRepository.GetSynchXMLPath(true));
                    }
                    LogHandler.LogInfo("=============================== Removed all data from the SyncToDB xml ====================================", LogHandler.LogType.General);

                    if (!MarcomManagerFactory.IsWorkingWithCurrentWorkingVersion)
                    {
                        var metadata = tx.PersistenceManager.MetadataRepository.GetAll<MetadataVersionDao>();
                        var currentVersion = metadata.Where(a => a.State == 1).SingleOrDefault();
                        if (currentVersion != null)
                        {
                            currentVersion.State = 0;
                            currentVersion.EndDate = DateTime.Now;
                        }
                        var futureVersion = metadata.Where(a => a.ID == versionNumber).SingleOrDefault();
                        if (futureVersion != null)
                        {
                            futureVersion.State = 1;
                            futureVersion.StartDate = DateTime.Now;
                        }
                    }

                    copyXml.Root.SetAttributeValue("IsEdited", "0");
                    copyXml.Save(workingXMLPath);

                    PersistenceManager.Instance.Initialize();
                    MarcomManagerFactory.ActiveMetadataVersionNumber = versionNumber;
                    //IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(MarcomManagerFactory._systemSessionId);
                    //int pushresult = 0;
                    //pushresult = managers.ReportManager.pushviewSchema();

                    LogHandler.LogInfo("=============================== Updated the TotalVersionCount in AdminSettingsXML with version : " + versionNumber + "================================", LogHandler.LogType.General);
                    LogHandler.LogInfo("******************************** Done Synctodb functionality at " + DateTime.Now + " ************************", LogHandler.LogType.General);
                    BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    tx.Commit();
                    //==================================================> Loading to current working metadata <================================
                    try
                    {
                        CopyXMLfilestoAPI();
                    }
                    catch (Exception ex)
                    {
                        LogHandler.LogError("******************************* Failed to copy xml files for api at " + DateTime.Now + " *****************************", ex);
                    }

                }
                return true;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                LogHandler.LogError("******************************* Failed to do SyncToDB at " + DateTime.Now + " *****************************", ex);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                return false;
            }


        }
        public bool SyncToDbCreateDynamicView(ITransaction tx, string wxmlpath)
        {
            LogHandler.LogInfo("======================================== Started creating Dynamic view =====================================", LogHandler.LogType.General);


            BrandSystems.Marcom.Utility.Dynamicview dynamictentityview = new BrandSystems.Marcom.Utility.Dynamicview();
            BrandSystems.Marcom.Utility.DynamicviewText dynamictentityviewText = new BrandSystems.Marcom.Utility.DynamicviewText();
            List<BrandSystems.Marcom.Utility.DynamicviewColumn> idynamicviewColumns = new List<BrandSystems.Marcom.Utility.DynamicviewColumn>();
            List<BrandSystems.Marcom.Utility.DynamicviewColumntext> idynamicviewColumnstext = new List<BrandSystems.Marcom.Utility.DynamicviewColumntext>();
            var viewattributetypedao = tx.PersistenceManager.MetadataRepository.GetAll<AttributeTypeDao>();
            var viewentitytypedaos = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(wxmlpath);
            var viewentitytyperelationDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(wxmlpath);
            var sdate = viewentitytyperelationDao.Where(a => a.EntityTypeID == 7);
            int viewentitytypeId = 0;
            var viewentityval = viewentitytypedaos.Join(viewentitytyperelationDao, et => et.Id, ew => ew.EntityTypeID, (ete, etret) => new { eent = ete, etrett = etret }).Where(e => e.eent.Category == 2 || e.eent.Category == 3).Select(a => a).Distinct();
            var viewentitytypescount = viewentityval.GroupBy(a => a.etrett.EntityTypeID).Select(lg => new { EntititypeID = lg.Key });
            var viewattributedatadao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(wxmlpath);
            foreach (var result in viewentitytypescount)
            {
                idynamicviewColumns.Clear();
                idynamicviewColumnstext.Clear();
                var viewentitytypedao = viewentityval.Where(a => a.eent.Id == result.EntititypeID).Select(at => at.eent).Distinct();
                var viewattributeresult = viewentitytypedao.Join
                    (viewentitytyperelationDao, entitype => entitype.Id, entirel => entirel.EntityTypeID, (entitype, entirel) => new { entitype, entirel }).Join
                    (viewattributedatadao, attr1 => attr1.entirel.AttributeID, attribu2 => attribu2.Id, (attr1, attribu2) => new { attr1, attribu2 }).Join
                    (viewattributetypedao, attr3 => attr3.attribu2.AttributeTypeID, attributype => attributype.Id, (attr3, attributype) => new { attr3, attributype }).Where
                    (neet => neet.attr3.attr1.entirel.EntityTypeID == result.EntititypeID && (neet.attr3.attr1.entitype.Category == 2 ||
                        neet.attr3.attr1.entitype.Category == 3) && neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Name) &&
                        neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Owner) &&
                        neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Status) &&
                        neet.attr3.attribu2.IsSpecial == false && (
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextSingleLine)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextMultiLine)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.ListSingleSelection)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.DateTime)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextMoney)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.CheckBoxSelection)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.DropDownTree)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TreeMultiSelection)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.ListMultiSelection)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TreeMultiSelection)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.Period)) ||
                        neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.Uploader)))).Select
                    (a => new
                    {
                        IsSpecial = a.attr3.attribu2.IsSpecial,
                        EntityTypeID = a.attr3.attr1.entirel.EntityTypeID,
                        EntityName = a.attr3.attr1.entitype.Caption,
                        AttributeID = a.attr3.attr1.entirel.AttributeID,
                        AttributeName = a.attr3.attribu2.Caption,
                        AttributeDataType = a.attributype.DataType,
                        AttributeSqlType = a.attributype.SqlType
                    });


                viewentitytypeId = result.EntititypeID;
                string Enitypetablename = "MM_AttributeRecord_" + viewentitytypeId;
                var etypename = viewentitytypedaos.Where(c => c.Id == result.EntititypeID).Select(ct => ct.Caption).FirstOrDefault().ToString();
                string etypenames = etypename.ToString().Replace(" & ", "and");
                etypenames = etypenames.Replace("&", "and");
                etypenames = etypenames.Replace(" ", "_");
                etypenames = etypenames.Replace("& ", "and");
                etypenames = etypenames.Replace("- ", "_");
                etypenames = etypenames.Replace("-", "_");
                etypenames = etypenames.Replace("__", "_");
                etypenames = etypenames.Replace("___", "_");
                dynamictentityview.Name = "SV_" + etypenames + "_Data";
                dynamictentityviewText.Name = "SV_" + etypenames + "_Text";
                if (viewattributeresult.Count() > 0 && viewentitytypeId != (int)EntityTypeList.Objective)
                {

                    foreach (var b in viewattributeresult)
                    {
                        BrandSystems.Marcom.Utility.DynamicviewColumn dynamicviewColumns = new BrandSystems.Marcom.Utility.DynamicviewColumn();
                        dynamicviewColumns.AttributeId = b.AttributeID;
                        var attributetypeId = viewattributedatadao.Where(At => At.Id == b.AttributeID).Select(At => At.AttributeTypeID).FirstOrDefault().ToString();
                        dynamicviewColumns.AttributeTypeID = Convert.ToInt32(attributetypeId.ToString());
                        dynamicviewColumns.ColumnName = "Attr_" + b.AttributeID;
                        var ertypecaption = viewentitytyperelationDao.Where(Ent => Ent.EntityTypeID == result.EntititypeID && Ent.AttributeID == b.AttributeID).Select(Ent => Ent.Caption).FirstOrDefault().ToString();
                        var count = idynamicviewColumns.Where(a => a.Caption == ertypecaption.ToString()).ToList();
                        if (count != null)
                            if (count.Count > 0)
                            {
                                int i = count.Count;
                                dynamicviewColumns.Caption = ertypecaption.ToString() + i.ToString();
                            }
                            else
                                dynamicviewColumns.Caption = ertypecaption.ToString();
                        else
                            dynamicviewColumns.Caption = ertypecaption.ToString();
                        idynamicviewColumns.Add(dynamicviewColumns);
                    }
                    dynamictentityview.Columns = idynamicviewColumns;

                    foreach (var c in viewattributeresult)
                    {
                        BrandSystems.Marcom.Utility.DynamicviewColumntext dynamicviewColumnstext = new BrandSystems.Marcom.Utility.DynamicviewColumntext();
                        dynamicviewColumnstext.AttributeId = c.AttributeID;
                        var attributetypeId = viewattributedatadao.Where(At => At.Id == c.AttributeID).Select(At => At.AttributeTypeID).FirstOrDefault().ToString();
                        dynamicviewColumnstext.AttributeTypeID = Convert.ToInt32(attributetypeId.ToString());
                        dynamicviewColumnstext.ColumnName = "Attr_" + c.AttributeID;
                        var ertypecaption = viewentitytyperelationDao.Where(Ent => Ent.EntityTypeID == result.EntititypeID && Ent.AttributeID == c.AttributeID).Select(Ent => Ent.Caption).FirstOrDefault().ToString();
                        var count = idynamicviewColumnstext.Where(a => a.Caption == ertypecaption.ToString()).ToList();
                        if (count != null)
                            if (count.Count > 0)
                            {
                                int i = count.Count;
                                dynamicviewColumnstext.Caption = ertypecaption.ToString() + i.ToString();
                            }
                            else
                                dynamicviewColumnstext.Caption = ertypecaption.ToString();
                        else
                            dynamicviewColumnstext.Caption = ertypecaption.ToString();
                        idynamicviewColumnstext.Add(dynamicviewColumnstext);
                    }

                    dynamictentityviewText.Columns = idynamicviewColumnstext;
                }
                else
                {

                    dynamictentityview.Columns = null;
                    dynamictentityviewText.Columns = null;
                }

                if (dynamictentityview.Columns != null)
                {
                    LogHandler.LogInfo("======================================== Dynamic view " + dynamictentityview.Name + " started =====================================", LogHandler.LogType.General);
                    Boolean viewresult = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateviewUsingQuery(tx, dynamictentityview, Enitypetablename, wxmlpath);
                    LogHandler.LogInfo("======================================== Dynamic viw " + dynamictentityview.Name + " Updated ==============", LogHandler.LogType.General);
                    //var mappingxmlfilestatus = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.Createmapingxmlfile(dynamictentitytable);}
                }

                if (dynamictentityviewText.Columns != null)
                {
                    LogHandler.LogInfo("======================================== Dynamic view " + dynamictentityviewText.Name + " started =====================================", LogHandler.LogType.General);
                    Boolean viewtextresult = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateviewTextUsingQuery(tx, dynamictentityviewText, Enitypetablename, wxmlpath);
                    LogHandler.LogInfo("======================================== Dynamic viw " + dynamictentityviewText.Name + " Updated ==============", LogHandler.LogType.General);
                    //var mappingxmlfilestatus = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.Createmapingxmlfile(dynamictentitytable);}
                }


            }


            return true;
        }

        public bool SyncToDbCreateDynamicViewAttributeGroup(ITransaction tx, string wxmlpath)
        {
            LogHandler.LogInfo("======================================== Started creating Dynamic view for AttributeGroup =====================================", LogHandler.LogType.General);


            BrandSystems.Marcom.Utility.DynamicviewAttributeGroup dynamictentityview = new BrandSystems.Marcom.Utility.DynamicviewAttributeGroup();
            BrandSystems.Marcom.Utility.DynamicviewAttributeGroupText dynamictentityviewText = new BrandSystems.Marcom.Utility.DynamicviewAttributeGroupText();
            List<BrandSystems.Marcom.Utility.DynamicviewColumnAttributeGroup> idynamicviewColumns = new List<BrandSystems.Marcom.Utility.DynamicviewColumnAttributeGroup>();
            List<BrandSystems.Marcom.Utility.DynamicviewColumnAttributeGrouptext> idynamicviewColumnstext = new List<BrandSystems.Marcom.Utility.DynamicviewColumnAttributeGrouptext>();
            var viewattributetypedao = tx.PersistenceManager.MetadataRepository.GetAll<AttributeTypeDao>();
            var viewentitytypedaos = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupDao>(wxmlpath);
            var viewentitytyperelationDao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupAttributeRelationDao>(wxmlpath);
            //var sdate = viewentitytyperelationDao.Where(a => a.EntityTypeID == 7);
            int viewentitytypeId = 0;
            if (viewentitytypedaos != null && viewentitytyperelationDao != null)
            {
                var viewentityval = viewentitytypedaos.Join(viewentitytyperelationDao, et => et.Id, ew => ew.AttributeGroupID, (ete, etret) => new { eent = ete, etrett = etret }).Select(a => a).Distinct();
                var viewentitytypescount = viewentityval.GroupBy(a => a.etrett.AttributeGroupID).Select(lg => new { AttributeGroupId = lg.Key });
                var viewattributedatadao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(wxmlpath);
                foreach (var result in viewentitytypescount)
                {
                    idynamicviewColumns.Clear();
                    idynamicviewColumnstext.Clear();
                    var viewentitytypedao = viewentityval.Where(a => a.eent.Id == result.AttributeGroupId).Select(at => at.eent).Distinct();
                    var viewattributeresult = viewentitytypedao.Join
                        (viewentitytyperelationDao, entitype => entitype.Id, entirel => entirel.AttributeGroupID, (entitype, entirel) => new { entitype, entirel }).Join
                        (viewattributedatadao, attr1 => attr1.entirel.AttributeID, attribu2 => attribu2.Id, (attr1, attribu2) => new { attr1, attribu2 }).Join
                        (viewattributetypedao, attr3 => attr3.attribu2.AttributeTypeID, attributype => attributype.Id, (attr3, attributype) => new { attr3, attributype }).Where
                        (neet => neet.attr3.attr1.entirel.AttributeGroupID == result.AttributeGroupId && neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Name) &&
                            neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Owner) &&
                            neet.attr3.attribu2.Id != Convert.ToInt32(SystemDefinedAttributes.Status) &&
                            neet.attr3.attribu2.IsSpecial == false && (
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextSingleLine)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextMultiLine)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.ListSingleSelection)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.DateTime)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TextMoney)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.CheckBoxSelection)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.DropDownTree)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TreeMultiSelection)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.ListMultiSelection)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.TreeMultiSelection)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.Period)) ||
                            neet.attr3.attribu2.AttributeTypeID == (Convert.ToInt32(AttributesList.Uploader)))).Select
                        (a => new
                        {
                            IsSpecial = a.attr3.attribu2.IsSpecial,
                            EntityTypeID = a.attr3.attr1.entirel.AttributeGroupID,
                            EntityName = a.attr3.attr1.entitype.Caption,
                            AttributeID = a.attr3.attr1.entirel.AttributeID,
                            AttributeName = a.attr3.attribu2.Caption,
                            AttributeDataType = a.attributype.DataType,
                            AttributeSqlType = a.attributype.SqlType
                        });


                    viewentitytypeId = result.AttributeGroupId;
                    string Enitypetablename = "MM_AttributeGroup_" + viewentitytypeId;
                    var etypename = viewentitytypedaos.Where(c => c.Id == result.AttributeGroupId).Select(ct => ct.Caption).FirstOrDefault().ToString();
                    string etypenames = etypename.ToString().Replace(" & ", "_");
                    etypenames = etypenames.Replace(" ", "_");
                    etypenames = etypenames.Replace("& ", "_");
                    etypenames = etypenames.Replace("- ", "_");
                    etypenames = etypenames.Replace("-", "_");
                    etypenames = etypenames.Replace("__", "_");
                    etypenames = etypenames.Replace("___", "_");
                    dynamictentityview.Name = "SV_" + etypenames + "_Data";
                    dynamictentityviewText.Name = "SV_" + etypenames + "_Text";
                    if (viewattributeresult.Count() > 0)
                    {

                        foreach (var b in viewattributeresult)
                        {
                            BrandSystems.Marcom.Utility.DynamicviewColumnAttributeGroup dynamicviewColumns = new BrandSystems.Marcom.Utility.DynamicviewColumnAttributeGroup();
                            dynamicviewColumns.AttributeId = b.AttributeID;
                            var attributetypeId = viewattributedatadao.Where(At => At.Id == b.AttributeID).Select(At => At.AttributeTypeID).FirstOrDefault().ToString();
                            dynamicviewColumns.AttributeTypeID = Convert.ToInt32(attributetypeId.ToString());
                            dynamicviewColumns.ColumnName = "Attr_" + b.AttributeID;
                            var ertypecaption = viewentitytyperelationDao.Where(Ent => Ent.AttributeGroupID == result.AttributeGroupId && Ent.AttributeID == b.AttributeID).Select(Ent => Ent.Caption).FirstOrDefault().ToString();
                            var count = idynamicviewColumns.Where(a => a.Caption == ertypecaption.ToString()).ToList();
                            if (count != null)
                                if (count.Count > 0)
                                {
                                    int i = count.Count;
                                    dynamicviewColumns.Caption = ertypecaption.ToString() + i.ToString();
                                }
                                else
                                    dynamicviewColumns.Caption = ertypecaption.ToString();
                            else
                                dynamicviewColumns.Caption = ertypecaption.ToString();
                            idynamicviewColumns.Add(dynamicviewColumns);
                        }
                        dynamictentityview.Columns = idynamicviewColumns;

                        foreach (var c in viewattributeresult)
                        {
                            BrandSystems.Marcom.Utility.DynamicviewColumnAttributeGrouptext dynamicviewColumnstext = new BrandSystems.Marcom.Utility.DynamicviewColumnAttributeGrouptext();
                            dynamicviewColumnstext.AttributeId = c.AttributeID;
                            var attributetypeId = viewattributedatadao.Where(At => At.Id == c.AttributeID).Select(At => At.AttributeTypeID).FirstOrDefault().ToString();
                            dynamicviewColumnstext.AttributeTypeID = Convert.ToInt32(attributetypeId.ToString());
                            dynamicviewColumnstext.ColumnName = "Attr_" + c.AttributeID;
                            var ertypecaption = viewentitytyperelationDao.Where(Ent => Ent.AttributeGroupID == result.AttributeGroupId && Ent.AttributeID == c.AttributeID).Select(Ent => Ent.Caption).FirstOrDefault().ToString();
                            dynamicviewColumnstext.Caption = ertypecaption.ToString();
                            idynamicviewColumnstext.Add(dynamicviewColumnstext);
                        }

                        dynamictentityviewText.Columns = idynamicviewColumnstext;
                    }
                    else
                    {

                        dynamictentityview.Columns = null;
                        dynamictentityviewText.Columns = null;
                    }

                    if (dynamictentityview.Columns != null)
                    {
                        LogHandler.LogInfo("======================================== Dynamic view for AttributeGroup " + dynamictentityview.Name + " started =====================================", LogHandler.LogType.General);
                        Boolean viewresult = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateviewUsingQueryAttributeGroup(tx, dynamictentityview, Enitypetablename, wxmlpath);
                        LogHandler.LogInfo("======================================== Dynamic viw " + dynamictentityview.Name + " Updated ==============", LogHandler.LogType.General);
                        //var mappingxmlfilestatus = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.Createmapingxmlfile(dynamictentitytable);}
                    }

                    if (dynamictentityviewText.Columns != null)
                    {
                        LogHandler.LogInfo("======================================== Dynamic view  for AttributeGroup " + dynamictentityviewText.Name + " started =====================================", LogHandler.LogType.General);
                        Boolean viewtextresult = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateviewTextUsingQueryAttributeGroup(tx, dynamictentityviewText, Enitypetablename, wxmlpath);
                        LogHandler.LogInfo("======================================== Dynamic viw for AttributeGroup " + dynamictentityviewText.Name + " Updated ==============", LogHandler.LogType.General);
                        //var mappingxmlfilestatus = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.Createmapingxmlfile(dynamictentitytable);}
                    }


                }
                return true;
            }
            return true;
        }
        public string GetOptionsFromXML(string element, int typeid)
        {
            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            XDocument xDoc = XDocument.Load(xmlpath);
            var resp = xDoc.Root.Descendants("ListSettings").Descendants("RootLevel").Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == typeid).Select(a => a).Descendants(element);
            int OptionFrom = 0;
            bool IsKeyword = false;
            bool IsEntityType = false;
            if (resp.Elements("Attributes").Descendants("OptionFrom").Count() != 0)
                OptionFrom = resp.Elements("Attributes").Select(a => Convert.ToInt32(a.Element("OptionFrom").Value)).First();

            if (resp.Elements("Attributes").Descendants("IsKeyword").Count() != 0)
                IsKeyword = resp.Elements("Attributes").Select(a => Convert.ToBoolean(a.Element("IsKeyword").Value)).First();

            if (resp.Elements("Attributes").Descendants("IsEntityType").Count() != 0)
                IsEntityType = resp.Elements("Attributes").Select(a => Convert.ToBoolean(a.Element("IsEntityType").Value)).First();

            int CurrentVersion = Convert.ToInt32(xDoc.Descendants("Version").Descendants("ActiveVersion").Attributes("value").First().Value);
            return OptionFrom.ToString() + "," + IsKeyword.ToString() + "," + CurrentVersion + "," + IsEntityType;
        }
        /// <summary>
        /// FillListSettings
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="elementNode">element Node</param>
        /// <returns>bool</returns>
        private ListSettings FillListSettings(string elementNode, int typeid)
        {
            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            XDocument xDoc = XDocument.Load(xmlpath);

            var listSettings = new ListSettings();

            if (xDoc.Root.Descendants("ListSettings").Descendants("RootLevel").Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == typeid).Select(a => a).Elements(elementNode).Count() > 0)
            {
                listSettings.Name = elementNode;

                var type = 0;
                if (elementNode != "DetailFilter")
                {
                    listSettings.Type = typeid;
                    List<int> entitytypes = new List<int>();
                    entitytypes.Add(typeid);
                    listSettings.EntityTypes = entitytypes;
                }
                else
                {
                    listSettings.Type = Convert.ToInt32(type);
                    // listSettings.EntityTypes = type.ToList<int>();
                }
                listSettings.Description = elementNode;


                if (elementNode == "GanttView" || elementNode == "ListView")
                {
                    List<AttributeSettings> GanttViewAttributes = new List<AttributeSettings>();

                    List<AttributeSettings> ListViewAttributes = new List<AttributeSettings>();

                    GanttViewAttributes = xDoc.Root.Descendants("ListSettings").Descendants("RootLevel").Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == typeid).Select(a => a).Elements(elementNode).Elements("Attribute").Select(a => new AttributeSettings { Id = Convert.ToInt32(a.Element("Id").Value), IsOrderBy = Convert.ToBoolean(a.Element("IsOrderBy").Value), IsSelect = Convert.ToBoolean(a.Element("IsSelect").Value), IsFilter = Convert.ToBoolean(a.Element("IsFilter").Value), Level = Convert.ToInt32(a.Element("Level").Value), Type = Convert.ToInt32(a.Element("Type").Value), WhereCondition = Convert.ToString(a.Element("WhereCondition").Value), Field = Convert.ToString(a.Element("Field").Value), DisplayName = Convert.ToString(a.Element("DisplayName").Value) }).ToList();

                    var elementlistNode = "ListView";

                    XDocument xganttDoc = XDocument.Load(xmlpath);

                    if (xganttDoc.Root.Elements(elementlistNode).Count() > 0)
                    {
                        GanttViewAttributes.AddRange(xganttDoc.Root.Descendants("ListSettings").Descendants("RootLevel").Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == typeid).Select(a => a).Elements(elementlistNode).Elements("Attribute").Select(a => new AttributeSettings { Id = Convert.ToInt32(a.Element("Id").Value), IsOrderBy = Convert.ToBoolean(a.Element("IsOrderBy").Value), IsSelect = Convert.ToBoolean(a.Element("IsSelect").Value), IsFilter = Convert.ToBoolean(a.Element("IsFilter").Value), Level = Convert.ToInt32(a.Element("Level").Value), Type = Convert.ToInt32(a.Element("Type").Value), WhereCondition = Convert.ToString(a.Element("WhereCondition").Value), Field = Convert.ToString(a.Element("Field").Value), DisplayName = Convert.ToString(a.Element("DisplayName").Value) }).ToList());
                    }

                    var qry = from m in GanttViewAttributes
                              group m by new { m.Id, m.IsOrderBy, m.IsSelect, m.IsFilter, m.Level, m.Type, m.WhereCondition, m.Field, m.DisplayName } into grp
                              where grp.Count() > 1
                              select grp.Key;

                    foreach (var item in qry)
                    {
                        var duplicateitem = GanttViewAttributes.Where(a => a.Id == Convert.ToInt32(item.Id) && a.Field == item.Field && a.Level == item.Level && a.DisplayName == item.DisplayName).Select(a => a).First();

                        GanttViewAttributes.Remove(duplicateitem);
                    }

                    //if (GanttViewAttributes.Count > ListViewAttributes.Count)
                    //{
                    //    listSettings.Attributes = GanttViewAttributes.Except(ListViewAttributes).ToList();
                    //}
                    //else
                    //{
                    //    listSettings.Attributes = ListViewAttributes.Except(GanttViewAttributes).ToList();
                    //}                   

                    listSettings.Attributes = GanttViewAttributes;
                }
                else if (elementNode == "DetailFilter")
                {
                    listSettings.Attributes = xDoc.Root.Descendants("ListSettings").Descendants("RootLevel").Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == typeid).Select(a => a).Elements(elementNode).Elements("Attributes").Elements("Attribute").Select(a => new AttributeSettings { Id = Convert.ToInt32(a.Element("Id").Value), IsOrderBy = false, IsSelect = false, IsFilter = true, Level = Convert.ToInt32(a.Element("Level").Value), Type = Convert.ToInt32(a.Element("Type").Value), WhereCondition = Convert.ToString(a.Element("WhereCondition").Value), Field = Convert.ToString(a.Element("Field").Value), DisplayName = Convert.ToString(a.Element("DisplayName").Value) }).ToList();
                }
                else
                {
                    var value = xDoc.Root.Descendants("ListSettings").Descendants("RootLevel").Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == typeid).Select(a => a);
                    var value1 = value.Descendants(elementNode).Elements("Attributes").Elements("Attribute");
                    listSettings.Attributes = value1.Select(a => new AttributeSettings { Id = Convert.ToInt32(a.Element("Id").Value), IsOrderBy = Convert.ToBoolean(a.Element("IsOrderBy").Value), IsSelect = Convert.ToBoolean(a.Element("IsSelect").Value), IsFilter = Convert.ToBoolean(a.Element("IsFilter").Value), Level = Convert.ToInt32(a.Element("Level").Value), Type = Convert.ToInt32(a.Element("Type").Value), WhereCondition = Convert.ToString(a.Element("WhereCondition").Value), Field = Convert.ToString(a.Element("Field").Value), DisplayName = Convert.ToString(a.Element("DisplayName").Value) }).ToList();
                }
            }

            return listSettings;
        }

        /// <summary>
        /// FillListSettings
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="elementNode">element Node</param>
        /// <returns>bool</returns>
        public IListofRecord ListSetting(string elementNode)
        {

            IListofRecord listofRecord = new ListofRecord();

            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            XDocument xDoc = XDocument.Load(xmlpath);

            var listSettings = new ListSettings();

            if (xDoc.Root.Elements(elementNode).Count() > 0)
            {
                listSettings.Name = elementNode;

                listSettings.Type = Convert.ToInt32(xDoc.Root.Elements(elementNode).Elements("EntityType").Select(a => a.Attribute("ID").Value).First());

                listSettings.Description = elementNode;

                listSettings.EntityTypes = xDoc.Root.Elements(elementNode).Elements("EntityType").Select(a => Convert.ToInt32(a.Attribute("ID").Value)).ToList<int>();

                if (elementNode == "GanttView" || elementNode == "ListView")
                {
                    listSettings.Attributes = xDoc.Root.Elements(elementNode).Elements("EntityType").FirstOrDefault().Elements("Attribute").Select(a => new AttributeSettings { Id = Convert.ToInt32(a.Element("Id").Value), IsOrderBy = Convert.ToBoolean(a.Element("IsOrderBy").Value), IsSelect = Convert.ToBoolean(a.Element("IsSelect").Value), IsFilter = Convert.ToBoolean(a.Element("IsFilter").Value), Level = Convert.ToInt32(a.Element("Level").Value), Type = Convert.ToInt32(a.Element("Type").Value), WhereCondition = Convert.ToString(a.Element("WhereCondition").Value), Field = Convert.ToString(a.Element("Field").Value), DisplayName = Convert.ToString(a.Element("DisplayName").Value) }).ToList();
                }
                else
                {
                    listSettings.Attributes = xDoc.Root.Elements(elementNode).Elements("EntityType").Elements("Attribute").Select(a => new AttributeSettings { Id = Convert.ToInt32(a.Element("Id").Value), IsOrderBy = Convert.ToBoolean(a.Element("IsOrderBy").Value), IsSelect = Convert.ToBoolean(a.Element("IsSelect").Value), IsFilter = Convert.ToBoolean(a.Element("IsFilter").Value), Level = Convert.ToInt32(a.Element("Level").Value), Type = Convert.ToInt32(a.Element("Type").Value), WhereCondition = Convert.ToString(a.Element("WhereCondition").Value), Field = Convert.ToString(a.Element("Field").Value), DisplayName = Convert.ToString(a.Element("DisplayName").Value) }).ToList();
                }
            }

            listofRecord.Attributes = new List<IAttribute>();
            listofRecord.Data = null;
            listofRecord.ColumnDefs = listSettings.Attributes;

            return listofRecord;
        }


        public ListSettings ListSettings(string elementNode)
        {

            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            XDocument xDoc = XDocument.Load(xmlpath);

            var listSettings = new ListSettings();

            if (xDoc.Root.Elements(elementNode).Count() > 0)
            {
                listSettings.Name = elementNode;

                //listSettings.Type = Convert.ToInt32(xDoc.Root.Elements(elementNode).Elements("EntityType").Select(a => a.Attribute("ID").Value).First());

                listSettings.Description = elementNode;

                listSettings.EntityTypes = xDoc.Root.Elements(elementNode).Elements("EntityTypes").Elements("EntityType").Select(a => Convert.ToInt32(a.Attribute("ID").Value)).ToList<int>();

                listSettings.Attributes = xDoc.Root.Elements(elementNode).Elements("Attributes").Elements("Attribute").Select(a => new AttributeSettings { Id = Convert.ToInt32(a.Element("Id").Value), IsOrderBy = Convert.ToBoolean(a.Element("IsOrderBy").Value), IsSelect = Convert.ToBoolean(a.Element("IsSelect").Value), IsFilter = Convert.ToBoolean(a.Element("IsFilter").Value), Level = Convert.ToInt32(a.Element("Level").Value), Type = Convert.ToInt32(a.Element("Type").Value), WhereCondition = Convert.ToString(a.Element("WhereCondition").Value), Field = Convert.ToString(a.Element("Field").Value), IsSpecial = Convert.ToBoolean(a.Element("IsSpecial").Value), DisplayName = Convert.ToString(a.Element("DisplayName").Value) }).ToList();
            }

            //if (xDoc.Root.Elements(elementNode).Count() > 0)
            //{
            //    listSettings.Name = elementNode;

            //    listSettings.Type = Convert.ToInt32(xDoc.Root.Elements(elementNode).Elements("EntityType").Select(a => a.Attribute("ID").Value).First());

            //    listSettings.Description = elementNode;

            //    listSettings.EntityTypes = xDoc.Root.Elements(elementNode).Elements("EntityType").Select(a => Convert.ToInt32(a.Attribute("ID").Value)).ToList<int>();

            //    if (elementNode == "GanttView" || elementNode == "ListView")
            //    {
            //        listSettings.Attributes = xDoc.Root.Elements(elementNode).Elements("EntityType").FirstOrDefault().Elements("Attribute").Select(a => new AttributeSettings { Id = Convert.ToInt32(a.Element("Id").Value), IsOrderBy = Convert.ToBoolean(a.Element("IsOrderBy").Value), IsSelect = Convert.ToBoolean(a.Element("IsSelect").Value), IsFilter = Convert.ToBoolean(a.Element("IsFilter").Value), Level = Convert.ToInt32(a.Element("Level").Value), Type = Convert.ToInt32(a.Element("Type").Value), WhereCondition = Convert.ToString(a.Element("WhereCondition").Value), Field = Convert.ToString(a.Element("Field").Value), DisplayName = Convert.ToString(a.Element("DisplayName").Value) }).ToList();
            //    }
            //    else
            //    {
            //        listSettings.Attributes = xDoc.Root.Elements(elementNode).Elements("EntityType").Elements("Attribute").Select(a => new AttributeSettings { Id = Convert.ToInt32(a.Element("Id").Value), IsOrderBy = Convert.ToBoolean(a.Element("IsOrderBy").Value), IsSelect = Convert.ToBoolean(a.Element("IsSelect").Value), IsFilter = Convert.ToBoolean(a.Element("IsFilter").Value), Level = Convert.ToInt32(a.Element("Level").Value), Type = Convert.ToInt32(a.Element("Type").Value), WhereCondition = Convert.ToString(a.Element("WhereCondition").Value), Field = Convert.ToString(a.Element("Field").Value), DisplayName = Convert.ToString(a.Element("DisplayName").Value) }).ToList();
            //    }
            //}

            //listofRecord.Attributes = new List<IAttribute>();
            //listofRecord.Data = null;
            //listofRecord.ColumnDefs = listSettings.Attributes;

            return listSettings;
        }

        ///// <summary>
        ///// AttributeFilter
        ///// </summary>
        ///// <param name="proxy">The proxy.</param>
        ///// <param name="ListSettings">Record Settings</param>
        ///// <returns>IList<IEntityTypeAttributeRelationwithLevels></returns>
        //public IList<IEntityTypeAttributeRelationwithLevels> AttributeFilter(MetadataManagerProxy proxy, ListSettings listSettings)
        //{
        //    string attributeCaption = string.Empty;
        //    string xmlpath = string.Empty;
        //    IList<IEntityTypeAttributeRelationwithLevels> _iientitytyperelation = new List<IEntityTypeAttributeRelationwithLevels>();
        //    IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
        //    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
        //    {
        //        xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlWorkingPath(1);

        //        var MainList = (from item in listSettings.Attributes
        //                        where item.IsFilter == true
        //                        select item).ToList<AttributeSettings>();

        //        if (MainList != null)
        //        {
        //            var xDoc = XDocument.Load(xmlpath);
        //            foreach (var item in MainList)
        //            {

        //                IEntityTypeAttributeRelationwithLevels _ientitytyperelation = new EntityTypeAttributeRelationwithLevels();
        //                _ientitytyperelation.ID = item.Id;


        //                _ientitytyperelation.AttributeID = item.Id;
        //                attributeCaption = Convert.ToString(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.Id)).Select(a => a.Element("Caption").Value).First());
        //                _ientitytyperelation.AttributeCaption = attributeCaption;
        //                _ientitytyperelation.AttributeTypeID = Convert.ToInt32(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.Id)).Select(a => a.Element("AttributeTypeID").Value).First());

        //                _ientitytyperelation.Caption = item.DisplayName;
        //                if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DropDownTree)
        //                {
        //                    IList<ITreeLevel> treeLevels = GetTreelevel(proxy, 1);
        //                    var levelList = from level in treeLevels
        //                                    where level.Attributeid == _ientitytyperelation.AttributeID
        //                                    select level;
        //                    _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
        //                }


        //                _iientitytyperelation.Add(_ientitytyperelation);
        //            }
        //        }
        //        return _iientitytyperelation;
        //    }

        //}

        public List<int> GetAllEntityTypes(MetadataManagerProxy proxy)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var EntityTypes = tx.PersistenceManager.MetadataRepository.Query<EntityTypeDao>().ToList().Where(a => a.IsRootLevel == true).Select(a => a.Id).Cast<int>().ToList();
                    return EntityTypes;
                }
            }
            catch
            {

            }
            return null;

        }


        public FileInfo GetNewestFile(DirectoryInfo directory)
        {
            return directory.GetFiles()
                .Union(directory.GetDirectories().Select(d => GetNewestFile(d)))
                .OrderByDescending(f => (f == null ? DateTime.MinValue : f.LastWriteTime))
                .FirstOrDefault();
        }

        public string getLatestFileVersion()
        {
            string Directrypath = AppDomain.CurrentDomain.BaseDirectory + "/treelog";
            if (!Directory.Exists(Directrypath))
            {
                Directory.CreateDirectory(Directrypath);
            }

            DirectoryInfo dir = new DirectoryInfo(Directrypath);
            FileInfo fl = GetNewestFile(dir);
            if (fl != null)
            {
                var creationtime = System.IO.File.GetCreationTime(Directrypath);
                var diff = DateTime.Now.Subtract(creationtime);

                if (diff.TotalHours <= 1)
                {
                    return fl.FullName;
                }
                else
                {
                    int fileversionnumber = Convert.ToInt32(fl.FullName.Substring(fl.FullName.ToString().Length - 4, 1));
                    string filename = fl.FullName;
                    string newpath = filename.Replace("'" + fileversionnumber + "'", "'" + fileversionnumber + 1 + "'");
                    return newpath;
                }
            }
            return Directrypath + "/TreeLog_0.txt";
        }

        public bool TextFileWriter(StringBuilder strLogText)
        {

            try
            {

                //string path = getLatestFileVersion();


                string path = AppDomain.CurrentDomain.BaseDirectory + "treelog.txt";

                if (!System.IO.File.Exists(path))
                {
                    System.IO.File.Create(path);

                }
                using (StreamWriter log = System.IO.File.AppendText(path))
                {
                    log.WriteLine(strLogText.ToString());
                    log.WriteLine();

                    log.Close();
                }
            }
            catch
            {

            }
            return false;
        }

        public IListofRecord ListofRecords(MetadataManagerProxy proxy, int StartRowNo, int MaxNoofRow, int FilterID, IList<IFiltersettingsValues> filterSettingValues, int[] IdArr, string SortOrderColumn, bool IsDesc, ListSettings listSetting, bool IncludeChildren, int enumEntityTypeIds, int EntityID, bool IsSingleID, int UserID, int Level, bool IsobjectiveRootLevel, int ExpandingEntityID, bool IsWorkspaces = false)
        {
            int PeriodOptionValue = 0;
            bool IsAttributegroupfilter = false;
            if (enumEntityTypeIds == 5 || enumEntityTypeIds == 6)
                IsAttributegroupfilter = true;
            //StringBuilder strStringText = new StringBuilder();
            //var s1 = Stopwatch.StartNew();
            //strStringText.Append("--------------Function start s1 (Detail=" + IdArr.Length + ")-------").Append("\n");
            try
            {
                //if(UserID == 0 && IsWorkspaces == false && IdArr.Length == 0)
                //proxy.MarcomManager.AccessManager.TryAccess(Modules.Planning, FeatureID.ViewEditAll, OperationId.Allow);

                if (IsWorkspaces)
                {
                    Level = 100;
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        StringBuilder WorkSpaceQry = new StringBuilder();
                        WorkSpaceQry.Append(" SELECT Distinct pe.ID as EntityID  FROM PM_Entity pe  INNER JOIN AM_Entity_Role_User aeru ON pe.ID=aeru.EntityID AND pe.active=1 AND aeru.IsInherited = 0 AND aeru.UserID= ? ");
                        var AccessEntityIds = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(WorkSpaceQry.ToString(), proxy.MarcomManager.User.Id).Cast<Hashtable>();

                        if (AccessEntityIds != null & AccessEntityIds.Count() > 0)
                        {
                            IdArr = new int[AccessEntityIds.Count()];
                            int atrrayval = 0;
                            foreach (var Eachitem in AccessEntityIds)
                            {
                                IdArr[atrrayval] = Convert.ToInt32(Eachitem["EntityID"]);
                                atrrayval += 1;
                            }
                        }
                        else
                        {
                            return null;
                        }
                        tx.Commit();

                    }

                }


                //Create EntitySortorderIdColleHash
                //var s2 = Stopwatch.StartNew();
                //strStringText.Append("--------------Creating search criteria function start s2 -------").Append("\n");
                StringBuilder SearchCriteria = new StringBuilder();

                IList<FilterSettingsDao> filtervalues = new List<FilterSettingsDao>();
                if (FilterID != 0)
                {

                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        filtervalues =
                               tx.PersistenceManager.PlanningRepository.GetEquals<FilterSettingsDao>(
                                   FilterSettingsDao.PropertyNames.FilterID, FilterID);
                        tx.Commit();
                    }
                    if (filtervalues.Count > 0)
                    {
                        SearchCriteria.Append("FilterID=");
                        for (int i = 0; i < filtervalues.Count; i++)
                        {
                            SearchCriteria.Append(filtervalues[i].FilterID);
                            SearchCriteria.Append(filtervalues[i].EndDate);
                            SearchCriteria.Append(filtervalues[i].StartDate);
                            SearchCriteria.Append(filtervalues[i].EntityTypeID);
                            SearchCriteria.Append(filtervalues[i].IsDetailFilter);
                            SearchCriteria.Append(filtervalues[i].Keyword);
                            SearchCriteria.Append(filtervalues[i].TypeID);
                            SearchCriteria.Append(filtervalues[i].WhereCondition);
                        }
                    }
                }
                else
                {
                    SearchCriteria.Append("FilterID=" + FilterID);
                }
                SearchCriteria.Append("filterSettingValues=");

                for (int i = 0; i < filterSettingValues.Count; i++)
                {
                    SearchCriteria.Append(filterSettingValues[i].AttributeId);
                    SearchCriteria.Append(filterSettingValues[i].AttributeTypeId);
                    SearchCriteria.Append(filterSettingValues[i].EndDate);
                    SearchCriteria.Append(filterSettingValues[i].EntityTypeIDs);
                    SearchCriteria.Append(filterSettingValues[i].FilterId);
                    SearchCriteria.Append(filterSettingValues[i].Id);
                    SearchCriteria.Append(filterSettingValues[i].Keyword);
                    SearchCriteria.Append(filterSettingValues[i].Level);
                    SearchCriteria.Append(filterSettingValues[i].StartDate);
                    SearchCriteria.Append(filterSettingValues[i].Value);
                }


                SearchCriteria.Append("IdArr=" + String.Join(",", IdArr.Select(x => x.ToString()).ToArray()));

                SearchCriteria.Append("SortOrderColumn=" + SortOrderColumn + "IsDesc=" + IsDesc);

                SearchCriteria.Append("listSetting=");

                int[] EntityTypes = (int[])listSetting.EntityTypes.ToArray();

                for (int i = 0; i < EntityTypes.Length; i++)
                {
                    SearchCriteria.Append(EntityTypes[i]);
                }

                for (int i = 0; i < listSetting.Attributes.Count; i++)
                {
                    SearchCriteria.Append(listSetting.Attributes[i].Id);
                    SearchCriteria.Append(listSetting.Attributes[i].Level);
                }

                SearchCriteria.Append("enumEntityTypeIds=" + enumEntityTypeIds + "UserID=" + UserID + "Level=" + Level + "IsobjectiveRootLevel=" + IsobjectiveRootLevel);


                int SearchCriteriaHash = SearchCriteria.ToString().GetHashCode();


                //s2.Stop();

                //strStringText.Append("-------------- search criteria function End s2(" + s2.Elapsed.TotalMilliseconds + ") -------").Append("\n");

                IEntityTypeAttributeRelation _ientitytyperelation = new EntityTypeAttributeRelation();
                IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                IListofRecord lstrecord = new ListofRecord();
                StringBuilder strqry = new StringBuilder();
                StringBuilder strAttribute = new StringBuilder();
                StringBuilder dynamicTblQry = new StringBuilder();
                StringBuilder multiSelectTblQry = new StringBuilder();
                StringBuilder singleSelectTblQry = new StringBuilder();
                StringBuilder treeTblQry = new StringBuilder();
                StringBuilder periodTblQry = new StringBuilder();
                StringBuilder finalQry = new StringBuilder();

                StringBuilder topFilterQry = new StringBuilder();
                StringBuilder TempTblQry = new StringBuilder();

                StringBuilder Costcent = new StringBuilder();
                StringBuilder Objective = new StringBuilder();

                StringBuilder attributegroupTblQry = new StringBuilder();
                StringBuilder attributegroupEntityTblQry = new StringBuilder();
                StringBuilder attributegroupEntityOptionTblQry = new StringBuilder();
                StringBuilder attributegroupEntitySortTblQry = new StringBuilder();

                StringBuilder XmlFilterQry = new StringBuilder();
                IList<Hashtable> CollectedIdsResult = new List<Hashtable>();

                bool IsEntityAvailable = false;

                //var s3 = Stopwatch.StartNew();
                IdArr = IdArr.Where(a => a != 0).Select(a => a).ToArray();
                //strStringText.Append("-------------- Entity query executionstart start s3 row no." + StartRowNo + "-------").Append("\n");
                if (proxy.MarcomManager.EntitySortorderIdColleHash != SearchCriteriaHash || proxy.MarcomManager.EntitySortorderIdColle == null)
                {

                    //proxy.MarcomManager.EntitySortorderIdColleHash = SearchCriteriaHash;


                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {

                        //Fetch all entity attribute relation
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeAttributeRelationDao>();
                        var ValidEntityTypes = listSetting.EntityTypes;
                        List<int> newValidEntityTypes = new List<int>((int[])listSetting.EntityTypes.ToArray().Clone());

                        if (EntityTypeIDs.Activity == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            topFilterQry.Append(
                                " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT,LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100))  ");
                            topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                            topFilterQry.Append(" ( ");
                            topFilterQry.Append("  EID,LEVEL,PEID,UNIQUEKEY ");
                            topFilterQry.Append(" ) ");
                        }
                        else if (EntityTypeIDs.AttributeGroupFilter == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            //topFilterQry.Append(
                            //    " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT,LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100),OPTIONID int)  ");

                            //attributegroupEntityTblQry.Append("DECLARE @TempEntityTable TABLE ([ID] int,ParentID INT,TypeID INT,[Active] BIT,UniqueKey NVARCHAR(900),IsLock BIT,NAME NVARCHAR(500),Version  INT,EntityStateID INT,EntityID INT,LEVEL INT,ActiveEntityStateID INT,EnableDisableWorkflow BIT)");
                            //attributegroupEntityTblQry.Append(" INSERT INTO @TempEntityTable ");
                            //attributegroupEntityTblQry.Append(" ( ");
                            //attributegroupEntityTblQry.Append("  [ID] ,ParentID,TypeID,[Active],UniqueKey,IsLock,NAME,[Version],EntityStateID,EntityID,[LEVEL],ActiveEntityStateID,EnableDisableWorkflow ");
                            //attributegroupEntityTblQry.Append(" ) ");
                            //attributegroupEntityTblQry.Append(" SELECT * FROM PM_Entity ");

                            //attributegroupEntitySortTblQry.Append(" DECLARE @TempEntitySortTable TABLE ([id] INT,L1 INT,S1 DATE,L2 INT,S2 DATE,L3 INT,S3 DATE,L4 INT,S4 DATE,L5 INT,S5 DATE,L6 INT,S6 DATE,L7 INT,S7 DATE,L8 INT,S8 DATE,L9 INT,S9 DATE,L10 INT,S10 DATE) ");
                            //attributegroupEntitySortTblQry.Append(" INSERT INTO @TempEntitySortTable(id ,L1 ,S1 ,L2 ,S2 ,L3 ,S3 ,L4 ,S4 ,L5 ,S5 ,L6 ,S6 ,L7 ,S7 ,L8 ,S8 ,L9 ,S9 ,L10 ,S10) ");
                            //attributegroupEntitySortTblQry.Append(" SELECT * FROM PM_Entity_Sort ");

                            topFilterQry.Append(
                                  " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT,LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100), OptionID INT,OptionCAPTION  NVARCHAR(1000) )  ");
                            topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                            topFilterQry.Append(" ( ");
                            topFilterQry.Append("  EID,LEVEL,PEID,UNIQUEKEY,OptionID,OptionCaption ");
                            topFilterQry.Append(" ) ");
                        }
                        else if (EntityTypeIDs.AttributeGroupFilterInCostCentre == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            topFilterQry.Append(
                                  " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT,LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100), OptionID INT,OptionCAPTION  NVARCHAR(1000), CostCenterID INT )  ");
                            topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                            topFilterQry.Append(" ( ");
                            topFilterQry.Append("  EID,LEVEL,PEID,UNIQUEKEY,OptionID,OptionCaption,CostCenterID ");
                            topFilterQry.Append(" ) ");
                        }

                        else if (EntityTypeIDs.Costcenre == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            topFilterQry.Append(
                                " DECLARE @CostCentreOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, EKEY NVARCHAR(450), CostCenterID INT Default(0),LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100),plannedAmount INT ) ");
                            topFilterQry.Append(
                                " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, CostCenterID INT Default(0),LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100),plannedAmount INT ) ");



                            for (var i = 0; i < IdArr.Length; i++)
                            {
                                topFilterQry.Append(" INSERT INTO @CostCentreOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,CostCenterID,LEVEL,PEID,UNIQUEKEY,plannedAmount ");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append(
                                    " SELECT pe.ID , pe.UniqueKey, 0 as CostCenterID,pe.Level,pe.parentid,pe.UNIQUEKEY ,case   WHEN pe.[level] = 0 THEN (SELECT ISNULL(SUM(pf.plannedAmount), 0) FROM PM_Financial pf INNER JOIN pm_Entity children ON  pf.EntityID = children.ID AND children.[Active] = 1 WHERE  children.ParentID =  pe.ID AND pf.CostCenterID =" + IdArr[i] + "  )  ELSE (  SELECT pf.plannedAmount FROM   PM_Financial pf WHERE  pf.EntityID = pe.ID AND pf.CostCenterID =" + IdArr[i] + " ) END   AS  plannedAmount  FROM PM_Entity pe WHERE pe.ID=" +
                                    IdArr[i]);
                                topFilterQry.Append(" INSERT INTO @CostCentreOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,CostCenterID,LEVEL,PEID,UNIQUEKEY ,plannedAmount ");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append("    SELECT a.ID, a.EKEY, a.CostCenterID, a.[Level], a.parentid, a.UNIQUEKEY,a.plannedAmount  FROM (  ");
                                topFilterQry.Append(
                                    " SELECT pe.ID, pe.UniqueKey AS EKEY, pecr.CostCenterID,pe.Level,pe.parentid,pe.UNIQUEKEY, case WHEN pe.[level] = 0 THEN (SELECT ISNULL(SUM(pf.plannedAmount), 0) FROM   PM_Financial pf  INNER JOIN pm_Entity children  ON  pf.EntityID = children.ID  AND children.[Active] = 1 WHERE  children.ParentID = pe.ID  AND pf.CostCenterID =" + IdArr[i] + " )  ELSE (  SELECT pf.plannedAmount  FROM   PM_Financial pf  WHERE  pf.EntityID = pe.id  AND pf.CostCenterID =" + IdArr[i] + " )  END    AS  plannedAmount FROM PM_EntityCostReleations pecr INNER JOIN PM_Entity pe ON pecr.EntityID=pe.ID ");
                                topFilterQry.Append(" AND pe.[Active]=1 AND pecr.IsActive=1  and pecr.CostCenterID=" + IdArr[i] + " ");

                                topFilterQry.Append("INNER JOIN PM_Entity_Sort pes ");
                                topFilterQry.Append("            ON  pe.ID = pes.id");
                                topFilterQry.Append("      INNER JOIN PM_Financial pf");
                                topFilterQry.Append("      ON pf.EntityID = pe.ID AND pf.CostCenterID = " + IdArr[i] + "  ");
                                topFilterQry.Append(" ) a  inner join PM_Entity_Sort pes ON pes.id = a.ID  WHERE a.plannedAmount > 0  ");
                                topFilterQry.Append(" ORDER BY ");
                                topFilterQry.Append("       pes.S1   ASC,");
                                topFilterQry.Append("       pes.L1   ASC,");
                                topFilterQry.Append("       pes.S2   ASC,");
                                topFilterQry.Append("       pes.L2   ASC,");
                                topFilterQry.Append("       pes.S3   ASC,");
                                topFilterQry.Append("       pes.L3   ASC,");
                                topFilterQry.Append("       pes.S4   ASC,");
                                topFilterQry.Append("       pes.L4   ASC,");
                                topFilterQry.Append("       pes.S5   ASC,");
                                topFilterQry.Append("       pes.L5   ASC,");
                                topFilterQry.Append("       pes.S6   ASC,");
                                topFilterQry.Append("       pes.L6   ASC,");
                                topFilterQry.Append("       pes.S7   ASC,");
                                topFilterQry.Append("       pes.L7   ASC,");
                                topFilterQry.Append("       pes.S8   ASC,");
                                topFilterQry.Append("       pes.L8   ASC,");
                                topFilterQry.Append("       pes.S9   ASC,");
                                topFilterQry.Append("       pes.L9   ASC,");
                                topFilterQry.Append("       pes.S10  ASC,");
                                topFilterQry.Append("       pes.L10  ASC");
                            }

                        }
                        else if (EntityTypeIDs.Objective == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            topFilterQry.Append(
                                " DECLARE @ObjectiveOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, EKEY NVARCHAR(450), ObjectveID INT Default(0),LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100))  ");
                            topFilterQry.Append(
                                " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, ObjectveID INT Default(0),LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100))  ");



                            for (var i = 0; i < IdArr.Length; i++)
                            {
                                topFilterQry.Append(" INSERT INTO @ObjectiveOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,ObjectveID,LEVEL,PEID,UNIQUEKEY");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append(
                                    " SELECT pe.ID, pe.UniqueKey,0 as ObjectveID,pe.Level,pe.parentid,pe.UNIQUEKEY  FROM PM_Entity pe WHERE pe.ID=" +
                                    IdArr[i]);
                                topFilterQry.Append(" INSERT INTO @ObjectiveOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,ObjectveID,LEVEL,PEID,UNIQUEKEY ");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append(
                                    " SELECT pe.ID, pe.UniqueKey,poev.ObjectiveID,pe.Level,pe.parentid,pe.UNIQUEKEY FROM PM_ObjectiveEntityValue poev INNER JOIN PM_Entity pe ON poev.EntityID=pe.ID  ");
                                topFilterQry.Append(" AND pe.[Active]=1 AND poev.ObjectiveID=" + IdArr[i] + " ");

                                topFilterQry.Append("INNER JOIN PM_Entity_Sort pes ");
                                topFilterQry.Append("            ON  pe.ID = pes.id");
                                topFilterQry.Append(" ORDER BY ");
                                topFilterQry.Append("       pes.S1   ASC,");
                                topFilterQry.Append("       pes.L1   ASC,");
                                topFilterQry.Append("       pes.S2   ASC,");
                                topFilterQry.Append("       pes.L2   ASC,");
                                topFilterQry.Append("       pes.S3   ASC,");
                                topFilterQry.Append("       pes.L3   ASC,");
                                topFilterQry.Append("       pes.S4   ASC,");
                                topFilterQry.Append("       pes.L4   ASC,");
                                topFilterQry.Append("       pes.S5   ASC,");
                                topFilterQry.Append("       pes.L5   ASC,");
                                topFilterQry.Append("       pes.S6   ASC,");
                                topFilterQry.Append("       pes.L6   ASC,");
                                topFilterQry.Append("       pes.S7   ASC,");
                                topFilterQry.Append("       pes.L7   ASC,");
                                topFilterQry.Append("       pes.S8   ASC,");
                                topFilterQry.Append("       pes.L8   ASC,");
                                topFilterQry.Append("       pes.S9   ASC,");
                                topFilterQry.Append("       pes.L9   ASC,");
                                topFilterQry.Append("       pes.S10  ASC,");
                                topFilterQry.Append("       pes.L10  ASC");

                            }

                        }
                        else if (EntityTypeIDs.Calender == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            topFilterQry.Append(
                                " DECLARE @CalenderOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, EKEY NVARCHAR(450), CalenderID INT Default(0),LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100))  ");
                            topFilterQry.Append(
                                " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, CalenderID INT Default(0),LEVEL int,PEID int,UNIQUEKEY NVARCHAR(100))  ");



                            for (var i = 0; i < IdArr.Length; i++)
                            {
                                topFilterQry.Append(" INSERT INTO @CalenderOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,CalenderID,LEVEL,PEID,UNIQUEKEY");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append(
                                    " SELECT pe.ID, pe.UniqueKey,0 as CalenderID,pe.Level,pe.parentid,pe.UNIQUEKEY  FROM PM_Entity pe WHERE pe.ID=" +
                                    IdArr[i]);
                                topFilterQry.Append(" INSERT INTO @CalenderOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,CalenderID,LEVEL,PEID,UNIQUEKEY ");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append(
                                    " SELECT pe.ID, pe.UniqueKey,poev.CalenderID,pe.Level,pe.parentid,pe.UNIQUEKEY FROM PM_CalenderEntityValue poev INNER JOIN PM_Entity pe ON poev.EntityID=pe.ID  ");
                                topFilterQry.Append(" AND pe.[Active]=1 AND poev.CalenderID=" + IdArr[i] + " ");

                                topFilterQry.Append("INNER JOIN PM_Entity_Sort pes ");
                                topFilterQry.Append("            ON  pe.ID = pes.id");
                                topFilterQry.Append(" ORDER BY ");
                                topFilterQry.Append("       pes.S1   ASC,");
                                topFilterQry.Append("       pes.L1   ASC,");
                                topFilterQry.Append("       pes.S2   ASC,");
                                topFilterQry.Append("       pes.L2   ASC,");
                                topFilterQry.Append("       pes.S3   ASC,");
                                topFilterQry.Append("       pes.L3   ASC,");
                                topFilterQry.Append("       pes.S4   ASC,");
                                topFilterQry.Append("       pes.L4   ASC,");
                                topFilterQry.Append("       pes.S5   ASC,");
                                topFilterQry.Append("       pes.L5   ASC,");
                                topFilterQry.Append("       pes.S6   ASC,");
                                topFilterQry.Append("       pes.L6   ASC,");
                                topFilterQry.Append("       pes.S7   ASC,");
                                topFilterQry.Append("       pes.L7   ASC,");
                                topFilterQry.Append("       pes.S8   ASC,");
                                topFilterQry.Append("       pes.L8   ASC,");
                                topFilterQry.Append("       pes.S9   ASC,");
                                topFilterQry.Append("       pes.L9   ASC,");
                                topFilterQry.Append("       pes.S10  ASC,");
                                topFilterQry.Append("       pes.L10  ASC");
                            }
                        }

                        ///Filter query 
                        if (FilterID > 0 || filterSettingValues.Count() > 0)
                        {
                            //Create a list to hold all the valid EntityTypes

                            IList<FiltersettingsValuesDao> filterValResult = new List<FiltersettingsValuesDao>();
                            IList<FilterSettingsDao> filterObject = new List<FilterSettingsDao>();

                            //To get filter data
                            if (filterSettingValues != null && filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).AttributeId != 0)
                                {
                                    foreach (var objFlter in filterSettingValues)
                                    {
                                        if (objFlter.AttributeId != 0)
                                        {
                                            FiltersettingsValuesDao setValDao = new FiltersettingsValuesDao();
                                            setValDao.AttributeId = objFlter.AttributeId;
                                            setValDao.AttributeTypeId = objFlter.AttributeTypeId;
                                            setValDao.Level = objFlter.Level;
                                            setValDao.Value = objFlter.Value;
                                            filterValResult.Add(setValDao);
                                        }
                                    }
                                }
                                if (filterSettingValues.ElementAt(0).EntityTypeIDs.Length > 0)
                                {
                                    filterObject.Add(new FilterSettingsDao
                                    {
                                        EntityTypeID = filterSettingValues.ElementAt(0).EntityTypeIDs
                                    });
                                    IsEntityAvailable = true;
                                }
                            }
                            else
                            {
                                filterValResult =
                                    tx.PersistenceManager.PlanningRepository.GetEquals<FiltersettingsValuesDao>(
                                        FiltersettingsValuesDao.PropertyNames.FilterId, FilterID);
                                filterObject =
                                    tx.PersistenceManager.PlanningRepository.GetEquals<FilterSettingsDao>(
                                        FilterSettingsDao.PropertyNames.FilterID, FilterID);

                            }

                            //Entity Types looping to get valid entityTypes
                            for (int fi = 0; fi < listSetting.EntityTypes.Count; fi++)
                            {

                                for (int fj = 0; fj < filterValResult.ToList().Count; fj++)
                                {
                                    if (filterValResult[fj].AttributeId != 77)
                                    {
                                        var lstEntiTypeAttribute = from val in dao.ToList()
                                                                   where
                                                                       val.AttributeID == filterValResult[fj].AttributeId &&
                                                                       val.EntityTypeID == listSetting.EntityTypes[fi]
                                                                   select val;
                                        if (listSetting.EntityTypes.Count() != 0)
                                        {
                                            if (lstEntiTypeAttribute.ToList().Count <= 0)
                                            {
                                                newValidEntityTypes.Remove(listSetting.EntityTypes[fi]);
                                            }
                                        }
                                    }
                                }
                            }

                            if (filterObject.Count() > 0)
                            {
                                if (filterObject != null && filterObject.ElementAt(0).EntityTypeID.Trim().Length > 0)
                                {
                                    IsEntityAvailable = true;
                                    newValidEntityTypes = null;
                                    newValidEntityTypes = new List<int>();
                                    string[] EntitypesArr = filterObject.ElementAt(0).EntityTypeID.Split(',');
                                    for (int fo = 0; fo < EntitypesArr.Length; fo++)
                                    {
                                        newValidEntityTypes.Add(Convert.ToInt32(EntitypesArr[fo]));
                                    }
                                }
                            }

                            //To fetch entitytypes related data
                            for (int ve = 0; ve < newValidEntityTypes.Count; ve++)
                            {
                                string entityType = newValidEntityTypes[ve].ToString();
                                ;
                                dynamicTblQry.Append(" SELECT id FROM MM_AttributeRecord_" + entityType +
                                                     "  WHERE  1=1 ");

                                for (int fj = 0; fj < filterValResult.ToList().Count; fj++)
                                {
                                    int attributeID = filterValResult[fj].AttributeId;
                                    int attributeTypeID = filterValResult[fj].AttributeTypeId;
                                    if (attributeTypeID == 10)
                                        PeriodOptionValue = filterValResult[fj].Value;

                                    var FilterValue = filterValResult[fj].Value;
                                    var FilterLevel = filterValResult[fj].Level;
                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                               where
                                                                   val.AttributeID == attributeID &&
                                                                   val.EntityTypeID == newValidEntityTypes[ve]
                                                               select val;
                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                    {
                                        if ((AttributesList)attributeTypeID != AttributesList.ListMultiSelection ||
                                            (AttributesList)attributeTypeID != AttributesList.DropDownTree ||
                                            (AttributesList)attributeTypeID != AttributesList.Tree ||
                                            (AttributesList)attributeTypeID != AttributesList.Period)
                                        {

                                        }
                                        else
                                        {
                                            dynamicTblQry.Append(" and  Attr_" + attributeID.ToString() + " IN (" +
                                                                 FilterValue.ToString() + ") ");
                                        }
                                    }
                                }
                                if ((ve < newValidEntityTypes.Count - 1))
                                {
                                    dynamicTblQry.Append(" UNION ALL ");
                                }

                            }

                            //To fetch related entity type attribute like(multiselect,tree..etc)
                            bool multiSelect = false;
                            bool dropdowntree = false;
                            bool tree = false;
                            bool period = false;
                            bool singleSelect = false;
                            bool OwnerId = false;
                            bool multiselecttree = false;
                            bool dropdowntreepricing = false;



                            if (EntityTypeIDs.Activity == (EntityTypeIDs)enumEntityTypeIds)
                            {
                                for (int fj = 0; fj < filterValResult.ToList().Count; fj++)
                                {
                                    int attributeID = filterValResult[fj].AttributeId;
                                    var FilterValue = filterValResult[fj].Value;
                                    var FilterLevel = filterValResult[fj].Level;

                                    switch ((AttributesList)filterValResult[fj].AttributeTypeId)
                                    {

                                        case AttributesList.ListMultiSelection:
                                            if (multiSelect == false)
                                            {
                                                var valMultiSelect =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Value)
                                                        .ToList();
                                                var valMultiLevel =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Level)
                                                        .ToList();
                                                string inMultiClause = "("
                                                                           +
                                                                               String.Join(",",
                                                                               valMultiSelect.Select(x => x.ToString())
                                                                                   .ToArray())
                                                       + ")";


                                                if (attributeID == (int)SystemDefinedAttributes.ObjectiveType)
                                                {
                                                    multiSelectTblQry.Append(
                                                        " SELECT po.id FROM PM_Objective po  where po.TypeID in" +
                                                        inMultiClause +
                                                        " INTERSECT ");
                                                }
                                                else if (attributeID == (int)SystemDefinedAttributes.ObjectiveStatus)
                                                {
                                                    multiSelectTblQry.Append(
                                                        " SELECT po.id FROM PM_Objective po  where po.ObjectiveStatus in" +
                                                            inMultiClause +
                                                            " INTERSECT ");
                                                }
                                                else
                                                {
                                                    string inMultiLevel = "("
                                                                              +
                                                                                  String.Join(",",
                                                                                  valMultiLevel.Select(x => x.ToString())
                                                                                      .ToArray())
                                                       + ")";
                                                    multiSelectTblQry.Append(
                                                        " SELECT DISTINCT mms.EntityID as id FROM MM_MultiSelect mms ");
                                                    multiSelectTblQry.Append(" WHERE (mms.AttributeID = " +
                                                                             attributeID.ToString() + " AND mms.OptionID IN" +
                                                                             inMultiClause + ") INTERSECT ");
                                                }
                                            }
                                            multiSelect = true;
                                            break;
                                        case AttributesList.DropDownTree:
                                            if (dropdowntree == false)
                                            {
                                                var valTreeSelect =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Value)
                                                        .ToList();
                                                var valTreeLevel =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Level)
                                                        .ToList();
                                                string inTreeClause = "("
                                                                          +
                                                                          String.Join(",",
                                                                              valTreeSelect.Select(x => x.ToString()).ToArray())
                                                    + ")";
                                                string inTreeLevel = "("
                                                                         +
                                                                         String.Join(",",
                                                                             valTreeLevel.Select(x => x.ToString()).ToArray())
                                                   + ")";
                                                treeTblQry.Append(
                                                    " SELECT DISTINCT mms.EntityID as id FROM MM_TreeValue mms ");
                                                treeTblQry.Append(" WHERE (mms.AttributeID = " + attributeID.ToString() +
                                                                  " AND  mms.NodeID IN" + inTreeClause.ToString() +
                                                                  " AND  mms.LEVEL IN" + inTreeLevel + " ) INTERSECT ");
                                            }
                                            dropdowntree = true;
                                            break;
                                        case AttributesList.DropDownTreePricing:
                                            if (dropdowntreepricing == false)
                                            {
                                                var valTreeSelect =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Value)
                                                        .ToList();
                                                var valTreeLevel =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Level)
                                                        .ToList();
                                                string inTreeClause = "("
                                                                          +
                                                                          String.Join(",",
                                                                              valTreeSelect.Select(x => x.ToString()).ToArray())
                                                    + ")";
                                                string inTreeLevel = "("
                                                                         +
                                                                         String.Join(",",
                                                                             valTreeLevel.Select(x => x.ToString()).ToArray())
                                                   + ")";
                                                treeTblQry.Append(
                                                    " SELECT DISTINCT mms.EntityID as id FROM MM_TreeValue mms ");
                                                treeTblQry.Append(" WHERE (mms.AttributeID = " + attributeID.ToString() +
                                                                  " AND  mms.NodeID IN" + inTreeClause.ToString() +
                                                                  " AND  mms.LEVEL IN" + inTreeLevel + " ) INTERSECT ");
                                            }
                                            dropdowntreepricing = true;
                                            break;

                                        case AttributesList.Tree:
                                            if (tree == false)
                                            {
                                                var valTreeSelect =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Value)
                                                        .ToList();
                                                var valTreeLevel =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Level)
                                                        .ToList();
                                                string inTreeClause = "("
                                                                          +
                                                                              String.Join(",",
                                                                              valTreeSelect.Select(x => x.ToString()).ToArray())
                                                    + ")";
                                                string inTreeLevel = "("
                                                                         +
                                                                             String.Join(",",
                                                                             valTreeLevel.Select(x => x.ToString()).ToArray())
                                                   + ")";
                                                treeTblQry.Append(
                                                    " SELECT DISTINCT mms.EntityID as id FROM MM_TreeValue mms ");
                                                treeTblQry.Append(" WHERE (mms.AttributeID = " + attributeID.ToString() +
                                                                  " AND  mms.NodeID IN" + inTreeClause.ToString() +
                                                                  " AND  mms.LEVEL IN" + inTreeLevel + " ) INTERSECT ");
                                            }
                                            tree = true;
                                            break;
                                        case AttributesList.ListSingleSelection:
                                            var lstSpecialAttribute =
                                                tx.PersistenceManager.MetadataRepository.GetbyCriteria<AttributeDao>(
                                                        AttributeDao.PropertyNames.Id, AttributeDao.PropertyNames.IsSpecial,
                                                        attributeID, true);
                                            //var lstSpecialAttribute = listSetting.Attributes.Where(a => a.Id == attributeID && a.IsSpecial == true);
                                            var val =
                                                filterValResult.Where(a => a.AttributeId == attributeID)
                                                    .Select(a => a.Value)
                                                    .ToList();
                                            if (lstSpecialAttribute != null)
                                            {
                                                //var val = filterValResult.Where(a => a.AttributeId == attributeID).Select(a => a.Value).ToList();
                                                if ((SystemDefinedAttributes)attributeID ==
                                                SystemDefinedAttributes.EntityStatus)
                                                {
                                                    string inClause = "("
                                                                          +
                                                                              String.Join(",",
                                                                              val.Select(x => x.ToString()).ToArray())
                                                     + ")";
                                                    singleSelectTblQry.Append(" SELECT EntityID as Id FROM MM_EntityStatus ");
                                                    singleSelectTblQry.Append(" WHERE StatusID in " + inClause +
                                                                              "  INTERSECT ");
                                                }
                                                else if ((SystemDefinedAttributes)attributeID ==
                                                SystemDefinedAttributes.EntityOnTimeStatus)
                                                {
                                                    string inClause = "("
                                                                      +
                                                                          String.Join(",",
                                                                          val.Select(x => x.ToString()).ToArray())
                                                 + ")";
                                                    singleSelectTblQry.Append(" SELECT EntityID as Id FROM MM_EntityStatus ");
                                                    singleSelectTblQry.Append(" WHERE IntimeStatus in " + inClause +
                                                                              "  INTERSECT ");
                                                }
                                                else
                                                {
                                                    string inClause = "("
                                                                          +
                                                                              String.Join(",",
                                                                              val.Select(x => x.ToString()).ToArray())
                                                       + ")";
                                                    singleSelectTblQry.Append(
                                                        " SELECT EntityID as Id FROM AM_Entity_Role_User eru inner join AM_EntityTypeRoleAcl acl on eru.RoleID=acl.ID ");
                                                    singleSelectTblQry.Append(" WHERE  USERID in " + inClause +
                                                                              " and acl.EntityRoleID=1 INTERSECT ");
                                                }
                                                OwnerId = true;
                                            }
                                            else
                                            {
                                                string inClause = "("
                                                                      +
                                                                          String.Join(",", val.Select(x => x.ToString()).ToArray())
                                                 + ")";
                                                singleSelectTblQry.Append(" SELECT DISTINCT singleSelect.Id ");
                                                singleSelectTblQry.Append(" FROM   MM_Option mo INNER JOIN( ");
                                                bool isItFirstTime = false;
                                                foreach (var lstEntitypes in newValidEntityTypes)
                                                {
                                                    var lstEntiTypeAttribute = from entityResult in dao.ToList()
                                                                               where
                                                                                   entityResult.AttributeID == attributeID &&
                                                                                   entityResult.EntityTypeID == lstEntitypes
                                                                               select val;
                                                    if (lstEntiTypeAttribute.Count() > 0)
                                                    {
                                                        if (isItFirstTime == true)
                                                        {
                                                            singleSelectTblQry.Append(" union ");
                                                        }
                                                        singleSelectTblQry.Append(" SELECT mar_" + lstEntitypes + ".Attr_" +
                                                                                  attributeID + " as  Attr_" + attributeID +
                                                                                  ",mar_" + lstEntitypes +
                                                                                  ".id as Id from  MM_AttributeRecord_" +
                                                                                  lstEntitypes + "  mar_" + lstEntitypes +
                                                                                  " ");
                                                        isItFirstTime = true;
                                                    }

                                                }
                                                singleSelectTblQry.Append(") singleSelect ON  singleSelect.Attr_" +
                                                                          attributeID +
                                                                          " = mo.id  WHERE  mo.id in " + inClause +
                                                                          " INTERSECT ");
                                                singleSelect = true;

                                            }

                                            break;
                                        case AttributesList.Period:

                                            period = true;
                                            break;
                                        case AttributesList.TreeMultiSelection:
                                            if (multiselecttree == false)
                                            {
                                                var valTreeSelect =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Value)
                                                        .ToList();
                                                var valTreeLevel =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Level)
                                                        .ToList();
                                                string inTreeClause = "("
                                                                          +
                                                                              String.Join(",",
                                                                              valTreeSelect.Select(x => x.ToString()).ToArray())
                                                    + ")";
                                                string inTreeLevel = "("
                                                                         +
                                                                             String.Join(",",
                                                                             valTreeLevel.Select(x => x.ToString()).ToArray())
                                                   + ")";
                                                treeTblQry.Append(
                                                    " SELECT DISTINCT mms.EntityID as id FROM MM_TreeValue mms ");
                                                treeTblQry.Append(" WHERE (mms.AttributeID = " + attributeID.ToString() +
                                                                  " AND  mms.NodeID IN" + inTreeClause.ToString() +
                                                                  " AND  mms.LEVEL IN" + inTreeLevel + " ) INTERSECT ");
                                            }
                                            multiselecttree = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                            else if (EntityTypeIDs.AttributeGroupFilter == (EntityTypeIDs)enumEntityTypeIds || EntityTypeIDs.AttributeGroupFilterInCostCentre == (EntityTypeIDs)enumEntityTypeIds)
                            {


                                for (int fj = 0; fj < filterValResult.ToList().Count; fj++)
                                {
                                    int attributeID = filterValResult[fj].AttributeId;
                                    var FilterValue = filterValResult[fj].Value;
                                    var FilterLevel = filterValResult[fj].Level;
                                    switch ((AttributesList)filterValResult[fj].AttributeTypeId)
                                    {

                                        case AttributesList.ListMultiSelection:
                                            if (multiSelect == false)
                                            {
                                                var valMultiSelect =
                                                filterValResult.Where(a => a.AttributeId == attributeID)
                                                    .Select(a => a.Value)
                                                    .ToList();
                                                var valMultiLevel =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Level)
                                                        .ToList();
                                                string inMultiClause = "("
                                                                           +
                                                                               String.Join(",",
                                                                               valMultiSelect.Select(x => x.ToString())
                                                                                   .ToArray())
                                                       + ")";


                                                if (attributeID == (int)SystemDefinedAttributes.ObjectiveType)
                                                {
                                                    multiSelectTblQry.Append(
                                                        " SELECT po.id FROM PM_Objective po  where po.TypeID in" +
                                                        inMultiClause +
                                                        " INTERSECT ");
                                                }
                                                else if (attributeID == (int)SystemDefinedAttributes.ObjectiveStatus)
                                                {
                                                    multiSelectTblQry.Append(
                                                        " SELECT po.id FROM PM_Objective po  where po.ObjectiveStatus in" +
                                                            inMultiClause +
                                                            " INTERSECT ");
                                                }
                                                else
                                                {
                                                    string inMultiLevel = "("
                                                                              +
                                                                                  String.Join(",",
                                                                                  valMultiLevel.Select(x => x.ToString())
                                                                                      .ToArray())
                                                       + ")";

                                                    //multiSelectTblQry.Append(" SELECT -" + FilterValue + " AS id, " + FilterValue + " AS optid UNION ALL ");

                                                    multiSelectTblQry.Append(
                                                        " SELECT DISTINCT mms.EntityID as id, mms.OptionID AS optid, mo.Caption AS optcap FROM MM_MultiSelect mms INNER JOIN MM_Option mo ON mo.ID = mms.OptionID INNER JOIN( ");
                                                    multiSelectTblQry.Append("select DynamicEntittype.id from (" + dynamicTblQry.ToString() + ") DynamicEntittype)DynamicEntittype1 ");
                                                    multiSelectTblQry.Append("ON mms.EntityID = DynamicEntittype1.id  WHERE (mms.AttributeID = " +
                                                                             attributeID.ToString() + " AND mms.OptionID IN" +
                                                                             inMultiClause + ") ");

                                                    //attributegroupEntityTblQry.Append(" UNION ALL SELECT -" + FilterValue + ",0," + newValidEntityTypes[0] + ",1,'-" + FilterValue + "',0,'',1,0,1,0,0,0 ");
                                                    //attributegroupEntitySortTblQry.Append(" UNION ALL SELECT -" + FilterValue + ",0,'',0,'',0,'',0,'',0,'',0,'',0,'',0,'',0,'',0,'' ");
                                                }
                                            }
                                            multiSelect = true;

                                            break;
                                        case AttributesList.DropDownTree:
                                            if (dropdowntree == false)
                                            {
                                                var valTreeSelect =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Value)
                                                        .ToList();
                                                var valTreeLevel =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Level)
                                                        .ToList();
                                                string inTreeClause = "("
                                                                          +
                                                                          String.Join(",",
                                                                              valTreeSelect.Select(x => x.ToString()).ToArray())
                                                    + ")";
                                                string inTreeLevel = "("
                                                                         +
                                                                         String.Join(",",
                                                                             valTreeLevel.Select(x => x.ToString()).ToArray())
                                                   + ")";
                                                treeTblQry.Append(
                                                    " SELECT DISTINCT mms.EntityID as id,mms.NodeID as optid,mtn.Caption as optcap FROM MM_TreeValue mms INNER JOIN MM_TreeNode mtn ON mms.NodeID = mtn.ID ");
                                                treeTblQry.Append(" INNER JOIN ( select DynamicEntittype.id from (" + dynamicTblQry.ToString() + ") DynamicEntittype)DynamicEntittype1 ");
                                                treeTblQry.Append(" ON mms.EntityID = DynamicEntittype1.id ");
                                                treeTblQry.Append(" WHERE (mms.AttributeID = " + attributeID.ToString() +
                                                                 " AND  mms.NodeID IN" + inTreeClause.ToString() +
                                                                 " AND  mms.LEVEL IN" + inTreeLevel + " )  ");
                                            }
                                            dropdowntree = true;
                                            break;
                                        case AttributesList.Tree:
                                            if (tree == false)
                                            {
                                                var valTreeSelect =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Value)
                                                        .ToList();
                                                var valTreeLevel =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Level)
                                                        .ToList();
                                                string inTreeClause = "("
                                                                          +
                                                                              String.Join(",",
                                                                              valTreeSelect.Select(x => x.ToString()).ToArray())
                                                    + ")";
                                                string inTreeLevel = "("
                                                                         +
                                                                             String.Join(",",
                                                                             valTreeLevel.Select(x => x.ToString()).ToArray())
                                                   + ")";
                                                treeTblQry.Append(
                                                   " SELECT DISTINCT mms.EntityID as id,mms.NodeID as optid,mtn.Caption as optcap FROM MM_TreeValue mms INNER JOIN MM_TreeNode mtn ON mms.NodeID = mtn.ID ");
                                                treeTblQry.Append(" INNER JOIN ( select DynamicEntittype.id from (" + dynamicTblQry.ToString() + ") DynamicEntittype)DynamicEntittype1 ");
                                                treeTblQry.Append(" ON mms.EntityID = DynamicEntittype1.id ");
                                                treeTblQry.Append(" WHERE (mms.AttributeID = " + attributeID.ToString() +
                                                                 " AND  mms.NodeID IN" + inTreeClause.ToString() +
                                                                 " AND  mms.LEVEL IN" + inTreeLevel + " )  ");
                                            }
                                            tree = true;
                                            break;
                                        case AttributesList.ListSingleSelection:

                                            var lstSpecialAttribute =
                                                tx.PersistenceManager.MetadataRepository.GetbyCriteria<AttributeDao>(
                                                        AttributeDao.PropertyNames.Id, AttributeDao.PropertyNames.IsSpecial,
                                                        attributeID, true);
                                            //var lstSpecialAttribute = listSetting.Attributes.Where(a => a.Id == attributeID && a.IsSpecial == true);
                                            var val =
                                                filterValResult.Where(a => a.AttributeId == attributeID)
                                                    .Select(a => a.Value)
                                                    .ToList();
                                            if (lstSpecialAttribute != null)
                                            {
                                                if (multiSelect == false)
                                                {
                                                    //var val = filterValResult.Where(a => a.AttributeId == attributeID).Select(a => a.Value).ToList();
                                                    if ((SystemDefinedAttributes)attributeID ==
                                                    SystemDefinedAttributes.EntityStatus)
                                                    {
                                                        string inClause = "("
                                                                              +
                                                                                  String.Join(",",
                                                                                  val.Select(x => x.ToString()).ToArray())
                                                         + ")";
                                                        singleSelectTblQry.Append(" SELECT ME.EntityID AS Id, MEO.ID AS optid, MEO.StatusOptions as optcap FROM MM_EntityStatus AS ME INNER JOIN MM_EntityTypeStatus_Options MEO ON ME.StatusID = MEO.ID ");
                                                        singleSelectTblQry.Append(" WHERE StatusID in " + inClause +
                                                                                  "   ");
                                                    }
                                                    else if ((SystemDefinedAttributes)attributeID ==
                                                    SystemDefinedAttributes.EntityOnTimeStatus)
                                                    {
                                                        string inClause = "("
                                                                          +
                                                                              String.Join(",",
                                                                              val.Select(x => x.ToString()).ToArray())
                                                     + ")";
                                                        singleSelectTblQry.Append(" SELECT EntityID as Id FROM MM_EntityStatus ");
                                                        singleSelectTblQry.Append(" WHERE IntimeStatus in " + inClause +
                                                                                  "  INTERSECT ");
                                                    }
                                                    else
                                                    {
                                                        string inClause = "("
                                                                              +
                                                                                  String.Join(",",
                                                                                  val.Select(x => x.ToString()).ToArray())
                                                           + ")";
                                                        singleSelectTblQry.Append(
                                                            " SELECT eru.EntityID as Id, uu.ID as optid, uu.FirstName + ' ' + uu.LastName as optcap FROM AM_Entity_Role_User eru inner join AM_EntityTypeRoleAcl acl on eru.RoleID=acl.ID INNER JOIN UM_User uu  ON uu.ID = eru.UserID ");
                                                        singleSelectTblQry.Append(" INNER JOIN( ");
                                                        singleSelectTblQry.Append(" select DynamicEntittype.id from (" + dynamicTblQry.ToString() + ") DynamicEntittype)DynamicEntittype1 ");
                                                        singleSelectTblQry.Append(" ON eru.EntityID = DynamicEntittype1.id ");
                                                        singleSelectTblQry.Append(" WHERE  USERID in " + inClause +
                                                                                " and acl.EntityRoleID=1  ");

                                                    }
                                                    OwnerId = true;
                                                }
                                            }
                                            else
                                            {
                                                if (multiSelect == false)
                                                {
                                                    string inClause = "("
                                                                          +
                                                                              String.Join(",", val.Select(x => x.ToString()).ToArray())
                                                     + ")";
                                                    singleSelectTblQry.Append(" SELECT DISTINCT singleSelect.Id, mo.ID AS optid, mo.Caption as optcap ");
                                                    singleSelectTblQry.Append(" FROM   MM_Option mo INNER JOIN( ");
                                                    bool isItFirstTime = false;
                                                    foreach (var lstEntitypes in newValidEntityTypes)
                                                    {
                                                        var lstEntiTypeAttribute = from entityResult in dao.ToList()
                                                                                   where
                                                                                       entityResult.AttributeID == attributeID &&
                                                                                       entityResult.EntityTypeID == lstEntitypes
                                                                                   select val;
                                                        if (lstEntiTypeAttribute.Count() > 0)
                                                        {
                                                            if (isItFirstTime == true)
                                                            {
                                                                singleSelectTblQry.Append(" union ");
                                                            }
                                                            singleSelectTblQry.Append(" SELECT mar_" + lstEntitypes + ".Attr_" +
                                                                                      attributeID + " as  Attr_" + attributeID +
                                                                                      ",mar_" + lstEntitypes +
                                                                                      ".id as Id from  MM_AttributeRecord_" +
                                                                                      lstEntitypes + "  mar_" + lstEntitypes +
                                                                                      " ");
                                                            isItFirstTime = true;
                                                        }

                                                    }
                                                    singleSelectTblQry.Append(") singleSelect ON  singleSelect.Attr_" +
                                                                              attributeID +
                                                                              " = mo.id " +
                                                                              " INNER JOIN( ");

                                                    singleSelectTblQry.Append(" select DynamicEntittype.id from (" + dynamicTblQry.ToString() + ") DynamicEntittype)DynamicEntittype1 ");
                                                    singleSelectTblQry.Append(" ON singleSelect.Id = DynamicEntittype1.id WHERE  mo.id in " + inClause);

                                                    singleSelect = true;
                                                }
                                            }
                                            multiSelect = true;
                                            break;
                                        case AttributesList.TreeMultiSelection:
                                            if (multiselecttree == false)
                                            {
                                                var valTreeSelect =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Value)
                                                        .ToList();
                                                var valTreeLevel =
                                                    filterValResult.Where(a => a.AttributeId == attributeID)
                                                        .Select(a => a.Level)
                                                        .ToList();
                                                string inTreeClause = "("
                                                                          +
                                                                              String.Join(",",
                                                                              valTreeSelect.Select(x => x.ToString()).ToArray())
                                                    + ")";
                                                string inTreeLevel = "("
                                                                         +
                                                                             String.Join(",",
                                                                             valTreeLevel.Select(x => x.ToString()).ToArray())
                                                   + ")";
                                                treeTblQry.Append(
                                                    " SELECT DISTINCT mms.EntityID as id FROM MM_TreeValue mms ");
                                                treeTblQry.Append(" WHERE (mms.AttributeID = " + attributeID.ToString() +
                                                                  " AND  mms.NodeID IN" + inTreeClause.ToString() +
                                                                  " AND  mms.LEVEL IN" + inTreeLevel + " ) INTERSECT ");
                                            }
                                            multiselecttree = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }



                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].StartDate != null &&
                                    filtervalues[0].StartDate.ToString() != "1990-01-01" &&
                                    filtervalues[0].StartDate != "")
                                {
                                    singleSelectTblQry.Append(" SELECT DISTINCT pep.EntityID AS ID FROM PM_EntityPeriod pep where 1=1 ");
                                    if (PeriodOptionValue == 1)
                                    {
                                        if (filtervalues[0].StartDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND convert(VARCHAR(10),pep.Startdate,111) <=convert(VARCHAR(10),'" + filtervalues[0].EndDate.ToString() + "',111)");
                                        if (filtervalues[0].EndDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" and  convert(VARCHAR(10),pep.EndDate,111) >= convert(VARCHAR(10),'" + filtervalues[0].StartDate.ToString() + "',111)");
                                    }
                                    else if (PeriodOptionValue == 2)
                                    {
                                        if (filtervalues[0].StartDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND  convert(VARCHAR(10),pep.Startdate,111)  >= convert(VARCHAR(10),'" + filtervalues[0].StartDate.ToString() + "',111) ");
                                        if (filtervalues[0].EndDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND convert(VARCHAR(10),pep.EndDate,111)  <= convert(VARCHAR(10),'" + filtervalues[0].EndDate.ToString() + "',111) ");
                                    }
                                    else if (PeriodOptionValue == 0)
                                    {
                                        if (filtervalues[0].StartDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND  convert(VARCHAR(10),pep.Startdate,111)  >= convert(VARCHAR(10),'" + filtervalues[0].StartDate.ToString() + "',111) ");
                                        if (filtervalues[0].EndDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND convert(VARCHAR(10),pep.EndDate,111)  <= convert(VARCHAR(10),'" + filtervalues[0].EndDate.ToString() + "',111) ");
                                    }
                                    singleSelectTblQry.Append(" INTERSECT ");
                                }
                            }
                            if (filterSettingValues.Count() > 0)
                            {
                                if ((filterSettingValues[0].StartDate != "" || filterSettingValues[0].EndDate != "") &&
                                    (filterSettingValues[0].StartDate != null || filterSettingValues[0].EndDate != null))
                                {
                                    var optionpriodvalue = (from vale in filterSettingValues where vale.AttributeTypeId == 10 select vale.Value).ToList();

                                    PeriodOptionValue = optionpriodvalue[0];
                                    singleSelectTblQry.Append(" SELECT DISTINCT pep.EntityID AS ID FROM PM_EntityPeriod pep where 1=1 ");
                                    if (PeriodOptionValue == 1)
                                    {
                                        if (filterSettingValues[0].StartDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND convert(VARCHAR(10),pep.Startdate,111) <=convert(VARCHAR(10),'" + filterSettingValues[0].EndDate.ToString() + "',111)");
                                        if (filterSettingValues[0].EndDate.ToString().Length > 0)
                                            singleSelectTblQry.Append("and  convert(VARCHAR(10),pep.EndDate,111) >= convert(VARCHAR(10),'" + filterSettingValues[0].StartDate.ToString() + "',111)");
                                    }
                                    else if (PeriodOptionValue == 2)
                                    {
                                        if (filterSettingValues[0].StartDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND  convert(VARCHAR(10),pep.Startdate,111)  >= convert(VARCHAR(10),'" + filterSettingValues[0].StartDate.ToString() + "',111) ");
                                        if (filterSettingValues[0].EndDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND convert(VARCHAR(10),pep.EndDate,111)  <= convert(VARCHAR(10),'" + filterSettingValues[0].EndDate.ToString() + "',111) ");
                                    }
                                    else if (PeriodOptionValue == 0)
                                    {
                                        if (filterSettingValues[0].StartDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND  convert(VARCHAR(10),pep.Startdate,111)  >= convert(VARCHAR(10),'" + filterSettingValues[0].StartDate.ToString() + "',111) ");
                                        if (filterSettingValues[0].EndDate.ToString().Length > 0)
                                            singleSelectTblQry.Append(" AND convert(VARCHAR(10),pep.EndDate,111)  <= convert(VARCHAR(10),'" + filterSettingValues[0].EndDate.ToString() + "',111) ");
                                    }
                                    singleSelectTblQry.Append(" INTERSECT ");
                                }
                            }
                            switch ((EntityTypeIDs)enumEntityTypeIds)
                            {
                                case EntityTypeIDs.Activity:
                                    TempTblQry.Append(" SELECT temptable.Id,pe.Level,pe.parentid,pe.UNIQUEKEY  ");
                                    break;
                                case EntityTypeIDs.Costcenre:
                                    TempTblQry.Append(" SELECT temptable.Id,coi.CostCenterID,pe.Level,pe.parentid,pe.UNIQUEKEY  ");
                                    break;
                                case EntityTypeIDs.Objective:
                                    TempTblQry.Append(" SELECT temptable.Id,oi.ObjectveID,pe.Level,pe.parentid,pe.UNIQUEKEY  ");
                                    break;
                                case EntityTypeIDs.AttributeGroupFilter:
                                    TempTblQry.Append(" SELECT temptable.Id,pe.Level,pe.parentid,pe.UNIQUEKEY,temptable.optid,temptable.optcap  ");
                                    break;
                                case EntityTypeIDs.AttributeGroupFilterInCostCentre:
                                    TempTblQry.Append(" SELECT temptable.Id,pe.Level,pe.parentid,pe.UNIQUEKEY,temptable.optid,temptable.optcap,cc1.CostCenterID  ");
                                    break;
                            }

                            TempTblQry.Append(" FROM   ( ");
                            if (multiSelectTblQry.ToString().Length > 0)
                                TempTblQry.Append(multiSelectTblQry.ToString());
                            if (treeTblQry.ToString().Length > 0)
                                TempTblQry.Append(treeTblQry.ToString());
                            if (periodTblQry.ToString().Length > 0)
                                TempTblQry.Append(periodTblQry.ToString());
                            if (singleSelectTblQry.ToString().Length > 0)
                                TempTblQry.Append(singleSelectTblQry.ToString());

                            if (EntityTypeIDs.AttributeGroupFilter == (EntityTypeIDs)enumEntityTypeIds || EntityTypeIDs.AttributeGroupFilterInCostCentre == (EntityTypeIDs)enumEntityTypeIds)
                            {
                                TempTblQry.Append(" ) temptable ");
                                TempTblQry.Append("   INNER JOIN PM_Entity pe ");
                                TempTblQry.Append("             ON  pe.ID = temptable.id ");

                                //topFilterQry.Append(attributegroupEntityTblQry.ToString());
                                //topFilterQry.Append(" ");
                                //topFilterQry.Append(attributegroupEntitySortTblQry.ToString());

                                //topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                                //topFilterQry.Append(" ( ");
                                //topFilterQry.Append("  EID,LEVEL,PEID,UNIQUEKEY,OPTIONID ");
                                //topFilterQry.Append(" ) ");

                            }
                            else
                            {
                                TempTblQry.Append("select DynamicEntittype.id from (" + dynamicTblQry.ToString() +
                                                  ") DynamicEntittype ");
                                TempTblQry.Append(" ) temptable ");
                                TempTblQry.Append("   INNER JOIN PM_Entity pe ");
                                TempTblQry.Append("             ON  pe.ID = temptable.id ");
                            }

                        }

                        else
                        {
                            //Entity Types looping

                            switch ((EntityTypeIDs)enumEntityTypeIds)
                            {
                                case EntityTypeIDs.Activity:
                                    TempTblQry.Append(" SELECT pe.Id,pe.Level,pe.parentid,pe.UNIQUEKEY  ");

                                    break;
                                case EntityTypeIDs.Costcenre:
                                    TempTblQry.Append(" SELECT pe.Id,coi.CostCenterID,pe.Level,pe.parentid,pe.UNIQUEKEY ");
                                    break;
                                case EntityTypeIDs.Objective:
                                    TempTblQry.Append(" SELECT pe.Id,oi.ObjectveID,pe.Level,pe.parentid,pe.UNIQUEKEY ");
                                    break;
                                case EntityTypeIDs.Calender:
                                    TempTblQry.Append(" SELECT pe.Id,oi.CalenderID,pe.Level,pe.parentid,pe.UNIQUEKEY ");
                                    break;
                            }
                            TempTblQry.Append(" from PM_Entity pe ");

                        }

                        if (EntityTypeIDs.Activity == (EntityTypeIDs)enumEntityTypeIds)
                        {

                            TempTblQry.Append("   INNER JOIN PM_Entity_Sort pes ");
                            TempTblQry.Append("   ON  pe.ID = pes.id ");
                            TempTblQry.Append("   AND pe.Active = 1  ");
                            if (listSetting.EntityTypes != null)
                            {
                                string inClause = "("
                                                      +
                                                      String.Join(",",
                                                          listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                              + ")";
                                TempTblQry.Append(" and pe.TypeID in " + inClause);
                            }

                            if (UserID != 0)
                            {
                                TempTblQry.Append("  AND pe.id in( SELECT DISTINCT(pe1.id) from PM_Entity pe1 INNER JOIN AM_Entity_Role_User aeru ");
                                TempTblQry.Append("   ON   pe1.id=aeru.EntityID  AND aeru.UserID = " + UserID.ToString() + ") ");

                                //TempTblQry.Append(" INNER JOIN  ");
                                //TempTblQry.Append("     AM_Entity_Role_User aeru ON  aeru.EntityID = pe.id and aeru.UserID=" + UserID.ToString());

                            }



                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].Keyword.ToString() != "")
                                {
                                    TempTblQry.Append("  and pe.Name LIKE '%" + filtervalues[0].Keyword.ToString() + "%'");
                                }
                            }
                            else if (filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).Keyword != "")
                                {
                                    TempTblQry.Append("  and pe.Name LIKE '%" + filterSettingValues.ElementAt(0).Keyword.ToString() + "%'");
                                }
                            }



                            topFilterQry.Append(TempTblQry.ToString());
                            StringBuilder SortorderQry = new StringBuilder();

                            if (IdArr != null && IdArr.Length > 0)
                            {
                                var UniqueKeyCollection =
                                     tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                         .Where(a => IdArr.Contains(a.Id)).Select(a => a.UniqueKey).ToArray();

                                if (IncludeChildren == true)
                                {
                                    string inClause = "";
                                    inClause = "("
                                                           + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                         + ")";
                                    SortorderQry.Append(" where (pe.Id in " + inClause);
                                    if (IsSingleID == false)
                                    {
                                        foreach (var UniquekeyVal in UniqueKeyCollection)
                                        {
                                            SortorderQry.Append(" or pe.UniqueKey  like '" + UniquekeyVal +
                                                                ".%'  ");
                                        }

                                    }
                                    SortorderQry.Append(")");
                                }
                                else
                                {
                                    if (FilterID == 0 && filterSettingValues.Count() == 0)
                                    {
                                        SortorderQry.Append(" where pe.ParentID =" + IdArr[0]);
                                    }
                                    else
                                    {
                                        string inClause = "";
                                        inClause = "("
                                                               + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                             + ")";
                                        SortorderQry.Append(" where (pe.Id in " + inClause);
                                        foreach (var UniquekeyVal in UniqueKeyCollection)
                                        {
                                            SortorderQry.Append(" or pe.UniqueKey  like '" + UniquekeyVal +
                                                                ".%' ");
                                        }
                                        SortorderQry.Append(")");
                                    }
                                }
                            }


                            SortorderQry.Append("   ORDER BY ");
                            SortorderQry.Append("        pes.S1   ASC, ");
                            SortorderQry.Append("        pes.L1   ASC, ");
                            SortorderQry.Append("        pes.S2   ASC, ");
                            SortorderQry.Append("        pes.L2   ASC, ");
                            SortorderQry.Append("        pes.S3   ASC, ");
                            SortorderQry.Append("        pes.L3   ASC, ");
                            SortorderQry.Append("        pes.S4   ASC, ");
                            SortorderQry.Append("        pes.L4   ASC, ");
                            SortorderQry.Append("        pes.S5   ASC, ");
                            SortorderQry.Append("        pes.L5   ASC, ");
                            SortorderQry.Append("        pes.S6   ASC, ");
                            SortorderQry.Append("        pes.L6   ASC, ");
                            SortorderQry.Append("        pes.S7   ASC, ");
                            SortorderQry.Append("        pes.L7   ASC, ");
                            SortorderQry.Append("        pes.S8   ASC, ");
                            SortorderQry.Append("        pes.L8   ASC, ");
                            SortorderQry.Append("        pes.S9   ASC, ");
                            SortorderQry.Append("        pes.L9   ASC, ");
                            SortorderQry.Append("        pes.S10  ASC, ");
                            SortorderQry.Append("        pes.L10  ASC ");
                            //SortorderQry.Append(" ORDER BY pe.UniqueKey ");

                            //sort order query building
                            if (SortOrderColumn.Length > 0)
                            {
                                SortorderQry.Remove(0, SortorderQry.Length);
                                bool status = false;
                                for (int fj = 0; fj < listSetting.Attributes.Count; fj++)
                                {
                                    if (status == false)
                                    {
                                        if (SortOrderColumn == listSetting.Attributes[fj].Field)
                                        {
                                            int attributeID = listSetting.Attributes[fj].Id;
                                            int attributeTypeID = listSetting.Attributes[fj].Type;
                                            string attributeColumn = listSetting.Attributes[fj].Field;
                                            if (listSetting.Attributes[fj].IsSpecial == true)
                                            {
                                                switch ((SystemDefinedAttributes)listSetting.Attributes[fj].Id)
                                                {
                                                    case SystemDefinedAttributes.Owner:
                                                        SortorderQry.Append(
                                                            "LEFT OUTER JOIN (SELECT aeru.EntityID AS EntityID, (ISNULL(us.FirstName,'') + ' ' + ISNULL(us.LastName,'')) AS VALUE  FROM UM_User us INNER JOIN AM_Entity_Role_User aeru ON us.ID=aeru.UserID INNER JOIN AM_EntityTypeRoleAcl aetra ON aeru.RoleID=aetra.ID AND aetra.EntityRoleID=1");
                                                        SortorderQry.Append("    ) AS so");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                        status = true;
                                                        break;
                                                    case SystemDefinedAttributes.EntityOnTimeStatus:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");
                                                        SortorderQry.Append(" 	SELECT pe2.id  AS  EntityID,");
                                                        SortorderQry.Append("  (SELECT CASE ");
                                                        SortorderQry.Append("                     WHEN (");
                                                        SortorderQry.Append("       SELECT mes.IntimeStatus");
                                                        SortorderQry.Append("            FROM   MM_EntityStatus mes");
                                                        SortorderQry.Append("                    WHERE  mes.EntityID = pe2.id");
                                                        SortorderQry.Append("                 ) = 0 THEN 'On time'");
                                                        SortorderQry.Append("             WHEN ( ");
                                                        SortorderQry.Append("                        SELECT mes.IntimeStatus ");
                                                        SortorderQry.Append("                        FROM   MM_EntityStatus mes ");
                                                        SortorderQry.Append("                          WHERE  mes.EntityID = pe2.id ");
                                                        SortorderQry.Append("                       ) = 1 THEN 'Delayed' ");
                                                        SortorderQry.Append("                   WHEN ( ");
                                                        SortorderQry.Append("                            SELECT mes.IntimeStatus ");
                                                        SortorderQry.Append("                             FROM   MM_EntityStatus mes ");
                                                        SortorderQry.Append("                                      WHERE  mes.EntityID = pe2.id ");
                                                        SortorderQry.Append("                                    ) = 2 THEN 'On hold' ");
                                                        SortorderQry.Append("                               ELSE 'On time' ");
                                                        SortorderQry.Append("                          END  ) as VALUE ");
                                                        SortorderQry.Append("        	FROM  MM_EntityStatus mes INNER JOIN PM_Entity pe2  ");
                                                        SortorderQry.Append("        	ON  mes.EntityID = pe2.id ");
                                                        SortorderQry.Append("             ) AS so ");
                                                        SortorderQry.Append("             ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                    case SystemDefinedAttributes.EntityStatus:
                                                        SortorderQry.Append("LEFT OUTER JOIN (SELECT mes.EntityID AS entityid, metso.StatusOptions AS VALUE FROM   MM_EntityStatus mes");
                                                        SortorderQry.Append("   INNER JOIN MM_EntityTypeStatus_Options metso ON  mes.StatusID = metso.ID AND metso.IsRemoved = 0 ) AS so");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                        status = true;
                                                        break;
                                                }
                                            }

                                            else if ((AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.ListMultiSelection ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.DropDownTree ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.Tree ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.Period ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.TreeMultiSelection)
                                            {
                                                switch ((AttributesList)listSetting.Attributes[fj].Type)
                                                {
                                                    case AttributesList.ListMultiSelection:
                                                        SortorderQry.Append(" LEFT OUTER JOIN (  ");
                                                        SortorderQry.Append(" SELECT mms.EntityID,  ");
                                                        SortorderQry.Append("   STUFF(  ");
                                                        SortorderQry.Append("  (  ");
                                                        SortorderQry.Append("   SELECT ', ' + mo.Caption  ");
                                                        SortorderQry.Append("      FROM   MM_MultiSelect mms2  ");
                                                        SortorderQry.Append("           INNER JOIN MM_Option mo  ");
                                                        SortorderQry.Append(
                                                            "                  ON  mms2.OptionID = mo.ID  ");
                                                        SortorderQry.Append(
                                                            "       WHERE  mms2.EntityID = mms.EntityID  ");
                                                        SortorderQry.Append("              FOR XML PATH('')  ");
                                                        SortorderQry.Append("    ),  ");
                                                        SortorderQry.Append("    1,  ");
                                                        SortorderQry.Append("   2,  ");
                                                        SortorderQry.Append("    ''  ");
                                                        SortorderQry.Append("       )               AS VALUE  ");
                                                        SortorderQry.Append("      FROM   MM_MultiSelect     mms  ");
                                                        SortorderQry.Append("    WHERE  mms.AttributeID = " +
                                                                            attributeID.ToString() + "  ");
                                                        SortorderQry.Append("     GROUP BY  ");
                                                        SortorderQry.Append("             mms.EntityID  ");
                                                        SortorderQry.Append("   ) AS so  ");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID  ");
                                                        status = true;

                                                        break;
                                                    case AttributesList.DropDownTree:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");

                                                        SortorderQry.Append("  SELECT mtv.EntityID, ");
                                                        SortorderQry.Append(" mtn.Caption AS value ");
                                                        SortorderQry.Append(" FROM   MM_TreeNode mtn ");
                                                        SortorderQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                                        SortorderQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                                        SortorderQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                                        SortorderQry.Append("  AND mtn.Level =  " +
                                                                                listSetting.Attributes[fj].Level);
                                                        SortorderQry.Append("  WHERE  mtv.AttributeID = " +
                                                                            attributeID.ToString());
                                                        SortorderQry.Append("  ) AS so ");
                                                        SortorderQry.Append("  ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                    case AttributesList.Tree:
                                                        SortorderQry.Append(" STUFF((SELECT ', ' + mmt.Caption FROM MM_TreeValue mtv INNER JOIN MM_TreeNode mmt ON mmt.ID = mtv.NodeID AND mtv.AttributeID = " + listSetting.Attributes[fj].Field + " WHERE mtv.EntityID = pe.ID ORDER BY mmt.[KEY] FOR XML PATH('')), 1, 2, '') as '" +
                                                                            listSetting.Attributes[fj].Field + "'");
                                                        status = true;
                                                        break;
                                                    case AttributesList.Period:
                                                        SortorderQry.Append(
                                                            " ( SELECT CONVERT(NVARCHAR(10), MIN(pep.StartDate), 120) FROM   PM_EntityPeriod pep  WHERE  pep.EntityID = subtbl.Id  ) AS Startdate, ");
                                                        SortorderQry.Append(
                                                            " ( SELECT CONVERT(NVARCHAR(10), MAX(pep.EndDate), 120) FROM   PM_EntityPeriod pep WHERE  pep.EntityID = subtbl.Id )  AS Enddate ");
                                                        status = true;
                                                        break;
                                                    case AttributesList.TreeMultiSelection:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");

                                                        SortorderQry.Append("  SELECT mtv.EntityID, ");
                                                        SortorderQry.Append(" mtn.Caption AS value ");
                                                        SortorderQry.Append(" FROM   MM_TreeNode mtn ");
                                                        SortorderQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                                        SortorderQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                                        SortorderQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                                        SortorderQry.Append("  AND mtn.Level =  " +
                                                                                listSetting.Attributes[fj].Level);
                                                        SortorderQry.Append("  WHERE  mtv.AttributeID = " +
                                                                            attributeID.ToString());
                                                        SortorderQry.Append("  ) AS so ");
                                                        SortorderQry.Append("  ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                }
                                            }
                                            else if ((AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.ListSingleSelection)
                                            {
                                                SortorderQry.Append("   LEFT OUTER JOIN ( ");
                                                SortorderQry.Append(
                                                    "   SELECT subtbl.id  AS EntityID,mo.Caption   AS VALUE ");

                                                SortorderQry.Append("  FROM   ( ");
                                                for (int fi = 0; fi < newValidEntityTypes.Count; fi++)
                                                {
                                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                                               where
                                                                                   val.AttributeID == attributeID &&
                                                                                   val.EntityTypeID == newValidEntityTypes[fi]
                                                                               select val;
                                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                                    {
                                                        SortorderQry.Append(" SELECT id, attr_" + attributeColumn +
                                                                            " as attr_" + attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    else
                                                    {
                                                        SortorderQry.Append(" SELECT id, null as attr_" +
                                                                            attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    ;
                                                    if ((fi < newValidEntityTypes.Count - 1))
                                                    {
                                                        SortorderQry.Append(" UNION ALL ");
                                                    }
                                                }
                                                SortorderQry.Append("  ) AS subtbl ");
                                                SortorderQry.Append(" INNER JOIN MM_Option mo ");
                                                SortorderQry.Append(" ON  mo.AttributeID = " +
                                                                    attributeID.ToString());
                                                SortorderQry.Append(" AND mo.ID = subtbl.attr_" + attributeColumn);
                                                SortorderQry.Append("    ) AS so");
                                                SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                status = true;
                                            }
                                            else if ((AttributesList)listSetting.Attributes[fj].Type ==
                                                AttributesList.EntityOverviewStatus)
                                            {
                                                //We shold not fetch the value form the Attribute record for this type and need to be diffenrent

                                            }
                                            else
                                            {
                                                SortorderQry.Append("   LEFT OUTER JOIN ( ");
                                                SortorderQry.Append(
                                                    "   SELECT subtbl.id       AS EntityID,subtbl.attr_" + attributeID +
                                                    "  AS VALUE ");

                                                SortorderQry.Append("  FROM   ( ");
                                                for (int fi = 0; fi < newValidEntityTypes.Count; fi++)
                                                {
                                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                                               where
                                                                                   val.AttributeID == attributeID &&
                                                                                   val.EntityTypeID == newValidEntityTypes[fi]
                                                                               select val;
                                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                                    {
                                                        SortorderQry.Append(" SELECT id, attr_" + attributeColumn +
                                                                            " as attr_" + attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    else
                                                    {
                                                        SortorderQry.Append(" SELECT id, null as attr_" +
                                                                            attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    ;
                                                    if ((fi < newValidEntityTypes.Count - 1))
                                                    {
                                                        SortorderQry.Append(" UNION ALL ");
                                                    }
                                                }
                                                SortorderQry.Append("  ) AS subtbl ");
                                                SortorderQry.Append(" ) AS so ");
                                                SortorderQry.Append(" ON  so.EntityID = pe.ID ");

                                                status = true;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (IdArr != null && IdArr.Length > 0)
                                {
                                    if (IncludeChildren == true)
                                    {
                                        string inClause = "("
                                                        + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                      + ")";
                                        SortorderQry.Append(" where pe.Id in " + inClause);
                                        if (IsSingleID == false)
                                        {
                                            SortorderQry.Append(" or pe.ParentID  in " + inClause);
                                        }
                                    }
                                    else
                                    {
                                        SortorderQry.Append(" where pe.ParentID =" + IdArr[0]);
                                    }
                                }
                                SortorderQry.Append("  ORDER BY so.value " + (IsDesc == true ? " desc " : "") + " ");
                            }

                            topFilterQry.Append(SortorderQry.ToString());

                            if (IsAttributegroupfilter)
                                topFilterQry.Append(" SELECT ID, EID,LEVEL,PEID,UNIQUEKEY,OPTIONID FROM @EntityOrderIDs ");
                            else
                                topFilterQry.Append(" SELECT ID, EID,LEVEL,PEID,UNIQUEKEY FROM @EntityOrderIDs ");
                            //topFilterQry over here for getting all the filter id

                            //s3.Stop();
                            //strStringText.Append("-------------- Entity query executionstart End s3 " + s3.Elapsed.TotalMilliseconds + "-------").Append("\n");


                            //var s7 = Stopwatch.StartNew();
                            //strStringText.Append("-------------- Entity query executionstart nhibernate  start s7 row no." + StartRowNo + "-------").Append("\n");

                            CollectedIdsResult =
                               tx.PersistenceManager.MetadataRepository.ExecuteQuery(topFilterQry.ToString())
                                   .Cast<Hashtable>().ToList();

                            //s7.Stop();
                            //strStringText.Append("-------------- Entity query executionstart nhibernate End s7 " + s7.Elapsed.TotalMilliseconds + "-------").Append("\n");


                            //var s8 = Stopwatch.StartNew();
                            //strStringText.Append("-------------- Entity query filldata  start s8 row no." + StartRowNo + "-------").Append("\n");

                            if (CollectedIdsResult != null && CollectedIdsResult.Count() > 0)
                            {
                                IList<ISortOrderIdsCollection> SortCollectionobj = new List<ISortOrderIdsCollection>();

                                if (IsAttributegroupfilter)
                                {
                                    foreach (var CurrentsortId in CollectedIdsResult)
                                    {
                                        SortCollectionobj.Add(new SortOrderIdsCollection
                                        {
                                            Id = Convert.ToInt32(CurrentsortId["ID"]),
                                            EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                            Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                            ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                            InterMediateID = 0,
                                            UniqueKey = Convert.ToString(CurrentsortId["UNIQUEKEY"]),
                                            OptionID = Convert.ToInt32(CurrentsortId["OPTIONID"])
                                        });
                                    }
                                }
                                else
                                {
                                    foreach (var CurrentsortId in CollectedIdsResult)
                                    {
                                        SortCollectionobj.Add(new SortOrderIdsCollection
                                        {
                                            Id = Convert.ToInt32(CurrentsortId["ID"]),
                                            EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                            Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                            ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                            InterMediateID = 0,
                                            UniqueKey = Convert.ToString(CurrentsortId["UNIQUEKEY"])
                                        });
                                    }
                                }
                                proxy.MarcomManager.EntitySortorderIdColle = SortCollectionobj;
                            }
                            else
                            {
                                proxy.MarcomManager.EntitySortorderIdColle = null;
                                proxy.MarcomManager.EntitySortorderIdColleHash = SearchCriteriaHash;
                                tx.Commit();
                                return null;
                            }

                            //s8.Stop();
                            //strStringText.Append("-------------- Entity query filldata nhibernate End s8 " + s8.Elapsed.TotalMilliseconds + "-------").Append("\n");

                        }
                        else if (EntityTypeIDs.AttributeGroupFilter == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            string optionClause = "";
                            StringBuilder AttrCCfilter = new StringBuilder();
                            //TempTblQry.Append("   INNER JOIN @TempEntitySortTable pes ");

                            TempTblQry.Append("   INNER JOIN PM_Entity_Sort pes ");
                            TempTblQry.Append("   ON  pe.ID = pes.id ");
                            TempTblQry.Append("   AND pe.Active = 1  ");
                            if (listSetting.EntityTypes != null)
                            {
                                optionClause = String.Join(",", filterSettingValues.Select(x => "-" + x.Value.ToString()).ToArray());

                                string inClause = "("
                                                      +
                                                      String.Join(",",
                                                          listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                              + ")";
                                TempTblQry.Append(" and pe.TypeID in " + inClause);

                            }

                            if (UserID != 0)
                            {
                                TempTblQry.Append("  AND pe.id in( SELECT DISTINCT(pe1.id) from PM_Entity pe1 INNER JOIN AM_Entity_Role_User aeru ");
                                TempTblQry.Append("   ON   pe1.id=aeru.EntityID  AND aeru.UserID = " + UserID.ToString() + ") ");

                                //TempTblQry.Append(" INNER JOIN  ");
                                //TempTblQry.Append("     AM_Entity_Role_User aeru ON  aeru.EntityID = pe.id and aeru.UserID=" + UserID.ToString());

                            }

                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].Keyword.ToString() != "")
                                {
                                    TempTblQry.Append("  and pe.Name LIKE '%" + filtervalues[0].Keyword.ToString() + "%'");
                                }
                            }
                            else if (filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).Keyword != "")
                                {
                                    TempTblQry.Append("  and pe.Name LIKE '%" + filterSettingValues.ElementAt(0).Keyword.ToString() + "%'");
                                }
                            }

                            topFilterQry.Append(TempTblQry.ToString());
                            StringBuilder SortorderQry = new StringBuilder();


                            if (IdArr != null && IdArr.Length > 0)
                            {
                                var UniqueKeyCollection =
                                     tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                         .Where(a => IdArr.Contains(a.Id)).Select(a => a.UniqueKey).ToArray();

                                if (IncludeChildren == true)
                                {
                                    string inClause = "";
                                    inClause = "("
                                                        + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                      + ")";


                                    //inClause = "("
                                    //                       + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                    //                     + "," + optionClause + ")";

                                    SortorderQry.Append(" where (pe.Id in " + inClause);
                                    if (IsSingleID == false)
                                    {
                                        foreach (var UniquekeyVal in UniqueKeyCollection)
                                        {
                                            SortorderQry.Append(" or pe.UniqueKey  like '" + UniquekeyVal +
                                                                ".%'  ");
                                        }

                                    }
                                    SortorderQry.Append(")");
                                }
                                else
                                {
                                    if (FilterID == 0 && filterSettingValues.Count() == 0)
                                    {
                                        SortorderQry.Append(" where pe.ParentID =" + IdArr[0]);
                                    }
                                    else
                                    {
                                        string inClause = "";
                                        inClause = "("
                                                               + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                             + ")";
                                        SortorderQry.Append(" where (pe.Id in " + inClause);
                                        foreach (var UniquekeyVal in UniqueKeyCollection)
                                        {
                                            SortorderQry.Append(" or pe.UniqueKey  like '" + UniquekeyVal +
                                                                ".%' ");
                                        }
                                        SortorderQry.Append(")");
                                    }
                                }
                            }


                            SortorderQry.Append("   ORDER BY ");
                            SortorderQry.Append("        temptable.optid ASC, ");
                            SortorderQry.Append("        pes.S1   ASC, ");
                            SortorderQry.Append("        pes.L1   ASC, ");
                            SortorderQry.Append("        pes.S2   ASC, ");
                            SortorderQry.Append("        pes.L2   ASC, ");
                            SortorderQry.Append("        pes.S3   ASC, ");
                            SortorderQry.Append("        pes.L3   ASC, ");
                            SortorderQry.Append("        pes.S4   ASC, ");
                            SortorderQry.Append("        pes.L4   ASC, ");
                            SortorderQry.Append("        pes.S5   ASC, ");
                            SortorderQry.Append("        pes.L5   ASC, ");
                            SortorderQry.Append("        pes.S6   ASC, ");
                            SortorderQry.Append("        pes.L6   ASC, ");
                            SortorderQry.Append("        pes.S7   ASC, ");
                            SortorderQry.Append("        pes.L7   ASC, ");
                            SortorderQry.Append("        pes.S8   ASC, ");
                            SortorderQry.Append("        pes.L8   ASC, ");
                            SortorderQry.Append("        pes.S9   ASC, ");
                            SortorderQry.Append("        pes.L9   ASC, ");
                            SortorderQry.Append("        pes.S10  ASC, ");
                            SortorderQry.Append("        pes.L10  ASC ");

                            //SortorderQry.Append(" ORDER BY pe.UniqueKey ");

                            //sort order query building
                            if (SortOrderColumn.Length > 0)
                            {
                                SortorderQry.Remove(0, SortorderQry.Length);
                                bool status = false;
                                for (int fj = 0; fj < listSetting.Attributes.Count; fj++)
                                {
                                    if (status == false)
                                    {
                                        if (SortOrderColumn == listSetting.Attributes[fj].Field)
                                        {
                                            int attributeID = listSetting.Attributes[fj].Id;
                                            int attributeTypeID = listSetting.Attributes[fj].Type;
                                            string attributeColumn = listSetting.Attributes[fj].Field;
                                            if (listSetting.Attributes[fj].IsSpecial == true)
                                            {
                                                switch ((SystemDefinedAttributes)listSetting.Attributes[fj].Id)
                                                {
                                                    case SystemDefinedAttributes.Owner:
                                                        SortorderQry.Append(
                                                            "LEFT OUTER JOIN (SELECT aeru.EntityID AS EntityID, (ISNULL(us.FirstName,'') + ' ' + ISNULL(us.LastName,'')) AS VALUE  FROM UM_User us INNER JOIN AM_Entity_Role_User aeru ON us.ID=aeru.UserID INNER JOIN AM_EntityTypeRoleAcl aetra ON aeru.RoleID=aetra.ID AND aetra.EntityRoleID=1");
                                                        SortorderQry.Append("    ) AS so");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                        status = true;
                                                        break;
                                                    case SystemDefinedAttributes.EntityOnTimeStatus:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");
                                                        SortorderQry.Append(" 	SELECT pe2.id  AS  EntityID,");
                                                        SortorderQry.Append("  (SELECT CASE ");
                                                        SortorderQry.Append("                     WHEN (");
                                                        SortorderQry.Append("       SELECT mes.IntimeStatus");
                                                        SortorderQry.Append("            FROM   MM_EntityStatus mes");
                                                        SortorderQry.Append("                    WHERE  mes.EntityID = pe2.id");
                                                        SortorderQry.Append("                 ) = 0 THEN 'On time'");
                                                        SortorderQry.Append("             WHEN ( ");
                                                        SortorderQry.Append("                        SELECT mes.IntimeStatus ");
                                                        SortorderQry.Append("                        FROM   MM_EntityStatus mes ");
                                                        SortorderQry.Append("                          WHERE  mes.EntityID = pe2.id ");
                                                        SortorderQry.Append("                       ) = 1 THEN 'Delayed' ");
                                                        SortorderQry.Append("                   WHEN ( ");
                                                        SortorderQry.Append("                            SELECT mes.IntimeStatus ");
                                                        SortorderQry.Append("                             FROM   MM_EntityStatus mes ");
                                                        SortorderQry.Append("                                      WHERE  mes.EntityID = pe2.id ");
                                                        SortorderQry.Append("                                    ) = 2 THEN 'On hold' ");
                                                        SortorderQry.Append("                               ELSE 'On time' ");
                                                        SortorderQry.Append("                          END  ) as VALUE ");
                                                        SortorderQry.Append("        	FROM  MM_EntityStatus mes INNER JOIN PM_Entity pe2  ");
                                                        SortorderQry.Append("        	ON  mes.EntityID = pe2.id ");
                                                        SortorderQry.Append("             ) AS so ");
                                                        SortorderQry.Append("             ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                    case SystemDefinedAttributes.EntityStatus:
                                                        SortorderQry.Append("LEFT OUTER JOIN (SELECT mes.EntityID AS entityid, metso.StatusOptions AS VALUE FROM   MM_EntityStatus mes");
                                                        SortorderQry.Append("   INNER JOIN MM_EntityTypeStatus_Options metso ON  mes.StatusID = metso.ID AND metso.IsRemoved = 0 ) AS so");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                        status = true;
                                                        break;
                                                }
                                            }

                                            else if ((AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.ListMultiSelection ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.DropDownTree ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.Tree ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.Period ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.TreeMultiSelection)
                                            {
                                                switch ((AttributesList)listSetting.Attributes[fj].Type)
                                                {
                                                    case AttributesList.ListMultiSelection:
                                                        SortorderQry.Append(" LEFT OUTER JOIN (  ");
                                                        SortorderQry.Append(" SELECT mms.EntityID,  ");
                                                        SortorderQry.Append("   STUFF(  ");
                                                        SortorderQry.Append("  (  ");
                                                        SortorderQry.Append("   SELECT ', ' + mo.Caption  ");
                                                        SortorderQry.Append("      FROM   MM_MultiSelect mms2  ");
                                                        SortorderQry.Append("           INNER JOIN MM_Option mo  ");
                                                        SortorderQry.Append(
                                                            "                  ON  mms2.OptionID = mo.ID  ");
                                                        SortorderQry.Append(
                                                            "       WHERE  mms2.EntityID = mms.EntityID  ");
                                                        SortorderQry.Append("              FOR XML PATH('')  ");
                                                        SortorderQry.Append("    ),  ");
                                                        SortorderQry.Append("    1,  ");
                                                        SortorderQry.Append("   2,  ");
                                                        SortorderQry.Append("    ''  ");
                                                        SortorderQry.Append("       )               AS VALUE  ");
                                                        SortorderQry.Append("      FROM   MM_MultiSelect     mms  ");
                                                        SortorderQry.Append("    WHERE  mms.AttributeID = " +
                                                                            attributeID.ToString() + "  ");
                                                        SortorderQry.Append("     GROUP BY  ");
                                                        SortorderQry.Append("             mms.EntityID  ");
                                                        SortorderQry.Append("   ) AS so  ");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID  ");
                                                        status = true;

                                                        break;
                                                    case AttributesList.DropDownTree:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");

                                                        SortorderQry.Append("  SELECT mtv.EntityID, ");
                                                        SortorderQry.Append(" mtn.Caption AS value ");
                                                        SortorderQry.Append(" FROM   MM_TreeNode mtn ");
                                                        SortorderQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                                        SortorderQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                                        SortorderQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                                        SortorderQry.Append("  AND mtn.Level =  " +
                                                                                listSetting.Attributes[fj].Level);
                                                        SortorderQry.Append("  WHERE  mtv.AttributeID = " +
                                                                            attributeID.ToString());
                                                        SortorderQry.Append("  ) AS so ");
                                                        SortorderQry.Append("  ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                    case AttributesList.Tree:
                                                        SortorderQry.Append(" 'IsTree' as '" +
                                                                                listSetting.Attributes[fj].Field + "'");
                                                        status = true;
                                                        break;
                                                    case AttributesList.Period:
                                                        SortorderQry.Append(
                                                            " ( SELECT CONVERT(NVARCHAR(10), MIN(pep.StartDate), 120) FROM   PM_EntityPeriod pep  WHERE  pep.EntityID = subtbl.Id  ) AS Startdate, ");
                                                        SortorderQry.Append(
                                                            " ( SELECT CONVERT(NVARCHAR(10), MAX(pep.EndDate), 120) FROM   PM_EntityPeriod pep WHERE  pep.EntityID = subtbl.Id )  AS Enddate ");
                                                        status = true;
                                                        break;
                                                    case AttributesList.TreeMultiSelection:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");

                                                        SortorderQry.Append("  SELECT mtv.EntityID, ");
                                                        SortorderQry.Append(" mtn.Caption AS value ");
                                                        SortorderQry.Append(" FROM   MM_TreeNode mtn ");
                                                        SortorderQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                                        SortorderQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                                        SortorderQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                                        SortorderQry.Append("  AND mtn.Level =  " +
                                                                                listSetting.Attributes[fj].Level);
                                                        SortorderQry.Append("  WHERE  mtv.AttributeID = " +
                                                                            attributeID.ToString());
                                                        SortorderQry.Append("  ) AS so ");
                                                        SortorderQry.Append("  ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                }
                                            }
                                            else if ((AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.ListSingleSelection)
                                            {
                                                SortorderQry.Append("   LEFT OUTER JOIN ( ");
                                                SortorderQry.Append(
                                                    "   SELECT subtbl.id  AS EntityID,mo.Caption   AS VALUE ");

                                                SortorderQry.Append("  FROM   ( ");
                                                for (int fi = 0; fi < newValidEntityTypes.Count; fi++)
                                                {
                                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                                               where
                                                                                   val.AttributeID == attributeID &&
                                                                                   val.EntityTypeID == newValidEntityTypes[fi]
                                                                               select val;
                                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                                    {
                                                        SortorderQry.Append(" SELECT id, attr_" + attributeColumn +
                                                                            " as attr_" + attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    else
                                                    {
                                                        SortorderQry.Append(" SELECT id, null as attr_" +
                                                                            attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    ;
                                                    if ((fi < newValidEntityTypes.Count - 1))
                                                    {
                                                        SortorderQry.Append(" UNION ALL ");
                                                    }
                                                }
                                                SortorderQry.Append("  ) AS subtbl ");
                                                SortorderQry.Append(" INNER JOIN MM_Option mo ");
                                                SortorderQry.Append(" ON  mo.AttributeID = " +
                                                                    attributeID.ToString());
                                                SortorderQry.Append(" AND mo.ID = subtbl.attr_" + attributeColumn);
                                                SortorderQry.Append("    ) AS so");
                                                SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                status = true;
                                            }
                                            else
                                            {
                                                SortorderQry.Append("   LEFT OUTER JOIN ( ");
                                                SortorderQry.Append(
                                                    "   SELECT subtbl.id       AS EntityID,subtbl.attr_" + attributeID +
                                                    "  AS VALUE ");

                                                SortorderQry.Append("  FROM   ( ");
                                                for (int fi = 0; fi < newValidEntityTypes.Count; fi++)
                                                {
                                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                                               where
                                                                                   val.AttributeID == attributeID &&
                                                                                   val.EntityTypeID == newValidEntityTypes[fi]
                                                                               select val;
                                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                                    {
                                                        SortorderQry.Append(" SELECT id, attr_" + attributeColumn +
                                                                            " as attr_" + attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    else
                                                    {
                                                        SortorderQry.Append(" SELECT id, null as attr_" +
                                                                            attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    ;
                                                    if ((fi < newValidEntityTypes.Count - 1))
                                                    {
                                                        SortorderQry.Append(" UNION ALL ");
                                                    }
                                                }
                                                SortorderQry.Append("  ) AS subtbl ");
                                                SortorderQry.Append(" ) AS so ");
                                                SortorderQry.Append(" ON  so.EntityID = pe.ID ");

                                                status = true;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (IdArr != null && IdArr.Length > 0)
                                {
                                    if (IncludeChildren == true)
                                    {
                                        string inClause = "("
                                                        + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                      + ")";
                                        SortorderQry.Append(" where pe.Id in " + inClause);
                                        if (IsSingleID == false)
                                        {
                                            SortorderQry.Append(" or pe.ParentID  in " + inClause);
                                        }
                                    }
                                    else
                                    {
                                        SortorderQry.Append(" where pe.ParentID =" + IdArr[0]);
                                    }
                                }
                                SortorderQry.Append("  ORDER BY so.value " + (IsDesc == true ? " desc " : "") + " ");
                            }

                            topFilterQry.Append(SortorderQry.ToString());

                            topFilterQry.Append(" SELECT ID, EID,LEVEL,PEID,UNIQUEKEY,OptionID,OptionCaption FROM @EntityOrderIDs ");
                            //topFilterQry over here for getting all the filter id

                            //s3.Stop();
                            //strStringText.Append("-------------- Entity query executionstart End s3 " + s3.Elapsed.TotalMilliseconds + "-------").Append("\n");


                            //var s7 = Stopwatch.StartNew();
                            //strStringText.Append("-------------- Entity query executionstart nhibernate  start s7 row no." + StartRowNo + "-------").Append("\n");

                            CollectedIdsResult =
                               tx.PersistenceManager.MetadataRepository.ExecuteQuery(topFilterQry.ToString())
                                   .Cast<Hashtable>().ToList();

                            //s7.Stop();
                            //strStringText.Append("-------------- Entity query executionstart nhibernate End s7 " + s7.Elapsed.TotalMilliseconds + "-------").Append("\n");


                            //var s8 = Stopwatch.StartNew();
                            //strStringText.Append("-------------- Entity query filldata  start s8 row no." + StartRowNo + "-------").Append("\n");

                            if (CollectedIdsResult != null && CollectedIdsResult.Count() > 0)
                            {
                                IList<ISortOrderIdsCollection> SortCollectionobj = new List<ISortOrderIdsCollection>();

                                foreach (var CurrentsortId in CollectedIdsResult)
                                {
                                    SortCollectionobj.Add(new SortOrderIdsCollection
                                    {
                                        Id = Convert.ToInt32(CurrentsortId["ID"]),
                                        EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                        Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                        ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                        InterMediateID = 0,
                                        UniqueKey = Convert.ToString(CurrentsortId["UNIQUEKEY"]),
                                        OptionID = Convert.ToInt32(CurrentsortId["OptionID"]),
                                        OptionCaption = Convert.ToString(CurrentsortId["OptionCaption"])
                                    });
                                }

                                proxy.MarcomManager.EntitySortorderIdColle = SortCollectionobj;
                            }
                            else
                            {
                                proxy.MarcomManager.EntitySortorderIdColle = null;
                                proxy.MarcomManager.EntitySortorderIdColleHash = SearchCriteriaHash;
                                tx.Commit();
                                return null;
                            }

                            //s8.Stop();
                            //strStringText.Append("-------------- Entity query filldata nhibernate End s8 " + s8.Elapsed.TotalMilliseconds + "-------").Append("\n");

                        }
                        else if (EntityTypeIDs.AttributeGroupFilterInCostCentre == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            string optionClause = "";
                            StringBuilder AttrCCfilter = new StringBuilder();
                            //TempTblQry.Append("   INNER JOIN @TempEntitySortTable pes ");

                            TempTblQry.Append("   INNER JOIN PM_Entity_Sort pes ");
                            TempTblQry.Append("   ON  pe.ID = pes.id ");
                            TempTblQry.Append("   AND pe.Active = 1  ");
                            if (listSetting.EntityTypes != null)
                            {
                                optionClause = String.Join(",", filterSettingValues.Select(x => "-" + x.Value.ToString()).ToArray());

                                string inClause = "("
                                                      +
                                                      String.Join(",",
                                                          listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                              + ")";
                                TempTblQry.Append(" and pe.TypeID in " + inClause);

                                TempTblQry.Append(" INNER JOIN ( ");

                                //--------------------

                                for (var i = 0; i < IdArr.Length; i++)
                                {
                                    if (i > 0)
                                        TempTblQry.Append("  UNION ALL ");

                                    TempTblQry.Append(
                                        " SELECT pe.ID, pe.UniqueKey AS EKEY, pecr.CostCenterID,pe.Level,pe.parentid,pe.UNIQUEKEY, case WHEN pe.[level] = 0 THEN (SELECT ISNULL(SUM(pf.plannedAmount), 0) FROM   PM_Financial pf  INNER JOIN pm_Entity children  ON  pf.EntityID = children.ID  AND children.[Active] = 1 WHERE  children.ParentID = pe.ID  AND pf.CostCenterID =" + IdArr[i] + " )  ELSE (  SELECT pf.plannedAmount  FROM   PM_Financial pf  WHERE  pf.EntityID = pe.id  AND pf.CostCenterID =" + IdArr[i] + " )  END    AS  plannedAmount FROM PM_EntityCostReleations pecr INNER JOIN PM_Entity pe ON pecr.EntityID=pe.ID ");
                                    TempTblQry.Append(" AND pe.[Active]=1 AND pecr.IsActive=1  and pecr.CostCenterID=" + IdArr[i] + " ");

                                    TempTblQry.Append("INNER JOIN PM_Entity_Sort pes ");
                                    TempTblQry.Append("            ON  pe.ID = pes.id");
                                    TempTblQry.Append("      INNER JOIN PM_Financial pf");
                                    TempTblQry.Append("      ON pf.EntityID = pe.ID AND pf.CostCenterID = " + IdArr[i] + "  ");

                                }
                                TempTblQry.Append("  ) cc1  ON cc1.ID = pe.ID   ");
                            }

                            if (UserID != 0)
                            {
                                TempTblQry.Append("  AND pe.id in( SELECT DISTINCT(pe1.id) from PM_Entity pe1 INNER JOIN AM_Entity_Role_User aeru ");
                                TempTblQry.Append("   ON   pe1.id=aeru.EntityID  AND aeru.UserID = " + UserID.ToString() + ") ");

                                //TempTblQry.Append(" INNER JOIN  ");
                                //TempTblQry.Append("     AM_Entity_Role_User aeru ON  aeru.EntityID = pe.id and aeru.UserID=" + UserID.ToString());

                            }

                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].Keyword.ToString() != "")
                                {
                                    TempTblQry.Append("  and pe.Name LIKE '%" + filtervalues[0].Keyword.ToString() + "%'");
                                }
                            }
                            else if (filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).Keyword != "")
                                {
                                    TempTblQry.Append("  and pe.Name LIKE '%" + filterSettingValues.ElementAt(0).Keyword.ToString() + "%'");
                                }
                            }

                            topFilterQry.Append(TempTblQry.ToString());
                            StringBuilder SortorderQry = new StringBuilder();

                            SortorderQry.Append("   ORDER BY ");
                            SortorderQry.Append("        temptable.optid ASC, ");
                            SortorderQry.Append("        pes.S1   ASC, ");
                            SortorderQry.Append("        pes.L1   ASC, ");
                            SortorderQry.Append("        pes.S2   ASC, ");
                            SortorderQry.Append("        pes.L2   ASC, ");
                            SortorderQry.Append("        pes.S3   ASC, ");
                            SortorderQry.Append("        pes.L3   ASC, ");
                            SortorderQry.Append("        pes.S4   ASC, ");
                            SortorderQry.Append("        pes.L4   ASC, ");
                            SortorderQry.Append("        pes.S5   ASC, ");
                            SortorderQry.Append("        pes.L5   ASC, ");
                            SortorderQry.Append("        pes.S6   ASC, ");
                            SortorderQry.Append("        pes.L6   ASC, ");
                            SortorderQry.Append("        pes.S7   ASC, ");
                            SortorderQry.Append("        pes.L7   ASC, ");
                            SortorderQry.Append("        pes.S8   ASC, ");
                            SortorderQry.Append("        pes.L8   ASC, ");
                            SortorderQry.Append("        pes.S9   ASC, ");
                            SortorderQry.Append("        pes.L9   ASC, ");
                            SortorderQry.Append("        pes.S10  ASC, ");
                            SortorderQry.Append("        pes.L10  ASC ");

                            //SortorderQry.Append(" ORDER BY pe.UniqueKey ");

                            //sort order query building
                            if (SortOrderColumn.Length > 0)
                            {
                                SortorderQry.Remove(0, SortorderQry.Length);
                                bool status = false;
                                for (int fj = 0; fj < listSetting.Attributes.Count; fj++)
                                {
                                    if (status == false)
                                    {
                                        if (SortOrderColumn == listSetting.Attributes[fj].Field)
                                        {
                                            int attributeID = listSetting.Attributes[fj].Id;
                                            int attributeTypeID = listSetting.Attributes[fj].Type;
                                            string attributeColumn = listSetting.Attributes[fj].Field;
                                            if (listSetting.Attributes[fj].IsSpecial == true)
                                            {
                                                switch ((SystemDefinedAttributes)listSetting.Attributes[fj].Id)
                                                {
                                                    case SystemDefinedAttributes.Owner:
                                                        SortorderQry.Append(
                                                            "LEFT OUTER JOIN (SELECT aeru.EntityID AS EntityID, (ISNULL(us.FirstName,'') + ' ' + ISNULL(us.LastName,'')) AS VALUE  FROM UM_User us INNER JOIN AM_Entity_Role_User aeru ON us.ID=aeru.UserID INNER JOIN AM_EntityTypeRoleAcl aetra ON aeru.RoleID=aetra.ID AND aetra.EntityRoleID=1");
                                                        SortorderQry.Append("    ) AS so");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                        status = true;
                                                        break;
                                                    case SystemDefinedAttributes.EntityOnTimeStatus:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");
                                                        SortorderQry.Append(" 	SELECT pe2.id  AS  EntityID,");
                                                        SortorderQry.Append("  (SELECT CASE ");
                                                        SortorderQry.Append("                     WHEN (");
                                                        SortorderQry.Append("       SELECT mes.IntimeStatus");
                                                        SortorderQry.Append("            FROM   MM_EntityStatus mes");
                                                        SortorderQry.Append("                    WHERE  mes.EntityID = pe2.id");
                                                        SortorderQry.Append("                 ) = 0 THEN 'On time'");
                                                        SortorderQry.Append("             WHEN ( ");
                                                        SortorderQry.Append("                        SELECT mes.IntimeStatus ");
                                                        SortorderQry.Append("                        FROM   MM_EntityStatus mes ");
                                                        SortorderQry.Append("                          WHERE  mes.EntityID = pe2.id ");
                                                        SortorderQry.Append("                       ) = 1 THEN 'Delayed' ");
                                                        SortorderQry.Append("                   WHEN ( ");
                                                        SortorderQry.Append("                            SELECT mes.IntimeStatus ");
                                                        SortorderQry.Append("                             FROM   MM_EntityStatus mes ");
                                                        SortorderQry.Append("                                      WHERE  mes.EntityID = pe2.id ");
                                                        SortorderQry.Append("                                    ) = 2 THEN 'On hold' ");
                                                        SortorderQry.Append("                               ELSE 'On time' ");
                                                        SortorderQry.Append("                          END  ) as VALUE ");
                                                        SortorderQry.Append("        	FROM  MM_EntityStatus mes INNER JOIN PM_Entity pe2  ");
                                                        SortorderQry.Append("        	ON  mes.EntityID = pe2.id ");
                                                        SortorderQry.Append("             ) AS so ");
                                                        SortorderQry.Append("             ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                    case SystemDefinedAttributes.EntityStatus:
                                                        SortorderQry.Append("LEFT OUTER JOIN (SELECT mes.EntityID AS entityid, metso.StatusOptions AS VALUE FROM   MM_EntityStatus mes");
                                                        SortorderQry.Append("   INNER JOIN MM_EntityTypeStatus_Options metso ON  mes.StatusID = metso.ID AND metso.IsRemoved = 0 ) AS so");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                        status = true;
                                                        break;
                                                }
                                            }

                                            else if ((AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.ListMultiSelection ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.DropDownTree ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.Tree ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.Period ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.TreeMultiSelection)
                                            {
                                                switch ((AttributesList)listSetting.Attributes[fj].Type)
                                                {
                                                    case AttributesList.ListMultiSelection:
                                                        SortorderQry.Append(" LEFT OUTER JOIN (  ");
                                                        SortorderQry.Append(" SELECT mms.EntityID,  ");
                                                        SortorderQry.Append("   STUFF(  ");
                                                        SortorderQry.Append("  (  ");
                                                        SortorderQry.Append("   SELECT ', ' + mo.Caption  ");
                                                        SortorderQry.Append("      FROM   MM_MultiSelect mms2  ");
                                                        SortorderQry.Append("           INNER JOIN MM_Option mo  ");
                                                        SortorderQry.Append(
                                                            "                  ON  mms2.OptionID = mo.ID  ");
                                                        SortorderQry.Append(
                                                            "       WHERE  mms2.EntityID = mms.EntityID  ");
                                                        SortorderQry.Append("              FOR XML PATH('')  ");
                                                        SortorderQry.Append("    ),  ");
                                                        SortorderQry.Append("    1,  ");
                                                        SortorderQry.Append("   2,  ");
                                                        SortorderQry.Append("    ''  ");
                                                        SortorderQry.Append("       )               AS VALUE  ");
                                                        SortorderQry.Append("      FROM   MM_MultiSelect     mms  ");
                                                        SortorderQry.Append("    WHERE  mms.AttributeID = " +
                                                                            attributeID.ToString() + "  ");
                                                        SortorderQry.Append("     GROUP BY  ");
                                                        SortorderQry.Append("             mms.EntityID  ");
                                                        SortorderQry.Append("   ) AS so  ");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID  ");
                                                        status = true;

                                                        break;
                                                    case AttributesList.DropDownTree:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");

                                                        SortorderQry.Append("  SELECT mtv.EntityID, ");
                                                        SortorderQry.Append(" mtn.Caption AS value ");
                                                        SortorderQry.Append(" FROM   MM_TreeNode mtn ");
                                                        SortorderQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                                        SortorderQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                                        SortorderQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                                        SortorderQry.Append("  AND mtn.Level =  " +
                                                                                listSetting.Attributes[fj].Level);
                                                        SortorderQry.Append("  WHERE  mtv.AttributeID = " +
                                                                            attributeID.ToString());
                                                        SortorderQry.Append("  ) AS so ");
                                                        SortorderQry.Append("  ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                    case AttributesList.Tree:
                                                        SortorderQry.Append(" 'IsTree' as '" +
                                                                                listSetting.Attributes[fj].Field + "'");
                                                        status = true;
                                                        break;
                                                    case AttributesList.Period:
                                                        SortorderQry.Append(
                                                            " ( SELECT CONVERT(NVARCHAR(10), MIN(pep.StartDate), 120) FROM   PM_EntityPeriod pep  WHERE  pep.EntityID = subtbl.Id  ) AS Startdate, ");
                                                        SortorderQry.Append(
                                                            " ( SELECT CONVERT(NVARCHAR(10), MAX(pep.EndDate), 120) FROM   PM_EntityPeriod pep WHERE  pep.EntityID = subtbl.Id )  AS Enddate ");
                                                        status = true;
                                                        break;
                                                    case AttributesList.TreeMultiSelection:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");

                                                        SortorderQry.Append("  SELECT mtv.EntityID, ");
                                                        SortorderQry.Append(" mtn.Caption AS value ");
                                                        SortorderQry.Append(" FROM   MM_TreeNode mtn ");
                                                        SortorderQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                                        SortorderQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                                        SortorderQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                                        SortorderQry.Append("  AND mtn.Level =  " +
                                                                                listSetting.Attributes[fj].Level);
                                                        SortorderQry.Append("  WHERE  mtv.AttributeID = " +
                                                                            attributeID.ToString());
                                                        SortorderQry.Append("  ) AS so ");
                                                        SortorderQry.Append("  ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                }
                                            }
                                            else if ((AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.ListSingleSelection)
                                            {
                                                SortorderQry.Append("   LEFT OUTER JOIN ( ");
                                                SortorderQry.Append(
                                                    "   SELECT subtbl.id  AS EntityID,mo.Caption   AS VALUE ");

                                                SortorderQry.Append("  FROM   ( ");
                                                for (int fi = 0; fi < newValidEntityTypes.Count; fi++)
                                                {
                                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                                               where
                                                                                   val.AttributeID == attributeID &&
                                                                                   val.EntityTypeID == newValidEntityTypes[fi]
                                                                               select val;
                                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                                    {
                                                        SortorderQry.Append(" SELECT id, attr_" + attributeColumn +
                                                                            " as attr_" + attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    else
                                                    {
                                                        SortorderQry.Append(" SELECT id, null as attr_" +
                                                                            attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    ;
                                                    if ((fi < newValidEntityTypes.Count - 1))
                                                    {
                                                        SortorderQry.Append(" UNION ALL ");
                                                    }
                                                }
                                                SortorderQry.Append("  ) AS subtbl ");
                                                SortorderQry.Append(" INNER JOIN MM_Option mo ");
                                                SortorderQry.Append(" ON  mo.AttributeID = " +
                                                                    attributeID.ToString());
                                                SortorderQry.Append(" AND mo.ID = subtbl.attr_" + attributeColumn);
                                                SortorderQry.Append("    ) AS so");
                                                SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                status = true;
                                            }
                                            else
                                            {
                                                SortorderQry.Append("   LEFT OUTER JOIN ( ");
                                                SortorderQry.Append(
                                                    "   SELECT subtbl.id       AS EntityID,subtbl.attr_" + attributeID +
                                                    "  AS VALUE ");

                                                SortorderQry.Append("  FROM   ( ");
                                                for (int fi = 0; fi < newValidEntityTypes.Count; fi++)
                                                {
                                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                                               where
                                                                                   val.AttributeID == attributeID &&
                                                                                   val.EntityTypeID == newValidEntityTypes[fi]
                                                                               select val;
                                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                                    {
                                                        SortorderQry.Append(" SELECT id, attr_" + attributeColumn +
                                                                            " as attr_" + attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    else
                                                    {
                                                        SortorderQry.Append(" SELECT id, null as attr_" +
                                                                            attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    ;
                                                    if ((fi < newValidEntityTypes.Count - 1))
                                                    {
                                                        SortorderQry.Append(" UNION ALL ");
                                                    }
                                                }
                                                SortorderQry.Append("  ) AS subtbl ");
                                                SortorderQry.Append(" ) AS so ");
                                                SortorderQry.Append(" ON  so.EntityID = pe.ID ");

                                                status = true;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (IdArr != null && IdArr.Length > 0)
                                {
                                    if (IncludeChildren == true)
                                    {
                                        string inClause = "("
                                                        + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                      + ")";
                                        SortorderQry.Append(" where pe.Id in " + inClause);
                                        if (IsSingleID == false)
                                        {
                                            SortorderQry.Append(" or pe.ParentID  in " + inClause);
                                        }
                                    }
                                    else
                                    {
                                        SortorderQry.Append(" where pe.ParentID =" + IdArr[0]);
                                    }
                                }
                                SortorderQry.Append("  ORDER BY so.value " + (IsDesc == true ? " desc " : "") + " ");
                            }

                            topFilterQry.Append(SortorderQry.ToString());

                            topFilterQry.Append(" SELECT ID, EID,LEVEL,PEID,UNIQUEKEY,OptionID,OptionCaption,CostCenterID FROM @EntityOrderIDs ");
                            //topFilterQry over here for getting all the filter id

                            //s3.Stop();
                            //strStringText.Append("-------------- Entity query executionstart End s3 " + s3.Elapsed.TotalMilliseconds + "-------").Append("\n");


                            //var s7 = Stopwatch.StartNew();
                            //strStringText.Append("-------------- Entity query executionstart nhibernate  start s7 row no." + StartRowNo + "-------").Append("\n");

                            CollectedIdsResult =
                               tx.PersistenceManager.MetadataRepository.ExecuteQuery(topFilterQry.ToString())
                                   .Cast<Hashtable>().ToList();

                            //s7.Stop();
                            //strStringText.Append("-------------- Entity query executionstart nhibernate End s7 " + s7.Elapsed.TotalMilliseconds + "-------").Append("\n");


                            //var s8 = Stopwatch.StartNew();
                            //strStringText.Append("-------------- Entity query filldata  start s8 row no." + StartRowNo + "-------").Append("\n");

                            if (CollectedIdsResult != null && CollectedIdsResult.Count() > 0)
                            {
                                IList<ISortOrderIdsCollection> SortCollectionobj = new List<ISortOrderIdsCollection>();

                                foreach (var CurrentsortId in CollectedIdsResult)
                                {
                                    SortCollectionobj.Add(new SortOrderIdsCollection
                                    {
                                        Id = Convert.ToInt32(CurrentsortId["ID"]),
                                        EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                        Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                        ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                        InterMediateID = Convert.ToInt32(CurrentsortId["CostCenterID"]),
                                        UniqueKey = Convert.ToString(CurrentsortId["UNIQUEKEY"]),
                                        OptionID = Convert.ToInt32(CurrentsortId["OptionID"]),
                                        OptionCaption = Convert.ToString(CurrentsortId["OptionCaption"])
                                    });
                                }

                                proxy.MarcomManager.EntitySortorderIdColle = SortCollectionobj;
                            }
                            else
                            {
                                proxy.MarcomManager.EntitySortorderIdColle = null;
                                proxy.MarcomManager.EntitySortorderIdColleHash = SearchCriteriaHash;
                                tx.Commit();
                                return null;
                            }

                            //s8.Stop();
                            //strStringText.Append("-------------- Entity query filldata nhibernate End s8 " + s8.Elapsed.TotalMilliseconds + "-------").Append("\n");

                        }
                        else if (EntityTypeIDs.Costcenre == (EntityTypeIDs)enumEntityTypeIds)
                        {

                            StringBuilder countQry = new StringBuilder();
                            countQry.Append(TempTblQry.ToString());
                            countQry.Append(" INNER JOIN  @CostCentreOrderIDs coi ");
                            countQry.Append("  ON  coi.EID = pe.Id  ");

                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].Keyword.ToString() != "")
                                {

                                    countQry.Append("  and pe.Name LIKE '%" + filtervalues[0].Keyword.ToString() + "%'");
                                }
                            }
                            else if (filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).Keyword != "")
                                {

                                    countQry.Append("  and pe.Name LIKE '%" + filterSettingValues.ElementAt(0).Keyword.ToString() + "%'");
                                }
                            }


                            topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                            topFilterQry.Append(" ( ");
                            topFilterQry.Append("  EID,CostCenterID,LEVEL,PEID,UNIQUEKEY ");
                            topFilterQry.Append(" ) ");

                            topFilterQry.Append(countQry.ToString());


                            topFilterQry.Append(" SELECT ID, EID,LEVEL,PEID,CostCenterID,UNIQUEKEY FROM @EntityOrderIDs ");


                            //topFilterQry over here for getting all the filter id

                            CollectedIdsResult =
                               tx.PersistenceManager.MetadataRepository.ExecuteQuery(topFilterQry.ToString())
                                   .Cast<Hashtable>().ToList();
                            if (CollectedIdsResult != null && CollectedIdsResult.Count() > 0)
                            {
                                IList<ISortOrderIdsCollection> SortCollectionobj = new List<ISortOrderIdsCollection>();
                                foreach (var CurrentsortId in CollectedIdsResult)
                                {
                                    SortCollectionobj.Add(new SortOrderIdsCollection
                                    {
                                        Id = Convert.ToInt32(CurrentsortId["ID"]),
                                        EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                        Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                        ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                        InterMediateID = Convert.ToInt32(CurrentsortId["CostCenterID"]),
                                        UniqueKey = Convert.ToString(CurrentsortId["UNIQUEKEY"])
                                    });

                                }
                                proxy.MarcomManager.EntitySortorderIdColle = SortCollectionobj;
                            }
                            else
                            {
                                proxy.MarcomManager.EntitySortorderIdColle = null;
                                proxy.MarcomManager.EntitySortorderIdColleHash = SearchCriteriaHash;
                                tx.Commit();
                                return null;
                            }
                        }
                        else if (EntityTypeIDs.Objective == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            finalQry.Append(Objective.ToString());
                            StringBuilder countQry = new StringBuilder();
                            countQry.Append(TempTblQry.ToString());
                            countQry.Append(" INNER JOIN  @ObjectiveOrderIDs oi ");
                            countQry.Append("  ON  oi.EID = pe.Id  ");

                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].Keyword.ToString() != "")
                                {

                                    countQry.Append("  and pe.Name LIKE '%" + filtervalues[0].Keyword.ToString() + "%'");
                                }
                            }
                            else if (filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).Keyword != "")
                                {
                                    countQry.Append("  and pe.Name LIKE '%" + filterSettingValues.ElementAt(0).Keyword.ToString() + "%'");
                                }
                            }

                            topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                            topFilterQry.Append(" ( ");
                            topFilterQry.Append("  EID,ObjectveID,LEVEL,PEID,UNIQUEKEY ");
                            topFilterQry.Append(" ) ");

                            topFilterQry.Append(countQry.ToString());

                            topFilterQry.Append(" SELECT ID, EID,LEVEL,PEID,ObjectveID,UNIQUEKEY FROM @EntityOrderIDs ");

                            CollectedIdsResult =
                               tx.PersistenceManager.MetadataRepository.ExecuteQuery(topFilterQry.ToString())
                                   .Cast<Hashtable>().ToList();
                            if (CollectedIdsResult != null && CollectedIdsResult.Count() > 0)
                            {
                                IList<ISortOrderIdsCollection> SortCollectionobj = new List<ISortOrderIdsCollection>();
                                foreach (var CurrentsortId in CollectedIdsResult)
                                {
                                    SortCollectionobj.Add(new SortOrderIdsCollection
                                    {
                                        Id = Convert.ToInt32(CurrentsortId["ID"]),
                                        EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                        Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                        ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                        InterMediateID = Convert.ToInt32(CurrentsortId["ObjectveID"]),
                                        UniqueKey = Convert.ToString(CurrentsortId["UNIQUEKEY"])
                                    });

                                }
                                proxy.MarcomManager.EntitySortorderIdColle = SortCollectionobj;
                            }
                            else
                            {
                                proxy.MarcomManager.EntitySortorderIdColle = null;
                                proxy.MarcomManager.EntitySortorderIdColleHash = SearchCriteriaHash;
                                tx.Commit();
                                return null;
                            }

                        }


                        else if (EntityTypeIDs.Calender == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            finalQry.Append(Objective.ToString());
                            StringBuilder countQry = new StringBuilder();
                            countQry.Append(TempTblQry.ToString());
                            countQry.Append(" INNER JOIN  @CalenderOrderIDs oi ");
                            countQry.Append("  ON  oi.EID = pe.Id  ");

                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].Keyword.ToString() != "")
                                {

                                    countQry.Append("  and pe.Name LIKE '%" + filtervalues[0].Keyword.ToString() + "%'");
                                }
                            }
                            else if (filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).Keyword != "")
                                {
                                    countQry.Append("  and pe.Name LIKE '%" + filterSettingValues.ElementAt(0).Keyword.ToString() + "%'");
                                }
                            }

                            topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                            topFilterQry.Append(" ( ");
                            topFilterQry.Append("  EID, CalenderID, LEVEL,PEID,UNIQUEKEY ");
                            topFilterQry.Append(" ) ");

                            topFilterQry.Append(countQry.ToString());

                            topFilterQry.Append(" SELECT ID, EID, LEVEL, PEID, CalenderID, UNIQUEKEY FROM @EntityOrderIDs ");

                            CollectedIdsResult =
                               tx.PersistenceManager.MetadataRepository.ExecuteQuery(topFilterQry.ToString())
                                   .Cast<Hashtable>().ToList();
                            if (CollectedIdsResult != null && CollectedIdsResult.Count() > 0)
                            {
                                IList<ISortOrderIdsCollection> SortCollectionobj = new List<ISortOrderIdsCollection>();
                                foreach (var CurrentsortId in CollectedIdsResult)
                                {
                                    SortCollectionobj.Add(new SortOrderIdsCollection
                                    {
                                        Id = Convert.ToInt32(CurrentsortId["ID"]),
                                        EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                        Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                        ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                        InterMediateID = Convert.ToInt32(CurrentsortId["CalenderID"]),
                                        UniqueKey = Convert.ToString(CurrentsortId["UNIQUEKEY"])
                                    });

                                }
                                proxy.MarcomManager.EntitySortorderIdColle = SortCollectionobj;
                            }
                            else
                            {
                                proxy.MarcomManager.EntitySortorderIdColle = null;
                                proxy.MarcomManager.EntitySortorderIdColleHash = SearchCriteriaHash;
                                tx.Commit();
                                return null;
                            }

                        }

                    }
                }
                else
                {
                    if (IsSingleID == true && proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Id == ExpandingEntityID).ToList().Count == 0)
                    {
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {
                            var TempDao = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, ExpandingEntityID);
                            if (TempDao != null)
                            {
                                proxy.MarcomManager.EntitySortorderIdColle.Add(new SortOrderIdsCollection { Id = TempDao.Id, EntityIds = TempDao.Id, InterMediateID = 0, Level = TempDao.Level, ParentEntityID = TempDao.Parentid, UniqueKey = TempDao.UniqueKey });
                            }

                        }

                    }
                }


                //var s4 = Stopwatch.StartNew();

                //strStringText.Append("-------------- Xml forming query  start s4 row no." + StartRowNo + "-------").Append("\n");
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    XmlFilterQry.Append("DECLARE @x AS XML = '");
                    XmlFilterQry.Append("<root>");
                    IList<ISortOrderIdsCollection> result = new List<ISortOrderIdsCollection>();


                    if (EntityTypeIDs.Activity == (EntityTypeIDs)enumEntityTypeIds)
                    {

                        if (ExpandingEntityID != 0)
                        {
                            if (IncludeChildren == true)
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID || a.ParentEntityID == ExpandingEntityID).Select(a => a).ToList();
                            else
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.ParentEntityID == ExpandingEntityID).Select(a => a).ToList();
                        }
                        else
                        {
                            result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).Select(a => a).Skip(StartRowNo).Take(MaxNoofRow).ToList();
                        }
                        foreach (var CurrentsortId in result)
                        //System.Threading.Tasks.Parallel.ForEach(result, CurrentsortId => 
                        {
                            XmlFilterQry.Append("<e ID=''" + CurrentsortId.Id + "'' EID=''" + CurrentsortId.EntityIds + "'' LEVEL=''" + CurrentsortId.Level + "'' PEID=''" + CurrentsortId.ParentEntityID + "'' INTERMEDIATEID=''" + CurrentsortId.InterMediateID + "'' UNIQUEKEY=''" + CurrentsortId.UniqueKey + "''/>");
                        }
                        XmlFilterQry.Append("</root>';");

                        XmlFilterQry.Append("DECLARE @EntityOrderIDs TABLE ([ID] [int], EID INT,UNIQUEKEY nvarchar(100));");
                        XmlFilterQry.Append("INSERT INTO @EntityOrderIDs(ID,EID,UNIQUEKEY)");

                        XmlFilterQry.Append("SELECT x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@UNIQUEKEY','NVARCHAR') as UNIQUEKEY from @x.nodes('/root/e') as x(tbl);");
                    }
                    else if (EntityTypeIDs.AttributeGroupFilter == (EntityTypeIDs)enumEntityTypeIds)
                    {

                        if (ExpandingEntityID != 0)
                        {
                            if (IncludeChildren == true)
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID || a.ParentEntityID == ExpandingEntityID).Select(a => a).ToList();
                            else
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.ParentEntityID == ExpandingEntityID).Select(a => a).ToList();
                        }
                        else
                        {
                            result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).Select(a => a).Skip(StartRowNo).Take(MaxNoofRow).ToList();
                        }
                        foreach (var CurrentsortId in result)
                        //System.Threading.Tasks.Parallel.ForEach(result, CurrentsortId => 
                        {
                            XmlFilterQry.Append("<e ID=''" + CurrentsortId.Id + "'' EID=''" + CurrentsortId.EntityIds + "'' LEVEL=''" + CurrentsortId.Level + "'' PEID=''" + CurrentsortId.ParentEntityID + "'' INTERMEDIATEID=''" + CurrentsortId.InterMediateID + "'' UNIQUEKEY=''" + CurrentsortId.UniqueKey + "'' OptionID=''" + CurrentsortId.OptionID + "'' OptionCaption=''" + CurrentsortId.OptionCaption + "''/>");
                        }
                        XmlFilterQry.Append("</root>';");

                        XmlFilterQry.Append("DECLARE @EntityOrderIDs TABLE ([ID] [int], EID INT,UNIQUEKEY nvarchar(100), OPTIONID INT, OptionCAPTION  NVARCHAR(1000));");
                        XmlFilterQry.Append("INSERT INTO @EntityOrderIDs(ID,EID,UNIQUEKEY,OPTIONID,OptionCAPTION )");

                        XmlFilterQry.Append("SELECT x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@UNIQUEKEY','NVARCHAR') as UNIQUEKEY,x.tbl.value('@OptionID','INT') as OPTIONID,x.tbl.value('@OptionCaption','NVARCHAR(1000)') as OptionCaption from @x.nodes('/root/e') as x(tbl);");

                    }
                    else if (EntityTypeIDs.AttributeGroupFilterInCostCentre == (EntityTypeIDs)enumEntityTypeIds)
                    {

                        if (ExpandingEntityID != 0)
                        {
                            if (IncludeChildren == true)
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID || a.ParentEntityID == ExpandingEntityID).Select(a => a).ToList();
                            else
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.ParentEntityID == ExpandingEntityID).Select(a => a).ToList();
                        }
                        else
                        {
                            result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).Select(a => a).Skip(StartRowNo).Take(MaxNoofRow).ToList();
                        }
                        foreach (var CurrentsortId in result)
                        //System.Threading.Tasks.Parallel.ForEach(result, CurrentsortId => 
                        {
                            XmlFilterQry.Append("<e ID=''" + CurrentsortId.Id + "'' EID=''" + CurrentsortId.EntityIds + "'' LEVEL=''" + CurrentsortId.Level + "'' PEID=''" + CurrentsortId.ParentEntityID + "'' INTERMEDIATEID=''" + CurrentsortId.InterMediateID + "'' UNIQUEKEY=''" + CurrentsortId.UniqueKey + "'' OptionID=''" + CurrentsortId.OptionID + "'' OptionCaption=''" + CurrentsortId.OptionCaption + "''/>");
                        }
                        XmlFilterQry.Append("</root>';");

                        XmlFilterQry.Append("DECLARE @EntityOrderIDs TABLE ([ID] [int], EID INT,UNIQUEKEY nvarchar(100), OPTIONID INT, OptionCAPTION  NVARCHAR(1000), CostCenterID INT );");
                        XmlFilterQry.Append("INSERT INTO @EntityOrderIDs(ID,EID,UNIQUEKEY,OPTIONID,OptionCAPTION,CostCenterID )");

                        XmlFilterQry.Append("SELECT x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@UNIQUEKEY','NVARCHAR') as UNIQUEKEY,x.tbl.value('@OptionID','INT') as OPTIONID,x.tbl.value('@OptionCaption','NVARCHAR(1000)') as OptionCaption,x.tbl.value('@INTERMEDIATEID','NVARCHAR(1000)') as CostCenterID from @x.nodes('/root/e') as x(tbl);");

                    }
                    else if (EntityTypeIDs.Costcenre == (EntityTypeIDs)enumEntityTypeIds)
                    {
                        if (ExpandingEntityID != 0)
                        {
                            if (IncludeChildren == true)
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID || (a.InterMediateID == EntityID && a.EntityIds == ExpandingEntityID)).Select(a => a).ToList();
                            else
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.ParentEntityID == ExpandingEntityID && a.InterMediateID == EntityID).Select(a => a).ToList();
                        }
                        else
                        {
                            result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).Select(a => a).Skip(StartRowNo).Take(MaxNoofRow).ToList();
                        }

                        foreach (var CurrentsortId in result)
                        //System.Threading.Tasks.Parallel.ForEach(result, CurrentsortId =>
                        {
                            XmlFilterQry.Append("<e ID=''" + CurrentsortId.Id + "'' EID=''" + CurrentsortId.EntityIds + "'' LEVEL=''" + CurrentsortId.Level + "'' PEID=''" + CurrentsortId.ParentEntityID + "'' INTERMEDIATEID=''" + CurrentsortId.InterMediateID + "'' UNIQUEKEY=''" + CurrentsortId.UniqueKey + "''/>");
                        }
                        XmlFilterQry.Append("</root>';");



                        XmlFilterQry.Append("DECLARE @EntityOrderIDs TABLE ([ID] [int], EID INT, CostCenterID int,UNIQUEKEY nvarchar(100));");
                        XmlFilterQry.Append("INSERT INTO @EntityOrderIDs(ID,EID,CostCenterID,UNIQUEKEY)");

                        XmlFilterQry.Append("SELECT x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@INTERMEDIATEID','INT') as CostCenterID,x.tbl.value('@UNIQUEKEY','NVARCHAR') as UNIQUEKEY from @x.nodes('/root/e') as x(tbl);");
                    }
                    else if (EntityTypeIDs.Objective == (EntityTypeIDs)enumEntityTypeIds)
                    {

                        if (ExpandingEntityID != 0)
                        {
                            if (IncludeChildren == true)
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID || (a.InterMediateID == EntityID && a.EntityIds == ExpandingEntityID)).Select(a => a).ToList();
                            else
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.ParentEntityID == ExpandingEntityID && a.InterMediateID == EntityID).Select(a => a).ToList();
                        }
                        else
                        {
                            result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).Select(a => a).Skip(StartRowNo).Take(MaxNoofRow).ToList();
                        }

                        foreach (var CurrentsortId in result)
                        //System.Threading.Tasks.Parallel.ForEach(result, CurrentsortId =>
                        {
                            XmlFilterQry.Append("<e ID=''" + CurrentsortId.Id + "'' EID=''" + CurrentsortId.EntityIds + "'' LEVEL=''" + CurrentsortId.Level + "'' PEID=''" + CurrentsortId.ParentEntityID + "'' INTERMEDIATEID=''" + CurrentsortId.InterMediateID + "'' UNIQUEKEY=''" + CurrentsortId.UniqueKey + "''/>");
                        }
                        XmlFilterQry.Append("</root>';");

                        XmlFilterQry.Append("DECLARE @EntityOrderIDs TABLE ([ID] [int], EID INT, ObjectveID int,UNIQUEKEY nvarchar(100));");
                        XmlFilterQry.Append("INSERT INTO @EntityOrderIDs(ID,EID,ObjectveID,UNIQUEKEY)");

                        XmlFilterQry.Append("SELECT x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@INTERMEDIATEID','INT') as ObjectveID,x.tbl.value('@UNIQUEKEY','NVARCHAR') as UNIQUEKEY from @x.nodes('/root/e') as x(tbl);");
                    }
                    else if (EntityTypeIDs.Calender == (EntityTypeIDs)enumEntityTypeIds)
                    {

                        if (ExpandingEntityID != 0)
                        {
                            if (IncludeChildren == true)
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID || (a.InterMediateID == EntityID && a.EntityIds == ExpandingEntityID)).Select(a => a).ToList();
                            else
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.ParentEntityID == ExpandingEntityID && a.InterMediateID == EntityID).Select(a => a).ToList();
                        }
                        else
                        {
                            result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).Select(a => a).Skip(StartRowNo).Take(MaxNoofRow).ToList();
                        }

                        foreach (var CurrentsortId in result)
                        //System.Threading.Tasks.Parallel.ForEach(result, CurrentsortId =>
                        {
                            XmlFilterQry.Append("<e ID=''" + CurrentsortId.Id + "'' EID=''" + CurrentsortId.EntityIds + "'' LEVEL=''" + CurrentsortId.Level + "'' PEID=''" + CurrentsortId.ParentEntityID + "'' INTERMEDIATEID=''" + CurrentsortId.InterMediateID + "'' UNIQUEKEY=''" + CurrentsortId.UniqueKey + "''/>");
                        }
                        XmlFilterQry.Append("</root>';");

                        XmlFilterQry.Append("DECLARE @EntityOrderIDs TABLE ([ID] [int], EID INT, CalenderID int,UNIQUEKEY nvarchar(100));");
                        XmlFilterQry.Append("INSERT INTO @EntityOrderIDs(ID,EID,CalenderID,UNIQUEKEY)");

                        XmlFilterQry.Append("SELECT x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@INTERMEDIATEID','INT') as CalenderID,x.tbl.value('@UNIQUEKEY','NVARCHAR') as UNIQUEKEY from @x.nodes('/root/e') as x(tbl);");
                    }


                    //s4.Stop();
                    //strStringText.Append("-------------- Xml forming query  End s4 " + s4.Elapsed.TotalMilliseconds + "-------").Append("\n");


                    //var s5 = Stopwatch.StartNew();

                    //strStringText.Append("-------------- main query construction start   s5 -------").Append("\n");
                    ///Main Query 
                    //To build inner query for main query

                    if (proxy.MarcomManager.EntitySortorderIdColleHash != SearchCriteriaHash || proxy.MarcomManager.EntitySortorderIdColle == null)
                    {
                        proxy.MarcomManager.EntitySortorderIdColleHash = SearchCriteriaHash;



                        for (int i = 0; i < listSetting.EntityTypes.Count; i++)
                        {
                            if (listSetting.EntityTypes[i] == 35)
                            {
                                strqry.Append("SELECT Id, Description , Visibilityperiod,Visibilitytype,PublishedOn ");
                                strqry.Append("FROM PM_Calender");

                                if (i < listSetting.EntityTypes.Count - 1)
                                {
                                    strqry.Append(" UNION ALL ");
                                }
                            }
                            else
                            {
                                strqry.Append("SELECT id");

                                for (int j = 0; j < listSetting.Attributes.Count; j++)
                                {
                                    var x = tx.PersistenceManager.MetadataRepository.Query<EntityTypeAttributeRelationDao>().Where(a => a.EntityTypeID == listSetting.EntityTypes[i] && a.AttributeID == listSetting.Attributes[j].Id).Select(a => a);

                                    string CurrentattrID = listSetting.Attributes[j].Id.ToString();
                                    if (x.ToList().Count > 0)
                                    {
                                        if (!((AttributesList)listSetting.Attributes[j].Type == AttributesList.ListMultiSelection || (AttributesList)listSetting.Attributes[j].Type == AttributesList.DropDownTree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Tree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Period || (AttributesList)listSetting.Attributes[j].Type == AttributesList.TreeMultiSelection || (AttributesList)listSetting.Attributes[j].Type == AttributesList.EntityOverviewStatus || listSetting.Attributes[j].IsSpecial == true))
                                        {
                                            strqry.Append(" ,attr_" + CurrentattrID);

                                        }
                                    }
                                    else
                                    {
                                        if (!((AttributesList)listSetting.Attributes[j].Type == AttributesList.ListMultiSelection || (AttributesList)listSetting.Attributes[j].Type == AttributesList.DropDownTree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Tree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Period || (AttributesList)listSetting.Attributes[j].Type == AttributesList.TreeMultiSelection || (AttributesList)listSetting.Attributes[j].Type == AttributesList.EntityOverviewStatus || listSetting.Attributes[j].IsSpecial == true))
                                        {
                                            strqry.Append(",null as attr_" + listSetting.Attributes[j].Field + " ");

                                        }
                                    }

                                }

                                if(listSetting.EntityTypes.Contains(35))
                                {
                                    strqry.Append(",'' AS [Visibilityperiod] ");
                                    strqry.Append(",'' AS [Visibilitytype] ");
                                    strqry.Append(",'' AS [PublishedOn] ");
                                }


                                strqry.Append("  FROM MM_AttributeRecord_" + listSetting.EntityTypes[i]);

                                if (i < listSetting.EntityTypes.Count - 1)
                                {
                                    strqry.Append(" UNION ALL ");
                                }
                            }


                        }


                        //To fetch attributes and special sttribute values for main query
                        StringBuilder mainTblQry = new StringBuilder();
                        mainTblQry.Append("SELECT  subtbl.id as Id,");

                        if (IsAttributegroupfilter)
                        {
                            if (EntityTypeIDs.AttributeGroupFilter == (EntityTypeIDs)enumEntityTypeIds)
                                mainTblQry.Append(" pe.ParentID, pe.TypeID, pe.UniqueKey,pe.Name, pe.IsLock,eoi.OptionID,eoi.OptionCaption, ");
                            else
                                mainTblQry.Append(" pe.ParentID, pe.TypeID, pe.UniqueKey,pe.Name, pe.IsLock,eoi.OptionID,eoi.OptionCaption,eoi.CostCenterID, ");
                        }
                        else
                            mainTblQry.Append(" pe.ParentID, pe.TypeID, pe.UniqueKey,pe.Name, pe.IsLock, ");


                        //mainTblQry.Append("CASE ");
                        //mainTblQry.Append("WHEN pe.IsLock = 1 THEN 1 ");
                        //mainTblQry.Append("WHEN ((SELECT COUNT(*)  FROM   AM_Entity_Role_User aeru WHERE  aeru.EntityID = subtbl.id AND aeru.UserID = proxy.MarcomManager.User.Id) = 0) THEN 1 ");
                        //mainTblQry.Append("ELSE 0 ");
                        //mainTblQry.Append("END        AS IsLock, pe.Name, ");

                        //mainTblQry.Append("CASE ");
                        //mainTblQry.Append("WHEN pe.IsLock = 1 THEN 1 ");
                        //mainTblQry.Append("WHEN ");
                        //mainTblQry.Append("( ");
                        //mainTblQry.Append("( ");
                        //mainTblQry.Append("SELECT COUNT(*) ");
                        //mainTblQry.Append("FROM   AM_GlobalRole_User agru ");
                        //mainTblQry.Append("WHERE  agru.UserId = " + proxy.MarcomManager.User.Id + " ");
                        //    mainTblQry.Append("AND agru.GlobalRoleId in (1) ");
                        //    mainTblQry.Append(") > 0 ");
                        //mainTblQry.Append(")THEN 0 ");
                        //mainTblQry.Append("WHEN ( ");
                        //mainTblQry.Append("( ");
                        //mainTblQry.Append("SELECT COUNT(*) ");
                        //mainTblQry.Append("FROM   AM_Entity_Role_User aeru ");
                        //mainTblQry.Append(" inner join AM_EntityTypeRoleAcl aera on aera.ID = aeru.RoleID ");
                        //mainTblQry.Append("WHERE  aeru.EntityID = subtbl.id ");
                        //mainTblQry.Append("AND aeru.UserID = " + proxy.MarcomManager.User.Id + " ");
                        //mainTblQry.Append("AND aera.EntityRoleID IN (2) ");
                        //    mainTblQry.Append(") >0 ");
                        //mainTblQry.Append(") THEN 0 ");
                        //mainTblQry.Append("WHEN( ");
                        //mainTblQry.Append("( ");
                        //mainTblQry.Append("SELECT COUNT(*) FROM AM_Entity_Role_User aeru inner join AM_EntityTypeRoleAcl aetra on aetra.ID = aeru.RoleID WHERE aeru.EntityID=subtbl.id AND aeru.UserID=" + proxy.MarcomManager.User.Id + " AND aetra.EntityRoleID in (1,8) ");
                        //mainTblQry.Append(")>0 ");
                        //mainTblQry.Append(")THEN 0 ");
                        //mainTblQry.Append(" WHEN((select COUNT(*) from AM_GlobalAcl where GlobalRoleID in ( ");
                        //mainTblQry.Append(" select GlobalRoleId from AM_GlobalRole_User agu ");
                        //mainTblQry.Append(" where UserId=" + proxy.MarcomManager.User.Id + ") and ModuleID=" + (int)Modules.Planning + " and FeatureID=" + (int)FeatureID.ViewEditAll + " and AccessPermission=1)=0) THEN 1 ");


                        //mainTblQry.Append("ELSE 1 ");
                        //mainTblQry.Append("END AS IsLock, ");


                        //mainTblQry.Append(" CASE WHEN pe.IsLock = 1 THEN 1 WHEN ( ( SELECT COUNT(*) FROM   ");
                        //mainTblQry.Append(" AM_GlobalRole_User agru WHERE  agru.UserId = " + proxy.MarcomManager.User.Id + " AND agru.GlobalRoleId in (1) ) > 0 )THEN 0 ");
                        //mainTblQry.Append(" WHEN ( ( SELECT COUNT(*) FROM   AM_Entity_Role_User aeru  inner join AM_EntityTypeRoleAcl aera on aera.ID = aeru.RoleID ");
                        //mainTblQry.Append(" WHERE  aeru.EntityID = subtbl.id AND aeru.UserID = " + proxy.MarcomManager.User.Id + " AND aera.EntityRoleID IN (1,2,8) ) >0 ");
                        //mainTblQry.Append(" or ");
                        //mainTblQry.Append(" ((select COUNT(*) from AM_GlobalAcl where GlobalRoleID in (");
                        //mainTblQry.Append(" select GlobalRoleId from AM_GlobalRole_User agu");
                        //mainTblQry.Append(" where UserId=" + proxy.MarcomManager.User.Id + ") and ModuleID=3 and FeatureID=22 and AccessPermission=1)=1) ");
                        //mainTblQry.Append(" ) THEN 0 ");
                        //mainTblQry.Append(" ELSE 1 END AS IsReadOnly,");

                        //mainTblQry.Append(" select case WHEN pe.IsLock = 1 THEN 0 ");
                        //mainTblQry.Append(" WHEN ((select count(*) from AM_GlobalRole_User agru where agru.UserId = 13772 and agru.GlobalRoleId=1) >0 )then 1 ");
                        //mainTblQry.Append(" when ((select COUNT(*) from AM_GlobalAcl where GlobalRoleID in (  ");
                        //mainTblQry.Append(" select GlobalRoleId from AM_GlobalRole_User agu ");
                        //mainTblQry.Append(" where UserId=13772)and ModuleID=3 and FeatureID=22 and AccessPermission=1)=1) then 1 ");
                        //mainTblQry.Append(" else 0 end as IsMenu from PM_Entity pe where pe.ID=2320 ");


                        mainTblQry.Append("  case when pe.IsLock =1 then 0 ");
                        mainTblQry.Append(" when ((SELECT COUNT(*) FROM    AM_GlobalRole_User agru  ");
                        mainTblQry.Append(" WHERE  agru.UserId = " + proxy.MarcomManager.User.Id + " AND agru.GlobalRoleId in (1)) >0) then 1 ");
                        mainTblQry.Append(" when (( ");
                        mainTblQry.Append(" SELECT COUNT(*) FROM   AM_Entity_Role_User aeru  inner join AM_EntityTypeRoleAcl aera on aera.ID = aeru.RoleID  WHERE   ");
                        mainTblQry.Append(" aeru.EntityID = subtbl.id AND aeru.UserID = " + proxy.MarcomManager.User.Id + " AND aera.EntityRoleID IN (1) ");
                        mainTblQry.Append(" ) > 0) then 1 ");
                        mainTblQry.Append(" when (( ");
                        mainTblQry.Append(" SELECT COUNT(*) FROM   AM_Entity_Role_User aeru  inner join AM_EntityTypeRoleAcl aera on aera.ID = aeru.RoleID  WHERE   ");
                        mainTblQry.Append(" aeru.EntityID = subtbl.id AND aeru.UserID = " + proxy.MarcomManager.User.Id + " AND aera.EntityRoleID IN (2,8) ");
                        mainTblQry.Append(" )>0) then 2 ");
                        mainTblQry.Append(" else 3 end as Permission, ");


                        mainTblQry.Append(" pe.EntityStateID, pe.EntityID,met.ColorCode,met.ShortDescription,pe.Level,(SELECT met.Caption FROM MM_EntityType met WHERE id=pe.typeid) as 'TypeName' ");

                        if (IsobjectiveRootLevel == false)
                        {
                            if (EntityTypeIDs.Activity == (EntityTypeIDs)enumEntityTypeIds)
                            {
                                if (IsEntityAvailable == true)
                                {
                                    mainTblQry.Append(" ,0 AS TotalChildrenCount");
                                }
                                else
                                {

                                    mainTblQry.Append(" ,isnull((SELECT COUNT(pe1.ParentID) ");
                                    mainTblQry.Append(" FROM   PM_Entity pe1 ");
                                    if (IsWorkspaces)
                                    {
                                        mainTblQry.Append("  INNER JOIN AM_Entity_Role_User aeru ON  pe1.ID = aeru.EntityID AND pe1.active = 1 AND aeru.IsInherited = 0 AND aeru.UserID = '" + proxy.MarcomManager.User.Id + "' ");
                                    }
                                    mainTblQry.Append(" WHERE  pe1.ParentID = pe.Id ");
                                    mainTblQry.Append(" AND pe1.[Active]=1 ");
                                    if (listSetting.EntityTypes != null)
                                    {
                                        string inEntiTypes = "("
                                                       + String.Join(",", listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                                     + ")";
                                        mainTblQry.Append(" AND TypeID  IN " + inEntiTypes + " ");
                                    }
                                    mainTblQry.Append(" AND typeID NOT IN (SELECT mett.EntitytypeId FROM MM_EntityTaskType mett) ");
                                    mainTblQry.Append(" GROUP BY ");
                                    mainTblQry.Append(" pe1.ParentID ");
                                    mainTblQry.Append(" ),0) AS TotalChildrenCount");
                                }
                            }
                            else if (EntityTypeIDs.AttributeGroupFilter == (EntityTypeIDs)enumEntityTypeIds)
                            {
                                if (IsEntityAvailable == true)
                                {
                                    mainTblQry.Append(" ,0 AS TotalChildrenCount");
                                }
                                else
                                {

                                    mainTblQry.Append(" ,isnull((SELECT COUNT(pe1.ParentID) ");
                                    mainTblQry.Append(" FROM   PM_Entity pe1 ");
                                    if (IsWorkspaces)
                                    {
                                        mainTblQry.Append("  INNER JOIN AM_Entity_Role_User aeru ON  pe1.ID = aeru.EntityID AND pe1.active = 1 AND aeru.IsInherited = 0 AND aeru.UserID = '" + proxy.MarcomManager.User.Id + "' ");
                                    }
                                    mainTblQry.Append(" WHERE  pe1.ParentID = pe.Id ");
                                    mainTblQry.Append(" AND pe1.[Active]=1 ");
                                    if (listSetting.EntityTypes != null)
                                    {
                                        string inEntiTypes = "("
                                                       + String.Join(",", listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                                     + ")";
                                        mainTblQry.Append(" AND TypeID  IN " + inEntiTypes + " ");
                                    }
                                    mainTblQry.Append(" AND typeID NOT IN (SELECT mett.EntitytypeId FROM MM_EntityTaskType mett ) ");
                                    mainTblQry.Append(" GROUP BY ");
                                    mainTblQry.Append(" pe1.ParentID ");
                                    mainTblQry.Append(" ),0) AS TotalChildrenCount");
                                }
                            }
                            else if (EntityTypeIDs.Costcenre == (EntityTypeIDs)enumEntityTypeIds || EntityTypeIDs.AttributeGroupFilterInCostCentre == (EntityTypeIDs)enumEntityTypeIds)
                            {

                                ArrayList financialDisplayColumn = new ArrayList();
                                financialDisplayColumn.Add("Status");
                                financialDisplayColumn.Add("Planned");
                                financialDisplayColumn.Add("In requests");
                                financialDisplayColumn.Add("Appr/Alloc");
                                financialDisplayColumn.Add("Approved budget");
                                financialDisplayColumn.Add("Budget deviation");
                                financialDisplayColumn.Add("Appr sub allocation");
                                financialDisplayColumn.Add("Committed");
                                financialDisplayColumn.Add("Spent");
                                financialDisplayColumn.Add("Available");
                                ArrayList financialColumn = new ArrayList();
                                financialColumn.Add("Status");
                                financialColumn.Add("PlannedAmount");
                                financialColumn.Add("InRequest");
                                financialColumn.Add("ApprovedAllocatedAmount");
                                financialColumn.Add("ApprovedBudget");
                                financialColumn.Add("BudgetDeviation");
                                financialColumn.Add("ApprovedSubAllocatedAmount");
                                financialColumn.Add("Commited");
                                financialColumn.Add("Spent");
                                financialColumn.Add("Available");
                                Tuple<ArrayList, ArrayList> finColumn = Tuple.Create(financialColumn, financialDisplayColumn);
                                proxy.MarcomManager.GeneralColumnDefs = finColumn;
                                mainTblQry.Append(" ,eoi.CostCenterID as CostCenterID");
                                mainTblQry.Append(" ,CASE WHEN eoi.CostCenterID !=0 then cast(eoi.CostCenterID AS VARCHAR) + '.' + pe.UniqueKey ELSE pe.UniqueKey end AS class ");
                                if (IsEntityAvailable == true)
                                {
                                    mainTblQry.Append(" ,0 AS TotalChildrenCount,");
                                }
                                else
                                {
                                    string inEntiTypes = "";
                                    if (listSetting.EntityTypes != null)
                                    {
                                        inEntiTypes = "("
                                                      + String.Join(",", listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                                    + ")";

                                    }
                                    mainTblQry.Append(" ,ISNULL(CASE when pe.TypeID=5 THEN (SELECT COUNT(1) FROM   PM_EntityCostReleations pecr INNER JOIN PM_Entity pe2 ");
                                    mainTblQry.Append(" ON  pecr.EntityID = pe2.ID AND pe2.[Active]=1 AND pecr.IsActive=1  ");
                                    mainTblQry.Append("      INNER JOIN PM_Financial pf");
                                    mainTblQry.Append("      ON pf.EntityID = pe2.ID AND pf.CostCenterID = pe.id AND pf.PlannedAmount>0 WHERE pecr.CostCenterID=pe.id");
                                    if (inEntiTypes.Length > 0)
                                    {
                                        mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + " ");
                                    }
                                    mainTblQry.Append(") else (SELECT COUNT(1) FROM PM_EntityCostReleations pecr INNER JOIN PM_Entity pe2 ON pecr.EntityID=pe2.ID ");
                                    mainTblQry.Append(" AND pe2.[Active]=1 AND pecr.IsActive=1   AND pe2.ParentID=pe.id and pecr.CostCenterID=eoi.CostCenterID ");
                                    if (inEntiTypes.Length > 0)
                                    {
                                        mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + "  ");
                                    }
                                    mainTblQry.Append("      INNER JOIN PM_Financial pf");
                                    mainTblQry.Append("      ON pf.EntityID = pe2.ID AND pf.CostCenterID = eoi.CostCenterID AND (pf.PlannedAmount>0 OR pe2.level=0)");
                                    mainTblQry.Append(") end,0)   AS TotalChildrenCount, ");
                                }

                                mainTblQry.Append("CASE ");
                                mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.RequestedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                                 AND children.[level] = 1");
                                mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.RequestedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            ELSE (");
                                mainTblQry.Append("                     SELECT TOP 1 pf.RequestedAmount");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("       END        AS InRequest,");
                                mainTblQry.Append("       CASE ");
                                mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.PlannedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                                 AND children.[level] = 1");
                                mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.PlannedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            ELSE (");
                                mainTblQry.Append("                     SELECT pf.PlannedAmount");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("       END        AS PlannedAmount,");
                                mainTblQry.Append("       CASE ");
                                mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                                 AND children.[level] = 1");
                                mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            ELSE (");
                                mainTblQry.Append("                     SELECT pf.ApprovedAllocatedAmount");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("       END        AS ApprovedAllocatedAmount,");
                                mainTblQry.Append("       CASE ");
                                mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                                 AND children.[level] = 1");
                                mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            ELSE (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("       END        AS ApprovedSubAllocatedAmount,");
                                mainTblQry.Append("       CASE ");
                                mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedBudget), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                                 AND children.[level] = 1");
                                mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedBudget), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            ELSE (");
                                mainTblQry.Append("                     SELECT pf.ApprovedBudget");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("       END        AS ApprovedBudget,");
                                mainTblQry.Append("       CASE ");
                                mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Commited), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Commited), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.UniqueKey LIKE(");
                                mainTblQry.Append("                                SELECT pe.UniqueKey");
                                mainTblQry.Append("                                FROM   PM_Entity pe");
                                mainTblQry.Append("                                WHERE  pe.ID = subtbl.ID");
                                mainTblQry.Append("                            )");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            ELSE (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Commited), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("       END        AS Commited,");
                                mainTblQry.Append("       CASE ");
                                mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Spent), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Spent), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.UniqueKey LIKE(");
                                mainTblQry.Append("                                SELECT pe.UniqueKey");
                                mainTblQry.Append("                                FROM   PM_Entity pe");
                                mainTblQry.Append("                                WHERE  pe.ID = subtbl.ID");
                                mainTblQry.Append("                            )");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            ELSE (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Spent), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("       END        AS Spent,");
                                mainTblQry.Append("       CASE ");
                                mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                                //mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0) - ISNULL(SUM(pf.ApprovedBudget), 0)");
                                mainTblQry.Append("       SELECT CASE WHEN (SELECT COUNT(1) FROM PM_CostCenterApprovedBudget pccab WHERE pccab.CostCentreID=subtbl.ID)>0 THEN  ISNULL(SUM(pf.ApprovedBudget), 0) - ISNULL(SUM(pf.ApprovedAllocatedAmount), 0) ELSE 0 END ");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                                 AND children.[level] = 1");
                                mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                                mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedBudget), 0) - ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                            INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                 AND children.[Active] = 1");
                                mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            ELSE (");
                                mainTblQry.Append("                     SELECT pf.ApprovedBudget - pf.ApprovedAllocatedAmount");
                                mainTblQry.Append("                     FROM   PM_Financial pf");
                                mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                                mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("       END        AS BudgetDeviation,");
                                mainTblQry.Append("       CASE ");
                                mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                                mainTblQry.Append("                     (");
                                mainTblQry.Append("                         SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                                mainTblQry.Append("                         FROM   PM_Financial pf");
                                mainTblQry.Append("                                INNER JOIN pm_Entity ");
                                mainTblQry.Append("                                     children");
                                mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                     AND children.[Active] = 1");
                                mainTblQry.Append("                                     AND children.[level] = 1");
                                mainTblQry.Append("                         WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                     )");
                                mainTblQry.Append("                     -(");
                                mainTblQry.Append("                         SELECT ISNULL(SUM(pf.Commited), 0)");
                                mainTblQry.Append("                         FROM   PM_Financial pf");
                                mainTblQry.Append("                                INNER JOIN pm_Entity ");
                                mainTblQry.Append("                                     children");
                                mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                     AND children.[Active] = 1");
                                mainTblQry.Append("                         WHERE  pf.CostCenterID = subtbl.ID");
                                mainTblQry.Append("                     )");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                                mainTblQry.Append("                     (");
                                mainTblQry.Append("                         SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                                mainTblQry.Append("                         FROM   PM_Financial pf");
                                mainTblQry.Append("                                INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                     AND children.[Active] = 1");
                                mainTblQry.Append("                         WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                                AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                     )");
                                mainTblQry.Append("                     -(");
                                mainTblQry.Append("                         SELECT ISNULL(SUM(pf.Commited), 0)");
                                mainTblQry.Append("                         FROM   PM_Financial pf");
                                mainTblQry.Append("                                INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                     AND children.[Active] = 1");
                                mainTblQry.Append("                         WHERE  children.UniqueKey LIKE(");
                                mainTblQry.Append("                                    SELECT pe.UniqueKey");
                                mainTblQry.Append("                                    FROM   PM_Entity pe");
                                mainTblQry.Append("                                    WHERE  pe.ID = subtbl.ID");
                                mainTblQry.Append("                                )");
                                mainTblQry.Append("                                AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                     )");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("            ELSE (");
                                mainTblQry.Append("                     (");
                                mainTblQry.Append("                         SELECT pf.ApprovedAllocatedAmount - pf.Commited");
                                mainTblQry.Append("                         FROM   PM_Financial pf");
                                mainTblQry.Append("                         WHERE  pf.EntityID = subtbl.ID");
                                mainTblQry.Append("                                AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                     )");
                                mainTblQry.Append("                     ");
                                mainTblQry.Append("                     -(");
                                mainTblQry.Append("                         SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                                mainTblQry.Append("                         FROM   PM_Financial pf");
                                mainTblQry.Append("                                INNER JOIN pm_Entity children");
                                mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                                mainTblQry.Append("                                     AND children.[Active] = 1");
                                mainTblQry.Append("                         WHERE  children.ParentID = subtbl.ID");
                                mainTblQry.Append("                                AND pf.CostCenterID = eoi.CostCenterID");
                                mainTblQry.Append("                     )");
                                mainTblQry.Append("                 )");
                                mainTblQry.Append("       END        AS Available,");

                                mainTblQry.Append("        ");
                                mainTblQry.Append(" isnull((SELECT  metso.StatusOptions FROM MM_EntityStatus mes INNER JOIN MM_EntityTypeStatus_Options metso ON mes.StatusID=metso.ID AND mes.EntityID=pe.id AND metso.IsRemoved=0),'-')  AS Status");
                            }
                            else if (EntityTypeIDs.Objective == (EntityTypeIDs)enumEntityTypeIds)
                            {
                                ArrayList objectiveDisplayColumn = new ArrayList();
                                objectiveDisplayColumn.Add("Type");
                                objectiveDisplayColumn.Add("Rating Objective");
                                objectiveDisplayColumn.Add("Target Outcome");
                                objectiveDisplayColumn.Add("Fulfilment");
                                objectiveDisplayColumn.Add("Status");
                                ArrayList objectiveColumn = new ArrayList();
                                objectiveColumn.Add("Type");
                                objectiveColumn.Add("RatingObjective");
                                objectiveColumn.Add("TargetOutcome");
                                objectiveColumn.Add("Fulfilment");
                                objectiveColumn.Add("Status");
                                Tuple<ArrayList, ArrayList> objColumn = Tuple.Create(objectiveColumn, objectiveDisplayColumn);
                                proxy.MarcomManager.GeneralColumnDefs = objColumn;
                                mainTblQry.Append(" ,CASE when pe.TypeID =10 then eoi.EID else eoi.ObjectveID  end as ObjectveID");
                                mainTblQry.Append(" ,CASE WHEN eoi.ObjectveID !=0 then cast(eoi.ObjectveID AS VARCHAR) + '.' + pe.UniqueKey ELSE CAST(pe.id AS VARCHAR) end AS class ");
                                if (IsEntityAvailable == true)
                                {
                                    mainTblQry.Append(" ,0 AS TotalChildrenCount,");
                                }
                                else
                                {
                                    string inEntiTypes = "";
                                    if (listSetting.EntityTypes != null)
                                    {
                                        inEntiTypes = "("
                                                      + String.Join(",", listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                                    + ")";

                                    }
                                    mainTblQry.Append(" ,ISNULL(CASE when pe.TypeID=10 THEN (SELECT COUNT(1) FROM   PM_ObjectiveEntityValue pecr INNER JOIN PM_Entity pe2 ");
                                    mainTblQry.Append(" ON  pecr.EntityID = pe2.ID AND pe2.[Active]=1  WHERE pecr.ObjectiveID=pe.id ");
                                    if (inEntiTypes.Length > 0)
                                    {
                                        mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + " ");
                                    }
                                    mainTblQry.Append(") else (SELECT COUNT(1) FROM PM_ObjectiveEntityValue pecr INNER JOIN PM_Entity pe2 ON pecr.EntityID=pe2.ID ");
                                    mainTblQry.Append(" AND pe2.[Active]=1 AND pe2.ParentID=pe.id WHERE pecr.ObjectiveID=eoi.ObjectveID");
                                    if (inEntiTypes.Length > 0)
                                    {
                                        mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + "  ");
                                    }
                                    mainTblQry.Append(") end,0)   AS TotalChildrenCount, ");
                                }
                                mainTblQry.Append(" (SELECT TOP 1 CASE WHEN typeid=1 THEN 'Numeric(Quantitative)' WHEN typeid=2 THEN 'Numeric(Non Quantitative)' WHEN typeid=3 then 'Qualitative'   ");
                                mainTblQry.Append(" WHEN typeid=4 THEN 'Rating'  end FROM PM_Objective po  WHERE id =pe.ID)AS Type ");
                                mainTblQry.Append(" , CASE when pe.TypeID=10 THEN  (SELECT  COUNT(1) FROM   PM_ObjectiveEntityValue pt WHERE pt.ObjectiveID =  pe.ID AND pt.RatingObjective > 0) else(SELECT Caption FROM PM_Objective_Rating WHERE ID = (SELECT TOP 1  poev.RatingObjective  ");
                                mainTblQry.Append(" FROM PM_ObjectiveEntityValue poev where poev.ObjectiveID=eoi.ObjectveID AND poev.EntityID=pe.ID)) end AS RatingObjective, ");
                                //mainTblQry.Append(" (SELECT TOP 1 poev.PlannedTarget  ");
                                //mainTblQry.Append(" FROM PM_ObjectiveEntityValue poev WHERE poev.ObjectiveID=eoi.ObjectveID AND poev.EntityID=pe.ID)AS PlannedTarget, ");
                                mainTblQry.Append(" CASE when pe.TypeID=10 THEN  (SELECT COUNT(1) FROM PM_ObjectiveEntityValue WHERE  TargetOutcome > 0 AND ObjectiveID =  pe.ID ) else (SELECT TOP 1 poev.TargetOutcome  ");
                                mainTblQry.Append(" FROM PM_ObjectiveEntityValue poev WHERE poev.ObjectiveID=eoi.ObjectveID AND poev.EntityID=pe.ID) end AS TargetOutcome, ");
                                // mainTblQry.Append(" (SELECT TOP 1 poev.Fulfilment ");
                                mainTblQry.Append(" CASE when pe.TypeID=10 THEN  (SELECT COUNT(po.Fulfilment) FROM   PM_ObjectiveEntityValue po WHERE  po.ObjectiveID =  pe.ID AND po.Fulfilment = 1) else(SELECT TOP 1 CASE WHEN  poev.Fulfilment = 1 THEN 'Fulfilled' WHEN poev.Fulfilment = 2 THEN 'Not Fulfilled' end ");
                                mainTblQry.Append(" FROM PM_ObjectiveEntityValue poev WHERE poev.ObjectiveID=eoi.ObjectveID AND poev.EntityID=pe.ID) end AS Fulfilment, ");
                                mainTblQry.Append(" CASE WHEN pe.TypeID = " + (int)EntityTypeList.Objective + " THEN (SELECT case when ISNULL(po.ObjectiveStatus,0)=0 THEN 'Deactivated'  ELSE 'Active'  END from  PM_Objective po WHERE po.id=pe.Id) else  isnull((SELECT  metso.StatusOptions FROM MM_EntityStatus mes INNER JOIN MM_EntityTypeStatus_Options metso ON mes.StatusID=metso.ID AND mes.EntityID=pe.id AND metso.IsRemoved=0),'-') end  AS Status");
                            }

                            else if (EntityTypeIDs.Calender == (EntityTypeIDs)enumEntityTypeIds)
                            {
                                ArrayList CalenderDisplayColumn = new ArrayList();
                                CalenderDisplayColumn.Add("Is External");
                                CalenderDisplayColumn.Add("Description");

                                ArrayList calenderColumn = new ArrayList();
                                calenderColumn.Add("IsExternal");
                                calenderColumn.Add("3");
                                Tuple<ArrayList, ArrayList> objCalColumn = Tuple.Create(calenderColumn, CalenderDisplayColumn);
                                proxy.MarcomManager.GeneralColumnDefs = objCalColumn;
                                mainTblQry.Append(" ,CASE when pe.TypeID =35 then eoi.EID else eoi.CalenderID  end as CalenderID");
                                mainTblQry.Append(" ,CASE WHEN eoi.CalenderID !=0 then cast(eoi.CalenderID AS VARCHAR) + '.' + pe.UniqueKey ELSE CAST(pe.id AS VARCHAR) end AS class ");
                                if (IsEntityAvailable == true)
                                {
                                    mainTblQry.Append(" ,0 AS TotalChildrenCount,");
                                }
                                else
                                {
                                    string inEntiTypes = "";
                                    if (listSetting.EntityTypes != null)
                                    {
                                        inEntiTypes = "("
                                                      + String.Join(",", listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                                    + ")";

                                    }
                                    mainTblQry.Append(" ,ISNULL(CASE when pe.TypeID=35 THEN (SELECT COUNT(1) FROM   PM_CalenderEntityValue pecr INNER JOIN PM_Entity pe2 ");
                                    mainTblQry.Append(" ON  pecr.EntityID = pe2.ID AND pe2.[Active]=1  WHERE pecr.CalenderID=pe.id ");
                                    if (inEntiTypes.Length > 0)
                                    {
                                        mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + " ");
                                    }
                                    mainTblQry.Append(") else (SELECT COUNT(1) FROM PM_CalenderEntityValue pecr INNER JOIN PM_Entity pe2 ON pecr.EntityID=pe2.ID ");
                                    mainTblQry.Append(" AND pe2.[Active]=1 AND pe2.ParentID=pe.id WHERE pecr.CalenderID=eoi.CalenderID");
                                    if (inEntiTypes.Length > 0)
                                    {
                                        mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + "  ");
                                    }
                                    mainTblQry.Append(") end,0)   AS TotalChildrenCount ");
                                }
                            }
                        }
                        else
                        {
                            ArrayList objectiveDisplayColumn = new ArrayList();
                            objectiveDisplayColumn.Add("Type");
                            objectiveDisplayColumn.Add("StartDate");
                            objectiveDisplayColumn.Add("EndDate");
                            objectiveDisplayColumn.Add("Owner");
                            objectiveDisplayColumn.Add("Status");
                            ArrayList objectiveColumn = new ArrayList();
                            objectiveColumn.Add("Type");
                            objectiveColumn.Add("StartDate");
                            objectiveColumn.Add("EndDate");
                            objectiveColumn.Add("Owner");
                            objectiveColumn.Add("Status");
                            Tuple<ArrayList, ArrayList> objColumn = Tuple.Create(objectiveColumn, objectiveDisplayColumn);
                            proxy.MarcomManager.GeneralColumnDefs = objColumn;
                            mainTblQry.Append(" ,(SELECT TOP 1 CASE WHEN typeid=1 THEN 'Numeric(Quantitative)' WHEN typeid=2 THEN 'Numeric(Non Quantitative)' WHEN typeid=3 then 'Qualitative'   ");
                            mainTblQry.Append(" WHEN typeid=4 THEN 'Rating'  end FROM PM_Objective po  WHERE id =subtbl.ID)AS Type ");
                            mainTblQry.Append(" ,(SELECT top 1 CAST( po.StartDate AS NVARCHAR(10)) FROM PM_Objective po WHERE po.id=subtbl.Id) as StartDate, ");
                            mainTblQry.Append(" (SELECT top 1 CAST(po.EndDate AS NVARCHAR(10)) FROM PM_Objective po WHERE po.id=subtbl.Id) as EndDate, ");
                            mainTblQry.Append("ISNULL( (SELECT top 1  ISNULL(us.FirstName,'') + ' ' + ISNULL(us.LastName,'')  FROM UM_User us INNER JOIN AM_Entity_Role_User aeru ON us.ID=aeru.UserID AND aeru.EntityID=subtbl.Id  INNER JOIN AM_EntityTypeRoleAcl aetra ON  aeru.RoleID = aetra.ID AND  aetra.EntityTypeID=pe.TypeID AND aetra.EntityRoleID = 1),'-') as Owner ");
                            mainTblQry.Append(",(SELECT case when ISNULL(po.ObjectiveStatus,0)=0 THEN 'Deactivated'  ELSE 'Active'  END from  PM_Objective po WHERE po.id=subtbl.Id)  AS Status");
                        }

                        int LastTreeLevel = listSetting.Attributes.Where(a => (AttributesList)a.Type == AttributesList.TreeMultiSelection).OrderByDescending(a => a.Level).Select(a => a.Level).FirstOrDefault();

                        for (int j = 0; j < listSetting.Attributes.Count; j++)
                        {

                            string CurrentattrID = listSetting.Attributes[j].Id.ToString();
                            if (listSetting.Attributes[j].IsSpecial == true)
                            {
                                switch ((SystemDefinedAttributes)listSetting.Attributes[j].Id)
                                {
                                    case SystemDefinedAttributes.Owner:
                                        mainTblQry.Append(",ISNULL( (SELECT top 1  ISNULL(us.FirstName,'') + ' ' + ISNULL(us.LastName,'')  FROM UM_User us INNER JOIN AM_Entity_Role_User aeru ON us.ID=aeru.UserID AND aeru.EntityID=subtbl.Id  INNER JOIN AM_EntityTypeRoleAcl aetra ON  aeru.RoleID = aetra.ID AND  aetra.EntityTypeID=pe.TypeID AND aetra.EntityRoleID = 1),'-') as '" + listSetting.Attributes[j].Field + "'");
                                        break;
                                    case SystemDefinedAttributes.EntityStatus:
                                        mainTblQry.Append(", CASE WHEN pe.TypeID = " + (int)EntityTypeList.Objective + " THEN (SELECT case when ISNULL(po.ObjectiveStatus,0)=0 THEN 'Deactivated'  ELSE 'Active'  END from  PM_Objective po WHERE po.id=subtbl.Id) else isnull((SELECT  metso.StatusOptions FROM MM_EntityStatus mes INNER JOIN MM_EntityTypeStatus_Options metso ON mes.StatusID=metso.ID AND mes.EntityID=subtbl.id AND metso.IsRemoved=0),'-') end as '" + listSetting.Attributes[j].Field + "'");
                                        break;
                                    case SystemDefinedAttributes.EntityOnTimeStatus:
                                        mainTblQry.Append(", CASE WHEN pe.TypeID = " + (int)EntityTypeList.Objective + " THEN (SELECT case when ISNULL(po.ObjectiveStatus,0)=0 THEN '-'  ELSE '-'  END from  PM_Objective po WHERE po.id=subtbl.Id) else isnull((SELECT CASE WHEN (SELECT mes.IntimeStatus FROM MM_EntityStatus mes WHERE mes.EntityID=subtbl.id) = 0 THEN 'On time' WHEN (SELECT mes.IntimeStatus FROM MM_EntityStatus mes WHERE mes.EntityID=subtbl.id) = 1 THEN 'Delayed' WHEN (SELECT mes.IntimeStatus FROM MM_EntityStatus mes WHERE mes.EntityID=subtbl.id) = 2 THEN 'On hold' ELSE 'On time' END AS ontimestatus), '-') END AS '" + listSetting.Attributes[j].Field + "'");
                                        break;
                                    case SystemDefinedAttributes.MyRoleEntityAccess:

                                        mainTblQry.Append(", (select STUFF((SELECT',' +   ar.Caption ");
                                        mainTblQry.Append(" FROM AM_EntityTypeRoleAcl ar INNER JOIN AM_Entity_Role_User aeru ON ar.ID=aeru.RoleID  AND aeru.EntityID= pe.Id AND aeru.UserId= " + proxy.MarcomManager.User.Id + " ");
                                        mainTblQry.Append(" FOR XML PATH('')),1,1,'') AS x) AS '" + listSetting.Attributes[j].Field + "'");
                                        break;
                                    case SystemDefinedAttributes.MyRoleGlobalAccess:
                                        mainTblQry.Append(",(select STUFF((SELECT',' +   agr.Caption ");
                                        mainTblQry.Append(" FROM AM_GlobalRole agr  INNER JOIN AM_GlobalRole_User agru  ON agr.ID=agru.GlobalRoleId  AND agru.UserId= " + proxy.MarcomManager.User.Id + " ");
                                        mainTblQry.Append(" FOR XML PATH('')),1,1,'') AS x) AS '" + listSetting.Attributes[j].Field + "'");
                                        break;
                                    case SystemDefinedAttributes.ObjectiveStatus:
                                        mainTblQry.Append(", CASE WHEN pe.TypeID = " + (int)EntityTypeList.Objective + " THEN (SELECT case when ISNULL(po.ObjectiveStatus,0)=0 THEN 'Deactivated'  ELSE 'Active'  END from  PM_Objective po WHERE po.id=pe.Id) else  isnull((SELECT  metso.StatusOptions FROM MM_EntityStatus mes INNER JOIN MM_EntityTypeStatus_Options metso ON mes.StatusID=metso.ID AND mes.EntityID=pe.id AND metso.IsRemoved=0),'-') end  AS '" + listSetting.Attributes[j].Field + "'");
                                        break;
                                    case SystemDefinedAttributes.IsExternal:
                                        mainTblQry.Append(",(SELECT pc.IsExternal AS [Isexternal] FROM PM_Calender pc WHERE pc.id = pe.Id)  AS [IsExternal]");
                                        break;
                                }
                            }
                            else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.ListMultiSelection || (AttributesList)listSetting.Attributes[j].Type == AttributesList.DropDownTree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Tree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Period || (AttributesList)listSetting.Attributes[j].Type == AttributesList.TreeMultiSelection)
                            {
                                switch ((AttributesList)listSetting.Attributes[j].Type)
                                {
                                    case AttributesList.ListMultiSelection:

                                        if (listSetting.Attributes[j].Id != (int)SystemDefinedAttributes.ObjectiveType)
                                        {

                                            mainTblQry.Append(" ,(SELECT  ");
                                            mainTblQry.Append(" STUFF( ");
                                            mainTblQry.Append(" ( ");
                                            mainTblQry.Append(" SELECT ', ' +  mo.Caption ");
                                            mainTblQry.Append(" FROM   MM_MultiSelect mms2 ");
                                            mainTblQry.Append(" INNER JOIN MM_Option mo ");
                                            mainTblQry.Append(" ON  mms2.OptionID = mo.ID and  mms2.AttributeID=" + listSetting.Attributes[j].Id);
                                            mainTblQry.Append("  WHERE  mms2.EntityID = mms.EntityID ");
                                            mainTblQry.Append(" FOR XML PATH('') ");
                                            mainTblQry.Append(" ), ");
                                            mainTblQry.Append("  1, ");
                                            mainTblQry.Append(" 2, ");
                                            mainTblQry.Append(" '' ");
                                            mainTblQry.Append("  )               AS VALUE ");
                                            mainTblQry.Append(" FROM   MM_MultiSelect     mms ");
                                            mainTblQry.Append(" WHERE  mms.EntityID=subtbl.Id and  mms.AttributeID = " + CurrentattrID + " ");
                                            mainTblQry.Append(" GROUP BY ");
                                            mainTblQry.Append("  mms.EntityID) as '" + listSetting.Attributes[j].Field + "'");
                                        }
                                        else if (listSetting.Attributes[j].Id == (int)SystemDefinedAttributes.ObjectiveType)
                                        {
                                            mainTblQry.Append(" ,(SELECT TOP 1 CASE WHEN typeid=1 THEN 'Numeric(Quantitative)' WHEN typeid=2 THEN 'Numeric(Non Quantitative)' WHEN typeid=3 then 'Qualitative'   ");
                                            mainTblQry.Append(" WHEN typeid=4 THEN 'Rating'  end FROM PM_Objective po  WHERE id =subtbl.ID)AS '" + listSetting.Attributes[j].Field + "'");
                                        }
                                        break;
                                    case AttributesList.DropDownTree:
                                        mainTblQry.Append(" ,(ISNULL( ");

                                        mainTblQry.Append(" ( ");
                                        mainTblQry.Append(" SELECT top 1 mtn.Caption ");
                                        mainTblQry.Append(" FROM   MM_TreeNode mtn ");
                                        mainTblQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                        mainTblQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                        mainTblQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                        mainTblQry.Append("   AND mtn.Level = " + listSetting.Attributes[j].Level + " ");
                                        mainTblQry.Append("  WHERE  mtv.EntityID = subtbl.Id ");
                                        mainTblQry.Append(" AND mtv.AttributeID = " + CurrentattrID + "   ");
                                        mainTblQry.Append(" ), ");
                                        mainTblQry.Append(" '-' ");
                                        mainTblQry.Append(" ) ) as '" + listSetting.Attributes[j].Field + "'");
                                        break;
                                    case AttributesList.Tree:
                                        //mainTblQry.Append(" ,'IsTree' as '" + listSetting.Attributes[j].Field + "'");

                                        mainTblQry.Append(" , STUFF((SELECT ', ' + mmt.Caption FROM MM_TreeValue mtv INNER JOIN MM_TreeNode mmt ON mmt.ID = mtv.NodeID AND mtv.AttributeID = " + listSetting.Attributes[j].Field + " WHERE mtv.EntityID = subtbl.Id ORDER BY mmt.[KEY] FOR XML PATH('')), 1, 2, '') as '" + listSetting.Attributes[j].Field + "'");
                                        break;
                                    case AttributesList.Period:
                                        mainTblQry.Append(" ,(SELECT (SELECT CONVERT(NVARCHAR(10), pep.StartDate, 120)  '@s', CONVERT(NVARCHAR(10), pep.EndDate, 120) '@e',");
                                        mainTblQry.Append(" pep.[Description] '@d', ROW_NUMBER() over(ORDER BY pep.Startdate) '@sid',");
                                        mainTblQry.Append(" pep.ID '@o'");
                                        mainTblQry.Append(" FROM   PM_EntityPeriod pep");
                                        mainTblQry.Append(" WHERE  pep.EntityID = subtbl.Id ORDER BY pep.Startdate FOR XML PATH('p'),");
                                        mainTblQry.Append(" TYPE");
                                        mainTblQry.Append(" ) FOR XML PATH('root')");
                                        mainTblQry.Append(" )  AS 'Period'");

                                        mainTblQry.Append(",(SELECT ISNULL(CAST(MIN(pep.Startdate) AS VARCHAR(10)) + '  ' + CAST(MAX(pep.EndDate)AS VARCHAR(10)),'-' )  ");
                                        mainTblQry.Append(" FROM PM_EntityPeriod pep WHERE pep.EntityID= subtbl.Id) AS TempPeriod ");

                                        mainTblQry.Append(" ,(SELECT (SELECT CONVERT(NVARCHAR(10), pep.Attr_56, 120)  '@s',");
                                        mainTblQry.Append(" pep.Attr_2 '@d',");
                                        mainTblQry.Append(" pep.Attr_67 '@ms',isnull(pem.Name,'') '@n',");
                                        mainTblQry.Append(" pep.ID '@o'");
                                        mainTblQry.Append(" FROM   MM_AttributeRecord_" + (int)EntityTypeList.Milestone + " pep  INNER JOIN PM_Entity pem ON pep.ID=pem.id ");
                                        mainTblQry.Append(" WHERE  pep.Attr_66 = subtbl.Id FOR XML PATH('p'),");
                                        mainTblQry.Append(" TYPE");
                                        mainTblQry.Append(" ) FOR XML PATH('root')");
                                        mainTblQry.Append(" )  AS 'MileStone'");
                                        break;
                                    case AttributesList.TreeMultiSelection:
                                        if (LastTreeLevel == listSetting.Attributes[j].Level)
                                        {
                                            mainTblQry.Append(" ,(SELECT  ");
                                            mainTblQry.Append(" STUFF( ");
                                            mainTblQry.Append(" ( ");
                                            mainTblQry.Append(" SELECT ', ' +  mtn.Caption ");
                                            mainTblQry.Append(" FROM   MM_TreeNode mtn ");
                                            mainTblQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                            mainTblQry.Append(" ON  mtv.NodeID = mtn.ID and  mtv.AttributeID=" + listSetting.Attributes[j].Id);
                                            mainTblQry.Append("  AND mtn.Level = " + listSetting.Attributes[j].Level + " WHERE mtv.EntityID = subtbl.Id AND mtv.AttributeID = " + CurrentattrID + "  ");
                                            mainTblQry.Append(" FOR XML PATH('') ");
                                            mainTblQry.Append(" ), ");
                                            mainTblQry.Append("  1, ");
                                            mainTblQry.Append(" 2, ");
                                            mainTblQry.Append(" '' ");
                                            mainTblQry.Append(" ) ) as '" + listSetting.Attributes[j].Field + "'");
                                        }
                                        else
                                        {
                                            mainTblQry.Append(" ,(ISNULL( ");

                                            mainTblQry.Append(" ( ");
                                            mainTblQry.Append(" SELECT top 1 mtn.Caption ");
                                            mainTblQry.Append(" FROM   MM_TreeNode mtn ");
                                            mainTblQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                            mainTblQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                            mainTblQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                            mainTblQry.Append("   AND mtn.Level = " + listSetting.Attributes[j].Level + " ");
                                            mainTblQry.Append("  WHERE  mtv.EntityID = subtbl.Id ");
                                            mainTblQry.Append(" AND mtv.AttributeID = " + CurrentattrID + "   ");
                                            mainTblQry.Append(" ), ");
                                            mainTblQry.Append(" '-' ");
                                            mainTblQry.Append(" ) ) as '" + listSetting.Attributes[j].Field + "'");
                                        }
                                        break;
                                }
                            }
                            else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.ListSingleSelection)
                            {
                                mainTblQry.Append(",(isnull( (SELECT top 1 caption FROM MM_Option  WHERE AttributeID=" + CurrentattrID + " AND id=subtbl.Attr_" + CurrentattrID + "),'-') ) as '" + listSetting.Attributes[j].Field + "'");
                            }
                            else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.EntityOverviewStatus)
                            {
                            }
                            else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.CheckBoxSelection)
                            {
                                mainTblQry.Append(" ,isnull(cast(subtbl.attr_" + CurrentattrID + " as varchar(50)), '-') as '" + listSetting.Attributes[j].Field + "'");
                            }
                            else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.DateTime)
                            {
                                mainTblQry.Append(" ,REPLACE(CONVERT(char(10),isnull(subtbl.attr_" + CurrentattrID + " ,''),126),'1900-01-01', '-') as '" + listSetting.Attributes[j].Field + "'");
                                //--ISNULL(subtbl.attr_62, '-')  AS '62'
                                //REPLACE(CONVERT(varchar, ISNULL(subtbl.attr_62,''),121),'1900-01-01 00:00:00.000','-')  AS '62'
                            }
                            else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.ParentEntityName)
                            {
                                mainTblQry.Append(" ,isnull((SELECT top 1 pe2.name  + '!@#' + met.ShortDescription + '!@#' + met.ColorCode FROM PM_Entity pe2 INNER JOIN MM_EntityType met ON pe2.TypeID=met.ID  WHERE  pe2.id=pe.parentid), '-') as '" + listSetting.Attributes[j].Field + "'");
                            }
                            ///Added by NIrmal
                            else if (listSetting.EntityTypes[0] == 35)
                            {
                                mainTblQry.Append(" ,isnull(subtbl.Description , '-') as '" + listSetting.Attributes[j].Field + "'");
                                mainTblQry.Append(" ,isnull(subtbl.Visibilityperiod , '-') as  [Visibilityperiod] ");
                                mainTblQry.Append(" ,isnull(subtbl.Visibilitytype , '-') as  [Visibilitytype] ");
                                mainTblQry.Append(" ,(subtbl.PublishedOn) as  [PublishedOn] ");
                            }
                            else
                            {
                                mainTblQry.Append(" ,isnull(subtbl.attr_" + CurrentattrID + " , '-') as '" + listSetting.Attributes[j].Field + "'");
                            }

                        }
                        //static query
                        mainTblQry.Append(" From (" + strqry.ToString() + ") as subtbl");
                        proxy.MarcomManager.EntityMainQuery = mainTblQry.ToString();
                    }

                    //if (IsAttributegroupfilter)
                    //    finalQry.Append(attributegroupEntityTblQry.ToString());

                    finalQry.Append(XmlFilterQry.ToString());


                    //finalQry.AppendLine("");
                    //finalQry.Append("--------------------------------------------");
                    //finalQry.AppendLine("");

                    //finalQry.Append(mainTblQry.ToString());

                    finalQry.Append(proxy.MarcomManager.EntityMainQuery.ToString());

                    //if (IsAttributegroupfilter)
                    //    finalQry.Append(" INNER JOIN @TempEntityTable pe ");
                    //else
                    //    finalQry.Append("  INNER JOIN PM_Entity pe ");

                    finalQry.Append("  INNER JOIN PM_Entity pe ");

                    finalQry.Append(" ON subtbl.Id=pe.ID INNER JOIN MM_EntityType met  ");
                    finalQry.Append(" ON pe.TypeID=met.ID  ");
                    finalQry.Append(" INNER JOIN @EntityOrderIDs eoi ON  eoi.EID = subtbl.Id AND pe.TypeID NOT IN (SELECT mett.EntitytypeId FROM MM_EntityTaskType mett) ");  // hide Tasktype in dynamic entity

                    if (SortOrderColumn.Length == 0)
                    {
                        if (IsAttributegroupfilter)
                            finalQry.Append(" ORDER BY eoi.OptionCaption, eoi.ID ");
                        else
                            finalQry.Append(" ORDER BY eoi.ID ");
                    }


                    //s5.Stop();
                    //strStringText.Append("-------------- main query construction end   s5 ---" + s5.Elapsed.TotalMilliseconds + "----").Append("\n");

                    //var s6 = Stopwatch.StartNew();

                    //strStringText.Append("-------------- main query execution start   s6 -------").Append("\n");

                    lstrecord.Data = tx.PersistenceManager.MetadataRepository.ExecuteQuery(finalQry.ToString());

                    foreach (Hashtable entry in lstrecord.Data)
                    {
                        string value = (string)entry["Name"];
                        entry["Name"] = HttpUtility.HtmlDecode(value);
                    }

                    //s6.Stop();
                    //strStringText.Append("-------------- main query execution end   s6 ---" + s6.Elapsed.TotalMilliseconds + "----").Append("\n");

                    //var s5 = Stopwatch.StartNew();


                    AttributeDao attrdao = new AttributeDao();
                    IList<IAttribute> _iiAttribute = new List<IAttribute>();
                    foreach (var item in listSetting.Attributes)
                    {
                        int id = item.Id;
                        attrdao = tx.PersistenceManager.MetadataRepository.Get<AttributeDao>(id);
                        if (attrdao != null)
                        {
                            IAttribute _iAttribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                            _iAttribute.Caption = attrdao.Caption;
                            _iAttribute.AttributeTypeID = attrdao.AttributeTypeID;
                            _iAttribute.IsSystemDefined = attrdao.IsSystemDefined;
                            _iAttribute.Id = attrdao.Id;
                            _iiAttribute.Add(_iAttribute);
                        }
                    }

                    //System.Threading.Tasks.Parallel.ForEach(listSetting.Attributes, item => {
                    //    int id = item.Id;
                    //    attrdao = tx.PersistenceManager.MetadataRepository.Query<AttributeDao>().Where(az=>az.Id==id).SingleOrDefault();
                    //    if (attrdao != null)
                    //    {
                    //        IAttribute _iAttribute = new BrandSystems.Marcom.Core.Metadata.Attribute();
                    //        _iAttribute.Caption = attrdao.Caption;
                    //        _iAttribute.AttributeTypeID = attrdao.AttributeTypeID;
                    //        _iAttribute.IsSystemDefined = attrdao.IsSystemDefined;
                    //        _iAttribute.Id = attrdao.Id;
                    //        _iiAttribute.Add(_iAttribute);
                    //    }
                    //});


                    lstrecord.DataCount = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).ToList().Count;
                    lstrecord.Attributes = _iiAttribute;
                    lstrecord.ColumnDefs = listSetting.Attributes;
                    lstrecord.GeneralColumnDefs = proxy.MarcomManager.GeneralColumnDefs;


                    tx.Commit();
                    //s1.Stop();
                    //strStringText.Append("-------------- Function End   s1 ---" + s1.Elapsed.TotalMilliseconds + "----").Append("\n");
                    //TextFileWriter(strStringText);
                    return lstrecord;


                }

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch
            {
                return null;
            }


        }

        public IList<int> ListofReportRecords(MetadataManagerProxy proxy, int FilterID, IList<IFiltersettingsValues> filterSettingValues, int[] IdArr, string SortOrderColumn, bool IsDesc, ListSettings listSetting, bool IncludeChildren, int enumEntityTypeIds, int EntityID, bool IsSingleID, int UserID, int Level, bool IsobjectiveRootLevel, int ExpandingEntityID)
        {


            try
            {

                //Create EntitySortorderIdColleHash

                StringBuilder SearchCriteria = new StringBuilder();


                SearchCriteria.Append("FilterID=" + FilterID);
                SearchCriteria.Append("filterSettingValues=");

                for (int i = 0; i < filterSettingValues.Count; i++)
                {
                    SearchCriteria.Append(filterSettingValues[i].AttributeId);
                    SearchCriteria.Append(filterSettingValues[i].AttributeTypeId);
                    SearchCriteria.Append(filterSettingValues[i].EndDate);
                    SearchCriteria.Append(filterSettingValues[i].EntityTypeIDs);
                    SearchCriteria.Append(filterSettingValues[i].FilterId);
                    SearchCriteria.Append(filterSettingValues[i].Id);
                    SearchCriteria.Append(filterSettingValues[i].Keyword);
                    SearchCriteria.Append(filterSettingValues[i].Level);
                    SearchCriteria.Append(filterSettingValues[i].StartDate);
                    SearchCriteria.Append(filterSettingValues[i].Value);
                }


                SearchCriteria.Append("IdArr=" + String.Join(",", IdArr.Select(x => x.ToString()).ToArray()));

                SearchCriteria.Append("SortOrderColumn=" + SortOrderColumn + "IsDesc=" + IsDesc);

                SearchCriteria.Append("listSetting=");

                int[] EntityTypes = (int[])listSetting.EntityTypes.ToArray();

                for (int i = 0; i < EntityTypes.Length; i++)
                {
                    SearchCriteria.Append(EntityTypes[i]);
                }

                for (int i = 0; i < listSetting.Attributes.Count; i++)
                {
                    SearchCriteria.Append(listSetting.Attributes[i].Id);
                    SearchCriteria.Append(listSetting.Attributes[i].Level);
                }


                //SearchCriteria.Append("IncludeChildren=" + IncludeChildren + "enumEntityTypeIds=" + enumEntityTypeIds + "EntityID=" + EntityID + "IsSingleID=" + IsSingleID + "UserID=" + UserID + "Level=" + Level + "IsobjectiveRootLevel=" + IsobjectiveRootLevel);
                SearchCriteria.Append("enumEntityTypeIds=" + enumEntityTypeIds + "UserID=" + UserID + "Level=" + Level + "IsobjectiveRootLevel=" + IsobjectiveRootLevel);


                int SearchCriteriaHash = SearchCriteria.ToString().GetHashCode();



                IEntityTypeAttributeRelation _ientitytyperelation = new EntityTypeAttributeRelation();
                IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                IListofRecord lstrecord = new ListofRecord();
                IList listresult1;
                IList<int> enditid = new List<int>();
                StringBuilder strqry = new StringBuilder();
                StringBuilder strAttribute = new StringBuilder();
                StringBuilder dynamicTblQry = new StringBuilder();
                StringBuilder multiSelectTblQry = new StringBuilder();
                StringBuilder singleSelectTblQry = new StringBuilder();
                StringBuilder treeTblQry = new StringBuilder();
                StringBuilder periodTblQry = new StringBuilder();
                StringBuilder finalQry = new StringBuilder();

                StringBuilder topFilterQry = new StringBuilder();
                StringBuilder TempTblQry = new StringBuilder();

                StringBuilder Costcent = new StringBuilder();
                StringBuilder Objective = new StringBuilder();


                StringBuilder XmlFilterQry = new StringBuilder();
                IList<Hashtable> CollectedIdsResult = new List<Hashtable>();

                bool IsEntityAvailable = false;


                if (proxy.MarcomManager.EntitySortorderIdColleHash != SearchCriteriaHash || proxy.MarcomManager.EntitySortorderIdColle == null || (proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Id == ExpandingEntityID).ToList().Count == 0 && ExpandingEntityID > 0))
                {

                    proxy.MarcomManager.EntitySortorderIdColleHash = SearchCriteriaHash;


                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        IQueryable<EntityDao> UniqueKeyCollection = null;
                        if (IdArr != null && IdArr.Length > 0)
                        {
                            string EntityIdArr = "("
                                                   + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                 + ")";
                            UniqueKeyCollection =
                                tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                    .Where(a => IdArr.Contains(a.Id));


                        }

                        //Fetch all entity attribute relation
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeAttributeRelationDao>();
                        var ValidEntityTypes = listSetting.EntityTypes;
                        List<int> newValidEntityTypes = new List<int>((int[])listSetting.EntityTypes.ToArray().Clone());

                        if (EntityTypeIDs.Activity == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            topFilterQry.Append(
                                " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT,LEVEL int,PEID int)  ");
                            topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                            topFilterQry.Append(" ( ");
                            topFilterQry.Append("  EID,LEVEL,PEID ");
                            topFilterQry.Append(" ) ");
                        }

                        else if (EntityTypeIDs.Costcenre == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            topFilterQry.Append(
                                " DECLARE @CostCentreOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, EKEY NVARCHAR(450), CostCenterID INT Default(0),LEVEL int,PEID int)  ");
                            topFilterQry.Append(
                                " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, CostCenterID INT Default(0),LEVEL int,PEID int)  ");



                            for (var i = 0; i < IdArr.Length; i++)
                            {
                                topFilterQry.Append(" INSERT INTO @CostCentreOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,CostCenterID,LEVEL,PEID ");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append(
                                    " SELECT pe.ID , pe.UniqueKey, 0 as CostCenterID,pe.Level,pe.parentid FROM PM_Entity pe WHERE pe.ID=" +
                                    IdArr[i]);
                                topFilterQry.Append(" INSERT INTO @CostCentreOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,CostCenterID,LEVEL,PEID ");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append(
                                    " SELECT pe.ID, pe.UniqueKey, pecr.CostCenterID,pe.Level,pe.parentid  FROM PM_EntityCostReleations pecr INNER JOIN PM_Entity pe ON pecr.EntityID=pe.ID ");
                                topFilterQry.Append(" AND pe.[Active]=1 AND pecr.IsActive=1  and pecr.CostCenterID=" + IdArr[i] + " ");

                                topFilterQry.Append("INNER JOIN PM_Entity_Sort pes ");
                                topFilterQry.Append("            ON  pe.ID = pes.id");
                                topFilterQry.Append(" ORDER BY ");
                                topFilterQry.Append("       pes.S1   ASC,");
                                topFilterQry.Append("       pes.L1   ASC,");
                                topFilterQry.Append("       pes.S2   ASC,");
                                topFilterQry.Append("       pes.L2   ASC,");
                                topFilterQry.Append("       pes.S3   ASC,");
                                topFilterQry.Append("       pes.L3   ASC,");
                                topFilterQry.Append("       pes.S4   ASC,");
                                topFilterQry.Append("       pes.L4   ASC,");
                                topFilterQry.Append("       pes.S5   ASC,");
                                topFilterQry.Append("       pes.L5   ASC,");
                                topFilterQry.Append("       pes.S6   ASC,");
                                topFilterQry.Append("       pes.L6   ASC,");
                                topFilterQry.Append("       pes.S7   ASC,");
                                topFilterQry.Append("       pes.L7   ASC,");
                                topFilterQry.Append("       pes.S8   ASC,");
                                topFilterQry.Append("       pes.L8   ASC,");
                                topFilterQry.Append("       pes.S9   ASC,");
                                topFilterQry.Append("       pes.L9   ASC,");
                                topFilterQry.Append("       pes.S10  ASC,");
                                topFilterQry.Append("       pes.L10  ASC");


                                //topFilterQry.Append(" AND pe.[Active]=1 AND pecr.IsActive=1  AND pe.[level]<" +
                                //                (Level == 0 ? 2 : Level) + "  and pecr.CostCenterID=" + IdArr[i] +
                                //                " ORDER BY pe.UniqueKey");
                            }

                        }
                        else if (EntityTypeIDs.Objective == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            topFilterQry.Append(
                                " DECLARE @ObjectiveOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, EKEY NVARCHAR(450), ObjectveID INT Default(0),LEVEL int,PEID int)  ");
                            topFilterQry.Append(
                                " DECLARE @EntityOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, ObjectveID INT Default(0),LEVEL int,PEID int)  ");


                            //Objective.Append(
                            //    " DECLARE @ObjectiveOrderIDs TABLE ([ID] [int] IDENTITY(1, 1) NOT NULL, EID INT, EKEY NVARCHAR(450), ObjectveID INT Default(0),LEVEL int,PEID int)  ");


                            for (var i = 0; i < IdArr.Length; i++)
                            {
                                topFilterQry.Append(" INSERT INTO @ObjectiveOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,ObjectveID,LEVEL,PEID");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append(
                                    " SELECT pe.ID, pe.UniqueKey,0 as ObjectveID,pe.Level,pe.parentid  FROM PM_Entity pe WHERE pe.ID=" +
                                    IdArr[i]);
                                topFilterQry.Append(" INSERT INTO @ObjectiveOrderIDs ");
                                topFilterQry.Append(" ( ");
                                topFilterQry.Append("  EID,EKEY,ObjectveID,LEVEL,PEID ");
                                topFilterQry.Append(" ) ");
                                topFilterQry.Append(
                                    " SELECT pe.ID, pe.UniqueKey,poev.ObjectiveID,pe.Level,pe.parentid FROM PM_ObjectiveEntityValue poev INNER JOIN PM_Entity pe ON poev.EntityID=pe.ID  ");
                                topFilterQry.Append(" AND pe.[Active]=1 AND poev.ObjectiveID=" + IdArr[i] + " ");

                                topFilterQry.Append("INNER JOIN PM_Entity_Sort pes ");
                                topFilterQry.Append("            ON  pe.ID = pes.id");
                                topFilterQry.Append(" ORDER BY ");
                                topFilterQry.Append("       pes.S1   ASC,");
                                topFilterQry.Append("       pes.L1   ASC,");
                                topFilterQry.Append("       pes.S2   ASC,");
                                topFilterQry.Append("       pes.L2   ASC,");
                                topFilterQry.Append("       pes.S3   ASC,");
                                topFilterQry.Append("       pes.L3   ASC,");
                                topFilterQry.Append("       pes.S4   ASC,");
                                topFilterQry.Append("       pes.L4   ASC,");
                                topFilterQry.Append("       pes.S5   ASC,");
                                topFilterQry.Append("       pes.L5   ASC,");
                                topFilterQry.Append("       pes.S6   ASC,");
                                topFilterQry.Append("       pes.L6   ASC,");
                                topFilterQry.Append("       pes.S7   ASC,");
                                topFilterQry.Append("       pes.L7   ASC,");
                                topFilterQry.Append("       pes.S8   ASC,");
                                topFilterQry.Append("       pes.L8   ASC,");
                                topFilterQry.Append("       pes.S9   ASC,");
                                topFilterQry.Append("       pes.L9   ASC,");
                                topFilterQry.Append("       pes.S10  ASC,");
                                topFilterQry.Append("       pes.L10  ASC");

                            }

                        }
                        var filtervalues =
                            tx.PersistenceManager.PlanningRepository.GetEquals<FilterSettingsDao>(
                                FilterSettingsDao.PropertyNames.FilterID, FilterID);

                        ///Filter query 
                        if (FilterID > 0 || filterSettingValues.Count() > 0)
                        {
                            //Create a list to hold all the valid EntityTypes

                            IList<FiltersettingsValuesDao> filterValResult = new List<FiltersettingsValuesDao>();
                            IList<FilterSettingsDao> filterObject = new List<FilterSettingsDao>();

                            //To get filter data
                            if (filterSettingValues != null && filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).AttributeId != 0)
                                {
                                    foreach (var objFlter in filterSettingValues)
                                    {
                                        if (objFlter.AttributeId != 0)
                                        {
                                            FiltersettingsValuesDao setValDao = new FiltersettingsValuesDao();
                                            setValDao.AttributeId = objFlter.AttributeId;
                                            setValDao.AttributeTypeId = objFlter.AttributeTypeId;
                                            setValDao.Level = objFlter.Level;
                                            setValDao.Value = objFlter.Value;
                                            filterValResult.Add(setValDao);
                                        }
                                    }
                                }
                                if (filterSettingValues.ElementAt(0).EntityTypeIDs.Length > 0)
                                {
                                    filterObject.Add(new FilterSettingsDao
                                    {
                                        EntityTypeID = filterSettingValues.ElementAt(0).EntityTypeIDs
                                    });
                                    IsEntityAvailable = true;
                                }
                            }
                            else
                            {
                                filterValResult =
                                    tx.PersistenceManager.PlanningRepository.GetEquals<FiltersettingsValuesDao>(
                                        FiltersettingsValuesDao.PropertyNames.FilterId, FilterID);
                                filterObject =
                                    tx.PersistenceManager.PlanningRepository.GetEquals<FilterSettingsDao>(
                                        FilterSettingsDao.PropertyNames.FilterID, FilterID);

                            }

                            //Entity Types looping to get valid entityTypes
                            for (int fi = 0; fi < listSetting.EntityTypes.Count; fi++)
                            {

                                for (int fj = 0; fj < filterValResult.ToList().Count; fj++)
                                {

                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                               where
                                                                   val.AttributeID == filterValResult[fj].AttributeId &&
                                                                   val.EntityTypeID == listSetting.EntityTypes[fi]
                                                               select val;
                                    if (listSetting.EntityTypes.Count() != 0)
                                    {
                                        if (lstEntiTypeAttribute.ToList().Count <= 0)
                                        {
                                            newValidEntityTypes.Remove(listSetting.EntityTypes[fi]);
                                        }
                                    }
                                }
                            }

                            if (filterObject.Count() > 0)
                            {
                                if (filterObject != null && filterObject.ElementAt(0).EntityTypeID.Trim().Length > 0)
                                {
                                    IsEntityAvailable = true;
                                    newValidEntityTypes = null;
                                    newValidEntityTypes = new List<int>();
                                    string[] EntitypesArr = filterObject.ElementAt(0).EntityTypeID.Split(',');
                                    for (int fo = 0; fo < EntitypesArr.Length; fo++)
                                    {
                                        newValidEntityTypes.Add(Convert.ToInt32(EntitypesArr[fo]));
                                    }
                                }
                            }

                            //To fetch entitytypes related data
                            for (int ve = 0; ve < newValidEntityTypes.Count; ve++)
                            {
                                string entityType = newValidEntityTypes[ve].ToString();
                                ;
                                dynamicTblQry.Append(" SELECT id FROM MM_AttributeRecord_" + entityType +
                                                     "  WHERE  1=1 ");

                                for (int fj = 0; fj < filterValResult.ToList().Count; fj++)
                                {
                                    int attributeID = filterValResult[fj].AttributeId;
                                    int attributeTypeID = filterValResult[fj].AttributeTypeId;
                                    var FilterValue = filterValResult[fj].Value;
                                    var FilterLevel = filterValResult[fj].Level;
                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                               where
                                                                   val.AttributeID == attributeID &&
                                                                   val.EntityTypeID == newValidEntityTypes[ve]
                                                               select val;
                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                    {
                                        if ((AttributesList)attributeTypeID != AttributesList.ListMultiSelection ||
                                            (AttributesList)attributeTypeID != AttributesList.DropDownTree ||
                                            (AttributesList)attributeTypeID != AttributesList.Tree ||
                                            (AttributesList)attributeTypeID != AttributesList.Period)
                                        {

                                        }
                                        else
                                        {
                                            dynamicTblQry.Append(" and  Attr_" + attributeID.ToString() + " IN (" +
                                                                 FilterValue.ToString() + ") ");
                                        }
                                    }
                                }
                                if ((ve < newValidEntityTypes.Count - 1))
                                {
                                    dynamicTblQry.Append(" UNION ALL ");
                                }
                            }

                            //To fetch related entity type attribute like(multiselect,tree..etc)
                            bool multiSelect = false;
                            bool tree = false;
                            bool period = false;
                            bool singleSelect = false;
                            bool OwnerId = false;
                            bool multiselecttree = false;
                            for (int fj = 0; fj < filterValResult.ToList().Count; fj++)
                            {
                                int attributeID = filterValResult[fj].AttributeId;
                                var FilterValue = filterValResult[fj].Value;
                                var FilterLevel = filterValResult[fj].Level;

                                switch ((AttributesList)filterValResult[fj].AttributeTypeId)
                                {

                                    case AttributesList.ListMultiSelection:
                                        if (multiSelect == false)
                                        {
                                            var valMultiSelect =
                                                filterValResult.Where(a => a.AttributeId == attributeID)
                                                    .Select(a => a.Value)
                                                    .ToList();
                                            var valMultiLevel =
                                                filterValResult.Where(a => a.AttributeId == attributeID)
                                                    .Select(a => a.Level)
                                                    .ToList();
                                            string inMultiClause = "("
                                                                       +
                                                                           String.Join(",",
                                                                           valMultiSelect.Select(x => x.ToString())
                                                                               .ToArray())
                                                   + ")";
                                            if (attributeID == (int)SystemDefinedAttributes.ObjectiveType)
                                            {
                                                multiSelectTblQry.Append(
                                                    " SELECT po.id FROM PM_Objective po  where po.typeid in" +
                                                    inMultiClause +
                                                    " INTERSECT ");
                                            }
                                            else
                                            {
                                                string inMultiLevel = "("
                                                                          +
                                                                              String.Join(",",
                                                                              valMultiLevel.Select(x => x.ToString())
                                                                                  .ToArray())
                                                   + ")";
                                                multiSelectTblQry.Append(
                                                    " SELECT DISTINCT mms.EntityID as id FROM MM_MultiSelect mms ");
                                                multiSelectTblQry.Append(" WHERE (mms.AttributeID = " +
                                                                         attributeID.ToString() + " AND mms.OptionID IN" +
                                                                         inMultiClause + ") INTERSECT ");
                                            }
                                        }
                                        multiSelect = true;
                                        break;
                                    case AttributesList.DropDownTree:
                                        if (tree == false)
                                        {
                                            var valTreeSelect =
                                                filterValResult.Where(a => a.AttributeId == attributeID)
                                                    .Select(a => a.Value)
                                                    .ToList();
                                            var valTreeLevel =
                                                filterValResult.Where(a => a.AttributeId == attributeID)
                                                    .Select(a => a.Level)
                                                    .ToList();
                                            string inTreeClause = "("
                                                                      +
                                                                          String.Join(",",
                                                                          valTreeSelect.Select(x => x.ToString()).ToArray())
                                                + ")";
                                            string inTreeLevel = "("
                                                                     +
                                                                         String.Join(",",
                                                                         valTreeLevel.Select(x => x.ToString()).ToArray())
                                               + ")";
                                            treeTblQry.Append(
                                                " SELECT DISTINCT mms.EntityID as id FROM MM_TreeValue mms ");
                                            treeTblQry.Append(" WHERE (mms.AttributeID = " + attributeID.ToString() +
                                                              " AND  mms.NodeID IN" + inTreeClause.ToString() +
                                                              " AND  mms.LEVEL IN" + inTreeLevel + " ) INTERSECT ");
                                        }
                                        tree = true;
                                        break;
                                    case AttributesList.ListSingleSelection:
                                        var lstSpecialAttribute =
                                            tx.PersistenceManager.MetadataRepository.GetbyCriteria<AttributeDao>(
                                                    AttributeDao.PropertyNames.Id, AttributeDao.PropertyNames.IsSpecial,
                                                    attributeID, true);
                                        //var lstSpecialAttribute = listSetting.Attributes.Where(a => a.Id == attributeID && a.IsSpecial == true);
                                        var val =
                                            filterValResult.Where(a => a.AttributeId == attributeID)
                                                .Select(a => a.Value)
                                                .ToList();
                                        if (lstSpecialAttribute != null)
                                        {
                                            //var val = filterValResult.Where(a => a.AttributeId == attributeID).Select(a => a.Value).ToList();
                                            if ((SystemDefinedAttributes)attributeID ==
                                            SystemDefinedAttributes.EntityStatus)
                                            {
                                                string inClause = "("
                                                                      +
                                                                          String.Join(",",
                                                                          val.Select(x => x.ToString()).ToArray())
                                                 + ")";
                                                singleSelectTblQry.Append(" SELECT EntityID as Id FROM MM_EntityStatus ");
                                                singleSelectTblQry.Append(" WHERE StatusID in " + inClause +
                                                                          "  INTERSECT ");
                                            }
                                            else
                                            {
                                                string inClause = "("
                                                                      +
                                                                          String.Join(",",
                                                                          val.Select(x => x.ToString()).ToArray())
                                                   + ")";
                                                singleSelectTblQry.Append(
                                                    " SELECT EntityID as Id FROM AM_Entity_Role_User ");
                                                singleSelectTblQry.Append(" WHERE  USERID in " + inClause +
                                                                          " and RoleID=1 INTERSECT ");
                                            }
                                            OwnerId = true;
                                        }
                                        else
                                        {
                                            string inClause = "("
                                                                  +
                                                                      String.Join(",", val.Select(x => x.ToString()).ToArray())
                                             + ")";
                                            singleSelectTblQry.Append(" SELECT DISTINCT singleSelect.Id ");
                                            singleSelectTblQry.Append(" FROM   MM_Option mo INNER JOIN( ");
                                            bool isItFirstTime = false;
                                            foreach (var lstEntitypes in newValidEntityTypes)
                                            {
                                                var lstEntiTypeAttribute = from entityResult in dao.ToList()
                                                                           where
                                                                               entityResult.AttributeID == attributeID &&
                                                                               entityResult.EntityTypeID == lstEntitypes
                                                                           select val;
                                                if (lstEntiTypeAttribute.Count() > 0)
                                                {
                                                    if (isItFirstTime == true)
                                                    {
                                                        singleSelectTblQry.Append(" union ");
                                                    }
                                                    singleSelectTblQry.Append(" SELECT mar_" + lstEntitypes + ".Attr_" +
                                                                              attributeID + " as  Attr_" + attributeID +
                                                                              ",mar_" + lstEntitypes +
                                                                              ".id as Id from  MM_AttributeRecord_" +
                                                                              lstEntitypes + "  mar_" + lstEntitypes +
                                                                              " ");
                                                    isItFirstTime = true;
                                                }

                                            }
                                            singleSelectTblQry.Append(") singleSelect ON  singleSelect.Attr_" +
                                                                      attributeID +
                                                                      " = mo.id  WHERE  mo.id in " + inClause +
                                                                      " INTERSECT ");
                                            singleSelect = true;

                                        }

                                        break;
                                    case AttributesList.Period:

                                        period = true;
                                        break;
                                    case AttributesList.TreeMultiSelection:
                                        if (multiselecttree == false)
                                        {
                                            var valTreeSelect =
                                                filterValResult.Where(a => a.AttributeId == attributeID)
                                                    .Select(a => a.Value)
                                                    .ToList();
                                            var valTreeLevel =
                                                filterValResult.Where(a => a.AttributeId == attributeID)
                                                    .Select(a => a.Level)
                                                    .ToList();
                                            string inTreeClause = "("
                                                                      +
                                                                          String.Join(",",
                                                                          valTreeSelect.Select(x => x.ToString()).ToArray())
                                                + ")";
                                            string inTreeLevel = "("
                                                                     +
                                                                         String.Join(",",
                                                                         valTreeLevel.Select(x => x.ToString()).ToArray())
                                               + ")";
                                            treeTblQry.Append(
                                                " SELECT DISTINCT mms.EntityID as id FROM MM_TreeValue mms ");
                                            treeTblQry.Append(" WHERE (mms.AttributeID = " + attributeID.ToString() +
                                                              " AND  mms.NodeID IN" + inTreeClause.ToString() +
                                                              " AND  mms.LEVEL IN" + inTreeLevel + " ) INTERSECT ");
                                        }
                                        multiselecttree = true;
                                        break;
                                    default:
                                        break;

                                }

                            }
                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].StartDate != null &&
                                    filtervalues[0].StartDate.ToString() != "1990-01-01" &&
                                    filtervalues[0].StartDate != "")
                                {
                                    singleSelectTblQry.Append(
                                        " SELECT DISTINCT pep.EntityID AS ID FROM   PM_EntityPeriod pep where 1=1 ");
                                    if (filtervalues[0].StartDate.ToString().Length > 0)
                                        singleSelectTblQry.Append(
                                            " AND  convert(VARCHAR(10),pep.Startdate,111)  >= convert(VARCHAR(10),'" +
                                            filtervalues[0].StartDate.ToString() + "',111) ");
                                    if (filtervalues[0].EndDate.ToString().Length > 0)
                                        singleSelectTblQry.Append(
                                            " AND convert(VARCHAR(10),pep.EndDate,111)  <= convert(VARCHAR(10),'" +
                                            filtervalues[0].EndDate.ToString() + "',111) ");
                                    singleSelectTblQry.Append(" INTERSECT ");
                                }
                            }
                            if (filterSettingValues.Count() > 0)
                            {
                                if ((filterSettingValues[0].StartDate != "" || filterSettingValues[0].EndDate != "") &&
                                    (filterSettingValues[0].StartDate != null || filterSettingValues[0].EndDate != null))
                                {
                                    singleSelectTblQry.Append(
                                        " SELECT DISTINCT pep.EntityID AS ID FROM   PM_EntityPeriod pep where 1=1 ");
                                    if (filterSettingValues[0].StartDate.ToString().Length > 0)
                                        singleSelectTblQry.Append(
                                            " AND  convert(VARCHAR(10),pep.Startdate,111)  >= convert(VARCHAR(10),'" +
                                            filterSettingValues[0].StartDate.ToString() + "',111) ");
                                    if (filterSettingValues[0].EndDate.ToString().Length > 0)
                                        singleSelectTblQry.Append(
                                            " AND convert(VARCHAR(10),pep.EndDate,111)  <= convert(VARCHAR(10),'" +
                                            filterSettingValues[0].EndDate.ToString() + "',111) ");
                                    singleSelectTblQry.Append(" INTERSECT ");
                                }
                            }
                            switch ((EntityTypeIDs)enumEntityTypeIds)
                            {
                                case EntityTypeIDs.Activity:
                                    TempTblQry.Append(" SELECT temptable.Id,pe.Level,pe.parentid  ");
                                    break;
                                case EntityTypeIDs.Costcenre:
                                    TempTblQry.Append(" SELECT temptable.Id,coi.CostCenterID,pe.Level,pe.parentid  ");
                                    break;
                                case EntityTypeIDs.Objective:
                                    TempTblQry.Append(" SELECT temptable.Id,oi.ObjectveID,pe.Level,pe.parentid  ");
                                    break;
                            }

                            TempTblQry.Append(" FROM   ( ");
                            if (multiSelectTblQry.ToString().Length > 0)
                                TempTblQry.Append(multiSelectTblQry.ToString());
                            if (treeTblQry.ToString().Length > 0)
                                TempTblQry.Append(treeTblQry.ToString());
                            if (periodTblQry.ToString().Length > 0)
                                TempTblQry.Append(periodTblQry.ToString());
                            if (singleSelectTblQry.ToString().Length > 0)
                                TempTblQry.Append(singleSelectTblQry.ToString());
                            TempTblQry.Append("select DynamicEntittype.id from (" + dynamicTblQry.ToString() +
                                              ") DynamicEntittype ");
                            TempTblQry.Append(" ) temptable ");

                        }

                        else
                        {
                            //Entity Types looping
                            dynamicTblQry.Append(" SELECT id,Level,parentid FROM PM_Entity ");
                            if (listSetting.EntityTypes != null)
                            {
                                string inClause = "("
                                                      +
                                                      String.Join(",",
                                                          listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                              + ")";
                                dynamicTblQry.Append(" where TypeID in " + inClause);
                            }
                            switch ((EntityTypeIDs)enumEntityTypeIds)
                            {
                                case EntityTypeIDs.Activity:
                                    TempTblQry.Append(" SELECT temptable.Id,temptable.Level,temptable.parentid ");
                                    break;
                                case EntityTypeIDs.Costcenre:
                                    TempTblQry.Append(" SELECT temptable.Id,coi.CostCenterID,temptable.Level,temptable.parentid ");
                                    break;
                                case EntityTypeIDs.Objective:
                                    TempTblQry.Append(" SELECT temptable.Id,oi.ObjectveID,temptable.Level,temptable.parentid ");
                                    break;
                            }


                            TempTblQry.Append(" FROM   ( ");

                            TempTblQry.Append(dynamicTblQry.ToString());
                            TempTblQry.Append(" ) temptable ");



                        }

                        if (EntityTypeIDs.Activity == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            TempTblQry.Append(" INNER JOIN PM_Entity pe ");
                            TempTblQry.Append(" ON  temptable.Id = pe.ID");
                            TempTblQry.Append(" AND pe.Active = 1  ");
                            TempTblQry.Append("   INNER JOIN PM_Entity_Sort pes ");
                            TempTblQry.Append("             ON  pe.ID = pes.id ");

                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].Keyword.ToString() != "")
                                {
                                    TempTblQry.Append("  and pe.Name LIKE '%" + filtervalues[0].Keyword.ToString() + "%'");
                                }
                            }
                            else if (filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).Keyword != "")
                                {
                                    TempTblQry.Append("  and pe.Name LIKE '%" + filterSettingValues.ElementAt(0).Keyword.ToString() + "%'");
                                }
                            }



                            if (UserID != 0)
                            {
                                TempTblQry.Append(" INNER JOIN (SELECT DISTINCT aeru.EntityID,aeru.UserID ");
                                TempTblQry.Append("  FROM   AM_Entity_Role_User aeru where aeru.UserID=" +
                                                  UserID.ToString());
                                TempTblQry.Append(" ) AS aeru ON  aeru.EntityID = temptable.id ");
                            }
                            topFilterQry.Append(TempTblQry.ToString());
                            StringBuilder SortorderQry = new StringBuilder();
                            if (UniqueKeyCollection != null && UniqueKeyCollection.Count() > 0)
                            {
                                if (IncludeChildren == true)
                                {
                                    string inClause = "";
                                    inClause = "("
                                                           + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                         + ")";
                                    SortorderQry.Append(" where (temptable.Id in " + inClause);
                                    if (IsSingleID == false)
                                    {
                                        foreach (var UniquekeyVal in UniqueKeyCollection.ToList())
                                        {
                                            SortorderQry.Append(" or pe.UniqueKey  like '" + UniquekeyVal.UniqueKey +
                                                                ".%'  ");
                                        }
                                        SortorderQry.Append(")");

                                    }
                                    else
                                    {
                                        SortorderQry.Append(")");
                                    }
                                }
                                else
                                {
                                    if (FilterID == 0 && filterSettingValues.Count() == 0 && IdArr.Length == 1 && ExpandingEntityID > 0)
                                    {
                                        SortorderQry.Append(" where temptable.Id =" + ExpandingEntityID);
                                    }
                                    else if (FilterID == 0 && filterSettingValues.Count() == 0)
                                    {
                                        SortorderQry.Append(" where pe.ParentID =" + IdArr[0]);
                                    }
                                    else
                                    {
                                        string inClause = "";
                                        inClause = "("
                                                               + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                             + ")";
                                        SortorderQry.Append(" where (temptable.Id in " + inClause);
                                        foreach (var UniquekeyVal in UniqueKeyCollection.ToList())
                                        {
                                            SortorderQry.Append(" or pe.UniqueKey  like '" + UniquekeyVal.UniqueKey +
                                                                ".%' ");
                                        }
                                        SortorderQry.Append(")");
                                    }
                                }
                            }


                            SortorderQry.Append("   ORDER BY ");
                            SortorderQry.Append("        pes.S1   ASC, ");
                            SortorderQry.Append("        pes.L1   ASC, ");
                            SortorderQry.Append("        pes.S2   ASC, ");
                            SortorderQry.Append("        pes.L2   ASC, ");
                            SortorderQry.Append("        pes.S3   ASC, ");
                            SortorderQry.Append("        pes.L3   ASC, ");
                            SortorderQry.Append("        pes.S4   ASC, ");
                            SortorderQry.Append("        pes.L4   ASC, ");
                            SortorderQry.Append("        pes.S5   ASC, ");
                            SortorderQry.Append("        pes.L5   ASC, ");
                            SortorderQry.Append("        pes.S6   ASC, ");
                            SortorderQry.Append("        pes.L6   ASC, ");
                            SortorderQry.Append("        pes.S7   ASC, ");
                            SortorderQry.Append("        pes.L7   ASC, ");
                            SortorderQry.Append("        pes.S8   ASC, ");
                            SortorderQry.Append("        pes.L8   ASC, ");
                            SortorderQry.Append("        pes.S9   ASC, ");
                            SortorderQry.Append("        pes.L9   ASC, ");
                            SortorderQry.Append("        pes.S10  ASC, ");
                            SortorderQry.Append("        pes.L10  ASC ");
                            //SortorderQry.Append(" ORDER BY pe.UniqueKey ");

                            //sort order query building
                            if (SortOrderColumn.Length > 0)
                            {
                                SortorderQry.Remove(0, SortorderQry.Length);
                                bool status = false;
                                for (int fj = 0; fj < listSetting.Attributes.Count; fj++)
                                {
                                    if (status == false)
                                    {
                                        if (SortOrderColumn == listSetting.Attributes[fj].Field)
                                        {
                                            int attributeID = listSetting.Attributes[fj].Id;
                                            int attributeTypeID = listSetting.Attributes[fj].Type;
                                            string attributeColumn = listSetting.Attributes[fj].Field;
                                            if (listSetting.Attributes[fj].IsSpecial == true)
                                            {
                                                switch ((SystemDefinedAttributes)listSetting.Attributes[fj].Id)
                                                {
                                                    case SystemDefinedAttributes.Owner:
                                                        SortorderQry.Append(
                                                            "LEFT OUTER JOIN (SELECT aeru.EntityID AS EntityID, (ISNULL(us.FirstName,'') + ' ' + ISNULL(us.LastName,'')) AS VALUE  FROM UM_User us INNER JOIN AM_Entity_Role_User aeru ON us.ID=aeru.UserID AND  aeru.RoleID=1");
                                                        SortorderQry.Append("    ) AS so");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                        status = true;
                                                        break;
                                                }
                                            }

                                            else if ((AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.ListMultiSelection ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.DropDownTree ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.Tree ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.Period ||
                                                     (AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.TreeMultiSelection)
                                            {
                                                switch ((AttributesList)listSetting.Attributes[fj].Type)
                                                {
                                                    case AttributesList.ListMultiSelection:
                                                        SortorderQry.Append(" LEFT OUTER JOIN (  ");
                                                        SortorderQry.Append(" SELECT mms.EntityID,  ");
                                                        SortorderQry.Append("   STUFF(  ");
                                                        SortorderQry.Append("  (  ");
                                                        SortorderQry.Append("   SELECT ', ' + mo.Caption  ");
                                                        SortorderQry.Append("      FROM   MM_MultiSelect mms2  ");
                                                        SortorderQry.Append("           INNER JOIN MM_Option mo  ");
                                                        SortorderQry.Append(
                                                            "                  ON  mms2.OptionID = mo.ID  ");
                                                        SortorderQry.Append(
                                                            "       WHERE  mms2.EntityID = mms.EntityID  ");
                                                        SortorderQry.Append("              FOR XML PATH('')  ");
                                                        SortorderQry.Append("    ),  ");
                                                        SortorderQry.Append("    1,  ");
                                                        SortorderQry.Append("   2,  ");
                                                        SortorderQry.Append("    ''  ");
                                                        SortorderQry.Append("       )               AS VALUE  ");
                                                        SortorderQry.Append("      FROM   MM_MultiSelect     mms  ");
                                                        SortorderQry.Append("    WHERE  mms.AttributeID = " +
                                                                            attributeID.ToString() + "  ");
                                                        SortorderQry.Append("     GROUP BY  ");
                                                        SortorderQry.Append("             mms.EntityID  ");
                                                        SortorderQry.Append("   ) AS so  ");
                                                        SortorderQry.Append("   ON  so.EntityID = pe.ID  ");
                                                        status = true;



                                                        break;
                                                    case AttributesList.DropDownTree:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");

                                                        SortorderQry.Append("  SELECT mtv.EntityID, ");
                                                        SortorderQry.Append(" mtn.Caption AS value ");
                                                        SortorderQry.Append(" FROM   MM_TreeNode mtn ");
                                                        SortorderQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                                        SortorderQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                                        SortorderQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                                        SortorderQry.Append("  AND mtn.Level =  " +
                                                                                listSetting.Attributes[fj].Level);
                                                        SortorderQry.Append("  WHERE  mtv.AttributeID = " +
                                                                            attributeID.ToString());
                                                        SortorderQry.Append("  ) AS so ");
                                                        SortorderQry.Append("  ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                    case AttributesList.Tree:
                                                        //SortorderQry.Append(" 'IsTree' as '" +
                                                        //                    listSetting.Attributes[fj].Field + "'");

                                                        SortorderQry.Append(" STUFF((SELECT ', ' + mmt.Caption FROM MM_TreeValue mtv INNER JOIN MM_TreeNode mmt ON mmt.ID = mtv.NodeID AND mtv.AttributeID = " + listSetting.Attributes[fj].Field + "  WHERE mtv.EntityID = pe.ID ORDER BY mmt.[KEY] FOR XML PATH('')), 1, 2, '') as '" +
                                                                           listSetting.Attributes[fj].Field + "'");
                                                        status = true;
                                                        break;
                                                    case AttributesList.Period:
                                                        SortorderQry.Append(
                                                            " ( SELECT CONVERT(NVARCHAR(10), MIN(pep.StartDate), 120) FROM   PM_EntityPeriod pep  WHERE  pep.EntityID = subtbl.Id  ) AS Startdate, ");
                                                        SortorderQry.Append(
                                                            " ( SELECT CONVERT(NVARCHAR(10), MAX(pep.EndDate), 120) FROM   PM_EntityPeriod pep WHERE  pep.EntityID = subtbl.Id )  AS Enddate ");
                                                        status = true;
                                                        break;
                                                    case AttributesList.TreeMultiSelection:
                                                        SortorderQry.Append(" LEFT OUTER JOIN ( ");

                                                        SortorderQry.Append("  SELECT mtv.EntityID, ");
                                                        SortorderQry.Append(" mtn.Caption AS value ");
                                                        SortorderQry.Append(" FROM   MM_TreeNode mtn ");
                                                        SortorderQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                                        SortorderQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                                        SortorderQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                                        SortorderQry.Append("  AND mtn.Level =  " +
                                                                                listSetting.Attributes[fj].Level);
                                                        SortorderQry.Append("  WHERE  mtv.AttributeID = " +
                                                                            attributeID.ToString());
                                                        SortorderQry.Append("  ) AS so ");
                                                        SortorderQry.Append("  ON  so.EntityID = pe.ID ");
                                                        status = true;
                                                        break;
                                                }
                                            }
                                            else if ((AttributesList)listSetting.Attributes[fj].Type ==
                                                     AttributesList.ListSingleSelection)
                                            {
                                                SortorderQry.Append("   LEFT OUTER JOIN ( ");
                                                SortorderQry.Append(
                                                    "   SELECT subtbl.id  AS EntityID,mo.Caption   AS VALUE ");

                                                SortorderQry.Append("  FROM   ( ");
                                                for (int fi = 0; fi < newValidEntityTypes.Count; fi++)
                                                {
                                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                                               where
                                                                                   val.AttributeID == attributeID &&
                                                                                   val.EntityTypeID == newValidEntityTypes[fi]
                                                                               select val;
                                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                                    {
                                                        SortorderQry.Append(" SELECT id, attr_" + attributeColumn +
                                                                            " as attr_" + attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    else
                                                    {
                                                        SortorderQry.Append(" SELECT id, null as attr_" +
                                                                            attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    ;
                                                    if ((fi < newValidEntityTypes.Count - 1))
                                                    {
                                                        SortorderQry.Append(" UNION ALL ");
                                                    }
                                                }
                                                SortorderQry.Append("  ) AS subtbl ");
                                                SortorderQry.Append(" INNER JOIN MM_Option mo ");
                                                SortorderQry.Append(" ON  mo.AttributeID = " +
                                                                    attributeID.ToString());
                                                SortorderQry.Append(" AND mo.ID = subtbl.attr_" + attributeColumn);
                                                SortorderQry.Append("    ) AS so");
                                                SortorderQry.Append("   ON  so.EntityID = pe.ID");
                                                status = true;
                                            }
                                            else
                                            {
                                                SortorderQry.Append("   LEFT OUTER JOIN ( ");
                                                SortorderQry.Append(
                                                    "   SELECT subtbl.id       AS EntityID,subtbl." + attributeID +
                                                    "  AS VALUE ");

                                                SortorderQry.Append("  FROM   ( ");
                                                for (int fi = 0; fi < newValidEntityTypes.Count; fi++)
                                                {
                                                    var lstEntiTypeAttribute = from val in dao.ToList()
                                                                               where
                                                                                   val.AttributeID == attributeID &&
                                                                                   val.EntityTypeID == newValidEntityTypes[fi]
                                                                               select val;
                                                    if (lstEntiTypeAttribute.ToList().Count > 0)
                                                    {
                                                        SortorderQry.Append(" SELECT id, attr_" + attributeColumn +
                                                                            " as attr_" + attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    else
                                                    {
                                                        SortorderQry.Append(" SELECT id, null as attr_" +
                                                                            attributeColumn +
                                                                            " FROM   MM_AttributeRecord_" +
                                                                            newValidEntityTypes[fi] + " ");
                                                    }
                                                    ;
                                                    if ((fi < newValidEntityTypes.Count - 1))
                                                    {
                                                        SortorderQry.Append(" UNION ALL ");
                                                    }
                                                }
                                                SortorderQry.Append("  ) AS subtbl ");
                                                SortorderQry.Append(" ) AS so ");
                                                SortorderQry.Append(" ON  so.EntityID = pe.ID ");

                                                status = true;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (IdArr != null && IdArr.Length > 0)
                                {
                                    if (IncludeChildren == true)
                                    {
                                        string inClause = "("
                                                        + String.Join(",", IdArr.Select(x => x.ToString()).ToArray())
                                                      + ")";
                                        SortorderQry.Append(" where temptable.Id in " + inClause);
                                        if (IsSingleID == false)
                                        {
                                            SortorderQry.Append(" or pe.ParentID  in " + inClause);
                                        }
                                    }
                                    else
                                    {
                                        SortorderQry.Append(" where pe.ParentID =" + IdArr[0]);
                                    }
                                }
                                SortorderQry.Append("  ORDER BY so.value " + (IsDesc == true ? " desc " : "") + " ");
                            }

                            topFilterQry.Append(SortorderQry.ToString());


                            topFilterQry.Append(" SELECT ID, EID,LEVEL,PEID FROM @EntityOrderIDs ");
                            //topFilterQry over here for getting all the filter id



                            CollectedIdsResult =
                               tx.PersistenceManager.MetadataRepository.ExecuteQuery(topFilterQry.ToString())
                                   .Cast<Hashtable>().ToList();
                            if (CollectedIdsResult != null && CollectedIdsResult.Count() > 0)
                            {
                                IList<ISortOrderIdsCollection> SortCollectionobj = new List<ISortOrderIdsCollection>();
                                foreach (var CurrentsortId in CollectedIdsResult)
                                {
                                    SortCollectionobj.Add(new SortOrderIdsCollection
                                    {
                                        Id = Convert.ToInt32(CurrentsortId["ID"]),
                                        EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                        Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                        ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                        InterMediateID = 0
                                    });

                                }
                                proxy.MarcomManager.EntitySortorderIdColle = SortCollectionobj;
                            }
                            else
                            {
                                tx.Commit();
                                return null;
                            }

                        }
                        else if (EntityTypeIDs.Costcenre == (EntityTypeIDs)enumEntityTypeIds)
                        {

                            //finalQry.Append(Costcent.ToString());
                            StringBuilder countQry = new StringBuilder();
                            countQry.Append(TempTblQry.ToString());
                            countQry.Append(" INNER JOIN  @CostCentreOrderIDs coi ");
                            countQry.Append("  ON  coi.EID = temptable.Id  ");

                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].Keyword.ToString() != "")
                                {
                                    countQry.Append(" inner join pm_entity pe on  temptable.Id=pe.id   ");
                                    countQry.Append("  and pe.Name LIKE '%" + filtervalues[0].Keyword.ToString() + "%'");
                                }
                            }
                            else if (filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).Keyword != "")
                                {
                                    countQry.Append(" inner join pm_entity pe on  temptable.Id=pe.id   ");
                                    countQry.Append("  and pe.Name LIKE '%" + filterSettingValues.ElementAt(0).Keyword.ToString() + "%'");
                                }
                            }


                            topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                            topFilterQry.Append(" ( ");
                            topFilterQry.Append("  EID,CostCenterID,LEVEL,PEID ");
                            topFilterQry.Append(" ) ");

                            topFilterQry.Append(countQry.ToString());


                            topFilterQry.Append(" SELECT ID, EID,LEVEL,PEID,CostCenterID FROM @EntityOrderIDs ");


                            //topFilterQry over here for getting all the filter id

                            CollectedIdsResult =
                               tx.PersistenceManager.MetadataRepository.ExecuteQuery(topFilterQry.ToString())
                                   .Cast<Hashtable>().ToList();
                            if (CollectedIdsResult != null && CollectedIdsResult.Count() > 0)
                            {
                                IList<ISortOrderIdsCollection> SortCollectionobj = new List<ISortOrderIdsCollection>();
                                foreach (var CurrentsortId in CollectedIdsResult)
                                {
                                    SortCollectionobj.Add(new SortOrderIdsCollection
                                    {
                                        Id = Convert.ToInt32(CurrentsortId["ID"]),
                                        EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                        Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                        ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                        InterMediateID = Convert.ToInt32(CurrentsortId["CostCenterID"])
                                    });

                                }
                                proxy.MarcomManager.EntitySortorderIdColle = SortCollectionobj;
                            }
                            else
                            {
                                tx.Commit();
                                return null;
                            }
                        }
                        else if (EntityTypeIDs.Objective == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            finalQry.Append(Objective.ToString());
                            StringBuilder countQry = new StringBuilder();
                            countQry.Append(TempTblQry.ToString());
                            countQry.Append(" INNER JOIN  @ObjectiveOrderIDs oi ");
                            countQry.Append("  ON  oi.EID = temptable.Id  ");

                            if (filtervalues.Count() > 0)
                            {
                                if (filtervalues[0].Keyword.ToString() != "")
                                {
                                    countQry.Append(" inner join pm_entity pe on  temptable.Id=pe.id   ");
                                    countQry.Append("  and pe.Name LIKE '%" + filtervalues[0].Keyword.ToString() + "%'");
                                }
                            }
                            else if (filterSettingValues.Count() > 0)
                            {
                                if (filterSettingValues.ElementAt(0).Keyword != "")
                                {
                                    countQry.Append(" inner join pm_entity pe on  temptable.Id=pe.id   ");
                                    countQry.Append("  and pe.Name LIKE '%" + filterSettingValues.ElementAt(0).Keyword.ToString() + "%'");
                                }
                            }




                            topFilterQry.Append(" INSERT INTO @EntityOrderIDs ");
                            topFilterQry.Append(" ( ");
                            topFilterQry.Append("  EID,ObjectveID,LEVEL,PEID ");
                            topFilterQry.Append(" ) ");



                            topFilterQry.Append(countQry.ToString());

                            topFilterQry.Append(" SELECT ID, EID,LEVEL,PEID,ObjectveID FROM @EntityOrderIDs ");



                            CollectedIdsResult =
                               tx.PersistenceManager.MetadataRepository.ExecuteQuery(topFilterQry.ToString())
                                   .Cast<Hashtable>().ToList();
                            if (CollectedIdsResult != null && CollectedIdsResult.Count() > 0)
                            {
                                IList<ISortOrderIdsCollection> SortCollectionobj = new List<ISortOrderIdsCollection>();
                                foreach (var CurrentsortId in CollectedIdsResult)
                                {
                                    SortCollectionobj.Add(new SortOrderIdsCollection
                                    {
                                        Id = Convert.ToInt32(CurrentsortId["ID"]),
                                        EntityIds = Convert.ToInt32(CurrentsortId["EID"]),
                                        Level = Convert.ToInt32(CurrentsortId["LEVEL"]),
                                        ParentEntityID = Convert.ToInt32(CurrentsortId["PEID"]),
                                        InterMediateID = Convert.ToInt32(CurrentsortId["ObjectveID"])
                                    });

                                }
                                proxy.MarcomManager.EntitySortorderIdColle = SortCollectionobj;
                            }
                            else
                            {
                                tx.Commit();
                                return null;
                            }



                        }



                    }

                }
                else
                {
                    if (IsSingleID == true && proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Id == ExpandingEntityID).ToList().Count == 0)
                    {
                        using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                        {
                            var TempDao = tx.PersistenceManager.MetadataRepository.Get<BaseEntityDao>(BaseEntityDao.PropertyNames.Id, ExpandingEntityID);
                            if (TempDao != null)
                            {
                                proxy.MarcomManager.EntitySortorderIdColle.Add(new SortOrderIdsCollection { Id = TempDao.Id, EntityIds = TempDao.Id, InterMediateID = 0, Level = TempDao.Level, ParentEntityID = TempDao.Parentid });
                            }

                        }

                    }
                }



                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    XmlFilterQry.Append("DECLARE @x AS XML = '");
                    XmlFilterQry.Append("<root>");
                    IList<ISortOrderIdsCollection> result = new List<ISortOrderIdsCollection>();


                    if (EntityTypeIDs.Activity == (EntityTypeIDs)enumEntityTypeIds)
                    {

                        if (ExpandingEntityID != 0)
                        {
                            if (IncludeChildren == true)
                            {
                                var totalchildrenIDarr = new StringBuilder();
                                totalchildrenIDarr.Append(" SELECT pe.ID as 'entityid' FROM   PM_Entity pe INNER JOIN MM_EntityType met ON  pe.TypeID = met.id AND met.IsAssociate = 0 AND met.Category = 2 AND pe.[Active] = 1 where  pe.ID = ?  or pe.UniqueKey LIKE  (SELECT pe1.UniqueKey FROM PM_Entity pe1 WHERE pe1.id= ? )+ '.%'  ORDER BY pe.UniqueKey asc ");
                                IList totalchildrenIDobj = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(totalchildrenIDarr.ToString(), ExpandingEntityID, ExpandingEntityID);
                                int[] IdArrnew = totalchildrenIDobj.Cast<dynamic>().Select(a => (int)a["entityid"]).ToArray();
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => IdArrnew.Contains(a.EntityIds)).OrderBy(a => a.Id).ToList();
                                //result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID || a.ParentEntityID == ExpandingEntityID).Select(a => a).ToList();
                            }
                            else
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID).Select(a => a).ToList();
                        }
                        else
                        {
                            result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).Select(a => a).ToList();//.Skip(StartRowNo).Take(MaxNoofRow).ToList();
                        }
                        foreach (var CurrentsortId in result)
                        {
                            XmlFilterQry.Append("<e ID=''" + CurrentsortId.Id + "'' EID=''" + CurrentsortId.EntityIds + "'' LEVEL=''" + CurrentsortId.Level + "'' PEID=''" + CurrentsortId.ParentEntityID + "'' INTERMEDIATEID=''" + CurrentsortId.InterMediateID + "''/>");
                        }
                        XmlFilterQry.Append("</root>';");


                        XmlFilterQry.Append("DECLARE @EntityOrderIDs TABLE ([ID] [int], EID INT);");
                        XmlFilterQry.Append("INSERT INTO @EntityOrderIDs(ID,EID)");
                        //if (GanttstartDate != null && Ganttenddate != null && GanttstartDate.Length > 0 && Ganttenddate.Length > 0)
                        //{
                        //    XmlFilterQry.Append(" SELECT distinct  x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID from @x.nodes('/root/e') as x(tbl) ");
                        //    XmlFilterQry.Append(" INNER JOIN [PM_EntityPeriod] pep   ON  pep.EntityID =x.tbl.value('@EID', 'INT')  ");
                        //    XmlFilterQry.Append("  WHERE  pep.Startdate >= '" + GanttstartDate + "'  ");
                        //    XmlFilterQry.Append("  AND   '" + Ganttenddate + "' >=  pep.EndDate    ");
                        //}

                        //else
                        //{
                        XmlFilterQry.Append("SELECT x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID from @x.nodes('/root/e') as x(tbl);");
                        //}
                    }
                    else if (EntityTypeIDs.Costcenre == (EntityTypeIDs)enumEntityTypeIds)
                    {
                        if (ExpandingEntityID != 0)
                        {
                            if (IncludeChildren == true)
                            {
                                if (EntityID != 0)
                                {
                                    var totalchildrenIDarr = new StringBuilder();
                                    totalchildrenIDarr.Append(" SELECT pe.ID as 'entityid' FROM   PM_Entity pe INNER JOIN MM_EntityType met ON  pe.TypeID = met.id AND met.IsAssociate = 0 AND met.Category = 2 AND pe.[Active] = 1 where  pe.ID = ?  or pe.UniqueKey LIKE  (SELECT pe1.UniqueKey FROM PM_Entity pe1 WHERE pe1.id= ? )+ '.%'  ORDER BY pe.UniqueKey asc ");
                                    IList totalchildrenIDobj = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(totalchildrenIDarr.ToString(), ExpandingEntityID, ExpandingEntityID);
                                    int[] IdArrnew = totalchildrenIDobj.Cast<dynamic>().Select(a => (int)a["entityid"]).ToArray();

                                    result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => IdArrnew.Contains(a.EntityIds) && (a.InterMediateID == EntityID)).OrderBy(a => a.Id).ToList();
                                    //result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => (a.EntityIds == ExpandingEntityID || (a.InterMediateID == EntityID && a.ParentEntityID == ExpandingEntityID)) && a.Level < Level).Select(a => a).ToList();
                                }
                                else
                                {
                                    result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => (a.EntityIds == ExpandingEntityID || (a.InterMediateID == ExpandingEntityID)) || a.Level < Level).Select(a => a).ToList();
                                }
                            }
                            else
                                result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID && a.InterMediateID == EntityID).Select(a => a).ToList();
                        }
                        else
                        {
                            result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).Select(a => a).ToList(); //.Skip(StartRowNo).Take(MaxNoofRow).ToList();
                        }

                        foreach (var CurrentsortId in result)
                        {
                            XmlFilterQry.Append("<e ID=''" + CurrentsortId.Id + "'' EID=''" + CurrentsortId.EntityIds + "'' LEVEL=''" + CurrentsortId.Level + "'' PEID=''" + CurrentsortId.ParentEntityID + "'' INTERMEDIATEID=''" + CurrentsortId.InterMediateID + "''/>");
                        }
                        XmlFilterQry.Append("</root>';");



                        XmlFilterQry.Append("DECLARE @EntityOrderIDs TABLE ([ID] [int], EID INT, CostCenterID int);");
                        XmlFilterQry.Append("INSERT INTO @EntityOrderIDs(ID,EID,CostCenterID)");


                        //if (GanttstartDate != null && Ganttenddate != null && GanttstartDate.Length > 0 && Ganttenddate.Length > 0)
                        //{
                        //    XmlFilterQry.Append(" SELECT distinct  x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@INTERMEDIATEID','INT') as CostCenterID from @x.nodes('/root/e') as x(tbl) ");
                        //    XmlFilterQry.Append(" INNER JOIN [PM_EntityPeriod] pep   ON  pep.EntityID =x.tbl.value('@EID', 'INT')  ");
                        //    XmlFilterQry.Append("  WHERE  pep.Startdate >= '" + GanttstartDate + "'  ");
                        //    XmlFilterQry.Append("  AND   '" + Ganttenddate + "' >=  pep.EndDate    ");
                        //}

                        //else
                        //{
                        XmlFilterQry.Append("SELECT x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@INTERMEDIATEID','INT') as CostCenterID from @x.nodes('/root/e') as x(tbl);");
                        //}


                    }
                    else if (EntityTypeIDs.Objective == (EntityTypeIDs)enumEntityTypeIds)
                    {

                        if (ExpandingEntityID != 0)
                        {
                            //    if (IncludeChildren == true)
                            //        result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID || (a.InterMediateID == EntityID && a.EntityIds == ExpandingEntityID)).Select(a => a).ToList();
                            //    else
                            //        result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID && a.InterMediateID == EntityID).Select(a => a).ToList();

                            if (IncludeChildren == true)
                            {
                                if (EntityID != 0)
                                {
                                    var totalchildrenIDarr = new StringBuilder();
                                    totalchildrenIDarr.Append(" SELECT pe.ID as 'entityid' FROM   PM_Entity pe INNER JOIN MM_EntityType met ON  pe.TypeID = met.id AND met.IsAssociate = 0 AND met.Category in(2,3) AND pe.[Active] = 1 where  pe.ID = ?  or pe.UniqueKey LIKE  (SELECT pe1.UniqueKey FROM PM_Entity pe1 WHERE pe1.id= ? )+ '.%'  ORDER BY pe.UniqueKey asc ");
                                    IList totalchildrenIDobj = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(totalchildrenIDarr.ToString(), ExpandingEntityID, ExpandingEntityID);
                                    int[] IdArrnew = totalchildrenIDobj.Cast<dynamic>().Select(a => (int)a["entityid"]).ToArray();

                                    result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => IdArrnew.Contains(a.EntityIds) && (a.InterMediateID == EntityID)).OrderBy(a => a.Id).ToList();

                                }
                                else
                                {
                                    result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => (a.EntityIds == ExpandingEntityID || (a.InterMediateID == ExpandingEntityID)) || a.Level < Level).Select(a => a).ToList();
                                }
                            }
                            else
                            {
                                if (proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID && a.InterMediateID == EntityID).ToList().Count == 0 && (ExpandingEntityID == EntityID) && ExpandingEntityID > 0)
                                {
                                    result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID && a.InterMediateID == EntityID).Select(a => a).ToList();
                                }
                                else
                                    result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.EntityIds == ExpandingEntityID).Select(a => a).ToList();
                            }
                        }
                        else
                        {
                            result = proxy.MarcomManager.EntitySortorderIdColle.Where(a => a.Level < (Level != 0 ? Level : 2)).Select(a => a).ToList(); //.Skip(StartRowNo).Take(MaxNoofRow).ToList();
                        }

                        foreach (var CurrentsortId in result)
                        {
                            XmlFilterQry.Append("<e ID=''" + CurrentsortId.Id + "'' EID=''" + CurrentsortId.EntityIds + "'' LEVEL=''" + CurrentsortId.Level + "'' PEID=''" + CurrentsortId.ParentEntityID + "'' INTERMEDIATEID=''" + CurrentsortId.InterMediateID + "''/>");
                        }
                        XmlFilterQry.Append("</root>';");

                        XmlFilterQry.Append("DECLARE @EntityOrderIDs TABLE ([ID] [int], EID INT, ObjectveID int);");
                        XmlFilterQry.Append("INSERT INTO @EntityOrderIDs(ID,EID,ObjectveID)");

                        //if (GanttstartDate != null && Ganttenddate != null && GanttstartDate.Length > 0 && Ganttenddate.Length > 0)
                        //{
                        //    XmlFilterQry.Append(" SELECT distinct  x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@INTERMEDIATEID','INT') as ObjectveID from @x.nodes('/root/e') as x(tbl) ");
                        //    XmlFilterQry.Append(" INNER JOIN [PM_EntityPeriod] pep   ON  pep.EntityID =x.tbl.value('@EID', 'INT')  ");
                        //    XmlFilterQry.Append("  WHERE  pep.Startdate >= '" + GanttstartDate + "'  ");
                        //    XmlFilterQry.Append("  AND   '" + Ganttenddate + "' >=  pep.EndDate    ");
                        //}

                        //else
                        //{

                        XmlFilterQry.Append("SELECT x.tbl.value('@ID','INT') as ID,x.tbl.value('@EID','INT') as EntityID,x.tbl.value('@INTERMEDIATEID','INT') as ObjectveID from @x.nodes('/root/e') as x(tbl);");
                        //}


                    }






                    ///Main Query 
                    //To build inner query for main query
                    for (int i = 0; i < listSetting.EntityTypes.Count; i++)
                    {
                        strqry.Append("SELECT id");
                        for (int j = 0; j < listSetting.Attributes.Count; j++)
                        {
                            var x = tx.PersistenceManager.MetadataRepository.Query<EntityTypeAttributeRelationDao>().Where(a => a.EntityTypeID == listSetting.EntityTypes[i] && a.AttributeID == listSetting.Attributes[j].Id).Select(a => a);

                            //var x = from val in dao.ToList() where val.AttributeID == listSetting.Attributes[j].Id && val.EntityTypeID == listSetting.EntityTypes[i] select val;
                            string CurrentattrID = listSetting.Attributes[j].Id.ToString();
                            if (x.ToList().Count > 0)
                            {
                                if (!((AttributesList)listSetting.Attributes[j].Type == AttributesList.ListMultiSelection || (AttributesList)listSetting.Attributes[j].Type == AttributesList.DropDownTree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Tree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Period || (AttributesList)listSetting.Attributes[j].Type == AttributesList.TreeMultiSelection || listSetting.Attributes[j].IsSpecial == true))
                                {
                                    strqry.Append(" ,attr_" + CurrentattrID);

                                }
                            }
                            else
                            {
                                if (!((AttributesList)listSetting.Attributes[j].Type == AttributesList.ListMultiSelection || (AttributesList)listSetting.Attributes[j].Type == AttributesList.DropDownTree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Tree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Period || (AttributesList)listSetting.Attributes[j].Type == AttributesList.TreeMultiSelection || listSetting.Attributes[j].IsSpecial == true))
                                {
                                    strqry.Append(",null as attr_" + listSetting.Attributes[j].Field + " ");

                                }
                            }

                        }


                        strqry.Append("  FROM MM_AttributeRecord_" + listSetting.EntityTypes[i]);

                        if (i < listSetting.EntityTypes.Count - 1)
                        {
                            strqry.Append(" UNION ALL ");
                        }
                    }


                    //To fetch attributes and special sttribute values for main query
                    StringBuilder mainTblQry = new StringBuilder();
                    mainTblQry.Append("SELECT  subtbl.id as Id,");
                    mainTblQry.Append(" pe.ParentID, pe.TypeID, pe.UniqueKey, pe.IsLock, pe.Name, ");
                    mainTblQry.Append(" pe.EntityStateID, pe.EntityID,met.ColorCode,met.ShortDescription,pe.Level,(SELECT met.Caption FROM MM_EntityType met WHERE id=pe.typeid) as 'TypeName' ");
                    if (IsobjectiveRootLevel == false)
                    {
                        if (EntityTypeIDs.Activity == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            if (IsEntityAvailable == true)
                            {
                                mainTblQry.Append(" ,0 AS TotalChildrenCount");
                            }
                            else
                            {

                                mainTblQry.Append(" ,isnull((SELECT COUNT(pe1.ParentID) ");
                                mainTblQry.Append(" FROM   PM_Entity pe1 ");
                                //if (FilterID != 0 || filterSettingValues.Count > 0)
                                //{
                                //    mainTblQry.Append("  INNER JOIN @EntityOrderIDs eoi ON  eoi.EID = pe1.Id ");
                                //}
                                mainTblQry.Append(" WHERE  pe1.ParentID = pe.Id ");
                                mainTblQry.Append(" AND pe1.[Active]=1 ");
                                if (listSetting.EntityTypes != null)
                                {
                                    string inEntiTypes = "("
                                                   + String.Join(",", listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                                 + ")";
                                    mainTblQry.Append(" AND TypeID  IN " + inEntiTypes + " ");
                                }
                                mainTblQry.Append(" AND typeID NOT IN (SELECT mett.EntitytypeId FROM MM_EntityTaskType mett ");
                                mainTblQry.Append(" GROUP BY ");
                                mainTblQry.Append(" pe1.ParentID ");
                                mainTblQry.Append(" ),0) AS TotalChildrenCount");
                            }
                        }
                        else if (EntityTypeIDs.Costcenre == (EntityTypeIDs)enumEntityTypeIds)
                        {

                            ArrayList financialDisplayColumn = new ArrayList();
                            financialDisplayColumn.Add("Status");
                            financialDisplayColumn.Add("Planned");
                            financialDisplayColumn.Add("In requests");
                            financialDisplayColumn.Add("Appr/Alloc");
                            financialDisplayColumn.Add("Approved budget");
                            financialDisplayColumn.Add("Budget deviation");
                            financialDisplayColumn.Add("Appr sub allocation");
                            financialDisplayColumn.Add("Committed");
                            financialDisplayColumn.Add("Spent");
                            financialDisplayColumn.Add("Available");
                            ArrayList financialColumn = new ArrayList();
                            financialColumn.Add("Status");
                            financialColumn.Add("PlannedAmount");
                            financialColumn.Add("InRequest");
                            financialColumn.Add("ApprovedAllocatedAmount");
                            financialColumn.Add("ApprovedBudget");
                            financialColumn.Add("BudgetDeviation");
                            financialColumn.Add("ApprovedSubAllocatedAmount");
                            financialColumn.Add("Commited");
                            financialColumn.Add("Spent");
                            financialColumn.Add("Available");
                            Tuple<ArrayList, ArrayList> finColumn = Tuple.Create(financialColumn, financialDisplayColumn);
                            lstrecord.GeneralColumnDefs = finColumn;
                            mainTblQry.Append(" ,eoi.CostCenterID as CostCenterID");
                            mainTblQry.Append(" ,CASE WHEN eoi.CostCenterID !=0 then cast(eoi.CostCenterID AS VARCHAR) + '.' + pe.UniqueKey ELSE pe.UniqueKey end AS class ");
                            if (IsEntityAvailable == true)
                            {
                                mainTblQry.Append(" ,0 AS TotalChildrenCount,");
                            }
                            else
                            {
                                string inEntiTypes = "";
                                if (listSetting.EntityTypes != null)
                                {
                                    inEntiTypes = "("
                                                  + String.Join(",", listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                                + ")";

                                }
                                mainTblQry.Append(" ,ISNULL(CASE when pe.TypeID=5 THEN (SELECT COUNT(1) FROM   PM_EntityCostReleations pecr INNER JOIN PM_Entity pe2 ");
                                mainTblQry.Append(" ON  pecr.EntityID = pe2.ID AND pe2.[Active]=1 AND pecr.IsActive=1 WHERE pecr.CostCenterID=pe.id ");
                                if (inEntiTypes.Length > 0)
                                {
                                    mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + " ");
                                }
                                mainTblQry.Append(") else (SELECT COUNT(1) FROM PM_EntityCostReleations pecr INNER JOIN PM_Entity pe2 ON pecr.EntityID=pe2.ID ");
                                mainTblQry.Append(" AND pe2.[Active]=1 AND pecr.IsActive=1   AND pe2.ParentID=pe.id and pecr.CostCenterID=eoi.CostCenterID ");
                                if (inEntiTypes.Length > 0)
                                {
                                    mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + "  ");
                                }
                                mainTblQry.Append(") end,0)   AS TotalChildrenCount, ");
                            }

                            mainTblQry.Append("CASE ");
                            mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.RequestedAmount), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                                 AND children.[level] = 1");
                            mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.RequestedAmount), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            ELSE (");
                            mainTblQry.Append("                     SELECT TOP 1 pf.RequestedAmount");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("       END        AS InRequest,");
                            mainTblQry.Append("       CASE ");
                            mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.PlannedAmount), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                                 AND children.[level] = 1");
                            mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.PlannedAmount), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            ELSE (");
                            mainTblQry.Append("                     SELECT pf.PlannedAmount");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("       END        AS PlannedAmount,");
                            mainTblQry.Append("       CASE ");
                            mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                                 AND children.[level] = 1");
                            mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            ELSE (");
                            mainTblQry.Append("                     SELECT pf.ApprovedAllocatedAmount");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("       END        AS ApprovedAllocatedAmount,");
                            mainTblQry.Append("       CASE ");
                            mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                                 AND children.[level] = 1");
                            mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            ELSE (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("       END        AS ApprovedSubAllocatedAmount,");
                            mainTblQry.Append("       CASE ");
                            mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedBudget), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                                 AND children.[level] = 1");
                            mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedBudget), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            ELSE (");
                            mainTblQry.Append("                     SELECT pf.ApprovedBudget");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("       END        AS ApprovedBudget,");
                            mainTblQry.Append("       CASE ");
                            mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Commited), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Commited), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.UniqueKey LIKE(");
                            mainTblQry.Append("                                SELECT pe.UniqueKey");
                            mainTblQry.Append("                                FROM   PM_Entity pe");
                            mainTblQry.Append("                                WHERE  pe.ID = subtbl.ID");
                            mainTblQry.Append("                            )");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            ELSE (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Commited), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("       END        AS Commited,");
                            mainTblQry.Append("       CASE ");
                            mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Spent), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Spent), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.UniqueKey LIKE(");
                            mainTblQry.Append("                                SELECT pe.UniqueKey");
                            mainTblQry.Append("                                FROM   PM_Entity pe");
                            mainTblQry.Append("                                WHERE  pe.ID = subtbl.ID");
                            mainTblQry.Append("                            )");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            ELSE (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.Spent), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("       END        AS Spent,");
                            mainTblQry.Append("       CASE ");
                            mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0) - ISNULL(SUM(pf.ApprovedBudget), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                                 AND children.[level] = 1");
                            mainTblQry.Append("                     WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                            mainTblQry.Append("                     SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0) - ISNULL(SUM(pf.ApprovedBudget), 0)");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                            INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                 ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                 AND children.[Active] = 1");
                            mainTblQry.Append("                     WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            ELSE (");
                            mainTblQry.Append("                     SELECT pf.ApprovedAllocatedAmount - pf.ApprovedBudget");
                            mainTblQry.Append("                     FROM   PM_Financial pf");
                            mainTblQry.Append("                     WHERE  pf.EntityID = subtbl.ID");
                            mainTblQry.Append("                            AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("       END        AS BudgetDeviation,");
                            mainTblQry.Append("       CASE ");
                            mainTblQry.Append("            WHEN pe.TypeID = 5 THEN (");
                            mainTblQry.Append("                     (");
                            mainTblQry.Append("                         SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                            mainTblQry.Append("                         FROM   PM_Financial pf");
                            mainTblQry.Append("                                INNER JOIN pm_Entity ");
                            mainTblQry.Append("                                     children");
                            mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                     AND children.[Active] = 1");
                            mainTblQry.Append("                                     AND children.[level] = 1");
                            mainTblQry.Append("                         WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                     )");
                            mainTblQry.Append("                     -(");
                            mainTblQry.Append("                         SELECT ISNULL(SUM(pf.Commited), 0)");
                            mainTblQry.Append("                         FROM   PM_Financial pf");
                            mainTblQry.Append("                                INNER JOIN pm_Entity ");
                            mainTblQry.Append("                                     children");
                            mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                     AND children.[Active] = 1");
                            mainTblQry.Append("                         WHERE  pf.CostCenterID = subtbl.ID");
                            mainTblQry.Append("                     )");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            WHEN pe.[level] = 0 THEN (");
                            mainTblQry.Append("                     (");
                            mainTblQry.Append("                         SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                            mainTblQry.Append("                         FROM   PM_Financial pf");
                            mainTblQry.Append("                                INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                     AND children.[Active] = 1");
                            mainTblQry.Append("                         WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                                AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                     )");
                            mainTblQry.Append("                     -(");
                            mainTblQry.Append("                         SELECT ISNULL(SUM(pf.Commited), 0)");
                            mainTblQry.Append("                         FROM   PM_Financial pf");
                            mainTblQry.Append("                                INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                     AND children.[Active] = 1");
                            mainTblQry.Append("                         WHERE  children.UniqueKey LIKE(");
                            mainTblQry.Append("                                    SELECT pe.UniqueKey");
                            mainTblQry.Append("                                    FROM   PM_Entity pe");
                            mainTblQry.Append("                                    WHERE  pe.ID = subtbl.ID");
                            mainTblQry.Append("                                )");
                            mainTblQry.Append("                                AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                     )");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("            ELSE (");
                            mainTblQry.Append("                     (");
                            mainTblQry.Append("                         SELECT pf.ApprovedAllocatedAmount - pf.Commited");
                            mainTblQry.Append("                         FROM   PM_Financial pf");
                            mainTblQry.Append("                         WHERE  pf.EntityID = subtbl.ID");
                            mainTblQry.Append("                                AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                     )");
                            mainTblQry.Append("                     ");
                            mainTblQry.Append("                     -(");
                            mainTblQry.Append("                         SELECT ISNULL(SUM(pf.ApprovedAllocatedAmount), 0)");
                            mainTblQry.Append("                         FROM   PM_Financial pf");
                            mainTblQry.Append("                                INNER JOIN pm_Entity children");
                            mainTblQry.Append("                                     ON  pf.EntityID = children.ID");
                            mainTblQry.Append("                                     AND children.[Active] = 1");
                            mainTblQry.Append("                         WHERE  children.ParentID = subtbl.ID");
                            mainTblQry.Append("                                AND pf.CostCenterID = eoi.CostCenterID");
                            mainTblQry.Append("                     )");
                            mainTblQry.Append("                 )");
                            mainTblQry.Append("       END        AS Available,");

                            mainTblQry.Append("        ");
                            mainTblQry.Append(" isnull((SELECT  metso.StatusOptions FROM MM_EntityStatus mes INNER JOIN MM_EntityTypeStatus_Options metso ON mes.StatusID=metso.ID AND mes.EntityID=pe.id AND metso.IsRemoved=0),'-')  AS Status");
                        }
                        else if (EntityTypeIDs.Objective == (EntityTypeIDs)enumEntityTypeIds)
                        {
                            ArrayList objectiveDisplayColumn = new ArrayList();
                            objectiveDisplayColumn.Add("Type");
                            objectiveDisplayColumn.Add("Rating Objective");
                            objectiveDisplayColumn.Add("Target Outcome");
                            objectiveDisplayColumn.Add("Fulfilment");
                            objectiveDisplayColumn.Add("Status");
                            ArrayList objectiveColumn = new ArrayList();
                            objectiveColumn.Add("Type");
                            objectiveColumn.Add("RatingObjective");
                            objectiveColumn.Add("TargetOutcome");
                            objectiveColumn.Add("Fulfilment");
                            objectiveColumn.Add("Status");
                            Tuple<ArrayList, ArrayList> objColumn = Tuple.Create(objectiveColumn, objectiveDisplayColumn);
                            lstrecord.GeneralColumnDefs = objColumn;
                            mainTblQry.Append(" ,CASE when pe.TypeID =10 then eoi.EID else eoi.ObjectveID  end as ObjectveID");
                            mainTblQry.Append(" ,CASE WHEN eoi.ObjectveID !=0 then cast(eoi.ObjectveID AS VARCHAR) + '.' + pe.UniqueKey ELSE CAST(pe.id AS VARCHAR) end AS class ");
                            if (IsEntityAvailable == true)
                            {
                                mainTblQry.Append(" ,0 AS TotalChildrenCount,");
                            }
                            else
                            {
                                string inEntiTypes = "";
                                if (listSetting.EntityTypes != null)
                                {
                                    inEntiTypes = "("
                                                  + String.Join(",", listSetting.EntityTypes.Select(x => x.ToString()).ToArray())
                                                + ")";

                                }
                                mainTblQry.Append(" ,ISNULL(CASE when pe.TypeID=10 THEN (SELECT COUNT(1) FROM   PM_ObjectiveEntityValue pecr INNER JOIN PM_Entity pe2 ");
                                mainTblQry.Append(" ON  pecr.EntityID = pe2.ID AND pe2.[Active]=1  WHERE pecr.ObjectiveID=pe.id ");
                                if (inEntiTypes.Length > 0)
                                {
                                    mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + " ");
                                }
                                mainTblQry.Append(") else (SELECT COUNT(1) FROM PM_ObjectiveEntityValue pecr INNER JOIN PM_Entity pe2 ON pecr.EntityID=pe2.ID ");
                                mainTblQry.Append(" AND pe2.[Active]=1 AND pe2.ParentID=pe.id WHERE pecr.ObjectiveID=eoi.ObjectveID");
                                if (inEntiTypes.Length > 0)
                                {
                                    mainTblQry.Append(" and pe2.TypeID in" + inEntiTypes + "  ");
                                }
                                mainTblQry.Append(") end,0)   AS TotalChildrenCount, ");
                            }
                            mainTblQry.Append(" (SELECT TOP 1 CASE WHEN typeid=1 THEN 'Numeric(Quantitative)' WHEN typeid=2 THEN 'Numeric(Non Quantitative)' WHEN typeid=3 then 'Qualitative'   ");
                            mainTblQry.Append(" WHEN typeid=4 THEN 'Rating'  end FROM PM_Objective po  WHERE id =pe.ID)AS Type ");
                            mainTblQry.Append(" ,(SELECT Caption FROM PM_Objective_Rating WHERE ID = (SELECT TOP 1  poev.RatingObjective  ");
                            mainTblQry.Append(" FROM PM_ObjectiveEntityValue poev where poev.ObjectiveID=eoi.ObjectveID AND poev.EntityID=pe.ID)) AS RatingObjective, ");
                            //mainTblQry.Append(" (SELECT TOP 1 poev.PlannedTarget  ");
                            //mainTblQry.Append(" FROM PM_ObjectiveEntityValue poev WHERE poev.ObjectiveID=eoi.ObjectveID AND poev.EntityID=pe.ID)AS PlannedTarget, ");
                            mainTblQry.Append(" (SELECT TOP 1 poev.TargetOutcome  ");
                            mainTblQry.Append(" FROM PM_ObjectiveEntityValue poev WHERE poev.ObjectiveID=eoi.ObjectveID AND poev.EntityID=pe.ID)AS TargetOutcome, ");
                            // mainTblQry.Append(" (SELECT TOP 1 poev.Fulfilment ");
                            mainTblQry.Append(" (SELECT TOP 1 CASE WHEN  poev.Fulfilment = 1 THEN 'Fulfilled' WHEN poev.Fulfilment = 2 THEN 'Not Fulfilled' end ");
                            mainTblQry.Append(" FROM PM_ObjectiveEntityValue poev WHERE poev.ObjectiveID=eoi.ObjectveID AND poev.EntityID=pe.ID) AS Fulfilment, ");
                            mainTblQry.Append(" CASE WHEN pe.TypeID = " + (int)EntityTypeList.Objective + " THEN (SELECT case when ISNULL(po.ObjectiveStatus,0)=0 THEN 'Deactivated'  ELSE 'Active'  END from  PM_Objective po WHERE po.id=pe.Id) else  isnull((SELECT  metso.StatusOptions FROM MM_EntityStatus mes INNER JOIN MM_EntityTypeStatus_Options metso ON mes.StatusID=metso.ID AND mes.EntityID=pe.id AND metso.IsRemoved=0),'-') end  AS Status");
                        }
                    }
                    else
                    {
                        ArrayList objectiveDisplayColumn = new ArrayList();
                        objectiveDisplayColumn.Add("Type");
                        objectiveDisplayColumn.Add("StartDate");
                        objectiveDisplayColumn.Add("EndDate");
                        objectiveDisplayColumn.Add("Owner");
                        objectiveDisplayColumn.Add("Status");
                        ArrayList objectiveColumn = new ArrayList();
                        objectiveColumn.Add("Type");
                        objectiveColumn.Add("StartDate");
                        objectiveColumn.Add("EndDate");
                        objectiveColumn.Add("Owner");
                        objectiveColumn.Add("Status");
                        Tuple<ArrayList, ArrayList> objColumn = Tuple.Create(objectiveColumn, objectiveDisplayColumn);
                        lstrecord.GeneralColumnDefs = objColumn;
                        mainTblQry.Append(" ,(SELECT TOP 1 CASE WHEN typeid=1 THEN 'Numeric(Quantitative)' WHEN typeid=2 THEN 'Numeric(Non Quantitative)' WHEN typeid=3 then 'Qualitative'   ");
                        mainTblQry.Append(" WHEN typeid=4 THEN 'Rating'  end FROM PM_Objective po  WHERE id =subtbl.ID)AS Type ");
                        mainTblQry.Append(" ,(SELECT top 1 CAST( po.StartDate AS NVARCHAR(10)) FROM PM_Objective po WHERE po.id=subtbl.Id) as StartDate, ");
                        mainTblQry.Append(" (SELECT top 1 CAST(po.EndDate AS NVARCHAR(10)) FROM PM_Objective po WHERE po.id=subtbl.Id) as EndDate, ");
                        mainTblQry.Append("ISNULL( (SELECT top 1  ISNULL(us.FirstName,'') + ' ' + ISNULL(us.LastName,'') FROM UM_User us INNER JOIN AM_Entity_Role_User aeru ON us.ID=aeru.UserID AND aeru.EntityID=subtbl.Id  INNER JOIN AM_EntityTypeRoleAcl aetra ON  aeru.RoleID = aetra.ID AND  aetra.EntityTypeID=pe.TypeID AND aetra.EntityRoleID = 1),'-') as Owner ");
                        mainTblQry.Append(",(SELECT case when ISNULL(po.ObjectiveStatus,0)=0 THEN 'Deactivated'  ELSE 'Active'  END from  PM_Objective po WHERE po.id=subtbl.Id)  AS Status");
                    }

                    int LastTreeLevel = listSetting.Attributes.Where(a => (AttributesList)a.Type == AttributesList.TreeMultiSelection).OrderByDescending(a => a.Level).Select(a => a.Level).FirstOrDefault();

                    for (int j = 0; j < listSetting.Attributes.Count; j++)
                    {

                        string CurrentattrID = listSetting.Attributes[j].Id.ToString();
                        if (listSetting.Attributes[j].IsSpecial == true)
                        {
                            switch ((SystemDefinedAttributes)listSetting.Attributes[j].Id)
                            {
                                case SystemDefinedAttributes.Owner:
                                    mainTblQry.Append(",ISNULL( (SELECT top 1  ISNULL(us.FirstName,'') + ' ' + ISNULL(us.LastName,'')  FROM UM_User us INNER JOIN AM_Entity_Role_User aeru ON us.ID=aeru.UserID AND aeru.EntityID=subtbl.Id  INNER JOIN AM_EntityTypeRoleAcl aetra ON  aeru.RoleID = aetra.ID AND  aetra.EntityTypeID=pe.TypeID AND aetra.EntityRoleID = 1),'-') as '" + listSetting.Attributes[j].Field + "'");
                                    break;
                                case SystemDefinedAttributes.EntityStatus:
                                    mainTblQry.Append(", CASE WHEN pe.TypeID = " + (int)EntityTypeList.Objective + " THEN (SELECT case when ISNULL(po.ObjectiveStatus,0)=0 THEN 'Deactivated'  ELSE 'Active'  END from  PM_Objective po WHERE po.id=subtbl.Id) else isnull((SELECT  metso.StatusOptions FROM MM_EntityStatus mes INNER JOIN MM_EntityTypeStatus_Options metso ON mes.StatusID=metso.ID AND mes.EntityID=subtbl.id AND metso.IsRemoved=0),'-') end as '" + listSetting.Attributes[j].Field + "'");
                                    break;
                                case SystemDefinedAttributes.EntityOnTimeStatus:
                                    mainTblQry.Append(", CASE WHEN pe.TypeID = " + (int)EntityTypeList.Objective + " THEN (SELECT case when ISNULL(po.ObjectiveStatus,0)=0 THEN '-'  ELSE '-'  END from  PM_Objective po WHERE po.id=subtbl.Id) else isnull((SELECT CASE WHEN (SELECT mes.IntimeStatus FROM MM_EntityStatus mes WHERE mes.EntityID=subtbl.id) = 0 THEN 'On time' WHEN (SELECT mes.IntimeStatus FROM MM_EntityStatus mes WHERE mes.EntityID=subtbl.id) = 1 THEN 'Delayed' WHEN (SELECT mes.IntimeStatus FROM MM_EntityStatus mes WHERE mes.EntityID=subtbl.id) = 2 THEN 'On hold' ELSE 'On time' END AS ontimestatus), '-') END AS '" + listSetting.Attributes[j].Field + "'");
                                    break;
                            }
                        }
                        else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.ListMultiSelection || (AttributesList)listSetting.Attributes[j].Type == AttributesList.DropDownTree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Tree || (AttributesList)listSetting.Attributes[j].Type == AttributesList.Period || (AttributesList)listSetting.Attributes[j].Type == AttributesList.TreeMultiSelection)
                        {
                            switch ((AttributesList)listSetting.Attributes[j].Type)
                            {
                                case AttributesList.ListMultiSelection:

                                    if (listSetting.Attributes[j].Id != (int)SystemDefinedAttributes.ObjectiveType)
                                    {

                                        mainTblQry.Append(" ,(SELECT  ");
                                        mainTblQry.Append(" STUFF( ");
                                        mainTblQry.Append(" ( ");
                                        mainTblQry.Append(" SELECT ', ' +  mo.Caption ");
                                        mainTblQry.Append(" FROM   MM_MultiSelect mms2 ");
                                        mainTblQry.Append(" INNER JOIN MM_Option mo ");
                                        mainTblQry.Append(" ON  mms2.OptionID = mo.ID and  mms2.AttributeID=" + listSetting.Attributes[j].Id);
                                        mainTblQry.Append("  WHERE  mms2.EntityID = mms.EntityID ");
                                        mainTblQry.Append(" FOR XML PATH('') ");
                                        mainTblQry.Append(" ), ");
                                        mainTblQry.Append("  1, ");
                                        mainTblQry.Append(" 2, ");
                                        mainTblQry.Append(" '' ");
                                        mainTblQry.Append("  )               AS VALUE ");
                                        mainTblQry.Append(" FROM   MM_MultiSelect     mms ");
                                        mainTblQry.Append(" WHERE  mms.EntityID=subtbl.Id and  mms.AttributeID = " + CurrentattrID + " ");
                                        mainTblQry.Append(" GROUP BY ");
                                        mainTblQry.Append("  mms.EntityID) as '" + listSetting.Attributes[j].Field + "'");
                                    }

                                    break;
                                case AttributesList.DropDownTree:
                                    mainTblQry.Append(" ,(ISNULL( ");

                                    mainTblQry.Append(" ( ");
                                    mainTblQry.Append(" SELECT top 1 mtn.Caption ");
                                    mainTblQry.Append(" FROM   MM_TreeNode mtn ");
                                    mainTblQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                    mainTblQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                    mainTblQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                    mainTblQry.Append("   AND mtn.Level = " + listSetting.Attributes[j].Level + " ");
                                    mainTblQry.Append("  WHERE  mtv.EntityID = subtbl.Id ");
                                    mainTblQry.Append(" AND mtv.AttributeID = " + CurrentattrID + "   ");
                                    mainTblQry.Append(" ), ");
                                    mainTblQry.Append(" '-' ");
                                    mainTblQry.Append(" ) ) as '" + listSetting.Attributes[j].Field + "'");
                                    break;
                                case AttributesList.Tree:
                                    mainTblQry.Append(" , STUFF((SELECT ', ' + mmt.Caption FROM MM_TreeValue mtv INNER JOIN MM_TreeNode mmt ON mmt.ID = mtv.NodeID AND mtv.AttributeID = " + listSetting.Attributes[j].Field + "  WHERE mtv.EntityID = subtbl.Id ORDER BY mmt.[KEY] FOR XML PATH('')), 1, 2, '') as '" + listSetting.Attributes[j].Field + "'");
                                    break;
                                case AttributesList.Period:
                                    mainTblQry.Append(" ,(SELECT (SELECT CONVERT(NVARCHAR(10), pep.StartDate, 120)  '@s', CONVERT(NVARCHAR(10), pep.EndDate, 120) '@e',");
                                    mainTblQry.Append(" isnull(pep.[Description],'') '@d', ROW_NUMBER() over(ORDER BY pep.Startdate) '@sid',");
                                    mainTblQry.Append(" pep.ID '@o'");
                                    mainTblQry.Append(" FROM   PM_EntityPeriod pep");
                                    mainTblQry.Append(" WHERE  pep.EntityID = subtbl.Id ORDER BY pep.Startdate FOR XML PATH('p'),");
                                    mainTblQry.Append(" TYPE");
                                    mainTblQry.Append(" ) FOR XML PATH('root')");
                                    mainTblQry.Append(" )  AS 'Period'");
                                    mainTblQry.Append(" ,(SELECT (SELECT CONVERT(NVARCHAR(10), pep.Attr_56, 120)  '@s',");
                                    mainTblQry.Append(" pep.Attr_2 '@d',");
                                    mainTblQry.Append(" pep.Attr_67 '@ms',isnull(pem.Name,'') '@n',");
                                    mainTblQry.Append(" pep.ID '@o'");
                                    mainTblQry.Append(" FROM   MM_AttributeRecord_" + (int)EntityTypeList.Milestone + " pep  INNER JOIN PM_Entity pem ON pep.ID=pem.id ");
                                    mainTblQry.Append(" WHERE  pep.Attr_66 = subtbl.Id FOR XML PATH('p'),");
                                    mainTblQry.Append(" TYPE");
                                    mainTblQry.Append(" ) FOR XML PATH('root')");
                                    mainTblQry.Append(" )  AS 'MileStone'");
                                    break;
                                case AttributesList.TreeMultiSelection:
                                    if (LastTreeLevel == listSetting.Attributes[j].Level)
                                    {
                                        mainTblQry.Append(" ,(SELECT  ");
                                        mainTblQry.Append(" STUFF( ");
                                        mainTblQry.Append(" ( ");
                                        mainTblQry.Append(" SELECT ', ' +  mtn.Caption ");
                                        mainTblQry.Append(" FROM   MM_TreeNode mtn ");
                                        mainTblQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                        mainTblQry.Append(" ON  mtv.NodeID = mtn.ID and  mtv.AttributeID=" + listSetting.Attributes[j].Id);
                                        mainTblQry.Append("  AND mtn.Level = " + listSetting.Attributes[j].Level + " WHERE mtv.EntityID = subtbl.Id AND mtv.AttributeID = " + CurrentattrID + "  ");
                                        mainTblQry.Append(" FOR XML PATH('') ");
                                        mainTblQry.Append(" ), ");
                                        mainTblQry.Append("  1, ");
                                        mainTblQry.Append(" 2, ");
                                        mainTblQry.Append(" '' ");
                                        mainTblQry.Append(" ) ) as '" + listSetting.Attributes[j].Field + "'");
                                    }
                                    else
                                    {
                                        mainTblQry.Append(" ,(ISNULL( ");

                                        mainTblQry.Append(" ( ");
                                        mainTblQry.Append(" SELECT top 1 mtn.Caption ");
                                        mainTblQry.Append(" FROM   MM_TreeNode mtn ");
                                        mainTblQry.Append(" INNER JOIN MM_TreeValue mtv ");
                                        mainTblQry.Append("  ON  mtv.NodeID = mtn.ID ");
                                        mainTblQry.Append("  AND mtv.AttributeID = mtn.AttributeID ");
                                        mainTblQry.Append("   AND mtn.Level = " + listSetting.Attributes[j].Level + " ");
                                        mainTblQry.Append("  WHERE  mtv.EntityID = subtbl.Id ");
                                        mainTblQry.Append(" AND mtv.AttributeID = " + CurrentattrID + "   ");
                                        mainTblQry.Append(" ), ");
                                        mainTblQry.Append(" '-' ");
                                        mainTblQry.Append(" ) ) as '" + listSetting.Attributes[j].Field + "'");
                                    }
                                    break;
                            }
                        }
                        else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.ListSingleSelection)
                        {
                            mainTblQry.Append(",(isnull( (SELECT top 1 caption FROM MM_Option  WHERE AttributeID=" + CurrentattrID + " AND id=subtbl.Attr_" + CurrentattrID + "),'-') ) as '" + listSetting.Attributes[j].Field + "'");
                        }
                        else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.CheckBoxSelection)
                        {
                            mainTblQry.Append(" ,isnull(cast(subtbl.attr_" + CurrentattrID + " as varchar(50)), '-') as '" + listSetting.Attributes[j].Field + "'");
                        }
                        else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.DateTime)
                        {
                            mainTblQry.Append(" ,REPLACE(CONVERT(varchar,isnull(subtbl.attr_" + CurrentattrID + " ,''),121),'1900-01-01 00:00:00.000', '-') as '" + listSetting.Attributes[j].Field + "'");
                            //--ISNULL(subtbl.attr_62, '-')  AS '62'
                            //REPLACE(CONVERT(varchar, ISNULL(subtbl.attr_62,''),121),'1900-01-01 00:00:00.000','-')  AS '62'
                        }
                        else if ((AttributesList)listSetting.Attributes[j].Type == AttributesList.ParentEntityName)
                        {
                            mainTblQry.Append(" ,isnull((SELECT top 1 pe2.name  + '!@#' + met.ShortDescription + '!@#' + met.ColorCode FROM PM_Entity pe2 INNER JOIN MM_EntityType met ON pe2.TypeID=met.ID  WHERE  pe2.id=pe.parentid), '-') as '" + listSetting.Attributes[j].Field + "'");
                        }
                        else
                        {
                            mainTblQry.Append(" ,isnull(subtbl.attr_" + CurrentattrID + " , '-') as '" + listSetting.Attributes[j].Field + "'");
                        }

                    }



                    //static query
                    mainTblQry.Append(" From (" + strqry.ToString() + ") as subtbl");


                    finalQry.Append(XmlFilterQry.ToString());



                    finalQry.Append(mainTblQry.ToString());


                    finalQry.Append("  INNER JOIN PM_Entity pe ");
                    finalQry.Append(" ON subtbl.Id=pe.ID INNER JOIN MM_EntityType met  ");
                    finalQry.Append(" ON pe.TypeID=met.ID  ");
                    finalQry.Append(" INNER JOIN @EntityOrderIDs eoi ON  eoi.EID = subtbl.Id AND pe.TypeID NOT IN (SELECT mett.EntitytypeId FROM MM_EntityTaskType mett) ");  // hide Tasktype in dynamic entity


                    finalQry.Append(" ORDER BY eoi.ID ");


                    // lstrecord.Data = tx.PersistenceManager.MetadataRepository.ExecuteQuery(finalQry.ToString());

                    listresult1 = tx.PersistenceManager.MetadataRepository.ExecuteQuery(finalQry.ToString());
                    //enditid=
                    foreach (var item in listresult1)
                    {

                        enditid.Add((int)((System.Collections.Hashtable)(item))["Id"]);

                    }


                    tx.Commit();

                    return enditid;


                    return null;


                }

            }
            catch
            {
                return null;
            }




            return null;
        }

        /// <summary>
        /// Inserting EntityMultiSelectAttribute values
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="multiselectAttribute">The Selected Attribute Option values</param>
        /// <returns>bool</returns>
        public bool MultiSelectAttributeInsertion(MetadataManagerProxy proxy, IList<IMultiSelect> multiselectAttribute)
        {
            IList<MultiSelectDao> listmultiattridao = new List<MultiSelectDao>();

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                if (multiselectAttribute != null)
                {
                    foreach (var obj in multiselectAttribute)
                    {
                        MultiSelectDao multiattridao = new MultiSelectDao();
                        multiattridao.Entityid = obj.Entityid;
                        multiattridao.Attributeid = obj.Attributeid;
                        multiattridao.Optionid = obj.Optionid;
                        listmultiattridao.Add(multiattridao);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<MultiSelectDao>(listmultiattridao);
                    tx.Commit();
                }

            }
            return true;
        }

        /// <summary>
        /// Getting EntityMultiSelectAttribute values
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityId">The EntityID</param>
        /// <returns>IList<IMultiSelect></returns>
        public IList<IMultiSelect> GetMultiSelectAttributes(MetadataManagerProxy proxy, int entityId)
        {
            IList<IMultiSelect> listmultiselectattr = new List<IMultiSelect>();

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                var result = tx.PersistenceManager.PlanningRepository.GetAll<MultiSelectDao>("EntityID", entityId);
                tx.Commit();
                if (result != null)
                {
                    foreach (var obj in result)
                    {
                        MultiSelect multiselectattr = new MultiSelect();
                        multiselectattr.Entityid = obj.Entityid;
                        multiselectattr.Attributeid = obj.Attributeid;
                        multiselectattr.Optionid = obj.Optionid;
                        listmultiselectattr.Add(multiselectattr);
                    }
                }
            }
            return listmultiselectattr;
        }

        /// <summary>
        /// Getting EntityMultiSelectAttribute values
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="IList<IMultiSelect> multiselectAttributes">The Selected Attribute Option values</param>
        /// <returns>bool</returns>
        public bool UpdateMultiSelectAttribute(MetadataManagerProxy proxy, IList<IMultiSelect> multiselectAttributes)
        {
            var result = multiselectAttributes.Select(a => new { EnityId = a.Entityid });

            IList<MultiSelectDao> listmultiattridao = new List<MultiSelectDao>();

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                tx.PersistenceManager.PlanningRepository.DeleteByID<MultiSelectDao>(Convert.ToInt32(result.ElementAt(0).EnityId));
                tx.Commit();
                if (multiselectAttributes != null)
                {
                    foreach (var obj in multiselectAttributes)
                    {
                        MultiSelectDao multiattridao = new MultiSelectDao();
                        multiattridao.Entityid = obj.Entityid;
                        multiattridao.Attributeid = obj.Attributeid;
                        multiattridao.Optionid = obj.Optionid;
                        listmultiattridao.Add(multiattridao);
                    }
                    tx.PersistenceManager.PlanningRepository.Save<MultiSelectDao>(listmultiattridao);
                    tx.Commit();
                }
            }
            return true;
        }
        public int GetXMLversion(string xmlpath)
        {
            int versionNum = 0;
            string[] array1 = Directory.GetFiles(xmlpath);
            int latestverion = 0;
            for (int i = 0; i < array1.Length; i++)
            {
                if (array1[i].Contains("MetadataVersion"))
                {
                    string[] a = array1[i].Split('_');
                    versionNum = Convert.ToInt32(a.Last().ToString().Replace("V", "").Replace(".xml", ""));
                    if (latestverion < versionNum)
                        latestverion = versionNum;
                }
            }
            return versionNum;
        }


        public string GetVersionsCountAndCurrentVersion(MetadataManagerProxy proxy, string key)
        {
            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            var xelementFilepath = XElement.Load(xmlpath);
            string xelementName = key;
            var xmlElement = xelementFilepath.Element(xelementName);
            XDocument adminXmlDoc = XDocument.Load(xmlpath);
            var Activeversioncount = string.Empty;
            var TotalVersions = string.Empty;
            var WorkingVersion = string.Empty;
            if (xmlElement != null)
            {
                TotalVersions = adminXmlDoc.Descendants("Version").Descendants("TotalVersionCount").Attributes("value").First().Value;
                Activeversioncount = adminXmlDoc.Descendants("Version").Descendants("ActiveVersion").Attributes("value").First().Value;
                WorkingVersion = adminXmlDoc.Descendants("Version").Descendants("WorkingVersion").Attributes("value").First().Value;
            }
            return TotalVersions + "," + Activeversioncount + "," + WorkingVersion;
        }
        public bool UpdateWorkingVersion(MetadataManagerProxy proxy, int version)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                string Versionxmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                string WorkingXmlPath = GetXmlWorkingPath();
                XDocument xDoc = XDocument.Load(Versionxmlpath);
                System.IO.File.Delete(WorkingXmlPath);

                System.IO.File.WriteAllText(WorkingXmlPath, xDoc.ToString());


                string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
                var xelementFilepath = XElement.Load(xmlpath);

                XDocument adminXmlDoc = XDocument.Load(xmlpath);
                var Activeversioncount = string.Empty;
                var TotalVersions = string.Empty;
                var WorkingVersion = string.Empty;

                var result = adminXmlDoc.Descendants("Version").Descendants("WorkingVersion");
                foreach (XElement item in result)
                {
                    item.SetAttributeValue("value", version);
                }
                adminXmlDoc.Save(xmlpath);

                XDocument deleteSyncXml = XDocument.Load(currentSyncDBXML);
                deleteSyncXml.Root.RemoveAll();
                deleteSyncXml.Save(currentSyncDBXML);

                int AttributeMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<AttributeDao>("Id");
                int AttributeTypeMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<AttributeTypeDao>("Id");
                int EntityTypeMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<EntityTypeDao>("Id");
                int EntityTypeFeatureMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<EntityTypeFeatureDao>("Id");
                int EntityTypeAttributeRelationMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<EntityTypeAttributeRelationDao>("ID");
                int FeatureMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<FeatureDao>("Id");
                int ModuleMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<ModuleDao>("Id");
                //int MultiSelectMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<MultiSelectDao>("Id");
                int OptionMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<OptionDao>("Id");
                int TreeLevelMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<TreeLevelDao>("Id");
                int TreeNodeMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<TreeNodeDao>("Id");
                //int TreeValueMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<TreeValueDao>("Id");
                int ValidationMaxID = tx.PersistenceManager.PlanningRepository.GetMaxSortOrder<ValidationDao>("Id");

                XDocument xmlFile = XDocument.Load(WorkingXmlPath);
                IList<object> daos = new List<object>();
                daos.Add("Attribute," + AttributeMaxID);
                daos.Add("AttributeType," + AttributeTypeMaxID);
                daos.Add("EntityType," + EntityTypeMaxID);
                daos.Add("EntityTypeFeature," + EntityTypeFeatureMaxID);
                daos.Add("EntityTypeAttributeRelation," + EntityTypeAttributeRelationMaxID);
                daos.Add("Feature," + FeatureMaxID);
                daos.Add("Module," + ModuleMaxID);
                //daos.Add("MultiSelect," + MultiSelectMaxID);
                daos.Add("Option," + OptionMaxID);
                daos.Add("TreeLevel," + TreeLevelMaxID);
                daos.Add("TreeNode," + TreeNodeMaxID);
                //daos.Add("TreeValue," + TreeValueMaxID);
                daos.Add("Validation," + ValidationMaxID);

                foreach (var item in daos)
                {
                    string table = item.ToString().Split(',')[0].ToString();
                    var query = from c in xmlFile.Root.Elements(table + "_Table") select c;
                    var MaxID = item.ToString().Split(',')[1].ToString();
                    foreach (XElement attrib in query)
                    {
                        if (attrib.Attribute("maxid") != null)
                        {
                            attrib.Attribute("maxid").Value = MaxID.ToString();
                        }
                        else
                        {
                            attrib.SetAttributeValue("maxid", MaxID.ToString());
                        }
                    }
                }
                xmlFile.Save(WorkingXmlPath);

                MarcomManagerFactory.AdminMetadataVersionNumber = version;


                //var Attributequery = from c in xmlFile.Root.Elements("Attribute_Table") select c;
                //foreach (XElement attrib in Attributequery)
                //{
                //    attrib.Attribute("maxid").Value = AttributeMaxID.ToString();
                //}
                //var AttributeTypequery = from c in xmlFile.Root.Elements("AttributeType_Table") select c;
                //foreach (XElement attribtype in AttributeTypequery)
                //{
                //    attribtype.Attribute("maxid").Value = AttributeTypeMaxID.ToString();
                //}
                //var EntityTypequery = from c in xmlFile.Root.Elements("EntityType_Table") select c;
                //foreach (XElement entitytype in EntityTypequery)
                //{
                //    entitytype.Attribute("maxid").Value = EntityTypeMaxID.ToString();
                //}
                //var EntityTypeFeaturequery = from c in xmlFile.Root.Elements("EntityTypeFeature_Table") select c;
                //foreach (XElement entitytypefeature in EntityTypeFeaturequery)
                //{
                //    entitytypefeature.Attribute("maxid").Value = EntityTypeFeatureMaxID.ToString();
                //}
                //var EntityTypeAttributeRelationquery = from c in xmlFile.Root.Elements("EntityTypeAttributeRelation_Table") select c;
                //foreach (XElement entitytypeattrib in EntityTypeAttributeRelationquery)
                //{
                //    entitytypeattrib.Attribute("maxid").Value = EntityTypeAttributeRelationMaxID.ToString();
                //}
                //var Featurequery = from c in xmlFile.Root.Elements("Feature_Table") select c;
                //foreach (XElement feature in Featurequery)
                //{
                //    feature.Attribute("maxid").Value = FeatureMaxID.ToString();
                //}
                //var Modulequery = from c in xmlFile.Root.Elements("Module_Table") select c;
                //foreach (XElement module in Modulequery)
                //{
                //    module.Attribute("maxid").Value = ModuleMaxID.ToString();
                //}
                //var MultiSelectquery = from c in xmlFile.Root.Elements("MultiSelect_Table") select c;
                //foreach (XElement multiselect in MultiSelectquery)
                //{
                //    multiselect.Attribute("maxid").Value = MultiSelectMaxID.ToString();
                //}
                //var Optionquery = from c in xmlFile.Root.Elements("Option_Table") select c;
                //foreach (XElement option in Optionquery)
                //{
                //    option.Attribute("maxid").Value = OptionMaxID.ToString();
                //}
                //var TreeLevelquery = from c in xmlFile.Root.Elements("TreeLevel_Table") select c;
                //foreach (XElement treelevel in TreeLevelquery)
                //{
                //    treelevel.Attribute("maxid").Value = TreeLevelMaxID.ToString();
                //}
                //var TreeNodequery = from c in xmlFile.Root.Elements("TreeNode_Table") select c;
                //foreach (XElement treenode in TreeNodequery)
                //{
                //    treenode.Attribute("maxid").Value = TreeNodeMaxID.ToString();
                //}
                //var TreeValuequery = from c in xmlFile.Root.Elements("TreeValue_Table") select c;
                //foreach (XElement treevalue in TreeValuequery)
                //{
                //    treevalue.Attribute("maxid").Value = TreeValueMaxID.ToString();
                //}
                //var Validationquery = from c in xmlFile.Root.Elements("Validation_Table") select c;
                //foreach (XElement validation in Validationquery)
                //{
                //    validation.Attribute("maxid").Value = ValidationMaxID.ToString();
                //}


            }
            return true;
        }

        public bool UpdateActiveVersion(MetadataManagerProxy proxy, int version)
        {
            string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
            var xelementFilepath = XElement.Load(xmlpath);

            XDocument adminXmlDoc = XDocument.Load(xmlpath);
            var Activeversioncount = string.Empty;
            var TotalVersions = string.Empty;
            var WorkingVersion = string.Empty;

            var result = adminXmlDoc.Descendants("Version").Descendants("ActiveVersion");
            foreach (XElement item in result)
            {
                item.SetAttributeValue("value", version);
                //MarcomManagerFactory.ActiveMetadataVersionNumber = version;
            }
            adminXmlDoc.Save(xmlpath);
            MarcomManagerFactory.ActiveMetadataVersionNumber = version;
            return true;
        }


        /// <summary>
        /// AttributeFilter
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="ListSettings">Record Settings</param>
        /// <returns>IList<IEntityTypeAttributeRelationwithLevels></returns>
        public IList<AttributeSettings> AttributeFilter(MetadataManagerProxy proxy, ListSettings listSettings)
        {
            string attributeCaption = string.Empty;
            string xmlpath = string.Empty;
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                xmlpath = GetXmlWorkingPath();

                var MainList = (from item in listSettings.Attributes
                                where item.IsFilter == true
                                select item).ToList<AttributeSettings>();
                return MainList;
            }

        }
        /// <summary>
        /// Gettign Treenodes by AttributeId and Level.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="AttributeID">The AttributeID.</param>
        /// <param name="level">The LevelID.</param>
        /// <returns>List of ITreeNode</returns>
        public IList<ITreeNode> GetTreeNodeByLevel(MetadataManagerProxy proxy, int attributeID, int level)
        {
            try
            {
                IList<ITreeNode> listTreeNode = new List<ITreeNode>();
                IList<TreeNodeDao> dao = new List<TreeNodeDao>();
                string tree = string.Empty;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string xmlpath = GetXmlWorkingPath();
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath);
                    var parentNode = from node in dao
                                     where node.AttributeID == attributeID
                                         && node.Level == level
                                     select node;
                    foreach (var nodeObj in parentNode)
                    {
                        TreeNode treeNodeObj = new TreeNode();
                        treeNodeObj.Id = nodeObj.Id;
                        treeNodeObj.NodeID = nodeObj.NodeID;
                        treeNodeObj.ParentNodeID = nodeObj.ParentNodeID;
                        treeNodeObj.Level = nodeObj.Level;
                        treeNodeObj.KEY = nodeObj.KEY;
                        treeNodeObj.AttributeID = nodeObj.AttributeID;
                        treeNodeObj.Caption = nodeObj.Caption;
                        treeNodeObj.ColorCode = nodeObj.ColorCode;

                        listTreeNode.Add(treeNodeObj);
                    }

                }
                return listTreeNode;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        /// <summary>
        /// Gettign Attributes from AdminSettings xml and based on AttributeId and Level getting Nodes.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>IList of IFiltersettingsAttributeData</returns>
        public IList<IFiltersettingsAttributes> GettingFilterAttribute(MetadataManagerProxy proxy, int typeId, string FilterType, int OptionFrom, JArray IdList)
        {
            try
            {
                if (OptionFrom == 1)
                {
                    OptionFrom = MarcomManagerFactory.ActiveMetadataVersionNumber;
                }
                IList<IFiltersettingsAttributes> listFilterAttr = new List<IFiltersettingsAttributes>();
                ListSettings listSettings = new ListSettings();
                StringBuilder userstrng = new StringBuilder();
                if (typeId == 5 && FilterType == "Filter")
                {
                    listSettings = FillListSettings("Filter", typeId);
                    userstrng.Append(" select distinct uu.ID,uu.FirstName,uu.LastName from UM_User uu ");
                    userstrng.Append(" inner join PM_Entity pe on pe.TypeID = 5 ");
                    userstrng.Append(" inner join AM_EntityTypeRoleAcl aera on aera.EntityTypeID = pe.TypeID and aera.EntityRoleID=1 ");
                    userstrng.Append(" inner join AM_Entity_Role_user aeru on aeru.EntityID = pe.ID and aeru.RoleID = aera.ID ");
                    userstrng.Append(" where uu.ID = aeru.UserID ");

                }
                else if (typeId == 6 && FilterType == "Filter")
                {
                    listSettings = FillListSettings("Filter", typeId);
                    userstrng.Append(" select distinct uu.ID,uu.FirstName,uu.LastName from UM_User uu ");
                    userstrng.Append(" inner join MM_EntityType me on me.IsRootLevel=1 and me.ID not in (5,10) ");
                    userstrng.Append(" inner join PM_Entity pe on pe.TypeID = me.ID ");
                    userstrng.Append(" inner join AM_EntityTypeRoleAcl aera on aera.EntityTypeID = pe.TypeID and aera.EntityRoleID=1 ");
                    userstrng.Append(" inner join AM_Entity_Role_user aeru on aeru.EntityID = pe.ID and aeru.RoleID = aera.ID ");
                    userstrng.Append(" where uu.ID = aeru.UserID ");
                }
                else if (typeId == 6 && FilterType == "DetailFilter")
                {
                    listSettings = FillListSettings("DetailFilter", typeId);
                    string idslist = string.Join(",", IdList);
                    userstrng.Append(" SELECT DISTINCT us.ID, ISNULL(us.FirstName, '') AS FirstName , ISNULL(us.LastName, '') AS LastName ");
                    userstrng.Append(" FROM   UM_User us ");
                    userstrng.Append(" INNER JOIN PM_Entity pe ON pe.ID in(" + idslist + ") OR  ");
                    int count = IdList.Count();
                    int i = 1;
                    foreach (var ids in IdList)
                    {
                        userstrng.Append(" pe.UniqueKey like '" + ids + ".%' ");
                        if (i < count)
                            userstrng.Append(" or ");
                        i++;
                    }
                    userstrng.Append(" INNER JOIN MM_EntityType met ON met.ID = pe.TypeID ");
                    userstrng.Append(" INNER JOIN AM_Entity_Role_User aeru ");
                    userstrng.Append(" ON  us.ID = aeru.UserID ");
                    userstrng.Append(" AND aeru.EntityID = pe.ID ");
                    userstrng.Append(" INNER JOIN AM_EntityTypeRoleAcl aetra ");
                    userstrng.Append(" ON  aeru.RoleID = aetra.ID ");
                    userstrng.Append(" AND aetra.EntityTypeID = pe.TypeID ");
                    userstrng.Append(" AND aetra.EntityRoleID = 1 ");

                }
                else if (typeId == 5 && FilterType == "DetailFilter")
                {
                    string idslist = string.Join(",", IdList);
                    listSettings = FillListSettings("DetailFilter", typeId);
                    userstrng.Append(" select distinct uu.ID,uu.FirstName,uu.LastName from UM_User uu  ");
                    userstrng.Append(" inner join PM_Financial pf on pf.CostCenterID in(" + idslist + ") and pf.PlannedAmount > 0 ");
                    userstrng.Append(" inner join PM_Entity pe on pe.ID =pf.EntityID  ");
                    userstrng.Append(" inner join AM_EntityTypeRoleAcl aera on aera.EntityTypeID = pe.TypeID and aera.EntityRoleID=1 ");
                    userstrng.Append(" inner join AM_Entity_Role_user aeru on aeru.EntityID = pe.ID and aeru.RoleID = aera.ID ");
                    userstrng.Append(" and aeru.EntityID  in ( pe.ID," + idslist + ") ");
                    userstrng.Append(" and TypeID not in ( select ID from MM_EntityType where IsAssociate=1) ");
                    userstrng.Append(" where uu.ID = aeru.UserID ");

                    userstrng.Append(" union ");
                    userstrng.Append(" select distinct uu.ID,uu.FirstName,uu.LastName from UM_User uu ");
                    userstrng.Append(" inner join PM_Entity pe on pe.Id in(" + idslist + ") ");
                    userstrng.Append(" inner join AM_EntityTypeRoleAcl aera on aera.EntityTypeID = pe.TypeID and aera.EntityRoleID=1 ");
                    userstrng.Append(" inner join AM_Entity_Role_user aeru on aeru.EntityID = pe.ID and aeru.RoleID = aera.ID ");
                    userstrng.Append(" and aeru.EntityID  in ( pe.ID," + idslist + ") ");
                    userstrng.Append(" and TypeID not in ( select ID from MM_EntityType where IsAssociate=1) ");
                    userstrng.Append(" where uu.ID = aeru.UserID ");
                }
                else if (typeId == 10 && FilterType == "DetailFilter")
                {
                    string idslist = string.Join(",", IdList);
                    listSettings = FillListSettings("DetailFilter", typeId);
                    userstrng.Append(" select distinct uu.ID,uu.FirstName,uu.LastName from UM_User uu   ");
                    userstrng.Append(" inner join PM_ObjectiveEntityValue poev on poev.ObjectiveID IN(" + idslist + ") ");
                    userstrng.Append(" inner join PM_Entity pe on pe.ID =poev.EntityID   ");
                    userstrng.Append(" inner join AM_EntityTypeRoleAcl aera on aera.EntityTypeID = pe.TypeID and aera.EntityRoleID=1  ");
                    userstrng.Append(" inner join AM_Entity_Role_user aeru on aeru.EntityID = pe.ID and aeru.RoleID = aera.ID  ");
                    userstrng.Append(" and aeru.EntityID  in ( pe.ID," + idslist + ")  ");
                    userstrng.Append(" and TypeID not in ( select ID from MM_EntityType where IsAssociate=1)  ");
                    userstrng.Append(" where uu.ID = aeru.UserID  ");
                    userstrng.Append(" union  ");
                    userstrng.Append(" select distinct uu.ID,uu.FirstName,uu.LastName from UM_User uu  ");
                    userstrng.Append(" inner join PM_Entity pe on pe.Id in(" + idslist + ")  ");
                    userstrng.Append(" inner join AM_EntityTypeRoleAcl aera on aera.EntityTypeID = pe.TypeID and aera.EntityRoleID=1  ");
                    userstrng.Append(" inner join AM_Entity_Role_user aeru on aeru.EntityID = pe.ID and aeru.RoleID = aera.ID  ");
                    userstrng.Append(" and aeru.EntityID  in ( pe.ID," + idslist + ")  ");
                    userstrng.Append(" and TypeID not in ( select ID from MM_EntityType where IsAssociate=1)  ");
                    userstrng.Append(" where uu.ID = aeru.UserID  ");
                }

                string xmlpath = string.Empty;

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = GetXmlWorkingPath();

                    var attribueList = listSettings.Attributes.Where(a => a.IsFilter == true).Select(a => a).ToList();
                    foreach (var attrObj in attribueList)
                    {
                        IFiltersettingsAttributes filterAttr = new FiltersettingsAttributes();
                        filterAttr.AttributeId = attrObj.Id;
                        filterAttr.AttributeTypeId = attrObj.Type;
                        filterAttr.DisplayName = attrObj.DisplayName;
                        filterAttr.TreeLevel = attrObj.Level;
                        filterAttr.OptionValues = null;
                        filterAttr.Users = null;
                        filterAttr.LevelTreeNodes = null;
                        filterAttr.IsSpecial = attrObj.IsSpecial;
                        if (filterAttr.AttributeTypeId == (int)AttributesList.DropDownTree)
                        {
                            filterAttr.LevelTreeNodes = GetTreeNodeByLevel(proxy, filterAttr.AttributeId, filterAttr.TreeLevel);
                        }
                        if (filterAttr.AttributeTypeId == (int)AttributesList.DropDownTreePricing)
                        {
                            List<TreeNodeDao> nodeobj = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).Where(x => x.AttributeID == filterAttr.AttributeId).OrderBy(a => a.Level).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                            List<TreeLevelDao> daooBj = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).Where(x => x.AttributeID == filterAttr.AttributeId).OrderBy(a => a.Level).ToList<TreeLevelDao>();
                            IList<DropDownTreePricing> returnObj = new List<DropDownTreePricing>();
                            IList<TreeValueDao> treeobj = new List<TreeValueDao>();
                            foreach (var val in daooBj)
                            {
                                DropDownTreePricing priObj = new DropDownTreePricing();
                                priObj.id = val.Id;
                                priObj.level = val.Level;
                                priObj.LevelName = val.LevelName;
                                priObj.TotalLevel = daooBj.Count;
                                priObj.isperc = val.IsPercentage;
                                var tlnodes = nodeobj.Where(a => a.Level == val.Level).ToList();
                                int i = treeobj.Count();
                                priObj.LevelOptions = FetchPricingLevelOption(treeobj, false, tlnodes);
                                returnObj.Add(priObj);
                            }
                            filterAttr.DropdowntreePricingAttr = returnObj;
                        }

                        else if (filterAttr.AttributeTypeId == (int)AttributesList.TreeMultiSelection)
                        {
                            filterAttr.LevelTreeNodes = GetTreeNodeByLevel(proxy, filterAttr.AttributeId, filterAttr.TreeLevel);
                        }
                        else if (filterAttr.AttributeId == Convert.ToInt32(SystemDefinedAttributes.Owner))
                        {
                            //filterAttr.Users = proxy.MarcomManager.UserManager.GetUsers();
                            var userdetails = tx.PersistenceManager.MetadataRepository.ExecuteQuery(userstrng.ToString());
                            IList<BrandSystems.Marcom.Core.User.Interface.IUser> UsersList = new List<BrandSystems.Marcom.Core.User.Interface.IUser>();
                            foreach (var userdetail in userdetails)
                            {
                                User.User user = new User.User();
                                user.Id = (int)((System.Collections.Hashtable)(userdetail))["ID"];
                                user.FirstName = ((System.Collections.Hashtable)(userdetail))["FirstName"].ToString();
                                user.LastName = ((System.Collections.Hashtable)(userdetail))["LastName"].ToString();
                                UsersList.Add(user);
                            }
                            filterAttr.Users = UsersList;
                        }
                        else if (filterAttr.AttributeTypeId == (int)AttributesList.Tree)
                        {
                            filterAttr.tree = GetTreeNode(proxy, filterAttr.AttributeId, false);
                        }
                        else if (filterAttr.AttributeId == Convert.ToInt32(SystemDefinedAttributes.EntityStatus))
                        {
                            StringBuilder entityoptions = new StringBuilder();
                            entityoptions.Append("SELECT metso.StatusOptions,metso.ID,metso.EntityTypeID,met.ColorCode,met.ShortDescription AS ShortDesc ");
                            entityoptions.Append(" FROM MM_EntityTypeStatus_Options metso ");
                            entityoptions.Append(" INNER JOIN MM_EntityType met ON met.ID=metso.EntityTypeID AND metso.IsRemoved=0");
                            if (FilterType == "Filter")
                            {
                                entityoptions.Append(" WHERE met.IsRootLevel=1");
                            }
                            if (FilterType == "Filter" && typeId == 5)
                            {
                                entityoptions.Append(" OR met.ID=5");
                            }
                            IList<EntityTypeStatusOptionsDao> entitystatusdao = new List<EntityTypeStatusOptionsDao>();
                            //entitystatusdao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeStatusOptionsDao>();
                            var entitystatus = tx.PersistenceManager.MetadataRepository.ExecuteQuery(entityoptions.ToString());

                            IList<IEntityTypeStatusOptionsForFilter> _iientitystatusoptions = new List<IEntityTypeStatusOptionsForFilter>();
                            foreach (var item in entitystatus)
                            {
                                EntityTypeStatusOptionsForFilter _ientityTypeStatus = new EntityTypeStatusOptionsForFilter();
                                _ientityTypeStatus.ID = (int)((System.Collections.Hashtable)(item))["ID"];
                                _ientityTypeStatus.EntityTypeID = (int)((System.Collections.Hashtable)(item))["EntityTypeID"];
                                _ientityTypeStatus.StatusOptions = ((System.Collections.Hashtable)(item))["StatusOptions"].ToString();
                                _ientityTypeStatus.IsDeleted = false;
                                _ientityTypeStatus.ShortDesc = ((System.Collections.Hashtable)(item))["ShortDesc"].ToString();
                                _ientityTypeStatus.ColorCode = ((System.Collections.Hashtable)(item))["ColorCode"].ToString();
                                _iientitystatusoptions.Add(_ientityTypeStatus);
                            }

                            filterAttr.EntityStatusOptionValues = _iientitystatusoptions;
                        }
                        else
                            filterAttr.OptionValues = GetOptionforDetailFilter(proxy, OptionFrom, attrObj.Id);

                        listFilterAttr.Add(filterAttr);
                    }
                }
                return listFilterAttr;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<DropDownTreePricing> PricingValues(MetadataManagerProxy proxy, int filterid, int attributeid, int attributetypeid)
        {
            try
            {
                IList<DropDownTreePricing> returnObj = new List<DropDownTreePricing>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string xmlpath = GetActiveVersionXmlPath();
                    List<TreeNodeDao> nodeobj = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).Where(x => x.AttributeID == attributeid).OrderBy(a => a.Level).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                    List<TreeLevelDao> daooBj = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).Where(x => x.AttributeID == attributeid).OrderBy(a => a.Level).ToList<TreeLevelDao>();

                    IList<TreeValueDao> treeobj = new List<TreeValueDao>();
                    IList<FiltersettingsValuesDao> filtertvDao = new List<FiltersettingsValuesDao>();
                    filtertvDao = tx.PersistenceManager.MetadataRepository.Query<FiltersettingsValuesDao>().Where(a => a.FilterId == filterid && a.AttributeTypeId == attributetypeid && a.AttributeId == attributeid).ToList();
                    foreach (var val in daooBj)
                    {
                        DropDownTreePricing priObj = new DropDownTreePricing();
                        priObj.id = val.Id;
                        priObj.level = val.Level;
                        priObj.LevelName = val.LevelName;
                        priObj.TotalLevel = daooBj.Count;
                        priObj.isperc = val.IsPercentage;
                        var tlnodes = nodeobj.Where(a => a.Level == val.Level).ToList();
                        if (filtertvDao.Count > 0)
                            priObj.selection = filtertvDao.Where(a => a.Level == val.Level).Select(a => a.Value.ToString()).ToArray();
                        else
                            priObj.selection = new string[] { };
                        int i = treeobj.Count();
                        priObj.LevelOptions = FetchPricingLevelOption(treeobj, false, tlnodes);
                        returnObj.Add(priObj);

                    }
                }
                return returnObj;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<IEntityAttributeDetails> GetAttributesForDetailBlock(MetadataManagerProxy proxy, int EntityID)
        {
            BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao baseentity = new BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao();

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                ////string str = "select be.ID from PM_Entity as be where be.ID=13 select be.IsLock from PM_Entity as be where be.ID=13 select be.Name,1 as AttributeTypeID from PM_Entity as be where be.ID=13 select u.FirstName + ' ' + u.LastName as [Owner],1 as AttributeTypeID from PM_Entity be left outer join AM_Entity_Role_User eru on eru.EntityID=be.ID and eru.RoleID=1 inner join UM_User u on eru.UserID=u.ID where be.ID=13 select o.Caption,1 as AttributeTypeID  from PM_Entity be  left outer join MM_AttributeRecord_6 a6 on a6.Id=be.ID  inner join MM_Option o on o.ID=a6.Attr_1 and o.AttributeID=1 where be.ID=13";
                //string str="select be.ID,be.IsLock,be.Name,u.FirstName + ' ' + u.LastName as [Owner],o.Caption from PM_Entity as be left outer join AM_Entity_Role_User eru on eru.EntityID=be.ID and eru.RoleID=1 inner join UM_User u on eru.UserID=u.ID left outer join MM_AttributeRecord_6 a6 on a6.Id=be.ID  inner join MM_Option o on o.ID=a6.Attr_1 and o.AttributeID=1 where be.ID=13";
                //IList result = tx.PersistenceManager.MetadataRepository.ExecuteQuery(str);
                //return result;
                baseentity = tx.PersistenceManager.MetadataRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(EntityID);
                //BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao entityroleuser = new Dal.Access.Model.EntityRoleUserDao();
                var entityroleuser = tx.PersistenceManager.MetadataRepository.GetAll<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();

                var RoleUser = from entity in entityroleuser where entity.Entityid == EntityID select entity.Userid;


                BrandSystems.Marcom.Dal.User.Model.UserDao user = new Dal.User.Model.UserDao();
                user = tx.PersistenceManager.MetadataRepository.Get<BrandSystems.Marcom.Dal.User.Model.UserDao>(RoleUser.ElementAt(0));
                IList<IEntityAttributeDetails> listresult = new List<IEntityAttributeDetails>();
                IEntityAttributeDetails attribdetails = new EntityAttributeDetails();
                attribdetails.EntityId = baseentity.Id;
                if (user != null)
                    attribdetails.Owner = user.FirstName + ' ' + user.LastName + ',' + '1';
                attribdetails.ActivityName = baseentity.Name + ',' + '1';
                attribdetails.IsLock = baseentity.IsLock;

                listresult.Add(attribdetails);
                //listresult.Add(baseentity.Id);
                //listresult.Add(baseentity.IsLock);
                //listresult.Add(baseentity.Name);
                //listresult.Add(user.FirstName + ' ' + user.LastName);
                return listresult;
            }

        }


        public bool SaveDetailBlock(MetadataManagerProxy proxy, int ID, int EntityID, string Newvalue)
        {
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                if (ID == 1)
                {
                    BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao baseentity = new BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao();

                    baseentity.Id = EntityID;
                    baseentity = tx.PersistenceManager.CommonRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(baseentity.Id);
                    baseentity.Name = Newvalue;
                    tx.PersistenceManager.CommonRepository.Save<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(baseentity);
                    tx.Commit();
                }
                if (ID == 2)
                {
                    string str = "update AM_Entity_Role_User set RoleID=2 where EntityID= ? and RoleID =1 update AM_Entity_Role_User set RoleID=1 where EntityID= ? and UserID= ? ";
                    tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, EntityID, EntityID, Newvalue);
                    tx.Commit();
                }
                if (ID == 3)
                {
                    string str = "update MM_AttributeRecord_6 set Attr_1= ?  where ID= ? ";
                    tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Newvalue, EntityID);
                    tx.Commit();
                }
            }
            return true;
        }
        /// <summary>
        /// Getting list of Entity Id's which are not Parent of this EntityTypeID
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityTypeId">The EntityTypeID.</param>
        /// <returns>IList of IEntity</returns>
        public IList<IEntityType> GettingChildEntityTypes(MetadataManagerProxy proxy, int entityTypeId)
        {
            try
            {
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                IList<IEntityType> listEntities = new List<IEntityType>();
                string xmlPath = string.Empty;
                IList<EntityTypeDao> entityTypeDao = new List<EntityTypeDao>();
                IList<EntitytasktypeDao> entityTasktypedao = new List<EntitytasktypeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = GetXmlWorkingPath();
                    XDocument xDoc = XDocument.Load(xmlPath);
                    entityTypeDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath).Where(a => Convert.ToInt32(a.IsAssociate) == 0 && a.Category == 2 && a.Id != entityTypeId && Convert.ToInt32(a.IsRootLevel) == 0 && Convert.ToInt32(a.ModuleID) == 3).ToList();
                    entityTasktypedao = tx.PersistenceManager.MetadataRepository.GetObject<EntitytasktypeDao>(xmlPath).ToList();
                    if (entityTasktypedao.Count > 0)
                    {
                        int[] typeids = entityTasktypedao.Select(a => a.EntitytypeId).ToArray();
                        entityTypeDao = entityTypeDao.Where(a => !typeids.Contains(a.Id)).ToList();
                    }
                    IList<EntityTypeDao> childNodeEntityTypes;
                    List<int> listEntityId = GettingParentEntityId(tx, entityTypeId);
                    childNodeEntityTypes = entityTypeDao.Where(a => !listEntityId.Contains(a.Id)).ToList();
                    foreach (var entObj in childNodeEntityTypes)
                    {
                        EntityType entity = new EntityType();
                        entity.Id = entObj.Id;
                        entity.Caption = entObj.Caption.Trim();
                        entity.Description = entObj.Description.Trim();
                        entity.ShortDescription = entObj.ShortDescription.Trim();
                        entity.ColorCode = entObj.ColorCode.Trim();
                        entity.Category = entObj.Category;
                        //entity.ParentEntityTypeId = a.ParentEntityTypeId;
                        entity.ModuleID = entObj.ModuleID;
                        // entity.IsSystemDefined = entObj.IsSystemDefined;
                        listEntities.Add(entity);
                    }
                    tx.Commit();
                }

                return listEntities;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Getting list of Entity Id's which are not Parent of this EntityTypeID Using Recurssive Function
        /// </summary>
        /// <param name="tx">The tx</param>
        /// <param name="heirarchyEntityTypeId">The EntityTypeId.</param> 
        /// <returns>List of IDs</returns>
        public List<int> GettingParentEntityId(ITransaction tx, int entityTypeId)
        {
            try
            {
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                string xmlPath = GetXmlWorkingPath();
                List<int> parentId = new List<int>();
                parentId.Add(entityTypeId);
                var listitems = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeHierarchyDao>(xmlPath);
                if (listitems != null)
                {
                    var parentItems = listitems.Where(a => a.ChildActivityTypeID == entityTypeId).ToList();
                    if (parentItems.Count > 0)
                    {
                        foreach (var item in parentItems)
                        {
                            List<int> ids = GettingParentEntityId(tx, item.ParentActivityTypeID);
                            parentId.AddRange(ids);
                        }
                    }
                }
                return parentId;
            }
            catch
            {
                throw;
            }
        }


        ///// <summary>
        ///// Getting list of Entity Id's which are not Parent of this EntityTypeID Using Recurssive Function
        ///// </summary>
        ///// <param name="entityTypeDao">The IList of EntityTypeDao.</param>
        ///// <param name="entityTypeHeirarchyDao">The IList of EntityTypeHierarchyDao.</param> 
        ///// <param name="heirarchyEntityTypeId">The EntityTypeId.</param> 
        ///// <returns>IList of EntityTypeDao</returns>
        //private IList<EntityTypeDao> GetChildNodes(IList<EntityTypeDao> entityTypeDao, IList<EntityTypeHierarchyDao> entityTypeHeirarchyDao, int heirarchyEntityTypeId)
        //{

        //    var subChildNodes = entityTypeHeirarchyDao.Where(a => a.ChildActivityTypeID == heirarchyEntityTypeId).Select(a => new { ParentiEntityId = a.ParentActivityTypeID, EntityId = a.ChildActivityTypeID, Id = a.Id }).ToList();
        //    if (subChildNodes.Count() > 0)
        //    {
        //       // var itemtoremoves = entityTypeDao.Single(r => r.Id == heirarchyEntityTypeId);
        //        var itemtoremoves = entityTypeDao.Where(a => a.Id == subChildNodes[0].ParentiEntityId).FirstOrDefault();
        //        entityTypeDao.Remove(itemtoremoves);
        //        foreach (var subchildId in subChildNodes.ToList())
        //        {
        //            int Id = Convert.ToInt32(subchildId.Id);
        //            int EntityTypeId = Convert.ToInt32(subchildId.EntityId);
        //            int parentEntityId = Convert.ToInt32(subchildId.ParentiEntityId);
        //            var itemToRemove = entityTypeDao.Single(r => r.Id == Convert.ToInt32(subchildId.ParentiEntityId));
        //            entityTypeDao.Remove(itemToRemove);
        //            var isParentNodes = entityTypeHeirarchyDao.Where(a => a.ChildActivityTypeID == parentEntityId).Select(a => new { ParentActivityId = a.ParentActivityTypeID });
        //            if (isParentNodes.Count() > 0)
        //                GetChildNodes(entityTypeDao, entityTypeHeirarchyDao, Convert.ToInt32(isParentNodes.First().ParentActivityId));
        //        }
        //    }
        //    return entityTypeDao;
        //}


        /// <summary>
        /// Adds the EntityType releation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="parentactivityTypeId">The parentactivity type id.</param>
        /// <param name="childactivityTypeid">The childactivity typeid.</param>
        /// <param name="Id">The Id as option parameter.</param>
        /// <param name="sortOrder">The sort order.</param>
        /// <returns>int</returns>
        public int InsertEntityTypeHierarchy(MetadataManagerProxy proxy, int parentactivityTypeId, int childactivityTypeid, int sortOrder, int Id = 0)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                // Business logic of EntityTypeHierarchy
                IEntityTypeHierarchy entHeirarchyObj = new EntityTypeHierarchy();
                entHeirarchyObj.Id = Id;
                entHeirarchyObj.ParentActivityTypeID = parentactivityTypeId;
                entHeirarchyObj.ChildActivityTypeID = childactivityTypeid;
                entHeirarchyObj.SortOrder = sortOrder;
                EntityTypeHierarchyDao obj = new EntityTypeHierarchyDao(Id, parentactivityTypeId, childactivityTypeid, sortOrder);

                int EntityType_Hierarchy_MaxID = 0;
                if (Id == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR EntityType_Hierarchy_MaxID AS EntityType_Hierarchy_MaxID";
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        EntityType_Hierarchy_MaxID = Convert.ToInt32(sequenceNoVal[0]["EntityType_Hierarchy_MaxID"]);
                    }
                }

                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<EntityTypeHierarchyDao>(GetXmlWorkingPath(), obj, EntityType_Hierarchy_MaxID);
                SavetoSynDBXml(SavedXML, "EntityType_Hierarchy", GetSynchXMLPath(), Id);

                //var docx = XDocument.Load(currentworkingMetadata);
                //var entityHeirarchyId = Convert.ToInt32(docx.Root.Elements("EntityType_Hierarchy_Table").Select(a => a.Attribute("maxid").Value).First());

                return EntityType_Hierarchy_MaxID;

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Getting list of EntityHeirarchy based on EntityTypeID
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityTypeId">The EntityTypeID.</param>
        /// <returns>IList of IEntityHeirarchy</returns>
        public IList<IEntityTypeHierarchy> GettingEntityTypeHierarchy(MetadataManagerProxy proxy, int entityTypeId)
        {
            try
            {
                IList<IEntityTypeHierarchy> listEntities = new List<IEntityTypeHierarchy>();
                string xmlPath = string.Empty;
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = GetXmlWorkingPath();
                    XDocument xDoc = XDocument.Load(xmlPath);
                    IList<EntityTypeHierarchyDao> entityTypeHeirarchyDao = new List<EntityTypeHierarchyDao>();
                    if (versionNumber == 0)
                    {
                        entityTypeHeirarchyDao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeHierarchyDao>();
                        tx.Commit();
                    }
                    else
                    {
                        entityTypeHeirarchyDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeHierarchyDao>(xmlPath);
                        tx.Commit();
                    }
                    var entityTypeHeirarchyDaoresultObj = entityTypeHeirarchyDao.Where(a => a.ParentActivityTypeID == entityTypeId);
                    foreach (var entObj in entityTypeHeirarchyDaoresultObj)
                    {
                        EntityTypeHierarchy entityTypeHierobj = new EntityTypeHierarchy();
                        entityTypeHierobj.Id = entObj.Id;
                        entityTypeHierobj.ParentActivityTypeID = entObj.ParentActivityTypeID;
                        entityTypeHierobj.ChildActivityTypeID = entObj.ChildActivityTypeID;
                        entityTypeHierobj.SortOrder = entObj.SortOrder;
                        listEntities.Add(entityTypeHierobj);
                    }
                }

                return listEntities;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public IList<IEntityType> GettingEntityTypeHierarchyForAdminTree(MetadataManagerProxy proxy, int entityTypeId, int ModuleID = -1)
        {
            try
            {
                IList<IEntityTypeHierarchy> listEntities = new List<IEntityTypeHierarchy>();
                string xmlPath = string.Empty;
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                IList<IEntityType> listentity = new List<IEntityType>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList listresult;

                    StringBuilder strqry = new StringBuilder();
                    StringBuilder strqry2 = new StringBuilder();
                    IList<MultiProperty> Parlist = new List<MultiProperty>();
                    if (entityTypeId == 6)
                    {
                        if (ModuleID > 0)
                        {
                            Parlist.Add(new MultiProperty { propertyName = "ModuleID", propertyValue = ModuleID });
                            strqry2.Append("SELECT * FROM MM_Entitytype WHERE (Category=2 AND IsAssociate=0 AND ModuleID=:ModuleID)");
                        }
                        else
                        {
                            strqry2.Append("SELECT * FROM MM_Entitytype WHERE (Category=2 AND IsAssociate=0)");
                        }
                    }
                    else if (entityTypeId == 5)
                    {
                        Parlist.Add(new MultiProperty { propertyName = "EntityTypeID", propertyValue = entityTypeId });
                        if (ModuleID > 0)
                        {
                            Parlist.Add(new MultiProperty { propertyName = "ModuleID", propertyValue = ModuleID });
                            strqry2.Append("SELECT * FROM MM_Entitytype WHERE (Category=2 AND IsAssociate=0 AND ModuleID=:ModuleID)  OR id = :EntityTypeID");
                        }
                        else
                        {

                            strqry2.Append("SELECT * FROM MM_Entitytype WHERE (Category=2 AND IsAssociate=0)  OR id = :EntityTypeID");
                        }
                    }
                    else if (entityTypeId == 10)
                    {
                        Parlist.Add(new MultiProperty { propertyName = "EntityTypeID", propertyValue = entityTypeId });
                        if (ModuleID > 0)
                        {
                            Parlist.Add(new MultiProperty { propertyName = "ModuleID", propertyValue = ModuleID });
                            strqry2.Append("SELECT * FROM MM_Entitytype WHERE (Category=2 AND IsAssociate=0 AND ModuleID=:ModuleID)  OR id = :EntityTypeID");
                        }
                        else
                        {

                            strqry2.Append("SELECT * FROM MM_Entitytype WHERE (Category=2 AND IsAssociate=0)  OR id = :EntityTypeID");
                        }
                    }
                    //strqry.Append("WITH GetPath ");
                    //strqry.Append("AS ");
                    //strqry.Append("(");
                    //strqry.Append("SELECT ID,ParentActivityTypeID,ChildActivityTypeID FROM MM_EntityType_Hierarchy meth WHERE meth.ParentActivityTypeID= " + entityTypeId);
                    //strqry.Append("UNION ALL SELECT ID," + entityTypeId + "," + entityTypeId + " FROM MM_EntityType met WHERE id=" + entityTypeId + " UNION ALL  ");
                    //strqry.Append("SELECT meth1.ID,meth1.ParentActivityTypeID,meth1.ChildActivityTypeID FROM MM_EntityType_Hierarchy meth1 INNER JOIN GetPath AS child ON meth1.ParentActivityTypeID = child.ChildActivityTypeID");
                    //strqry.Append(")");
                    //strqry.Append("SELECT DISTINCT(ChildActivityTypeID) FROM GetPath");

                    //if (ModuleID > 0)
                    //{
                    //    Parlist.Add(new MultiProperty { propertyName = "ModuleID", propertyValue = ModuleID });
                    //    strqry2.Append(" AND  ModuleID= :ModuleID ");
                    //}
                    if (Parlist.Count > 0)
                    {
                        listresult = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithParam(strqry2.ToString(), Parlist);
                    }
                    else
                    {
                        listresult = tx.PersistenceManager.MetadataRepository.ExecuteQuery(strqry2.ToString());
                    }

                    //var EntityType = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath);
                    //var EntityType = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeDao>();
                    foreach (var item in listresult)
                    {
                        //var entitytypeobj = EntityType.Where(a => a.Id == (int)((System.Collections.Hashtable)(item))["ChildActivityTypeID"]);
                        EntityType entity = new EntityType();
                        entity.Caption = (string)((System.Collections.Hashtable)(item))["Caption"];
                        entity.Id = (int)((System.Collections.Hashtable)(item))["ID"];
                        entity.ColorCode = (string)((System.Collections.Hashtable)(item))["ColorCode"];
                        entity.ShortDescription = (string)((System.Collections.Hashtable)(item))["ShortDescription"];
                        listentity.Add(entity);
                    }
                }

                return listentity.OrderBy(a => a.Caption).ToList();
            }
            catch (Exception)
            {

                throw;
            }
        }
        public bool GetOwnerForEntity(MetadataManagerProxy proxy, int EntityID)
        {
            try
            {
                int userid = proxy.MarcomManager.User.Id;
                IList UserID;
                bool IsOwner = false;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string getEntityOwner = "SELECT USERID FROM AM_Entity_Role_User aeru INNER JOIN AM_EntityTypeRoleAcl aetra ON aeru.RoleID=aetra.ID WHERE aeru.EntityID= ? and aetra.EntityRoleID=1";
                    UserID = tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(getEntityOwner, EntityID);
                }
                foreach (var item in UserID)
                {
                    if (userid == Convert.ToInt32((int)((System.Collections.Hashtable)(item))["USERID"]))
                    {
                        IsOwner = true;
                    }
                    else
                    {
                        IsOwner = false;
                    }
                }
                return IsOwner;
            }
            catch
            {
                return false;
            }
        }
        public IList<IEntityType> GettingEntityTypeHierarchyForRootLevel(MetadataManagerProxy proxy, int entityTypeId)
        {
            try
            {
                IList<IEntityTypeHierarchy> listEntities = new List<IEntityTypeHierarchy>();
                string xmlPath = string.Empty;
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                IList<IEntityType> listentity = new List<IEntityType>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    XDocument xDoc = XDocument.Load(xmlPath);
                    var entityTypeHeirarchyDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeHierarchyDao>(xmlPath);
                    var entityTypeHeirarchyDaoresultObj = entityTypeHeirarchyDao.Where(a => a.ParentActivityTypeID == entityTypeId);
                    foreach (var entObj in entityTypeHeirarchyDaoresultObj)
                    {
                        EntityTypeHierarchy entityTypeHierobj = new EntityTypeHierarchy();
                        entityTypeHierobj.Id = entObj.Id;
                        entityTypeHierobj.ParentActivityTypeID = entObj.ParentActivityTypeID;
                        entityTypeHierobj.ChildActivityTypeID = entObj.ChildActivityTypeID;
                        entityTypeHierobj.SortOrder = entObj.SortOrder;
                        listEntities.Add(entityTypeHierobj);
                    }
                    var EntityType = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath);

                    foreach (var item in listEntities)
                    {
                        var entitytypeobj = EntityType.Where(a => a.Id == item.ChildActivityTypeID);
                        EntityType entity = new EntityType();
                        entity.Caption = entitytypeobj.ElementAt(0).Caption;
                        entity.Id = entitytypeobj.ElementAt(0).Id;
                        entity.ColorCode = entitytypeobj.ElementAt(0).ColorCode;
                        entity.ShortDescription = entitytypeobj.ElementAt(0).ShortDescription;
                        listentity.Add(entity);
                    }
                }

                return listentity;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool SaveDetailBlockForLevels(MetadataManagerProxy proxy, int EntityID, int AttributeTypeid, int attributeid, List<object> NewValue, int Level)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                NotificationFeedObjects obj = new NotificationFeedObjects();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var currentUserRole = (from item in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() where item.Entityid == EntityID select item).FirstOrDefault();
                    var attrdetails = (from item in tx.PersistenceManager.MetadataRepository.Query<AttributeDao>() where item.Id == attributeid select item).FirstOrDefault();
                    var DynamicQuery = new StringBuilder();
                    var entityTypeid = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.EntityDao>(EntityID);
                    var attr = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Metadata.Model.AttributeDao>(attributeid);
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();

                    string stroldvalue = "";
                    var Module = tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>().Where(a => a.Id == entityTypeid.Typeid).Select(a => a.ModuleID).FirstOrDefault();
                    IList<MultiProperty> prplst = new List<MultiProperty>();

                    // dropdown value updation
                    if (AttributeTypeid == 6)
                    {

                        // stroldvalue = "select nodeid from MM_TreeValue where EntityID=" + EntityID + " and AttributeID=" + attributeid + " ";

                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Entityid, propertyValue = EntityID });
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<TreeValueDao>(prplst)).ToList();

                        string str2 = "Delete from MM_TreeValue where EntityID= ? and AttributeID = ? ";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, EntityID, attributeid);
                        TreeValueDao treeval;
                        for (var i = 0; i < NewValue.Count(); i++)
                        {

                            if ((int)NewValue[i] != 0)
                            {
                                treeval = new TreeValueDao();
                                treeval.Attributeid = attributeid;
                                treeval.Entityid = EntityID;
                                treeval.Nodeid = (int)NewValue[i];
                                treeval.Level = i + 1;
                                tx.PersistenceManager.MetadataRepository.Save<TreeValueDao>(treeval);

                            }
                        }
                        tx.Commit();

                    }
                    else if (AttributeTypeid == 3)
                    {
                        IList<MultiProperty> parList3 = new List<MultiProperty>();
                        if (attrdetails.IsSpecial == true && attrdetails.Id == Convert.ToInt32(SystemDefinedAttributes.Owner))
                        {

                            prplst.Add(new MultiProperty { propertyName = BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao.PropertyNames.Entityid, propertyValue = EntityID });
                            prplst.Add(new MultiProperty { propertyName = BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao.PropertyNames.Roleid, propertyValue = 1 });
                            obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>(prplst)).ToList();

                            var currentRoleEditorObj = tx.PersistenceManager.AccessRepository.Query<EntityTypeRoleAclDao>().Where(ta => ta.EntityTypeID == entityTypeid.Typeid && (EntityRoles)ta.EntityRoleID == EntityRoles.Editer).Take(1).SingleOrDefault();
                            var currentRoleOwnerObj = tx.PersistenceManager.AccessRepository.Query<EntityTypeRoleAclDao>().Where(ta => ta.EntityTypeID == entityTypeid.Typeid && (EntityRoles)ta.EntityRoleID == EntityRoles.Owner).SingleOrDefault();

                            var ownid = Convert.ToInt32((from u in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() where u.Roleid == currentRoleOwnerObj.ID && u.Entityid == EntityID select u.Userid).FirstOrDefault());

                            int count = Convert.ToInt32((from u in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() where u.Roleid == currentRoleEditorObj.ID && u.Entityid == EntityID && u.Userid == (int)ownid select u).Count());
                            if (count > 0)
                            {
                                parList3.Add(new MultiProperty { propertyName = "UserID_NewValue", propertyValue = (int)NewValue[0] });
                                parList3.Add(new MultiProperty { propertyName = "EntityID", propertyValue = EntityID });
                                DynamicQuery.Append("update  AM_Entity_Role_User set UserID= :UserID_NewValue where EntityID= :EntityID and RoleID=" + currentRoleOwnerObj.ID);

                            }
                            else
                            {
                                // insert the owner and change the previous owner
                                parList3.Add(new MultiProperty { propertyName = "EntityID", propertyValue = EntityID });
                                DynamicQuery.Append("update  AM_Entity_Role_User set RoleID=" + currentRoleEditorObj.ID + " where EntityID= :EntityID and RoleID=" + currentRoleOwnerObj.ID + "  ");
                                int isherited = currentUserRole.IsInherited == true ? 1 : 0;
                                //parList3.Add(new MultiProperty { propertyName = "EntityID", propertyValue = EntityID });
                                parList3.Add(new MultiProperty { propertyName = "UserID_NewValue", propertyValue = (int)NewValue[0] });
                                parList3.Add(new MultiProperty { propertyName = "isherited", propertyValue = isherited });
                                parList3.Add(new MultiProperty { propertyName = "currentUserRole_InheritedFromEntityid", propertyValue = currentUserRole.InheritedFromEntityid });

                                DynamicQuery.Append(" insert into AM_Entity_Role_User values (:EntityID, " + currentRoleOwnerObj.ID + ", :UserID_NewValue, :isherited, :currentUserRole_InheritedFromEntityid)");
                            }
                        }
                        else
                        {
                            obj.EntityTypeId = entityTypeid.Typeid;

                            string str = "select * from MM_AttributeRecord_" + entityTypeid.Typeid + " where ID= ? ";
                            IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(EntityID));
                            obj.obj3 = item;
                            parList3.Add(new MultiProperty { propertyName = "UserID_NewValue", propertyValue = (int)NewValue[0] });
                            parList3.Add(new MultiProperty { propertyName = "EntityID", propertyValue = EntityID });
                            DynamicQuery.Append("update  MM_AttributeRecord_" + entityTypeid.Typeid + " set Attr_" + attributeid + "= :UserID_NewValue where ID= :EntityID");

                        }
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(DynamicQuery.ToString(), parList3);
                        if (currentUserRole != null)
                        {
                        var NewActorNames = (from item in tx.PersistenceManager.MetadataRepository.Query<UserDao>() where item.Id == currentUserRole.Userid select item).FirstOrDefault();
                        obj.OldActorName = NewActorNames.FirstName + "" + NewActorNames.LastName;
                        }
                        tx.Commit();
                    }
                    else if (AttributeTypeid == 1)
                    {
                        if (attrdetails.IsSpecial == true && attrdetails.Id == Convert.ToInt32(SystemDefinedAttributes.Name))
                        {
                            using (ITransaction txtemp = proxy.MarcomManager.GetTransaction())
                            {
                                //obj.obj3 = txtemp.PersistenceManager.CommonRepository.GetEquals<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao.PropertyNames.Id, EntityID).ToList();
                                obj.obj3 = txtemp.PersistenceManager.CommonRepository.ExecuteQuerywithMinParam("select * from pm_entity where id=?", EntityID).Cast<Hashtable>().ToList();
                                //obj.obj3 = aa[0];
                                txtemp.Commit();
                            }
                            BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao baseentity = new BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao();

                            baseentity.Id = EntityID;
                            baseentity = tx.PersistenceManager.CommonRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(baseentity.Id);

                            baseentity.Name = HttpUtility.HtmlEncode((string)NewValue[0]);
                            tx.PersistenceManager.CommonRepository.Save<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(baseentity);
                            tx.Commit();

                        }

                        else
                        {
                            string str = "select * from MM_AttributeRecord_" + entityTypeid.Typeid + " where ID= ? ";
                            IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(EntityID));
                            obj.obj3 = item;

                            DynamicQuery.Append("update  MM_AttributeRecord_" + entityTypeid.Typeid + " set Attr_" + attributeid + "= ?  where ID= ?");
                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), EntityID);
                            tx.Commit();
                        }

                    }

                    else if (AttributeTypeid == 2)
                    {
                      
                        if (attrdetails.IsSpecial == false)
                        {
                            string str = "select * from MM_AttributeRecord_" + entityTypeid.Typeid + " where ID= ? ";
                            IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(EntityID));
                            obj.obj3 = item;

                            DynamicQuery.Append("update  MM_AttributeRecord_" + entityTypeid.Typeid + " set Attr_" + attributeid + "= ? where ID= ? ");
                        }
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), EntityID);
                        tx.Commit();
                    }
                    else if (AttributeTypeid == 4)
                    {
                        obj.obj3 = new ArrayList();
                        obj.obj2 = new List<object>();
                        IList<MultiSelectDao> listMultiselect = new List<MultiSelectDao>();
                        var listOfOldValuesforFeed = (from item in tx.PersistenceManager.PlanningRepository.Query<MultiSelectDao>() where item.Attributeid == Convert.ToInt32(attributeid) && item.Entityid == Convert.ToInt32(EntityID) select item).ToList();
                        string query = "DELETE FROM MM_MultiSelect WHERE EntityID = ? AND AttributeID = ? ";
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(query.ToString(), Convert.ToInt32(EntityID), attributeid);
                        foreach (var element in listOfOldValuesforFeed)
                        {
                            obj.obj3.Add(element.Optionid);
                        }
                        foreach (var at in NewValue)
                        {
                            Marcom.Dal.Metadata.Model.MultiSelectDao mt = new Marcom.Dal.Metadata.Model.MultiSelectDao();
                            mt.Attributeid = attributeid;
                            mt.Entityid = Convert.ToInt32(EntityID);
                            mt.Optionid = Convert.ToInt32(at);
                            listMultiselect.Add(mt);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.MultiSelectDao>(listMultiselect);

                        tx.Commit();
                    }
                    else if (AttributeTypeid == 12)
                    {
                        //old values for feed
                        var treeValue = (from item2 in tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>() where item2.Entityid == EntityID && item2.Attributeid == attributeid select item2).ToList<TreeValueDao>();
                        // obj.obj3 = treeValue;
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Entityid, propertyValue = EntityID });
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<TreeValueDao>(prplst)).ToList();

                        obj.treeValues = treeValue;
                        //end
                        string str2 = "Delete from MM_TreeValue where EntityID= ? and AttributeID = ?";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, EntityID, attributeid);
                        TreeValueDao treeval;

                        for (var i = 0; i < NewValue.Count(); i++)
                        {
                            if ((int)NewValue[i] != 0)
                            {
                                treeval = new TreeValueDao();
                                treeval.Attributeid = attributeid;
                                treeval.Entityid = EntityID;
                                treeval.Nodeid = (int)NewValue[i];
                                treeval.Level = i + 1;
                                tx.PersistenceManager.MetadataRepository.Save<TreeValueDao>(treeval);
                            }
                        }
                        tx.Commit();
                    }

                    else if (AttributeTypeid == 7)
                    {
                        //old values for feed
                        var treeValue = (from item2 in tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>() where item2.Entityid == EntityID && item2.Attributeid == attributeid select item2).ToList<TreeValueDao>();
                        // obj.obj3 = treeValue;
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Entityid, propertyValue = EntityID });
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<TreeValueDao>(prplst)).ToList();

                        obj.treeValues = treeValue;
                        //end
                        string str2 = "Delete from MM_TreeValue where EntityID= ? and AttributeID = ?";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, EntityID, attributeid);
                        TreeValueDao treeval;

                        for (var i = 0; i < NewValue.Count(); i++)
                        {
                            if ((int)NewValue[i] != 0)
                            {
                                treeval = new TreeValueDao();
                                treeval.Attributeid = attributeid;
                                treeval.Entityid = EntityID;
                                treeval.Nodeid = (int)NewValue[i];
                                treeval.Level = i + 1;
                                tx.PersistenceManager.MetadataRepository.Save<TreeValueDao>(treeval);
                            }
                        }
                        tx.Commit();


                    }
                    else if (AttributeTypeid == 8)
                    {
                        int val;
                        if (int.TryParse((string)NewValue[0], out val))
                        {
                            string str = "select * from MM_AttributeRecord_" + entityTypeid.Typeid + " where ID= ? ";
                            IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(EntityID));
                            obj.obj3 = item;

                            DynamicQuery.Append("update  MM_AttributeRecord_" + entityTypeid.Typeid + " set Attr_" + attributeid + "= ? where ID= ? ");

                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), EntityID);
                        }
                        tx.Commit();
                    }
                    else if (AttributeTypeid == 5)
                    {
                        string str = "select * from MM_AttributeRecord_" + entityTypeid.Typeid + " where ID= ? ";
                        IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(EntityID));
                        obj.obj3 = item;

                        obj.ToValue = HttpUtility.HtmlEncode((string)NewValue[0]);
                        DynamicQuery.Append("update  MM_AttributeRecord_" + entityTypeid.Typeid + " set Attr_" + attributeid + "= ? where ID= ? ");

                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), EntityID);

                        tx.Commit();
                    }

                    obj.action = "metadata update";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.AttributeId = Convert.ToInt32(attributeid);
                    obj.EntityId = EntityID;
                    obj.AttributeDetails = new List<AttributeDao>();
                    obj.AttributeDetails.Add(attrdetails);
                    obj.Attributetypeid = AttributeTypeid;


                    obj.obj2 = NewValue;

                    fs.AsynchronousNotify(obj);


                    //Updating to the Search Engine

                    //Update SearchEngine
                    BrandSystems.Marcom.Core.Interface.Managers.IEventManager _eventManager = null;
                    BrandSystems.Marcom.Core.Interface.Managers.IPluginManager _pluginManager = null;
                    MarcomManager marcommanager = new MarcomManager(_eventManager, _pluginManager);
                    PlanningManagerProxy pProxy = new PlanningManagerProxy(marcommanager);

                    System.Threading.Tasks.Task addtaskforsearch = new System.Threading.Tasks.Task(() => PlanningManager.Instance.UpdateEntityforSearchAsync(pProxy, EntityID.ToString(), tx.PersistenceManager.CommonRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(EntityID).Name.ToString(),Module == 6? "CmsNavigation": "Productions"));
                    addtaskforsearch.Start();

                    try
                    {
                        System.Threading.Tasks.Task taskForSublevelMetada = new System.Threading.Tasks.Task(() => MetadataManager.Instance.UpdateMetadainSublevels(proxy.MarcomManager.User.Id, EntityID, AttributeTypeid, attributeid, NewValue, Level));
                        taskForSublevelMetada.Start();


                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Mail sending error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                    }


                }

                return true;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public bool UpdateDropDownTreePricing(MetadataManagerProxy proxy, int EntityID, int AttributeTypeid, int attributeid, IList<ITreeValue> NewValue)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                NotificationFeedObjects obj = new NotificationFeedObjects();
                List<object> nodevalues = new List<object>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var currentUserRole = (from item in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() where item.Entityid == EntityID select item).FirstOrDefault();
                    var attrdetails = (from item in tx.PersistenceManager.MetadataRepository.Query<AttributeDao>() where item.Id == attributeid select item).FirstOrDefault();
                    var DynamicQuery = new StringBuilder();
                    var entityTypeid = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.EntityDao>(EntityID);
                    var attr = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Metadata.Model.AttributeDao>(attributeid);
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();

                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    IList<TreeValueDao> itreValDao = new List<TreeValueDao>();

                    if (AttributeTypeid == 13)
                    {
                        //old values for feed
                        var treeValue = (from item2 in tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>() where item2.Entityid == EntityID && item2.Attributeid == attributeid select item2).ToList<TreeValueDao>();
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Entityid, propertyValue = EntityID });
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<TreeValueDao>(prplst)).ToList();
                        obj.treeValues = treeValue;
                        //end
                        string str2 = "Delete from MM_TreeValue where EntityID= ? and AttributeID = ?";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, EntityID, attributeid);
                        TreeValueDao treeval = new TreeValueDao();
                        foreach (var value in NewValue)
                        {
                            treeval = new TreeValueDao();
                            treeval.Attributeid = attributeid;
                            treeval.Entityid = EntityID;
                            treeval.Nodeid = value.Nodeid;
                            treeval.Level = value.Level;
                            treeval.Value = value.Value != "" ? Convert.ToInt32(value.Value).ToString() : value.Value;
                            itreValDao.Add(treeval);
                            nodevalues.Add(value.Nodeid);
                        }
                        if (NewValue.Count > 0)
                            tx.PersistenceManager.MetadataRepository.Save<TreeValueDao>(itreValDao);
                        tx.Commit();
                    }
                    obj.action = "metadata update";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.AttributeId = Convert.ToInt32(attributeid);
                    obj.EntityId = EntityID;
                    obj.AttributeDetails = new List<AttributeDao>();
                    obj.AttributeDetails.Add(attrdetails);
                    obj.Attributetypeid = AttributeTypeid;
                    obj.obj2 = nodevalues;
                    fs.AsynchronousNotify(obj);

                    //Updating to the Search Engine

                    //Update SearchEngine
                    BrandSystems.Marcom.Core.Interface.Managers.IEventManager _eventManager = null;
                    BrandSystems.Marcom.Core.Interface.Managers.IPluginManager _pluginManager = null;
                    MarcomManager marcommanager = new MarcomManager(_eventManager, _pluginManager);
                    PlanningManagerProxy pProxy = new PlanningManagerProxy(marcommanager);
                    System.Threading.Tasks.Task addtaskforsearch = new System.Threading.Tasks.Task(() => PlanningManager.Instance.UpdateEntityforSearchAsync(pProxy, EntityID.ToString(), tx.PersistenceManager.CommonRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(EntityID).Name.ToString()));
                    addtaskforsearch.Start();

                    try
                    {
                        System.Threading.Tasks.Task taskForSublevelMetada = new System.Threading.Tasks.Task(() => MetadataManager.Instance.UpdateTargetPricinginSublevels(proxy.MarcomManager.User.Id, EntityID, AttributeTypeid, attributeid, NewValue));
                        taskForSublevelMetada.Start();

                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Mail sending error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                    }
                }

                return true;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public bool SaveDetailBlockForTreeLevels(MetadataManagerProxy proxy, int EntityID, int AttributeTypeid, int attributeid, IList<ITreeValue> NewValue, JArray jroldTree, JArray jrnewtree)
        {
            try
            {
                NotificationFeedObjects obj = new NotificationFeedObjects();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var attrdetails = (from item in tx.PersistenceManager.MetadataRepository.Query<AttributeDao>() where item.Id == attributeid select item).FirstOrDefault();

                    var entityTypeid = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.EntityDao>(EntityID);

                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();

                    IList<MultiProperty> prplst = new List<MultiProperty>();

                    // dropdown value updation

                    if (AttributeTypeid == 7)
                    {
                        //old values for feed
                        var treeValue = (from item2 in tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>() where item2.Entityid == EntityID && item2.Attributeid == attributeid select item2).ToList<TreeValueDao>();
                        // obj.obj3 = treeValue;
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Entityid, propertyValue = EntityID });
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<TreeValueDao>(prplst)).ToList();

                        obj.treeValues = treeValue;
                        //end
                        string str2 = "Delete from MM_TreeValue where EntityID= ? and AttributeID = ?";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, EntityID, attributeid);
                        TreeValueDao treeval;

                        IList<TreeValueDao> iitreeval = new List<TreeValueDao>();

                        foreach (var node in NewValue)
                        {

                            treeval = new TreeValueDao();
                            treeval.Attributeid = attributeid;
                            treeval.Entityid = EntityID;
                            treeval.Nodeid = node.Nodeid;
                            treeval.Level = node.Level;

                            iitreeval.Add(treeval);


                        }
                        tx.PersistenceManager.MetadataRepository.Save<TreeValueDao>(iitreeval);
                        tx.Commit();

                    }
                    obj.obj5 = jroldTree;
                    obj.obj6 = jrnewtree;
                    obj.action = "metadata update";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.AttributeId = Convert.ToInt32(attributeid);
                    obj.EntityId = EntityID;
                    obj.AttributeDetails = new List<AttributeDao>();
                    obj.AttributeDetails.Add(attrdetails);
                    obj.Attributetypeid = AttributeTypeid;



                    fs.AsynchronousNotify(obj);

                    try
                    {
                        System.Threading.Tasks.Task taskForSublevelMetada = new System.Threading.Tasks.Task(() => MetadataManager.Instance.UpdateTreeMetadatainSublevels(EntityID, AttributeTypeid, attributeid, NewValue));
                        taskForSublevelMetada.Start();


                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Mail sending error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                    }


                }

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public bool SaveInheritFromParentMetadata(int UserID, int EntityID, int AttributeTypeid, int attributeid, List<object> NewValue, int Level)
        {
            try
            {
                Guid userSession = MarcomManagerFactory.GetSystemSession();
                IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(userSession);
                NotificationFeedObjects obj = new NotificationFeedObjects();
                using (ITransaction tx = managers.GetTransaction())
                {
                    var currentUserRole = (from item in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() where item.Entityid == EntityID select item).FirstOrDefault();
                    var attrdetails = (from item in tx.PersistenceManager.MetadataRepository.Query<AttributeDao>() where item.Id == attributeid select item).FirstOrDefault();
                    var DynamicQuery = new StringBuilder();
                    var entityTypeid = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.EntityDao>(EntityID);
                    var attr = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Metadata.Model.AttributeDao>(attributeid);
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();

                    string stroldvalue = "";
                    IList<MultiProperty> prplst = new List<MultiProperty>();

                    // dropdown value updation
                    if (AttributeTypeid == 6)
                    {

                        // stroldvalue = "select nodeid from MM_TreeValue where EntityID=" + EntityID + " and AttributeID=" + attributeid + " ";

                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Entityid, propertyValue = EntityID });
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<TreeValueDao>(prplst)).ToList();

                        string str2 = "Delete from MM_TreeValue where EntityID= ? and AttributeID = ? ";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, EntityID, attributeid);
                        TreeValueDao treeval;
                        for (var i = 0; i < NewValue.Count(); i++)
                        {

                            if ((int)NewValue[i] != 0)
                            {
                                treeval = new TreeValueDao();
                                treeval.Attributeid = attributeid;
                                treeval.Entityid = EntityID;
                                treeval.Nodeid = (int)NewValue[i];
                                treeval.Level = i + 1;
                                tx.PersistenceManager.MetadataRepository.Save<TreeValueDao>(treeval);

                            }
                        }
                        tx.Commit();

                    }
                    else if (AttributeTypeid == 3)
                    {
                        IList<MultiProperty> parList3 = new List<MultiProperty>();

                        obj.EntityTypeId = entityTypeid.Typeid;
                        string str = "select * from MM_AttributeRecord_" + entityTypeid.Typeid + " where ID= ? ";
                        IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(EntityID));
                        obj.obj3 = item;
                        parList3.Add(new MultiProperty { propertyName = "UserID_NewValue", propertyValue = (int)NewValue[0] });
                        parList3.Add(new MultiProperty { propertyName = "EntityID", propertyValue = EntityID });
                        DynamicQuery.Append("update  MM_AttributeRecord_" + entityTypeid.Typeid + " set Attr_" + attributeid + "= :UserID_NewValue where ID= :EntityID");
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(DynamicQuery.ToString(), parList3);
                        tx.Commit();
                    }
                    else if (AttributeTypeid == 1)
                    {


                        if (attrdetails.IsSpecial == true && attrdetails.Id == Convert.ToInt32(SystemDefinedAttributes.Name))
                        {
                            using (ITransaction txtemp = managers.GetTransaction())
                            {
                                //obj.obj3 = txtemp.PersistenceManager.CommonRepository.GetEquals<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao.PropertyNames.Id, EntityID).ToList();
                                obj.obj3 = txtemp.PersistenceManager.CommonRepository.ExecuteQuerywithMinParam("select * from pm_entity where id=?", EntityID).Cast<Hashtable>().ToList();
                                //obj.obj3 = aa[0];
                                txtemp.Commit();
                            }
                            BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao baseentity = new BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao();

                            baseentity.Id = EntityID;
                            baseentity = tx.PersistenceManager.CommonRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(baseentity.Id);

                            baseentity.Name = HttpUtility.HtmlEncode((string)NewValue[0]);
                            tx.PersistenceManager.CommonRepository.Save<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(baseentity);
                            tx.Commit();

                        }

                        else
                        {
                            string str = "select * from MM_AttributeRecord_" + entityTypeid.Typeid + " where ID= ? ";
                            IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(EntityID));
                            obj.obj3 = item;

                            DynamicQuery.Append("update  MM_AttributeRecord_" + entityTypeid.Typeid + " set Attr_" + attributeid + "= ?  where ID= ?");
                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), EntityID);
                            tx.Commit();
                        }

                    }

                    else if (AttributeTypeid == 2)
                    {

                        if (attrdetails.IsSpecial == false)
                        {
                            string str = "select * from MM_AttributeRecord_" + entityTypeid.Typeid + " where ID= ? ";
                            IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(EntityID));
                            obj.obj3 = item;

                            DynamicQuery.Append("update  MM_AttributeRecord_" + entityTypeid.Typeid + " set Attr_" + attributeid + "= ? where ID= ? ");
                        }
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), EntityID);
                        tx.Commit();
                    }
                    else if (AttributeTypeid == 4)
                    {
                        obj.obj3 = new ArrayList();
                        obj.obj2 = new List<object>();


                        IList<MultiSelectDao> listMultiselect = new List<MultiSelectDao>();
                        var listOfOldValuesforFeed = (from item in tx.PersistenceManager.PlanningRepository.Query<MultiSelectDao>() where item.Attributeid == Convert.ToInt32(attributeid) && item.Entityid == Convert.ToInt32(EntityID) select item).ToList();
                        string query = "DELETE FROM MM_MultiSelect WHERE EntityID = ? AND AttributeID = ? ";
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(query.ToString(), Convert.ToInt32(EntityID), attributeid);
                        foreach (var element in listOfOldValuesforFeed)
                        {
                            obj.obj3.Add(element.Optionid);
                        }
                        foreach (var at in NewValue)
                        {
                            Marcom.Dal.Metadata.Model.MultiSelectDao mt = new Marcom.Dal.Metadata.Model.MultiSelectDao();
                            mt.Attributeid = attributeid;
                            mt.Entityid = Convert.ToInt32(EntityID);
                            mt.Optionid = Convert.ToInt32(at);
                            listMultiselect.Add(mt);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<Marcom.Dal.Metadata.Model.MultiSelectDao>(listMultiselect);

                        tx.Commit();
                    }
                    else if (AttributeTypeid == 12)
                    {
                        //old values for feed
                        var treeValue = (from item2 in tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>() where item2.Entityid == EntityID && item2.Attributeid == attributeid select item2).ToList<TreeValueDao>();
                        // obj.obj3 = treeValue;
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Entityid, propertyValue = EntityID });
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<TreeValueDao>(prplst)).ToList();

                        obj.treeValues = treeValue;
                        //end
                        string str2 = "Delete from MM_TreeValue where EntityID= ? and AttributeID = ?";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, EntityID, attributeid);
                        TreeValueDao treeval;

                        for (var i = 0; i < NewValue.Count(); i++)
                        {
                            if ((int)NewValue[i] != 0)
                            {
                                treeval = new TreeValueDao();
                                treeval.Attributeid = attributeid;
                                treeval.Entityid = EntityID;
                                treeval.Nodeid = (int)NewValue[i];
                                treeval.Level = i + 1;
                                tx.PersistenceManager.MetadataRepository.Save<TreeValueDao>(treeval);
                            }
                        }
                        tx.Commit();


                    }


                    obj.action = "metadata update";
                    obj.Actorid = UserID;
                    obj.AttributeId = Convert.ToInt32(attributeid);
                    obj.EntityId = EntityID;
                    obj.AttributeDetails = new List<AttributeDao>();
                    obj.AttributeDetails.Add(attrdetails);
                    obj.Attributetypeid = AttributeTypeid;

                    obj.obj2 = NewValue;

                    fs.AsynchronousNotify(obj);

                    //Updating to the Search Engine

                    //Update SearchEngine
                    BrandSystems.Marcom.Core.Interface.Managers.IEventManager _eventManager = null;
                    BrandSystems.Marcom.Core.Interface.Managers.IPluginManager _pluginManager = null;
                    MarcomManager marcommanager = new MarcomManager(_eventManager, _pluginManager);
                    PlanningManagerProxy pProxy = new PlanningManagerProxy(marcommanager);
                    System.Threading.Tasks.Task addtaskforsearch = new System.Threading.Tasks.Task(() => PlanningManager.Instance.UpdateEntityforSearchAsync(pProxy, EntityID.ToString(), tx.PersistenceManager.CommonRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(EntityID).Name.ToString()));
                    addtaskforsearch.Start();

                    try
                    {
                        System.Threading.Tasks.Task taskForSublevelMetada = new System.Threading.Tasks.Task(() => MetadataManager.Instance.UpdateMetadainSublevels(UserID, EntityID, AttributeTypeid, attributeid, NewValue, Level));
                        taskForSublevelMetada.Start();


                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Mail sending error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                    }

                }

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public bool SaveTransferPricingInheritFromParentMetadata(int UserID, int EntityID, int AttributeTypeid, int attributeid, IList<ITreeValue> NewValue)
        {
            try
            {
                Guid userSession = MarcomManagerFactory.GetSystemSession();
                IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(userSession);
                NotificationFeedObjects obj = new NotificationFeedObjects();
                List<object> nodevalues = new List<object>();
                IList<TreeValueDao> itreValDao = new List<TreeValueDao>();
                using (ITransaction tx = managers.GetTransaction())
                {
                    var currentUserRole = (from item in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() where item.Entityid == EntityID select item).FirstOrDefault();
                    var attrdetails = (from item in tx.PersistenceManager.MetadataRepository.Query<AttributeDao>() where item.Id == attributeid select item).FirstOrDefault();
                    var DynamicQuery = new StringBuilder();
                    var entityTypeid = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.EntityDao>(EntityID);
                    var attr = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Metadata.Model.AttributeDao>(attributeid);
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();

                    IList<MultiProperty> prplst = new List<MultiProperty>();

                    if (AttributeTypeid == 13)
                    {
                        //old values for feed
                        var treeValue = (from item2 in tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>() where item2.Entityid == EntityID && item2.Attributeid == attributeid select item2).ToList<TreeValueDao>();
                        // obj.obj3 = treeValue;
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Entityid, propertyValue = EntityID });
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<TreeValueDao>(prplst)).ToList();

                        obj.treeValues = treeValue;
                        //end
                        string str2 = "Delete from MM_TreeValue where EntityID= ? and AttributeID = ?";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, EntityID, attributeid);
                        TreeValueDao treeval = new TreeValueDao();
                        foreach (var value in NewValue)
                        {

                            treeval = new TreeValueDao();
                            treeval.Attributeid = attributeid;
                            treeval.Entityid = EntityID;
                            treeval.Nodeid = value.Nodeid;
                            treeval.Level = value.Level;
                            treeval.Value = value.Value != "" ? Convert.ToInt32(value.Value).ToString() : value.Value;
                            itreValDao.Add(treeval);
                            nodevalues.Add(value.Nodeid);
                        }
                        if (NewValue.Count > 0)
                            tx.PersistenceManager.MetadataRepository.Save<TreeValueDao>(itreValDao);
                        tx.Commit();
                    }


                    obj.action = "metadata update";
                    obj.Actorid = UserID;
                    obj.AttributeId = Convert.ToInt32(attributeid);
                    obj.EntityId = EntityID;
                    obj.AttributeDetails = new List<AttributeDao>();
                    obj.AttributeDetails.Add(attrdetails);
                    obj.Attributetypeid = AttributeTypeid;
                    obj.obj2 = nodevalues;

                    fs.AsynchronousNotify(obj);

                    //Updating to the Search Engine

                    //Update SearchEngine
                    BrandSystems.Marcom.Core.Interface.Managers.IEventManager _eventManager = null;
                    BrandSystems.Marcom.Core.Interface.Managers.IPluginManager _pluginManager = null;
                    MarcomManager marcommanager = new MarcomManager(_eventManager, _pluginManager);
                    PlanningManagerProxy pProxy = new PlanningManagerProxy(marcommanager);
                    System.Threading.Tasks.Task addtaskforsearch = new System.Threading.Tasks.Task(() => PlanningManager.Instance.UpdateEntityforSearchAsync(pProxy, EntityID.ToString(), tx.PersistenceManager.CommonRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.BaseEntityDao>(EntityID).Name.ToString()));
                    addtaskforsearch.Start();

                    try
                    {
                        System.Threading.Tasks.Task taskForSublevelMetada = new System.Threading.Tasks.Task(() => MetadataManager.Instance.UpdateTargetPricinginSublevels(UserID, EntityID, AttributeTypeid, attributeid, NewValue));
                        taskForSublevelMetada.Start();


                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Mail sending error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                    }

                }

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }


        public void UpdateMetadainSublevels(int UserId, int entityID, int AttributetypeId, int attributeID, List<object> NewValue, int Level)
        {
            try
            {
                Guid userSession = MarcomManagerFactory.GetSystemSession();

                IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(userSession);

                using (ITransaction tx = managers.GetTransaction())
                {
                    int[] systemDefinedTypes = { (int)EntityTypeList.CostCentre, (int)EntityTypeList.FundinngRequest, (int)EntityTypeList.Milestone, (int)EntityTypeList.Objective, (int)EntityTypeList.Task, 
                                                   (int)TaskTypes.Approval_Task, (int)TaskTypes.Work_Task, (int)TaskTypes.Reviewal_Task };
                    IList<EntityDao> iChildEntDao = new List<EntityDao>();
                    IList<EntityTypeAttributeRelationDao> iChildMetadaDao = new List<EntityTypeAttributeRelationDao>();
                    EntityTypeAttributeRelationDao metaDao = new EntityTypeAttributeRelationDao();
                    iChildEntDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                    join associatetype in tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>()
                                       on item.Typeid equals associatetype.Id
                                    where item.Parentid == entityID && item.Active == true && associatetype.IsAssociate == false && !systemDefinedTypes.Contains(associatetype.Id)
                                    select item).OrderBy(a => a.UniqueKey).ToList<EntityDao>();
                    tx.Commit();

                    if (iChildEntDao.Count > 0)
                    {
                        List<int> entTypes = iChildEntDao.Distinct().Select(a => a.Typeid).ToList();
                        iChildMetadaDao = tx.PersistenceManager.MetadataRepository.Query<EntityTypeAttributeRelationDao>().Where(a => entTypes.Contains(a.EntityTypeID)).ToList<EntityTypeAttributeRelationDao>();
                        foreach (var childresult in iChildEntDao)
                        {
                            metaDao = iChildMetadaDao.Where(a => a.EntityTypeID == childresult.Typeid && a.InheritFromParent == true && a.AttributeID == attributeID).FirstOrDefault();
                            if (metaDao != null)
                            {
                                SaveInheritFromParentMetadata(UserId, childresult.Id, AttributetypeId, attributeID, NewValue, Level);
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        public void UpdateTargetPricinginSublevels(int UserId, int entityID, int AttributetypeId, int attributeID, IList<ITreeValue> NewValue)
        {
            try
            {
                Guid userSession = MarcomManagerFactory.GetSystemSession();

                IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(userSession);

                using (ITransaction tx = managers.GetTransaction())
                {
                    int[] systemDefinedTypes = { (int)EntityTypeList.CostCentre, (int)EntityTypeList.FundinngRequest, (int)EntityTypeList.Milestone, (int)EntityTypeList.Objective, (int)EntityTypeList.Task, 
                                                   (int)TaskTypes.Approval_Task, (int)TaskTypes.Work_Task, (int)TaskTypes.Reviewal_Task };
                    IList<EntityDao> iChildEntDao = new List<EntityDao>();
                    IList<EntityTypeAttributeRelationDao> iChildMetadaDao = new List<EntityTypeAttributeRelationDao>();
                    EntityTypeAttributeRelationDao metaDao = new EntityTypeAttributeRelationDao();
                    iChildEntDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                    join associatetype in tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>()
                                       on item.Typeid equals associatetype.Id
                                    where item.Parentid == entityID && item.Active == true && associatetype.IsAssociate == false && !systemDefinedTypes.Contains(associatetype.Id)
                                    select item).OrderBy(a => a.UniqueKey).ToList<EntityDao>();
                    tx.Commit();

                    if (iChildEntDao.Count > 0)
                    {
                        List<int> entTypes = iChildEntDao.Distinct().Select(a => a.Typeid).ToList();
                        iChildMetadaDao = tx.PersistenceManager.MetadataRepository.Query<EntityTypeAttributeRelationDao>().Where(a => entTypes.Contains(a.EntityTypeID)).ToList<EntityTypeAttributeRelationDao>();
                        foreach (var childresult in iChildEntDao)
                        {
                            metaDao = iChildMetadaDao.Where(a => a.EntityTypeID == childresult.Typeid && a.InheritFromParent == true && a.AttributeID == attributeID).FirstOrDefault();
                            if (metaDao != null)
                            {
                                SaveTransferPricingInheritFromParentMetadata(UserId, childresult.Id, AttributetypeId, attributeID, NewValue);
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        public void UpdateTreeMetadatainSublevels(int entityID, int AttributetypeId, int attributeID, IList<ITreeValue> NewValue)
        {
            try
            {
                Guid userSession = MarcomManagerFactory.GetSystemSession();

                IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(userSession);

                using (ITransaction tx = managers.GetTransaction())
                {
                    int[] systemDefinedTypes = { (int)EntityTypeList.CostCentre, (int)EntityTypeList.FundinngRequest, (int)EntityTypeList.Milestone, (int)EntityTypeList.Objective, (int)EntityTypeList.Task, 
                                                   (int)TaskTypes.Approval_Task, (int)TaskTypes.Work_Task, (int)TaskTypes.Reviewal_Task };
                    IList<EntityDao> iChildEntDao = new List<EntityDao>();
                    IList<EntityTypeAttributeRelationDao> iChildMetadaDao = new List<EntityTypeAttributeRelationDao>();
                    EntityTypeAttributeRelationDao metaDao = new EntityTypeAttributeRelationDao();
                    iChildEntDao = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                    join associatetype in tx.PersistenceManager.PlanningRepository.Query<EntityTypeDao>()
                                       on item.Typeid equals associatetype.Id
                                    where item.Parentid == entityID && item.Active == true && associatetype.IsAssociate == false && !systemDefinedTypes.Contains(associatetype.Id)
                                    select item).OrderBy(a => a.UniqueKey).ToList<EntityDao>();
                    tx.Commit();

                    if (iChildEntDao.Count > 0)
                    {
                        List<int> entTypes = iChildEntDao.Distinct().Select(a => a.Typeid).ToList();
                        iChildMetadaDao = tx.PersistenceManager.MetadataRepository.Query<EntityTypeAttributeRelationDao>().Where(a => entTypes.Contains(a.EntityTypeID)).ToList<EntityTypeAttributeRelationDao>();
                        foreach (var childresult in iChildEntDao)
                        {
                            metaDao = iChildMetadaDao.Where(a => a.EntityTypeID == childresult.Typeid && a.InheritFromParent == true && a.AttributeID == attributeID).FirstOrDefault();
                            if (metaDao != null)
                            {
                                SaveAsynchronousTreeValues(childresult.Id, AttributetypeId, attributeID, NewValue);
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }



        public bool SaveAsynchronousTreeValues(int EntityID, int AttributeTypeid, int attributeid, IList<ITreeValue> NewValue)
        {
            try
            {
                Guid userSession = MarcomManagerFactory.GetSystemSession();
                IMarcomManager managers = MarcomManagerFactory.GetMarcomManager(userSession);
                NotificationFeedObjects obj = new NotificationFeedObjects();
                using (ITransaction tx = managers.GetTransaction())
                {

                    IList<MultiProperty> prplst = new List<MultiProperty>();

                    // dropdown value updation

                    if (AttributeTypeid == 7)
                    {
                        //old values for feed
                        var treeValue = (from item2 in tx.PersistenceManager.PlanningRepository.Query<TreeValueDao>() where item2.Entityid == EntityID && item2.Attributeid == attributeid select item2).ToList<TreeValueDao>();
                        // obj.obj3 = treeValue;
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Entityid, propertyValue = EntityID });
                        prplst.Add(new MultiProperty { propertyName = TreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        obj.obj3 = (tx.PersistenceManager.PlanningRepository.GetEquals<TreeValueDao>(prplst)).ToList();

                        obj.treeValues = treeValue;
                        //end
                        string str2 = "Delete from MM_TreeValue where EntityID= ? and AttributeID = ?";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, EntityID, attributeid);
                        TreeValueDao treeval;

                        foreach (var node in NewValue)
                        {

                            treeval = new TreeValueDao();
                            treeval.Attributeid = attributeid;
                            treeval.Entityid = EntityID;
                            treeval.Nodeid = node.Nodeid;
                            treeval.Level = node.Level;
                            tx.PersistenceManager.MetadataRepository.Save<TreeValueDao>(treeval);

                        }
                        tx.Commit();

                    }


                    try
                    {
                        System.Threading.Tasks.Task taskForSublevelMetada = new System.Threading.Tasks.Task(() => MetadataManager.Instance.UpdateTreeMetadatainSublevels(EntityID, AttributeTypeid, attributeid, NewValue));
                        taskForSublevelMetada.Start();


                    }
                    catch (Exception ex)
                    {
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Tree value saving error" + ex.Message + " " + ex.StackTrace, BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.Notify);
                    }


                }

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public string GetEntityName(ITransaction tx, int entityId)
        {
            string entityName = "AttributeRecord";
            BrandSystems.Marcom.Dal.Planning.Model.EntityDao dao = new BrandSystems.Marcom.Dal.Planning.Model.EntityDao();
            var result = tx.PersistenceManager.PlanningRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.EntityDao>(entityId);
            entityName = entityName + result.Typeid;
            return entityName;
        }
        public bool SavetoSynDBXml(XElement Xmlvalue, string tablename, string xmlpath, int ID)
        {
            PersistenceManager.Instance.MetadataRepository.SaveSyncDbXML(Xmlvalue, tablename, xmlpath, ID);
            return true;
        }

        /// <summary>
        /// Deletes the entity type Hierarchy.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="Entitytypeid">The entitytypeid.</param>
        /// <returns>bool</returns>
        public bool DeleteEntityTypeHierarchy(MetadataManagerProxy proxy, int id)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                EntityTypeHierarchyDao obj = new EntityTypeHierarchyDao();
                obj.ParentActivityTypeID = id;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeHierarchyDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeHierarchyDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Getting list of Entity Id's which are having period
        /// </summary>
        /// <param name="proxy">The Proxy</param>
        /// <returns>IList of EntityTypeDao</returns>
        public IList<IEntityType> GetFulfillmentEntityTypes(MetadataManagerProxy proxy)
        {
            IList<IEntityType> listEntityType = new List<IEntityType>();
            string xmlPath = string.Empty;
            int versionNumber = MarcomManagerFactory.ActiveMetadataVersionNumber;
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                //xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlWorkingPath(versionNumber);

                xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(versionNumber);

                XDocument xDoc = XDocument.Load(xmlPath);
                IList<EntityTypeDao> entityTypeDao = new List<EntityTypeDao>();
                IList<EntityTypeAttributeRelationDao> entityTypeRealtionDao = new List<EntityTypeAttributeRelationDao>();
                if (versionNumber != 0)
                {
                    //var entityTypeXmlDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath);
                    //var entityTypeRelDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlPath);
                    var entityResult = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath).Join(tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlPath),
                        ent => ent.Id, entr => entr.EntityTypeID, (ent, entr) => new { ent, entr }).Join(tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlPath),
                        entre => entre.entr.AttributeID, at => at.Id, (entre, at) => new { entre, at }).Where(a => a.at.AttributeTypeID == Convert.ToInt32(AttributesList.Period)).Select(a => a.entre.ent);

                    foreach (var obj in entityResult)
                    {
                        EntityType entityTypeObj = new EntityType();
                        entityTypeObj.Id = obj.Id;
                        entityTypeObj.Caption = obj.Caption;
                        entityTypeObj.Description = obj.Description;
                        entityTypeObj.Category = obj.Category;
                        listEntityType.Add(entityTypeObj);
                    }

                }
                else
                {
                    entityTypeDao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeDao>();
                    entityTypeRealtionDao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeAttributeRelationDao>();
                    tx.Commit();
                    var entityTypeResult = entityTypeDao.Join(entityTypeRealtionDao, a => a.Id, b => b.EntityTypeID, (ab, bc) => new { ab, bc }).Join
                        (tx.PersistenceManager.PlanningRepository.Query<AttributeDao>(), entr => entr.bc.AttributeID, at => at.Id, (entr, at) => new { entr, at }).Where
                        (a => a.at.AttributeTypeID == Convert.ToInt32(AttributesList.Period)).Select(a => a.entr.ab);
                    //.Where(at => at.bc.AttributeID == 71).Select(a => a.ab);
                    foreach (var obj in entityTypeResult)
                    {
                        EntityType entityTypeObj = new EntityType();
                        entityTypeObj.Id = obj.Id;
                        entityTypeObj.Caption = obj.Caption;
                        entityTypeObj.Description = obj.Description;
                        entityTypeObj.Category = obj.Category;
                        listEntityType.Add(entityTypeObj);
                    }
                }
                return listEntityType;
            }
        }




        public IList<IEntityType> GetFulfillmentEntityTypesfrCal(MetadataManagerProxy proxy)
        {
            IList<IEntityType> listEntityType = new List<IEntityType>();
            string xmlPath = string.Empty;
            int versionNumber = MarcomManagerFactory.ActiveMetadataVersionNumber;
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                //xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlWorkingPath(versionNumber);

                xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(versionNumber);

                XDocument xDoc = XDocument.Load(xmlPath);
                IList<EntityTypeDao> entityTypeDao = new List<EntityTypeDao>();
                IList<EntityTypeAttributeRelationDao> entityTypeRealtionDao = new List<EntityTypeAttributeRelationDao>();
                if (versionNumber != 0)
                {

                    int[] tasktypes = tx.PersistenceManager.MetadataRepository.GetObject<EntitytasktypeDao>(xmlPath).Select(a => a.EntitytypeId).ToArray();
                    IList<EntityTypeDao> etypes = new List<EntityTypeDao>();
                    if (tasktypes != null)
                        etypes = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath).Where(a => a.Category == 2 && a.IsAssociate == false && a.ModuleID == 3 && !tasktypes.Contains(a.Id)).ToList<EntityTypeDao>();
                    else
                        etypes = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath).Where(a => a.Category == 2 && a.IsAssociate == false && a.ModuleID == 3).ToList<EntityTypeDao>();

                    foreach (var obj in etypes)
                    {
                        EntityType entityTypeObj = new EntityType();
                        entityTypeObj.Id = obj.Id;
                        entityTypeObj.Caption = obj.Caption;
                        entityTypeObj.Description = obj.Description;
                        entityTypeObj.Category = obj.Category;
                        listEntityType.Add(entityTypeObj);
                    }

                }
                else
                {
                    entityTypeDao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeDao>();
                    entityTypeRealtionDao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeAttributeRelationDao>();
                    tx.Commit();
                    var entityTypeResult = entityTypeDao.Join(entityTypeRealtionDao, a => a.Id, b => b.EntityTypeID, (ab, bc) => new { ab, bc }).Join
                        (tx.PersistenceManager.PlanningRepository.Query<AttributeDao>(), entr => entr.bc.AttributeID, at => at.Id, (entr, at) => new { entr, at }).Where
                        (a => a.at.AttributeTypeID == Convert.ToInt32(AttributesList.Period)).Select(a => a.entr.ab);
                    //.Where(at => at.bc.AttributeID == 71).Select(a => a.ab);
                    foreach (var obj in entityTypeResult)
                    {
                        EntityType entityTypeObj = new EntityType();
                        entityTypeObj.Id = obj.Id;
                        entityTypeObj.Caption = obj.Caption;
                        entityTypeObj.Description = obj.Description;
                        entityTypeObj.Category = obj.Category;
                        listEntityType.Add(entityTypeObj);
                    }
                }
                return listEntityType;
            }
        }
        /// <summary>
        /// Getting list of Options for Fulfillment Entity Type Attributes
        /// </summary>
        /// <param name="proxy">The Proxy</param>
        /// <param name="entityTypeId">The EntityTypeID</param>
        /// <returns>IList of IAttribute</returns>
        public IList<IAttribute> GetFulfillmentAttribute(MetadataManagerProxy proxy, int entityTypeId)
        {
            IList<IAttribute> listAttributes = new List<IAttribute>();
            string xmlPath = string.Empty;
            //int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;

            int versionNumber = MarcomManagerFactory.ActiveMetadataVersionNumber;
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                //xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlWorkingPath(versionNumber);
                xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(versionNumber);

                XDocument xDoc = XDocument.Load(xmlPath);
                IList<EntityTypeAttributeRelationDao> entityTypeRealtionDao = new List<EntityTypeAttributeRelationDao>();
                IList<AttributeDao> attributesDao = new List<AttributeDao>();
                if (versionNumber != 0)
                {
                    //var attibues = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlPath).Where(a => a.EntityTypeID == entityTypeId);
                    //var tese = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlPath);
                    //var set = attibues.Join(tese, at => at.AttributeID, te => te.Id, (at, te) => new { at, te }).Where(a => a.te.AttributeTypeID == 3 || a.te.AttributeTypeID == 4 || a.te.AttributeTypeID == 6);
                    var entityTypeXmlDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlPath).Join
                        (tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlPath),
                        entr => entr.AttributeID, at => at.Id, (entr, at) => new { entr, at }).Where(a =>
                            (a.at.AttributeTypeID == Convert.ToInt32(AttributesList.ListSingleSelection) ||
                            a.at.AttributeTypeID == Convert.ToInt32(AttributesList.ListMultiSelection) ||
                            a.at.AttributeTypeID == Convert.ToInt32(AttributesList.DropDownTree)) && (a.at.IsSpecial != true) && a.entr.EntityTypeID == entityTypeId).Select(a => a.at);
                    var treeXmlResult = entityTypeXmlDao.Where(a => a.AttributeTypeID == Convert.ToInt32(AttributesList.DropDownTree));

                    foreach (var obe in treeXmlResult)
                    {
                        var treeLevelXmlResult = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlPath).Where(a => a.AttributeID == obe.Id);
                        foreach (var levelObj in treeLevelXmlResult)
                        {
                            IAttribute fullfillattributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                            fullfillattributeObj.Id = obe.Id;
                            fullfillattributeObj.Caption = levelObj.LevelName;
                            fullfillattributeObj.Level = levelObj.Level;
                            fullfillattributeObj.AttributeTypeID = obe.AttributeTypeID;
                            listAttributes.Add(fullfillattributeObj);
                        }
                    }
                    foreach (var obj in entityTypeXmlDao)
                    {
                        if (obj.AttributeTypeID != Convert.ToInt32(AttributesList.DropDownTree))
                        {
                            IAttribute fullfillattributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                            fullfillattributeObj.Id = obj.Id;
                            fullfillattributeObj.Caption = obj.Caption;
                            fullfillattributeObj.Level = 0;
                            fullfillattributeObj.AttributeTypeID = obj.AttributeTypeID;
                            listAttributes.Add(fullfillattributeObj);
                        }

                    }
                }

                else
                {
                    entityTypeRealtionDao = tx.PersistenceManager.MetadataRepository.Query<EntityTypeAttributeRelationDao>().Where(a => a.EntityTypeID == entityTypeId).ToList();
                    attributesDao = tx.PersistenceManager.MetadataRepository.Query<AttributeDao>().Join(entityTypeRealtionDao, a => a.Id, b => b.AttributeID, (ab, bc) =>
                        new { ab, bc }).Where(a => (a.ab.AttributeTypeID == Convert.ToInt32(AttributesList.ListSingleSelection)
                            || a.ab.AttributeTypeID == Convert.ToInt32(AttributesList.ListMultiSelection)
                            || a.ab.AttributeTypeID == Convert.ToInt32(AttributesList.DropDownTree)) && a.bc.EntityTypeID == entityTypeId).Select
                            (a => a.ab).ToList();
                    var treeResult = attributesDao.Where(a => a.AttributeTypeID == Convert.ToInt32(AttributesList.DropDownTree));
                    foreach (var obe in treeResult)
                    {
                        var treeLeveResult = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == obe.Id);
                        foreach (var levelObj in treeLeveResult)
                        {
                            IAttribute fullfillattributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                            fullfillattributeObj.Id = obe.Id;
                            fullfillattributeObj.Caption = levelObj.LevelName;
                            fullfillattributeObj.Level = levelObj.Level;
                            fullfillattributeObj.AttributeTypeID = obe.AttributeTypeID;
                            listAttributes.Add(fullfillattributeObj);
                        }
                    }
                    foreach (var obj in attributesDao)
                    {
                        if (obj.AttributeTypeID != Convert.ToInt32(AttributesList.DropDownTree))
                        {
                            IAttribute fullfillattributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                            fullfillattributeObj.Id = obj.Id;
                            fullfillattributeObj.Caption = obj.Caption;
                            fullfillattributeObj.Level = 0;
                            fullfillattributeObj.AttributeTypeID = obj.AttributeTypeID;
                            listAttributes.Add(fullfillattributeObj);
                        }

                    }
                }
                return listAttributes;
            }
        }

        /// <summary>
        /// Getting list of Options for Fulfillment Entity Type Attribute Options
        /// </summary>
        /// <param name="proxy">The Proxy</param>
        /// <param name="attributeId">The AttributeID</param>
        /// <param name="attributeLevel">The AttributeLevel</param>
        /// <returns>IList of Options</returns>
        public IList<IOption> GetFulfillmentAttributeOptions(MetadataManagerProxy proxy, int attributeId, int attributeLevel = 0)
        {
            IList<IOption> listAttributeoptions = new List<IOption>();
            string xmlPath = string.Empty;
            int versionNumber = MarcomManagerFactory.ActiveMetadataVersionNumber;
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(versionNumber);

                IList<AttributeDao> attributeDao = new List<AttributeDao>();
                IList<OptionDao> attributesOptionsDao = new List<OptionDao>();
                if (versionNumber != 0)
                {
                    var optionXmlResult = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlPath).Join
                        (tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlPath),
                        atr => atr.Id, opt => opt.AttributeID, (atr, opt) => new { atr, opt }).Where(a => a.atr.Id == attributeId).Select(a => a.opt);
                    if (attributeLevel != 0)
                    {
                        var treeXmlNodeResult = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlPath).Where
                            (a => (a.Level == attributeLevel) && a.AttributeID == attributeId).ToList();
                        foreach (var nodeObj in treeXmlNodeResult)
                        {
                            Option fullfillattributeOptionObj = new Option();
                            fullfillattributeOptionObj.Id = nodeObj.Id;
                            fullfillattributeOptionObj.Caption = nodeObj.Caption;
                            fullfillattributeOptionObj.AttributeID = attributeId;
                            listAttributeoptions.Add(fullfillattributeOptionObj);
                        }
                    }
                    else
                    {
                        foreach (var obj in optionXmlResult)
                        {
                            Option fullfillattributeOptionObj = new Option();
                            fullfillattributeOptionObj.Id = obj.Id;
                            fullfillattributeOptionObj.Caption = obj.Caption;
                            fullfillattributeOptionObj.AttributeID = obj.AttributeID;
                            listAttributeoptions.Add(fullfillattributeOptionObj);
                        }
                    }
                }
                else
                {
                    attributeDao = tx.PersistenceManager.MetadataRepository.GetAll<AttributeDao>().Where(a => a.Id == attributeId).ToList();

                    if (attributeLevel != 0)
                    {
                        var treeNodeResult = tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>().Where(a => a.Level == attributeLevel && a.AttributeID == attributeId);
                        foreach (var nodeObj in treeNodeResult)
                        {
                            Option fullfillattributeOptionObj = new Option();
                            fullfillattributeOptionObj.Id = nodeObj.NodeID;
                            fullfillattributeOptionObj.Caption = nodeObj.Caption;
                            fullfillattributeOptionObj.AttributeID = attributeId;
                            listAttributeoptions.Add(fullfillattributeOptionObj);
                        }
                    }
                    else
                    {
                        attributesOptionsDao = tx.PersistenceManager.MetadataRepository.GetAll<OptionDao>().Join(attributeDao, a => a.AttributeID, b => b.Id, (ab, bc) =>
                            new { ab, bc }).Where(a => a.ab.AttributeID == attributeId).Select(a => a.ab).ToList();
                        tx.Commit();
                        foreach (var obj in attributesOptionsDao)
                        {
                            Option fullfillattributeOptionObj = new Option();
                            fullfillattributeOptionObj.Id = obj.Id;
                            fullfillattributeOptionObj.Caption = obj.Caption;
                            fullfillattributeOptionObj.AttributeID = obj.AttributeID;
                            listAttributeoptions.Add(fullfillattributeOptionObj);
                        }
                    }
                }
                tx.Commit();
                return listAttributeoptions;
            }
        }

        public IList GetPath(MetadataManagerProxy proxy, int EntityID, bool IsWorkspace = false)
        {
            try
            {
                IList<MultiProperty> ParList = new List<MultiProperty>();
                int intUserID = proxy.MarcomManager.User.Id;
                IList listresult;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    bool IsLock = proxy.MarcomManager.PlanningManager.GetLockStatus(EntityID).Item1;
                    bool IsReadOnly = proxy.MarcomManager.PlanningManager.GetLockStatus(EntityID).Item2;
                    StringBuilder strqry = new StringBuilder();
                    ParList.Add(new MultiProperty { propertyName = "intUserID", propertyValue = intUserID });
                    ParList.Add(new MultiProperty { propertyName = "EntityID", propertyValue = EntityID });
                    strqry.Append("WITH GetPath ");
                    strqry.Append("AS ");
                    strqry.Append("(");
                    strqry.Append("SELECT pe.ID, pe.Name, pe.ParentID, pe.UniqueKey,pe.TypeID,'" + IsLock + "' as IsLock,'" + IsReadOnly + "' as IsReadOnly,replace(replace(me.ColorCode,char(10),''),char(13),'') AS ColorCode,replace(replace(me.ShortDescription,char(10),''),char(13),'') AS ShortDescription,replace(replace(me.Caption,char(10),''),char(13),'') AS TypeName FROM PM_Entity pe inner join mm_entitytype me on pe.TypeID=me.ID WHERE pe.ID = :EntityID ");
                    strqry.Append("UNION ALL ");
                    strqry.Append("SELECT ent.ID, ent.Name, ent.ParentID, ent.UniqueKey,ent.TypeID,'" + IsLock + "' as IsLock,'" + IsReadOnly + "' as IsReadOnly,replace(replace(me.ColorCode,char(10),''),char(13),'') AS ColorCode,replace(replace(me.ShortDescription,char(10),''),char(13),'') AS ShortDescription,replace(replace(me.Caption,char(10),''),char(13),'') AS TypeName FROM PM_Entity ent  inner join mm_entitytype me on ent.TypeID=me.ID INNER JOIN GetPath AS Child ON ent.id = Child.ParentID");
                    strqry.Append(") ");
                    if (IsWorkspace)
                    {
                        strqry.Append("SELECT DISTINCT GetPath.*, ");
                        strqry.Append(" CASE ");
                        strqry.Append(" (SELECT COUNT(*) FROM AM_Entity_Role_User aeru WHERE aeru.EntityID=GetPath.ID AND aeru.RoleID IN (1,2) AND aeru.UserID= :intUserID) ");
                        strqry.Append(" WHEN 0 THEN 0 ");
                        strqry.Append(" ELSE 1 ");
                        strqry.Append(" END AS EntityAccess FROM GetPath INNER JOIN AM_Entity_Role_User aer ON GetPath.id=aer.EntityID AND aer.userid= :intUserID ORDER BY ID ");
                    }
                    else
                    {
                        strqry.Append("SELECT *, ");
                        strqry.Append(" CASE ");
                        strqry.Append(" (SELECT COUNT(*) FROM AM_Entity_Role_User aeru WHERE aeru.EntityID=GetPath.ID AND aeru.RoleID IN (1,2) AND aeru.UserID= :intUserID) ");
                        strqry.Append(" WHEN 0 THEN 0 ");
                        strqry.Append(" ELSE 1 ");
                        strqry.Append(" END AS EntityAccess FROM GetPath ORDER BY ID ");
                    }

                    listresult = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithParam(strqry.ToString(), ParList);
                    tx.Commit();
                }

                return listresult;

            }
            catch (Exception)
            {

                return null;
            }
        }

        /// <summary>
        /// Adds the WorkFlow.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="workflowid">The workflowid.</param>
        /// <param name="WorkFlowName">The WorkFlowName.</param>
        /// <param name="WorkFlowDescription">The WorkFlowName.</param>
        /// <param name="IWorkFlowSteps">The IWorkFlowSteps.</param>
        /// <param name="Id">The IPredefinedTasks.</param>
        /// <returns>int</returns>
        public int InsertWorkFlow(MetadataManagerProxy proxy, string name, string description, IList<IWorkFlowSteps> listWorkflowSteps, IList<IWorkFlowStepPredefinedTasks> listWorkflowStepstasks, int WorkFlowID = 0)
        {
            try
            {
                WorkFlowTypeDao flowdao = new WorkFlowTypeDao();
                WorkFlowStepsDao stepdao = new WorkFlowStepsDao();
                WorkFlowStepPredefinedTasksDao steptaskdao = new WorkFlowStepPredefinedTasksDao();
                IList<WorkFlowStepsDao> iworkflowstep = new List<WorkFlowStepsDao>();
                IList<WorkFlowTypeDao> iWorkFlowType = new List<WorkFlowTypeDao>();
                IList<WorkFlowStepPredefinedTasksDao> iWorkFlowsteptask = new List<WorkFlowStepPredefinedTasksDao>();
                IList<WorkFlowStepPredefinedTasksDao> isteptask = new List<WorkFlowStepPredefinedTasksDao>();
                int lastWorkFlowid = 0;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (WorkFlowID != 0)
                    {

                        flowdao = (from item in tx.PersistenceManager.PlanningRepository.Query<WorkFlowTypeDao>() where item.Id == WorkFlowID select item).FirstOrDefault();
                        flowdao.Name = name;
                        flowdao.Description = description;
                        iWorkFlowType.Add(flowdao);
                        tx.PersistenceManager.PlanningRepository.Save<WorkFlowTypeDao>(iWorkFlowType);
                        lastWorkFlowid = WorkFlowID;

                        //iworkflowstep = (from item in tx.PersistenceManager.MetadataRepository.Query<WorkFlowStepsDao>() where item.WorkFlowID == WorkFlowID select item).ToList<WorkFlowStepsDao>();

                        string stepid = "";

                        foreach (var itemval in listWorkflowSteps)
                        {
                            iworkflowstep = new List<WorkFlowStepsDao>();
                            iworkflowstep = (from item in tx.PersistenceManager.MetadataRepository.Query<WorkFlowStepsDao>() where item.WorkFlowID == WorkFlowID && item.Id == itemval.Id select item).ToList<WorkFlowStepsDao>();

                            foreach (var itemval1 in iworkflowstep)
                            {
                                WorkFlowStepsDao stepdao1 = new WorkFlowStepsDao();

                                stepdao1.Id = itemval.Id;
                                stepdao1.Name = itemval.Name;
                                stepdao1.HelpText = itemval.HelpText;
                                stepdao1.SortOrder = itemval.SortOrder;
                                stepdao1.WorkFlowID = WorkFlowID;
                                tx.PersistenceManager.PlanningRepository.Save<WorkFlowStepsDao>(stepdao1);
                            }


                        }

                        foreach (var itemval in listWorkflowSteps)
                        {
                            DeletePredefinedTasksByStepID(tx, itemval.Id.ToString());
                            foreach (var val in itemval.WorkFlowTasks)
                            {
                                steptaskdao = new WorkFlowStepPredefinedTasksDao();
                                steptaskdao.StepID = itemval.Id;
                                steptaskdao.TaskID = val.TaskID;
                                isteptask.Add(steptaskdao);
                            }
                            tx.PersistenceManager.PlanningRepository.Save<WorkFlowStepPredefinedTasksDao>(isteptask);
                        }
                    }
                    else
                    {
                        flowdao = new WorkFlowTypeDao();
                        flowdao.Name = name;
                        flowdao.Description = description;
                        iWorkFlowType.Add(flowdao);
                        tx.PersistenceManager.PlanningRepository.Save<WorkFlowTypeDao>(iWorkFlowType);
                        lastWorkFlowid = flowdao.Id;

                        if (listWorkflowSteps != null)
                        {
                            IList<WorkFlowStepsDao> iworkflowstep1 = new List<WorkFlowStepsDao>();
                            iworkflowstep1 = new List<WorkFlowStepsDao>();
                            foreach (var item in listWorkflowSteps)
                            {
                                stepdao = new WorkFlowStepsDao();
                                stepdao.Name = item.Name;
                                stepdao.HelpText = item.HelpText;
                                stepdao.SortOrder = item.SortOrder;
                                stepdao.WorkFlowID = lastWorkFlowid;
                                iworkflowstep1.Add(stepdao);
                                tx.PersistenceManager.PlanningRepository.Save<WorkFlowStepsDao>(iworkflowstep1);

                                if (item.WorkFlowTasks != null)
                                {
                                    foreach (var val in item.WorkFlowTasks)
                                    {
                                        steptaskdao = new WorkFlowStepPredefinedTasksDao();
                                        steptaskdao.StepID = stepdao.Id;
                                        steptaskdao.TaskID = val.TaskID;
                                        isteptask.Add(steptaskdao);
                                    }
                                    tx.PersistenceManager.PlanningRepository.Save<WorkFlowStepPredefinedTasksDao>(isteptask);
                                }
                            }
                        }
                    }

                    tx.Commit();
                }
                return lastWorkFlowid;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Inserts the update modulefeature.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="moduleid">The moduleid.</param>
        /// <param name="featureid">The featureid.</param>
        /// <param name="isenable">if set to <c>true</c> [isenable].</param>
        /// <returns>int.</returns>
        public int InsertEntityHistory(MetadataManagerProxy metadataManagerProxy, int EntityID, int UserID)
        {

            try
            {
                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {

                    EntityHistoryDao dao = new EntityHistoryDao();
                    dao.Id = dao.Id;
                    dao.EntityID = EntityID;
                    dao.VisitedOn = System.DateTime.Now;
                    dao.UserID = UserID;
                    tx.PersistenceManager.PlanningRepository.Save<EntityHistoryDao>(dao);
                    tx.Commit();
                    return dao.Id;

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return 0;

        }


        /// <summary>
        /// selects EntityHistory.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="EntityID">The EntityID </param>
        /// <returns>IList</returns>
        public IList<IEntityHistory> EntityHistory_Select(MetadataManagerProxy metadataManagerProxy, int UserID, int Topx)
        {

            try
            {
                IList<IEntityHistory> EntityHistorylist = new List<IEntityHistory>();
                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    IList<EntityHistoryDao> entityHistorydao;
                    entityHistorydao = tx.PersistenceManager.CommonRepository.GetAll<EntityHistoryDao>();


                    var linqentityHistorydao = (from t in entityHistorydao where t.UserID == UserID select t).OrderByDescending(item => item.VisitedOn).ToList<EntityHistoryDao>();
                    var toplinqentityHistorydao = linqentityHistorydao.GroupBy(x => x.EntityID).Select(x => x.FirstOrDefault()).ToList();
                    var Historydao = (from t in toplinqentityHistorydao select t).Take(Topx);
                    //.Take(Topx).ToList<BrandSystems.Marcom.Dal.Metadata.Model.EntityHistoryDao>(); ;

                    foreach (var temp in Historydao.ToList())
                    {
                        var Entitytypeid = (from item in tx.PersistenceManager.UserRepository.Query<EntityDao>() where item.Id == temp.EntityID select item.Typeid).FirstOrDefault();
                        if (Convert.ToInt32(EntityTypeList.Task) != Entitytypeid)
                        {
                            IEntityHistory Entityhistory = new EntityHistory();
                            Entityhistory.Id = temp.Id;
                            Entityhistory.EntityID = temp.EntityID;
                            Entityhistory.VisitedOn = temp.VisitedOn;
                            Entityhistory.UserID = temp.UserID;
                            var nm = (from item in tx.PersistenceManager.UserRepository.Query<EntityDao>() where item.Id == temp.EntityID select item.Name).FirstOrDefault();
                            Entityhistory.EntityName = nm.ToString();
                            //var RoleName = (from Role in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.RoleDao>()
                            //                join EntityRole in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() on Role.Id equals EntityRole.Roleid
                            //                where EntityRole.Userid == UserID && EntityRole.Entityid == temp.EntityID
                            //                select new
                            //                {
                            //                    Rolename = Role.Caption,
                            //                    RoleId = Role.Id
                            //                }).OrderByDescending(item => item.RoleId).FirstOrDefault();

                            var currententityroleobj = tx.PersistenceManager.CommonRepository.Query<BaseEntityDao>().Where(a => a.Id == Convert.ToInt32(temp.EntityID)).SingleOrDefault();
                            var RoleName = (from Role in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityTypeRoleAclDao>().Where(ax => ax.EntityTypeID == currententityroleobj.Typeid)
                                            join EntityRole in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() on Role.ID equals EntityRole.Roleid
                                            where EntityRole.Userid == UserID && EntityRole.Entityid == temp.EntityID
                                            select new
                                            {
                                                Rolename = Role.Caption,
                                                RoleId = Role.ID
                                            }).OrderBy(item => item.RoleId).ToList();//OrderByDescending(item => item.RoleId).ToList();
                            string RoleNames = "";
                            if (RoleName.Count > 0)
                            {
                                foreach (var val in RoleName)
                                {
                                    if (RoleNames.Length > 0)
                                        RoleNames += "," + val.Rolename;
                                    else
                                        RoleNames = val.Rolename;
                                }
                            }
                            if (RoleNames.Length > 0)
                                Entityhistory.RoleName = RoleNames;//(RoleName.Rolename == null ? "-" : RoleName.Rolename).ToString();
                            else
                                Entityhistory.RoleName = "-";

                            var ShortDescription = (from item in tx.PersistenceManager.MetadataRepository.Query<EntityTypeDao>() where item.Id == Entitytypeid select item.ShortDescription).FirstOrDefault();
                            var ColorCode = (from item in tx.PersistenceManager.MetadataRepository.Query<EntityTypeDao>() where item.Id == Entitytypeid select item.ColorCode).FirstOrDefault();
                            Entityhistory.ShortDescription = ShortDescription.ToString();
                            Entityhistory.ColorCode = ColorCode.ToString();
                            EntityHistorylist.Add(Entityhistory);
                        }
                    }
                    tx.Commit();
                }

                return EntityHistorylist;
            }
            catch (Exception ex)
            {
                return null;

            }

        }

        public IList TopxActivity_Select(MetadataManagerProxy metadataManagerProxy, int UserID, int Topx)
        {

            try
            {
                IList listresult;
                StringBuilder strqry = new StringBuilder();


                //strqry.Append("select DISTINCT  * from");
                //strqry.Append("(");
                //strqry.Append("SELECT TOP(" + Topx + ") pea.id AS 'ActivityID',pea.name AS 'ActivityName',SUM(pefav.ApprovedAllocatedAmount) AS 'ApprovedAllocatedAmount',SUM(pefav.Spent) AS 'Spent',pea.TypeId,");
                //strqry.Append("(SELECT met.ShortDescription FROM MM_EntityType met WHERE met.ID = pea.TypeId) AS ShortDescription,");
                //strqry.Append("(SELECT met.ColorCode FROM MM_EntityType met WHERE met.ID = pea.TypeId) AS ColorCode ");
                //strqry.Append("FROM PM_Entity pea  INNER JOIN AM_Entity_Role_User per  ON  per.EntityID = pea.ID INNER JOIN PM_Financial pefav ON  pea.ID = pefav.EntityID   INNER JOIN AM_Role mr ");
                //strqry.Append("ON  mr.ID = per.RoleID 	WHERE per.UserID = " + UserID + " AND  pea.Level = 1 AND pea.[Active] = 1 	GROUP BY pea.id,pea.name,mr.Caption,pea.TypeId ");
                //strqry.Append("ORDER BY  SUM(pefav.ApprovedAllocatedAmount) DESC ");
                //strqry.Append(") a ");
                //strqry.Append("where (a.Spent <> 0 or a.ApprovedAllocatedAmount <> 0)");

                // remove   the   status 
                strqry.Append("select DISTINCT  * from");
                strqry.Append("(");
                strqry.Append("SELECT DISTINCT  TOP(" + Topx + ") pea.id AS 'ActivityID',pea.name AS 'ActivityName',SUM(pefav.ApprovedAllocatedAmount) AS 'ApprovedAllocatedAmount',SUM(pefav.Spent) AS 'Spent',pea.TypeId,");
                strqry.Append("(SELECT met.ShortDescription FROM MM_EntityType met WHERE met.ID = pea.TypeId) AS ShortDescription,");
                strqry.Append("(SELECT met.ColorCode FROM MM_EntityType met WHERE met.ID = pea.TypeId) AS ColorCode, ");
                strqry.Append(" metso.StatusOptions AS Status ");
                strqry.Append("FROM PM_Entity pea  INNER JOIN AM_Entity_Role_User per  ON  per.EntityID = pea.ID INNER JOIN PM_Financial pefav ON  pea.ID = pefav.EntityID  INNER JOIN MM_EntityStatus mes  ON  pea.ID = mes.EntityID INNER JOIN MM_EntityTypeStatus_Options metso  ON  mes.StatusID = metso.ID  AND pea.TypeID=metso.EntityTypeID AND metso.IsRemoved=0  INNER JOIN AM_EntityTypeRoleAcl mr ");
                strqry.Append("ON  mr.ID = per.RoleID 	WHERE per.UserID = ? AND  pea.Level = 1 AND pea.[Active] = 1 	GROUP BY pea.id,pea.name,mr.Caption,pea.TypeId, metso.StatusOptions ");
                strqry.Append("ORDER BY  SUM(pefav.ApprovedAllocatedAmount) DESC ");
                strqry.Append(") a ");
                strqry.Append("where (a.Spent <> 0 or a.ApprovedAllocatedAmount <> 0)");
                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    listresult = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(strqry.ToString(), UserID);
                    tx.Commit();
                }

                return listresult;

            }
            catch (Exception)
            {

                return null;
            }

        }

        public IList TopxMyTask_Select(MetadataManagerProxy metadataManagerProxy, int UserID, int Topx)
        {

            try
            {
                IList listresult;
                StringBuilder strqry = new StringBuilder();



                strqry.Append(" SELECT TOP (" + Topx + ") a.name AS 'Name', a.TaskID AS 'TaskID',a.Duedate, a.Assignedby as 'Assignedby', a.Assignedname AS 'Assignedname',a.Status AS 'Status',a.Typeid, a.Typename,a.PEntityId,a.PEnityname, a.PEnityTypename FROM   (  ");
                strqry.Append("SELECT  pmt.NAME AS 'Name' ,pmt.id AS 'TaskID',CONVERT(VARCHAR(10), pmt.DueDate, 120) + ' (' + CONVERT(NVARCHAR(100),DATEDIFF(dd, GETDATE(),pmt.DueDate)) + ' days)'  AS 'Duedate',");
                strqry.Append("(SELECT TOP 1  UserID FROM TM_Task_Members WHERE TaskID=pmt.id AND RoleID=1) as 'Assignedby',");
                strqry.Append("(SELECT FirstName + ' ' + LastName FROM um_user WHERE id IN ( SELECT TOP 1 UserID FROM TM_Task_Members WHERE TaskID=pmt.id AND RoleID=1))  AS 'Assignedname',");
                strqry.Append("(SELECT  CASE   WHEN  pmt.TaskStatus= 0 THEN 'Unassigned'  WHEN  pmt.TaskStatus= 1 THEN  'In progress'  WHEN  pmt.TaskStatus= 2 THEN  'Completed'  WHEN  pmt.TaskStatus= 3 THEN  'Approved'  WHEN  pmt.TaskStatus= 4 THEN  'Unable to complete' WHEN  pmt.TaskStatus= 5 THEN  'Rejected' WHEN  pmt.TaskStatus= 6 THEN  'Withdrawn' WHEN  pmt.TaskStatus= 7 THEN  'Not Applicable' WHEN  pmt.TaskStatus= 8 THEN  'ForcefulComplete' WHEN  pmt.TaskStatus= 9 THEN  'RevokeTask'    END ) AS 'Status', pm.TypeID AS 'Typeid',(SELECT  Caption FROM [dbo].[MM_EntityType] WHERE ID=pm.TypeID) AS 'Typename',pmt.EntityId AS 'PEntityId',(SELECT  NAME  FROM PM_Entity WHERE id=pmt.EntityId) AS'PEnityname',( SELECT  Caption FROM [dbo].[MM_EntityType] WHERE ID IN( SELECT TypeID  FROM PM_Entity WHERE id=pmt.EntityId)) AS'PEnityTypename' FROM TM_EntityTask AS  pmt");
                //strqry.Append("(SELECT  Name FROM  MM_WorkFlow_Steps WHERE id=pmt.TaskStatus) AS 'Status', pm.TypeID AS 'Typeid',(SELECT  Caption FROM [dbo].[MM_EntityType] WHERE ID=pm.TypeID) AS 'Typename',pmt.EntityId AS 'PEntityId',(SELECT  NAME  FROM PM_Entity WHERE id=pmt.EntityId) AS'PEnityname',( SELECT  Caption FROM [dbo].[MM_EntityType] WHERE ID IN( SELECT TypeID  FROM PM_Entity WHERE id=pmt.EntityId)) AS'PEnityTypename' FROM TM_EntityTask AS  pmt");
                //strqry.Append(" JOIN  PM_Entity  AS pm  ON pm.id =pmt.id  ");
                strqry.Append(" JOIN  PM_Entity  AS pm  ON pm.id =pmt.id AND  pm .TypeID IN( 2,3,31)");
                strqry.Append("AND pmt.id IN(SELECT TaskID FROM TM_Task_Members WHERE UserID= ? AND  RoleID=4)  ");
                //strqry.Append("AND pmt.TaskStatus IN(8,30)");
                // strqry.Append(" ORDER BY pmt.DueDate");
                strqry.Append(" UNION ");
                strqry.Append(" SELECT  pmt.NAME AS 'Name' ,pmt.id AS 'TaskID',CONVERT(VARCHAR(10), pmt.DueDate, 120) + ' (' + CONVERT(NVARCHAR(100),DATEDIFF(dd, GETDATE(),pmt.DueDate)) + ' days)'  AS 'Duedate',");
                strqry.Append("(SELECT TOP 1 UserID FROM PM_Task_Members  WHERE TaskID=pmt.id AND RoleID=1) as 'Assignedby',");
                strqry.Append("(SELECT FirstName + ' ' + LastName FROM um_user WHERE id IN ( SELECT TOP 1 UserID FROM PM_Task_Members WHERE TaskID=pmt.id AND RoleID=1))  AS 'Assignedname',");
                //strqry.Append("(SELECT NAME FROM   MM_WorkFlow_Steps  WHERE  id = pmt.TaskStatus ) AS 'Status', pm.TypeID AS 'Typeid',(SELECT  Caption FROM [dbo].[MM_EntityType] WHERE ID=pm.TypeID) AS 'Typename',pmt.EntityId AS 'PEntityId',(SELECT  NAME  FROM PM_Entity WHERE id=pmt.EntityId) AS'PEnityname',( SELECT  Caption FROM [dbo].[MM_EntityType] WHERE ID IN( SELECT TypeID  FROM PM_Entity WHERE id=pmt.EntityId)) AS'PEnityTypename' FROM PM_Task AS  pmt");
                strqry.Append("(SELECT  CASE  WHEN  pmt.TaskStatus= 8 THEN  'In progress'  WHEN  pmt.TaskStatus= 11 THEN  'Approved'  WHEN  pmt.TaskStatus= 12 THEN  'Rejected'  END ) AS 'Status', pm.TypeID AS 'Typeid',(SELECT  Caption FROM [dbo].[MM_EntityType] WHERE ID=pm.TypeID) AS 'Typename',pmt.EntityId AS 'PEntityId',(SELECT  NAME  FROM PM_Entity WHERE id=pmt.EntityId) AS'PEnityname',( SELECT  Caption FROM [dbo].[MM_EntityType] WHERE ID IN( SELECT TypeID  FROM PM_Entity WHERE id=pmt.EntityId)) AS'PEnityTypename' FROM PM_Task AS  pmt");
                strqry.Append(" JOIN  PM_Entity  AS pm  ON pm.id =pmt.id AND  pm .TypeID IN(7)");
                strqry.Append("AND pmt.id IN(SELECT TaskID FROM PM_Task_Members WHERE UserID= ? AND  RoleID=4) ");
                //strqry.Append("AND pmt.TaskStatus IN(8,30)");
                strqry.Append(" ) a ");
                strqry.Append(" order by  a.Duedate");

                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    listresult = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(strqry.ToString(), UserID, UserID);
                    tx.Commit();
                }

                return listresult;

            }
            catch (Exception)
            {

                return null;
            }

        }

        /// <summary>
        /// Inserts the type of the update entity.
        /// </summary>
        /// <param name="metadataManagerProxy">The metadata manager proxy.</param>
        /// <param name="caption">The caption.</param>
        /// <param name="description">The description.</param>
        /// <param name="ModuleId">The module id.</param>
        /// <param name="IsSystemDefined">if set to <c>true</c> [is system defined].</param>
        /// <param name="Category">The category.</param>
        /// <param name="shortDescription">The ShortDescription.</param>
        /// <param name="colorCode">The ColorCode.</param>
        /// <param name="Id">The ID as Optional Parameter</param>
        /// <returns>INT.</returns>
        public int InsertUpdatePredefinedWorkTask(MetadataManagerProxy metadataManagerProxy, string caption, string description, IList<IPredefinedWorflowFileAttachement> fileAttachments, int workflowtypeID, int Id = 0)
        {
            try
            {

                PredefinedTasksDao dao = new PredefinedTasksDao();
                dao.Name = caption;
                dao.Description = description;
                dao.WorkFlowType = workflowtypeID;
                dao.Active = true;

                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    if (Id != 0)
                    {
                        tx.PersistenceManager.MetadataRepository.DeleteByID<PredefinedWorflowFileAttachementDao>(PredefinedWorflowFileAttachementDao.MappingNames.PredefinedID, Id);
                        dao.ID = Id;
                    }

                    tx.PersistenceManager.AccessRepository.Save<PredefinedTasksDao>(dao);

                    if (fileAttachments != null)
                    {
                        IList<PredefinedWorflowFileAttachementDao> iattachment = new List<PredefinedWorflowFileAttachementDao>();
                        foreach (var a in fileAttachments)
                        {
                            PredefinedWorflowFileAttachementDao attachedao = new PredefinedWorflowFileAttachementDao();
                            attachedao.Createdon = a.Createdon;
                            attachedao.PredefinedID = dao.ID;
                            attachedao.Name = a.Name;
                            attachedao.Extension = a.Extension;
                            attachedao.Size = a.Size;
                            attachedao.MimeType = a.MimeType;
                            attachedao.OwnerID = a.OwnerID;
                            attachedao.VersionNo = a.VersionNo;

                            attachedao.FileGuid = a.Fileguid;
                            iattachment.Add(attachedao);
                        }

                        tx.PersistenceManager.MetadataRepository.Save<PredefinedWorflowFileAttachementDao>(iattachment);
                        BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Saved in Task Members", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                    }

                    tx.Commit();
                }
                return dao.ID;

            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        ///GetPredefinedWorkflow By ID
        /// <summary>
        /// get the Predefined Workflow by id.
        /// </summary>
        /// <param name="caption">The caption.</param>
        /// <param name="description">The description.</param>
        /// <param name="id">The id.</param>
        /// <returns>Ilist of IPredefinedTasks</returns>
        public IList<IPredefinedTasks> GetPredefinedWorkflowByID(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                IList<IPredefinedTasks> _iipredfwkrflw = new List<IPredefinedTasks>();
                PredefinedTasksDao PredfworkflowDao = new PredefinedTasksDao();
                PredfworkflowDao.ID = ID;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (ID == 0)
                    {
                        var daoobj = (from item in tx.PersistenceManager.MetadataRepository.Query<PredefinedTasksDao>() where item.Active == true select item).ToList();
                        foreach (var val in daoobj)
                        {
                            IPredefinedTasks _iPredfwkrflw = new PredefinedTasks();
                            _iPredfwkrflw.Id = val.ID;
                            _iPredfwkrflw.Name = val.Name;
                            _iPredfwkrflw.Description = val.Description;
                            _iPredfwkrflw.WorkflowType = val.WorkFlowType;
                            _iipredfwkrflw.Add(_iPredfwkrflw);
                        }
                    }
                    else
                    {
                        var daoobj = (from item in tx.PersistenceManager.MetadataRepository.Query<PredefinedTasksDao>() where item.ID == ID && item.Active == true select item).ToList();
                        foreach (var val in daoobj)
                        {
                            IPredefinedTasks _iPredfwkrflw = new PredefinedTasks();
                            _iPredfwkrflw.Id = val.ID;
                            _iPredfwkrflw.Name = val.Name;
                            _iPredfwkrflw.Description = val.Description;
                            _iPredfwkrflw.WorkflowType = val.WorkFlowType;
                            _iipredfwkrflw.Add(_iPredfwkrflw);
                        }
                    }

                }

                return _iipredfwkrflw;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the details of WorkflowType by ID.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IWorkFlowType</returns>
        public IList<IWorkFlowType> GetWorkFlowDetailsByID(MetadataManagerProxy proxy, int ID)
        {
            try
            {

                IList<IWorkFlowType> _iiworkflowtype = new List<IWorkFlowType>();
                IList<WorkFlowTypeDao> dao = new List<WorkFlowTypeDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    dao = (from item in tx.PersistenceManager.MetadataRepository.Query<WorkFlowTypeDao>() where item.Id == ID select item).ToList();
                }
                foreach (var item in dao)
                {
                    IWorkFlowType _iworkflowtype = new WorkFlowType();
                    _iworkflowtype.Id = item.Id;
                    _iworkflowtype.Name = item.Name;
                    _iworkflowtype.Description = item.Description;
                    _iiworkflowtype.Add(_iworkflowtype);
                }
                return _iiworkflowtype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the details of WorkflowStep by ID.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IWorkFlowType</returns>
        public IList<IWorkFlowSteps> GetWorkFlowTStepByID(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                IList<IWorkFlowSteps> _iiworkflowtype = new List<IWorkFlowSteps>();
                IList<WorkFlowStepsDao> dao = new List<WorkFlowStepsDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    dao = (from item in tx.PersistenceManager.MetadataRepository.Query<WorkFlowStepsDao>() where item.WorkFlowID == ID select item).ToList();
                }
                foreach (var item in dao)
                {
                    IWorkFlowSteps _iworkflowtype = new WorkFlowSteps();
                    _iworkflowtype.Id = item.Id;
                    _iworkflowtype.WorkFlowID = item.WorkFlowID;
                    _iworkflowtype.Name = item.Name;
                    _iworkflowtype.HelpText = item.HelpText;
                    _iiworkflowtype.Add(_iworkflowtype);
                }
                return _iiworkflowtype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the details of WorkflowStep PredefinedTask by ID.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IWorkFlowType</returns>
        public IList<IWorkFlowStepPredefinedTasks> GetWorkFlowStepPredefinedTaskByID(MetadataManagerProxy proxy, string IDs)
        {
            try
            {

                IList<IWorkFlowStepPredefinedTasks> _iiworkflowtype = new List<IWorkFlowStepPredefinedTasks>();
                IList<WorkFlowStepPredefinedTasksDao> dao = new List<WorkFlowStepPredefinedTasksDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    dao = (from item in tx.PersistenceManager.MetadataRepository.Query<WorkFlowStepPredefinedTasksDao>() where IDs.Contains(item.StepID.ToString()) select item).ToList();
                }
                foreach (var item in dao)
                {
                    IWorkFlowStepPredefinedTasks _iworkflowtype = new WorkFlowStepPredefinedTasks();
                    _iworkflowtype.Id = item.Id;
                    _iworkflowtype.StepID = item.StepID;
                    _iworkflowtype.TaskID = item.TaskID;
                    _iiworkflowtype.Add(_iworkflowtype);
                }
                return _iiworkflowtype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes the Workflow and related tables.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>bool</returns>
        public bool DeleteWorkflowByID(MetadataManagerProxy proxy, int id)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.MetadataRepository.DeleteByID<WorkFlowTypeDao>(WorkFlowTypeDao.MappingNames.Id, id);

                    IList<WorkFlowStepsDao> dao = new List<WorkFlowStepsDao>();
                    dao = (from item in tx.PersistenceManager.MetadataRepository.Query<WorkFlowStepsDao>() where item.WorkFlowID == id select item).ToList();

                    string workflowid = "";
                    char[] characters = new char[] { ' ', ',' };

                    foreach (var val in dao)
                    {
                        //workflowid = workflowid + val.WorkFlowID + ", ";

                        tx.PersistenceManager.MetadataRepository.DeleteByID<WorkFlowStepPredefinedTasksDao>(WorkFlowStepPredefinedTasksDao.MappingNames.StepID, val.Id);

                    }

                    workflowid = workflowid.ToString().TrimEnd(characters);

                    // tx.PersistenceManager.MetadataRepository.DeleteByID<WorkFlowStepPredefinedTasksDao>(WorkFlowStepPredefinedTasksDao.MappingNames.StepID, dao[0].Id);

                    // (from item in tx.PersistenceManager.MetadataRepository.Delete<WorkFlowStepPredefinedTasksDao>() where workflowid.Contains(item.StepID.ToString()));

                    tx.PersistenceManager.MetadataRepository.DeleteByID<WorkFlowStepsDao>(WorkFlowStepsDao.MappingNames.WorkFlowID, id);

                    tx.Commit();
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return false;
        }

        /// <summary>
        /// Returns FileAttachment class.
        /// </summary>
        public IPredefinedWorflowFileAttachement PredefinedWrkflwFileAttachmentService()
        {
            return new PredefinedWorflowFileAttachement();
        }

        ///GetPredefinedWorkflow file attached By ID
        /// <summary>
        /// get the Predefined Workflow file attached  by id.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns>Ilist of IPredefinedTasks</returns>
        public IList<IPredefinedWorflowFileAttachement> GetPredefinedWorkflowFilesAttchedByID(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                IList<IPredefinedWorflowFileAttachement> _iipredfwkrflw = new List<IPredefinedWorflowFileAttachement>();
                PredefinedWorflowFileAttachementDao PredfworkflowDao = new PredefinedWorflowFileAttachementDao();
                PredfworkflowDao.ID = ID;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var daoobj = (from item in tx.PersistenceManager.MetadataRepository.Query<PredefinedWorflowFileAttachementDao>() where item.PredefinedID == ID select item).ToList();
                    foreach (var val in daoobj)
                    {
                        IPredefinedWorflowFileAttachement _iPredfwkrflw = new PredefinedWorflowFileAttachement();
                        _iPredfwkrflw.ID = val.ID;
                        _iPredfwkrflw.Name = val.Name;
                        _iPredfwkrflw.PredefinedID = val.PredefinedID;
                        _iPredfwkrflw.Fileguid = val.FileGuid;
                        _iPredfwkrflw.Createdon = val.Createdon;
                        _iPredfwkrflw.Extension = val.Extension;
                        _iPredfwkrflw.Size = val.Size;
                        _iPredfwkrflw.MimeType = val.MimeType;
                        _iPredfwkrflw.OwnerID = val.OwnerID;
                        _iPredfwkrflw.VersionNo = val.VersionNo;

                        _iipredfwkrflw.Add(_iPredfwkrflw);
                    }

                }

                return _iipredfwkrflw;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes the predefined Workflow file.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>bool</returns>
        public bool DeletePredWorkflowFileByID(MetadataManagerProxy proxy, string id)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.MetadataRepository.DeleteByID<PredefinedWorflowFileAttachementDao>(PredefinedWorflowFileAttachementDao.MappingNames.FileGuid, new Guid(id));
                    tx.Commit();
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return false;
        }

        /// <summary>
        /// Deletes the Workflow Predefined Tasks.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="stepId">The StepID.</param>
        /// <returns>bool</returns>
        public bool DeletePredefinedTasksByStepID(ITransaction tx, string stepId)
        {
            try
            {
                string deleteStepTasksQuery = "delete from MM_WorkFlowStep_PredefinedTask where StepID In (" + stepId + ")";
                tx.PersistenceManager.MetadataRepository.ExecuteQuery(deleteStepTasksQuery);
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Deletes the Workflow and related tables.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="id">The id.</param>
        /// <returns>bool</returns>
        public bool DeletePredefinedWorkflowByID(MetadataManagerProxy metadataManagerProxy, int id, string caption, string description, int workflowtypeID)
        {
            try
            {
                PredefinedTasksDao dao = new PredefinedTasksDao();
                dao.ID = id;
                dao.Name = caption;
                dao.Description = description;
                dao.WorkFlowType = workflowtypeID;
                dao.Active = false;

                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.AccessRepository.Save<PredefinedTasksDao>(dao);
                    tx.Commit();
                }
                return true;
            }

            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the entitytype relation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>Count of Relation By attributeid</returns>
        public int GetEntityTypeAttributeRelationByAttributeID(MetadataManagerProxy proxy, int attrID)
        {

            try
            {
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                string attributeCaption = string.Empty;
                string entitytypeCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityTypeAttributeRelation> _iientitytyperelation = new List<IEntityTypeAttributeRelation>();
                IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                IList<EntityTypeDao> entTypedao = new List<EntityTypeDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = GetXmlWorkingPath();
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath);
                    entTypedao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath);
                    int[] entityTypeArr = entTypedao.Select(a => a.Id).ToArray();
                    tx.Commit();
                    var entityttyperesult = dao.Where(a => a.AttributeID == attrID && entityTypeArr.Contains(a.EntityTypeID)).OrderBy(a => a.SortOrder).ToList();
                    return entityttyperesult.Count;

                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public IList<IFeature> GetModuleFeatures(MetadataManagerProxy proxy, int moduleID)
        {
            IList<IFeature> _iimodulefeature = new List<IFeature>();
            FeatureDao modulefeatures = new FeatureDao();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                //modulefeatures= tx.PersistenceManager.PlanningRepository.Get<ModuleFeatureDao>(ModuleFeatureDao.PropertyNames.Moduleid, moduleID);
                var features = tx.PersistenceManager.PlanningRepository.GetAll<FeatureDao>().Where(a => a.ModuleID == moduleID && a.IsEnable == true);

                foreach (var item in features)
                {
                    IFeature _featuress = new Feature();
                    _featuress.Id = item.Id;
                    _featuress.Caption = item.Caption;
                    _featuress.Description = item.Description;
                    _featuress.ModuleID = item.ModuleID;
                    _featuress.IsEnable = item.IsEnable;
                    _featuress.IsTopNavigation = item.IsTopNavigation;
                    _iimodulefeature.Add(_featuress);
                }

            }

            return _iimodulefeature;
        }

        public IList<IFeature> GetModuleFeaturesForNavigation(MetadataManagerProxy proxy, int moduleID)
        {
            IList<IFeature> _iimodulefeature = new List<IFeature>();
            FeatureDao modulefeatures = new FeatureDao();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                //modulefeatures= tx.PersistenceManager.PlanningRepository.Get<ModuleFeatureDao>(ModuleFeatureDao.PropertyNames.Moduleid, moduleID);
                var features = tx.PersistenceManager.PlanningRepository.GetAll<FeatureDao>().Where(a => a.ModuleID == moduleID && a.IsEnable == true && a.IsTopNavigation == true);

                foreach (var item in features)
                {
                    IFeature _featuress = new Feature();
                    _featuress.Id = item.Id;
                    _featuress.Caption = item.Caption;
                    _featuress.Description = item.Description;
                    _featuress.ModuleID = item.ModuleID;
                    _featuress.IsEnable = item.IsEnable;
                    _featuress.IsTopNavigation = item.IsTopNavigation;
                    _iimodulefeature.Add(_featuress);
                }

            }

            return _iimodulefeature;
        }
        public int InsertUpdateFeature(MetadataManagerProxy metadataManagerProxy, string caption, string description, int moduleID, bool isenable, int id)
        {
            try
            {

                FeatureDao dao = new FeatureDao();
                dao.Caption = caption;
                dao.Description = description;
                dao.ModuleID = moduleID;
                dao.IsEnable = isenable;
                dao.Id = id;

                //ModuleDao obj = new ModuleDao(imodule.Id, caption, description, isenable);
                //XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<ModuleDao>(currentworkingMetadata, obj);
                //SavetoSynDBXml(SavedXML, "Module", currentSyncDBXML, id);
                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.PlanningRepository.Save<FeatureDao>(dao);
                    tx.Commit();
                    metadataManagerProxy.MarcomManager.AccessManager.GetApplicationLevelSettings();
                }
                return dao.Id;

            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        /// <summary>
        /// Gets the treelevel by AttributeID.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <param name="AttributeID">The AttributeID.</param>
        /// <returns>List of ITreeNode </returns>
        public IList<ITreeNode> GetTreeNodeByAttributeID(MetadataManagerProxy proxy, int AttributeID)
        {
            try
            {

                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                IList<ITreeNode> _iitreelevel = new List<ITreeNode>();
                IList<TreeNodeDao> dao = new List<TreeNodeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (version == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<TreeNodeDao>();
                        tx.Commit();
                    }
                    else
                    {
                        string xmlpath = GetXmlWorkingPath();
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath);
                    }
                }
                if (AttributeID != 0)
                {
                    var treelevelresult = dao.Where(a => a.AttributeID == AttributeID).OrderBy(a => a.SortOrder);
                    foreach (var item in treelevelresult)
                    {
                        ITreeNode _itreelevel = new TreeNode();
                        _itreelevel.Level = item.Level;
                        _iitreelevel.Add(_itreelevel);
                    }
                }
                else
                {
                    foreach (var item in dao)
                    {
                        ITreeNode _itreelevel = new TreeNode();
                        _itreelevel.Level = item.Level;
                        _iitreelevel.Add(_itreelevel);
                    }
                }
                return _iitreelevel;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        ///GetMetadataVersion
        /// <summary>
        /// get the metadataversion.
        /// </summary>
        /// <param name="caption">The Name.</param>
        /// <param name="description">The description.</param>
        /// <returns>Ilist of Imetadataversion</returns>
        public IList<IMetadataVersion> GetMetadataVersion(MetadataManagerProxy proxy)
        {
            IList<IMetadataVersion> _iimetadataver = new List<IMetadataVersion>();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var result = tx.PersistenceManager.MetadataRepository.GetAll<MetadataVersionDao>();

                    foreach (var item in result)
                    {
                        IMetadataVersion _metadataversion = new MetadataVersion();
                        _metadataversion.ID = item.ID;
                        _metadataversion.Name = item.Name;
                        _metadataversion.Description = item.Description;
                        _metadataversion.State = item.State;
                        _metadataversion.StartDate = item.StartDate;
                        _metadataversion.EndDate = item.EndDate;
                        _iimetadataver.Add(_metadataversion);
                    }
                    return _iimetadataver;
                }
            }

            catch (Exception ex)
            {
                return null;
            }
        }

        ///InsertMetadataVersion
        /// <summary>
        /// Insert new metadataversion.
        /// </summary>
        /// <param name="caption">The Name.</param>
        /// <param name="description">The description.</param>
        /// <returns>id</returns>
        public int InsertMetadataVersion(MetadataManagerProxy proxy, int metadataID, string metdataName, string metadataDescription, int selectedMetadataVer)
        {
            IList<IMetadataVersion> _iimetadataver = new List<IMetadataVersion>();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    MetadataVersionDao _metadataversion = new MetadataVersionDao();
                    // MetadataVersionDao dao = new MetadataVersionDao();
                    string dat = "1/1/1753 12:00:00 AM";

                    if (metadataID == 0)
                    {
                        string qry = "Select isnull(max(ID),0)  + 1 as ID from mm_MetadataVersion";
                        var result = tx.PersistenceManager.MetadataRepository.ExecuteQuery(qry.ToString()).Cast<Hashtable>().ToList();
                        _metadataversion.ID = Convert.ToInt32(result[0]["ID"]);
                        _metadataversion.State = 2;
                        _metadataversion.StartDate = DateTime.Now;
                        _metadataversion.EndDate = Convert.ToDateTime(dat);
                    }
                    else
                    {
                        _metadataversion = tx.PersistenceManager.MetadataRepository.Get<MetadataVersionDao>(metadataID);

                        _metadataversion.ID = metadataID;
                        _metadataversion.State = _metadataversion.State;
                        _metadataversion.StartDate = _metadataversion.StartDate;
                        _metadataversion.EndDate = _metadataversion.EndDate;
                    }
                    _metadataversion.Name = metdataName;
                    _metadataversion.Description = metadataDescription;

                    tx.PersistenceManager.MetadataRepository.Save<MetadataVersionDao>(_metadataversion);
                    //====================================> Extract the selected metadata version xml to future metadata xml <========================

                    if (metadataID == 0)
                    {
                        string xmlVersionpath = "";
                        string xmlfuturepath = "";
                        string xmlfutureSynctoDBpath = "";
                        string mappingfilesPath = "";
                        if (selectedMetadataVer == 0)
                        {
                            mappingfilesPath = AppDomain.CurrentDomain.BaseDirectory;
                            xmlVersionpath = mappingfilesPath + "MetadataXML\\InitialWorkingXML.xml";
                        }
                        else
                        {
                            xmlVersionpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(selectedMetadataVer);
                        }
                        xmlfuturepath = tx.PersistenceManager.MetadataRepository.GetXmlWorkingPath(IsCurrentVersion: false);
                        XDocument futuremetadataXml = XDocument.Load(xmlfuturepath);
                        futuremetadataXml.Root.RemoveAll();
                        System.IO.File.Copy(xmlVersionpath, xmlfuturepath, true);
                        //==========================> Get future sysnctoDB path and delete the content
                        xmlfutureSynctoDBpath = tx.PersistenceManager.MetadataRepository.GetSynchXMLPath(IsCurrentVersion: false);
                        XDocument deletefutureSyncXml = XDocument.Load(xmlfutureSynctoDBpath);
                        deletefutureSyncXml.Root.RemoveAll();
                        deletefutureSyncXml.Save(xmlfutureSynctoDBpath);
                    }
                    tx.Commit();
                    return _metadataversion.ID;
                }
            }

            catch (Exception ex)
            {
                return 0;
            }
        }



        public string GetXmlWorkingPath()
        {
            string mappingfilesPath = AppDomain.CurrentDomain.BaseDirectory;
            if (!MarcomManagerFactory.viewOldMetadataVersion)
            {
                if (MarcomManagerFactory.IsWorkingWithCurrentWorkingVersion)
                    mappingfilesPath = mappingfilesPath + "MetadataXML" + @"\CurrentMetadataWorking.xml";
                else
                    mappingfilesPath = mappingfilesPath + "MetadataXML" + @"\FutureMetadataWorking.xml";
            }
            else
                mappingfilesPath = mappingfilesPath + "MetadataXML" + @"\MetadataVersion_V" + MarcomManagerFactory.oldMetadataVersionNumber + ".xml";
            if (System.IO.File.Exists(mappingfilesPath))
                return mappingfilesPath;
            else
                return null;
        }

        public string GetSynchXMLPath()
        {
            string mappingfilesPath = AppDomain.CurrentDomain.BaseDirectory;
            if (MarcomManagerFactory.IsWorkingWithCurrentWorkingVersion)
                mappingfilesPath = mappingfilesPath + "MetadataXML" + @"\CurrentSyncDBXML.xml";
            else
                mappingfilesPath = mappingfilesPath + "MetadataXML" + @"\FutureSyncDBXML.xml";
            if (System.IO.File.Exists(mappingfilesPath))
                return mappingfilesPath;
            else
                return null;
        }

        ///GetXMlvaluesfromsysnctoDB
        /// <summary>
        /// Get if any value present or not in the sysnctodb
        /// </summary>
        /// <returns>ilist</returns>
        public int GetXmlNodes_CheckIfValueExistsOrNot(MetadataManagerProxy proxy)
        {
            int resVal = 0;
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                if (System.IO.File.Exists(currentworkingMetadata))
                {
                    XDocument docx = XDocument.Load(currentworkingMetadata);
                    resVal = Convert.ToInt16(docx.Root.Attribute("IsEdited").Value.ToString());
                }
                return resVal;

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        public IList<IEntityType> GetTaskFulfillmentEntityTypes(MetadataManagerProxy proxy)
        {
            IList<IEntityType> listEntityType = new List<IEntityType>();
            string xmlPath = string.Empty;
            int versionNumber = MarcomManagerFactory.ActiveMetadataVersionNumber;
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlWorkingPath(versionNumber);

                    xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(versionNumber);

                    XDocument xDoc = XDocument.Load(xmlPath);
                    IList<EntityTypeDao> entityTypeDao = new List<EntityTypeDao>();
                    IList<EntityTypeAttributeRelationDao> entityTypeRealtionDao = new List<EntityTypeAttributeRelationDao>();
                    if (versionNumber != 0)
                    {
                        //var entityTypeXmlDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath);
                        //var entityTypeRelDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlPath);
                        var entityResult = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath).Join(tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlPath),
                            ent => ent.Id, entr => entr.EntityTypeID, (ent, entr) => new { ent, entr }).Join(tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlPath),
                            entre => entre.entr.AttributeID, at => at.Id, (entre, at) => new { entre, at }).Where(a => a.entre.ent.ModuleID == 3 && a.entre.ent.IsAssociate == false && (EntityTypeList)a.entre.ent.Id != EntityTypeList.UserDetails && (EntityTypeList)a.entre.ent.Id != EntityTypeList.Calender).Select(a => a.entre.ent).ToList().Distinct();
                        //entre => entre.entr.AttributeID, at => at.Id, (entre, at) => new { entre, at }).Where(a => a.at.AttributeTypeID == Convert.ToInt32(AttributesList.Period)).Select(a => a.entre.ent);
                        foreach (var obj in entityResult)
                        {
                            EntityType entityTypeObj = new EntityType();
                            entityTypeObj.Id = obj.Id;
                            entityTypeObj.Caption = obj.Caption;
                            entityTypeObj.Description = obj.Description;
                            entityTypeObj.Category = obj.Category;
                            listEntityType.Add(entityTypeObj);
                        }

                    }
                    //else
                    //{
                    //    entityTypeDao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeDao>();
                    //    entityTypeRealtionDao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeAttributeRelationDao>();
                    //    tx.Commit();
                    //    var entityTypeResult = entityTypeDao.Join(entityTypeRealtionDao, a => a.Id, b => b.EntityTypeID, (ab, bc) => new { ab, bc }).Join
                    //        (tx.PersistenceManager.PlanningRepository.Query<AttributeDao>(), entr => entr.bc.AttributeID, at => at.Id, (entr, at) => new { entr, at }).Where
                    //        (a => a.at.AttributeTypeID == Convert.ToInt32(AttributesList.Period)).Select(a => a.entr.ab);
                    //    //.Where(at => at.bc.AttributeID == 71).Select(a => a.ab);
                    //    foreach (var obj in entityTypeResult)
                    //    {
                    //        EntityType entityTypeObj = new EntityType();
                    //        entityTypeObj.Id = obj.Id;
                    //        entityTypeObj.Caption = obj.Caption;
                    //        entityTypeObj.Description = obj.Description;
                    //        entityTypeObj.Category = obj.Category;
                    //        listEntityType.Add(entityTypeObj);
                    //    }
                    //}
                    return listEntityType;
                }
            }
            catch
            {
                return listEntityType;
            }

        }

        public IList<IEntityType> GettingEntityForRootLevel(MetadataManagerProxy proxy, bool IsRootLevel = true)
        {
            try
            {
                //IList<IEntityTypeHierarchy> listEntities = new List<IEntityTypeHierarchy>();

                string xmlPath = string.Empty;
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                IList<IEntityType> listentity = new List<IEntityType>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    List<int> entitytypepermission = new List<int>();

                    if (IsRootLevel)
                        entitytypepermission = GetEntityTypeAccessPermission(proxy);

                    xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    XDocument xDoc = XDocument.Load(xmlPath);
                    var entityTypeHeirarchyDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath);

                    if (IsRootLevel)
                    {
                        var entityTypeHeirarchyDaoresultObj1 = from itm in entityTypeHeirarchyDao where entitytypepermission.Contains(itm.Id) & itm.IsRootLevel == true select itm;
                        foreach (var entObj in entityTypeHeirarchyDaoresultObj1)
                        {
                            EntityType entity = new EntityType();
                            entity.Id = entObj.Id;
                            entity.Caption = entObj.Caption;
                            entity.ColorCode = entObj.ColorCode;
                            entity.ShortDescription = entObj.ShortDescription;
                            listentity.Add(entity);
                        }
                    }
                    else
                    {
                        var entityTypeHeirarchyDaoresultObj = entityTypeHeirarchyDao.Where(a => a.IsRootLevel == true);
                        foreach (var entObj in entityTypeHeirarchyDaoresultObj)
                        {
                            EntityType entity = new EntityType();
                            entity.Id = entObj.Id;
                            entity.Caption = entObj.Caption;
                            entity.ColorCode = entObj.ColorCode;
                            entity.ShortDescription = entObj.ShortDescription;
                            listentity.Add(entity);
                        }
                    }


                }

                return listentity;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Getting list of EntityHeirarchy based on EntityTypeID
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entityTypeId">The EntityTypeID.</param>
        /// <returns>IList of IEntityHeirarchy</returns>
        public IList<IEntityTypeHierarchy> GettingEntityTypeHierarchyForChildActivityType(MetadataManagerProxy proxy, int entityTypeId)
        {
            try
            {
                IList<IEntityTypeHierarchy> listEntities = new List<IEntityTypeHierarchy>();
                string xmlPath = string.Empty;
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = GetXmlWorkingPath();
                    XDocument xDoc = XDocument.Load(xmlPath);
                    IList<EntityTypeHierarchyDao> entityTypeHeirarchyDao = new List<EntityTypeHierarchyDao>();
                    if (versionNumber == 0)
                    {
                        entityTypeHeirarchyDao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeHierarchyDao>();
                        tx.Commit();
                    }
                    else
                    {
                        entityTypeHeirarchyDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeHierarchyDao>(xmlPath);
                        tx.Commit();
                    }
                    var entityTypeHeirarchyDaoresultObj = entityTypeHeirarchyDao.Where(a => a.ChildActivityTypeID == entityTypeId);
                    foreach (var entObj in entityTypeHeirarchyDaoresultObj)
                    {
                        EntityTypeHierarchy entityTypeHierobj = new EntityTypeHierarchy();
                        entityTypeHierobj.Id = entObj.Id;
                        entityTypeHierobj.ParentActivityTypeID = entObj.ParentActivityTypeID;
                        entityTypeHierobj.ChildActivityTypeID = entObj.ChildActivityTypeID;
                        entityTypeHierobj.SortOrder = entObj.SortOrder;
                        listEntities.Add(entityTypeHierobj);
                    }
                }

                return listEntities;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public IList<IFeature> GetFeaturesForTopNavigation(MetadataManagerProxy proxy)
        {
            try
            {
                IList<IFeature> FeaturesList = new List<IFeature>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    var features = (from tt in tx.PersistenceManager.MetadataRepository.Query<FeatureDao>().ToList() where tt.IsTopNavigation == true select tt).ToList();
                    foreach (var obj in features)
                    {
                        IFeature feature = new Feature();
                        feature.Caption = obj.Caption;
                        feature.Description = obj.Description;
                        feature.Id = obj.Id;
                        feature.ModuleID = obj.ModuleID;
                        feature.IsEnable = obj.IsEnable;
                        feature.IsTopNavigation = obj.IsTopNavigation;
                        FeaturesList.Add(feature);
                    }
                }
                return FeaturesList;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public IList<INavigation> GetUserEnabledNavigations(MetadataManagerProxy proxy)
        {

            try
            {
                IList<NavigationDao> navigationdao;
                IList<INavigation> usernavigation = new List<INavigation>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    navigationdao = tx.PersistenceManager.CommonRepository.GetAll<NavigationDao>();

                    var applicableNavigation = (from access in proxy.MarcomManager.User.ListOfUserGlobalRoles
                                                join navs in navigationdao
                                                    on access.Moduleid equals navs.Moduleid
                                                where access.Featureid == navs.Featureid
                                                select navs).ToList();
                    foreach (var obj in applicableNavigation.Distinct())
                    {
                        INavigation nav = new Navigation();
                        nav.Id = obj.Id;
                        nav.Typeid = obj.Typeid;
                        nav.Caption = obj.Caption;
                        nav.Featureid = obj.Featureid;
                        nav.Moduleid = obj.Moduleid;
                        usernavigation.Add(nav);
                    }
                    return usernavigation;
                }
                return null;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Gets the entitytype relation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="version">The version.</param>
        /// <returns>List of IEntityTypeAttributeRelationWithLevels</returns>
        public IList<IAttribute> GetAttributeRelationByIDs(MetadataManagerProxy proxy, string ids)
        {
            try
            {
                IList<IAttribute> attributesWithValues = new List<IAttribute>();
                AttributeDao dao = new AttributeDao();
                IAttribute attributeObj;

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    int[] nums = System.Array.ConvertAll(ids.Split(','), int.Parse);

                    string xmlpath = GetXmlWorkingPath();
                    var attributesdetails = (from item in tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlpath) where nums.Contains(item.Id) select item).ToList();

                    foreach (var val in attributesdetails)
                    {
                        AttributesList attypeid = (AttributesList)val.AttributeTypeID;
                        switch (attypeid)
                        {
                            case AttributesList.ListSingleSelection:
                                attributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                                attributeObj.Id = val.Id;
                                attributeObj.AttributeTypeID = val.AttributeTypeID;
                                attributeObj.Caption = val.Caption.Trim();
                                attributeObj.Level = 0;
                                attributesWithValues.Add(attributeObj);
                                break;
                            case AttributesList.ListMultiSelection:
                                attributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                                attributeObj.Id = val.Id;
                                attributeObj.AttributeTypeID = val.AttributeTypeID;
                                attributeObj.Caption = val.Caption.Trim();
                                attributeObj.Level = 0;
                                attributesWithValues.Add(attributeObj);
                                break;

                            case AttributesList.DropDownTree:
                                attributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                                var treeLevelList = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).Where(a => a.AttributeID == val.Id).ToList();
                                foreach (var levelObj in treeLevelList)
                                {
                                    attributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                                    attributeObj.Id = val.Id;
                                    attributeObj.AttributeTypeID = val.AttributeTypeID;
                                    attributeObj.Caption = levelObj.LevelName;
                                    attributeObj.Level = levelObj.Level;
                                    attributesWithValues.Add(attributeObj);
                                }

                                break;

                            case AttributesList.TreeMultiSelection:
                                attributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                                var treeMultiselectList = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).Where(a => a.AttributeID == val.Id).ToList();
                                foreach (var levelObj in treeMultiselectList)
                                {
                                    attributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                                    attributeObj.Id = val.Id;
                                    attributeObj.AttributeTypeID = val.AttributeTypeID;
                                    attributeObj.Caption = levelObj.LevelName;
                                    attributeObj.Level = levelObj.Level;
                                    attributesWithValues.Add(attributeObj);
                                }

                                break;
                            case AttributesList.Tree:
                                attributeObj = new BrandSystems.Marcom.Core.Metadata.Attribute();
                                attributeObj.Id = val.Id;
                                attributeObj.AttributeTypeID = val.AttributeTypeID;
                                attributeObj.Caption = val.Caption.Trim();
                                attributeObj.Level = -1;
                                attributesWithValues.Add(attributeObj);
                                break;

                            default:

                                break;
                        }
                    }

                }
                return attributesWithValues;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Creates the entitytyperelation.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <param name="entitytypeId">The entitytype id.</param>
        /// <param name="attributeId">The attribute id.</param>
        /// <param name="validationId">The validation id.</param>
        /// <param name="sortOrder">The sort order.</param>
        /// <returns>int .</returns>
        public int InsertUpdateAttributeToAttributeRelations(MetadataManagerProxy proxy, int entitytypeId, int attributetypeID, int attributeId, int attributeOptionID, int attributeLevel, string attributeRelationID, int ID = 0)
        {

            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                int AttributeToAttributeRelations_MaxID = 0;
                if (ID == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR AttributeToAttributeRelations_MaxID AS AttributeToAttributeRelations_MaxID";
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        AttributeToAttributeRelations_MaxID = Convert.ToInt32(sequenceNoVal[0]["AttributeToAttributeRelations_MaxID"]);
                    }
                }

                AttributeToAttributeRelationsDao obj = new AttributeToAttributeRelationsDao(ID, entitytypeId, attributetypeID, attributeId, attributeOptionID, attributeLevel, attributeRelationID);

                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<AttributeToAttributeRelationsDao>(GetXmlWorkingPath(), obj, AttributeToAttributeRelations_MaxID);
                SavetoSynDBXml(SavedXML, "AttributeToAttributeRelations", GetSynchXMLPath(), ID);
                //}
                return AttributeToAttributeRelations_MaxID;
            }

            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;

            }
            return 0;
        }

        /// <summary>
        /// Deletes the entity attributetoattributerelation.
        /// </summary>
        /// <param name="entitytypeid">The entitytypeid.</param>
        /// <returns>bool</returns>
        public bool DeleteAttributeToAttributeRelation(MetadataManagerProxy proxy, int entityID)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                AttributeToAttributeRelationsDao obj = new AttributeToAttributeRelationsDao();
                obj.EntityTypeID = entityID;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeToAttributeRelationsDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeToAttributeRelationsDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }

        }


        /// <summary>
        /// Gets the Get Attribute To AttributeRelation.
        /// </summary>
        /// <param name="version">The version.</param>
        /// <returns>List of GetAttributeRelationByIDs</returns>
        public IList<IAttributeToAttributeRelations> GetAttributeToAttributeRelationsByID(MetadataManagerProxy proxy, int entityId)
        {
            try
            {
                IList<IAttributeToAttributeRelations> _iiAttrToAttrRel = new List<IAttributeToAttributeRelations>();
                IList<AttributeToAttributeRelationsDao> dao = new List<AttributeToAttributeRelationsDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    string xmlpath = GetXmlWorkingPath();
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeToAttributeRelationsDao>(xmlpath).Where(a => a.EntityTypeID == entityId).Select(a => a).ToList();

                    foreach (var itm in dao)
                    {
                        IAttributeToAttributeRelations _iAttrToAttrRel = new BrandSystems.Marcom.Core.Metadata.AttributeToAttributeRelations();
                        _iAttrToAttrRel.EntityTypeID = itm.EntityTypeID;
                        _iAttrToAttrRel.AttributeID = itm.AttributeID;
                        _iAttrToAttrRel.AttributeTypeID = itm.AttributeTypeID;
                        _iAttrToAttrRel.AttributeLevel = itm.AttributeLevel;
                        _iAttrToAttrRel.AttributeOptionID = itm.AttributeOptionID;
                        _iAttrToAttrRel.AttributeRelationID = itm.AttributeRelationID;
                        _iAttrToAttrRel.ID = itm.ID;
                        _iiAttrToAttrRel.Add(_iAttrToAttrRel);
                    }
                }
                return _iiAttrToAttrRel;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<IAttributeToAttributeRelations> GetAttributeToAttributeRelationsByIDForEntity(MetadataManagerProxy proxy, int entityTypeID, int entityId = 0)
        {
            try
            {
                IList<IAttributeToAttributeRelations> _iiAttrToAttrRel = new List<IAttributeToAttributeRelations>();
                IList<AttributeToAttributeRelationsDao> dao = new List<AttributeToAttributeRelationsDao>();
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                string xmlpath = "";
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (entityId > 0)
                    {
                        var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                         where item.Id == entityId
                                         select item).FirstOrDefault();

                        xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeToAttributeRelationsDao>(xmlpath).Where(a => a.EntityTypeID == entityObj.Typeid).Select(a => a).ToList();
                    }
                    else
                    {
                        xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeToAttributeRelationsDao>(xmlpath).Where(a => a.EntityTypeID == entityTypeID).Select(a => a).ToList();
                    }

                    foreach (var itm in dao)
                    {
                        //IAttributeToAttributeRelations _iAttrToAttrRel = new BrandSystems.Marcom.Core.Metadata.AttributeToAttributeRelations();
                        //_iAttrToAttrRel.EntityTypeID = itm.EntityTypeID;
                        //_iAttrToAttrRel.AttributeID = itm.AttributeID;
                        //_iAttrToAttrRel.AttributeTypeID = itm.AttributeTypeID;
                        //_iAttrToAttrRel.AttributeLevel = itm.AttributeLevel;
                        //_iAttrToAttrRel.AttributeOptionID = itm.AttributeOptionID;
                        //_iAttrToAttrRel.AttributeRelationID = itm.AttributeRelationID;
                        //_iAttrToAttrRel.ID = itm.ID;

                        _iiAttrToAttrRel.Add(new AttributeToAttributeRelations { EntityTypeID = itm.EntityTypeID, AttributeID = itm.AttributeID, AttributeTypeID = itm.AttributeTypeID, AttributeLevel = itm.AttributeLevel, AttributeOptionID = itm.AttributeOptionID, AttributeRelationID = itm.AttributeRelationID });

                        //_iiAttrToAttrRel.Add(_iAttrToAttrRel);

                    }
                }
                return _iiAttrToAttrRel;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<IOption> GetAttributeOptionsInAttrToAttrRelations(MetadataManagerProxy proxy, int attributeId, int attributeLevel = 0)
        {
            IList<IOption> listAttributeoptions = new List<IOption>();
            string xmlPath = string.Empty;
            int versionNumber = MarcomManagerFactory.ActiveMetadataVersionNumber;
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                xmlPath = GetXmlWorkingPath();

                IList<AttributeDao> attributeDao = new List<AttributeDao>();
                IList<OptionDao> attributesOptionsDao = new List<OptionDao>();

                var optionXmlResult = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlPath).Join
                       (tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlPath),
                       atr => atr.Id, opt => opt.AttributeID, (atr, opt) => new { atr, opt }).Where(a => a.atr.Id == attributeId).Select(a => a.opt);
                if (attributeLevel > 0)
                {
                    var treeXmlNodeResult = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlPath).Where
                        (a => (a.Level == attributeLevel) && a.AttributeID == attributeId).ToList();
                    foreach (var nodeObj in treeXmlNodeResult)
                    {
                        Option fullfillattributeOptionObj = new Option();
                        fullfillattributeOptionObj.Id = nodeObj.Id;
                        fullfillattributeOptionObj.Caption = nodeObj.Caption;
                        fullfillattributeOptionObj.AttributeID = attributeId;
                        listAttributeoptions.Add(fullfillattributeOptionObj);
                    }
                }
                else if (attributeLevel == -1)
                {
                    var treeXmlNodeResult = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlPath).Where(a => a.AttributeID == attributeId).ToList();
                    foreach (var nodeObj in treeXmlNodeResult)
                    {
                        Option fullfillattributeOptionObj = new Option();
                        fullfillattributeOptionObj.Id = nodeObj.Id;
                        fullfillattributeOptionObj.Caption = nodeObj.Caption;
                        fullfillattributeOptionObj.AttributeID = attributeId;
                        listAttributeoptions.Add(fullfillattributeOptionObj);
                    }
                }
                else
                {
                    foreach (var obj in optionXmlResult)
                    {
                        Option fullfillattributeOptionObj = new Option();
                        fullfillattributeOptionObj.Id = obj.Id;
                        fullfillattributeOptionObj.Caption = obj.Caption;
                        fullfillattributeOptionObj.AttributeID = obj.AttributeID;
                        listAttributeoptions.Add(fullfillattributeOptionObj);
                    }
                }

                tx.Commit();
                return listAttributeoptions;
            }
        }

        public int InsertUpdateEntityTypeStatusOption(MetadataManagerProxy metadataManagerProxy, int EntityTypeID, string Option, int SortOrder, int ID)
        {

            try
            {
                metadataManagerProxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                IEntityTypeStatusOptions istatusoption = new EntityTypeStatusOptions();
                istatusoption.EntityTypeID = EntityTypeID;
                istatusoption.StatusOptions = Option;
                istatusoption.SortOrder = SortOrder;
                int StatusOption_MaxID = 0;

                if (ID == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR EntityStatusOption_MaxID AS EntityStatusOption_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        StatusOption_MaxID = Convert.ToInt32(sequenceNoVal[0]["EntityStatusOption_MaxID"]);
                        istatusoption.ID = StatusOption_MaxID;
                    }
                }
                else
                {
                    istatusoption.ID = ID;
                    StatusOption_MaxID = ID;
                }
                EntityTypeStatusOptionsDao obj = new EntityTypeStatusOptionsDao(istatusoption.ID, EntityTypeID, Option, SortOrder, false);

                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<EntityTypeStatusOptionsDao>(GetXmlWorkingPath(), obj, StatusOption_MaxID);
                SavetoSynDBXml(SavedXML, "EntityTypeStatus_Options", GetSynchXMLPath(), ID);

                return StatusOption_MaxID;

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }


        public int InsertUpdateDamTypeFileExtensionOption(MetadataManagerProxy metadataManagerProxy, int EntityTypeID, string Option, int SortOrder, int ID)
        {

            try
            {
                metadataManagerProxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                IDamTypeFileExtension iextensionoption = new DamTypeFileExtension();
                iextensionoption.EntityTypeID = EntityTypeID;
                iextensionoption.ExtensionOptions = Option;
                iextensionoption.SortOrder = SortOrder;
                int ExtensionOption_MaxID = 0;

                if (ID == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR DamTypeFileExtensionOption_MaxID AS DamTypeFileExtensionOption_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        ExtensionOption_MaxID = Convert.ToInt32(sequenceNoVal[0]["DamTypeFileExtensionOption_MaxID"]);
                        iextensionoption.ID = ExtensionOption_MaxID;
                    }
                }
                else
                {
                    iextensionoption.ID = ID;
                    ExtensionOption_MaxID = ID;
                }
                DamTypeFileExtensionDao obj = new DamTypeFileExtensionDao(iextensionoption.ID, EntityTypeID, Option, SortOrder, false);

                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<DamTypeFileExtensionDao>(GetXmlWorkingPath(), obj, ExtensionOption_MaxID);
                SavetoSynDBXml(SavedXML, "DamTypeFileExtension_Options", GetSynchXMLPath(), ID);

                return ExtensionOption_MaxID;

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        public IList<IEntityTypeStatusOptions> GetEntityStatusOptions(MetadataManagerProxy proxy, int EntityTypeID)
        {
            try
            {

                IList<IEntityTypeStatusOptions> _iientitystatusoptions = new List<IEntityTypeStatusOptions>();
                string xmlPath = string.Empty;
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = GetXmlWorkingPath();
                    XDocument xDoc = XDocument.Load(xmlPath);
                    IList<EntityTypeStatusOptionsDao> dao = new List<EntityTypeStatusOptionsDao>();
                    if (versionNumber == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeStatusOptionsDao>();
                        tx.Commit();
                    }
                    else
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeStatusOptionsDao>(xmlPath);
                        tx.Commit();
                    }
                    var entityoptionstatus = dao.Where(a => a.EntityTypeID == EntityTypeID).OrderBy(a => a.SortOrder);
                    foreach (var item in entityoptionstatus)
                    {
                        EntityTypeStatusOptions entitystatus = new EntityTypeStatusOptions();
                        entitystatus.ID = item.ID;
                        entitystatus.EntityTypeID = item.EntityTypeID;
                        entitystatus.StatusOptions = item.StatusOptions;
                        entitystatus.IsDeleted = false;
                        entitystatus.SortOrder = item.SortOrder;
                        _iientitystatusoptions.Add(entitystatus);
                    }
                }
                if (_iientitystatusoptions.Count() > 0)
                    return _iientitystatusoptions;
                else
                    return null;

            }
            catch
            {

                return null;
            }
        }

        public IList<IDamTypeFileExtension> GetDamTypeFileExtensionOptions(MetadataManagerProxy proxy, int EntityTypeID)
        {
            try
            {

                IList<IDamTypeFileExtension> _iientitystatusoptions = new List<IDamTypeFileExtension>();
                string xmlPath = string.Empty;
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = GetXmlWorkingPath();
                    XDocument xDoc = XDocument.Load(xmlPath);
                    IList<DamTypeFileExtensionDao> dao = new List<DamTypeFileExtensionDao>();
                    if (versionNumber == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<DamTypeFileExtensionDao>();
                        tx.Commit();
                    }
                    else
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<DamTypeFileExtensionDao>(xmlPath);
                        tx.Commit();
                    }
                    var entityoptionstatus = dao.Where(a => a.EntityTypeID == EntityTypeID).OrderBy(a => a.SortOrder);
                    foreach (var item in entityoptionstatus)
                    {
                        DamTypeFileExtension entitystatus = new DamTypeFileExtension();
                        entitystatus.ID = item.ID;
                        entitystatus.EntityTypeID = item.EntityTypeID;
                        entitystatus.ExtensionOptions = item.ExtensionOptions;
                        entitystatus.IsDeleted = false;
                        entitystatus.SortOrder = item.SortOrder;
                        _iientitystatusoptions.Add(entitystatus);
                    }
                }
                if (_iientitystatusoptions.Count() > 0)
                    return _iientitystatusoptions;
                else
                    return null;

            }
            catch
            {

                return null;
            }
        }

        public IList<IDamTypeFileExtension> GetAllDamTypeFileExtensionOptions(MetadataManagerProxy proxy)
        {
            try
            {

                IList<IDamTypeFileExtension> _iientitystatusoptions = new List<IDamTypeFileExtension>();
                string xmlPath = string.Empty;
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = GetXmlWorkingPath();
                    XDocument xDoc = XDocument.Load(xmlPath);
                    IList<DamTypeFileExtensionDao> dao = new List<DamTypeFileExtensionDao>();
                    if (versionNumber == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<DamTypeFileExtensionDao>();
                        tx.Commit();
                    }
                    else
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<DamTypeFileExtensionDao>(xmlPath);
                        tx.Commit();
                    }
                    var entityoptionstatus = dao.OrderBy(a => a.SortOrder);
                    foreach (var item in entityoptionstatus)
                    {
                        DamTypeFileExtension entitystatus = new DamTypeFileExtension();
                        entitystatus.ID = item.ID;
                        entitystatus.EntityTypeID = item.EntityTypeID;
                        entitystatus.ExtensionOptions = item.ExtensionOptions;
                        entitystatus.IsDeleted = false;
                        entitystatus.SortOrder = item.SortOrder;
                        _iientitystatusoptions.Add(entitystatus);
                    }
                }
                if (_iientitystatusoptions.Count() > 0)
                    return _iientitystatusoptions;
                else
                    return null;

            }
            catch
            {

                return null;
            }
        }
        public bool DeleteEntityTypeStatusOptions(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                EntityTypeStatusOptionsDao obj = new EntityTypeStatusOptionsDao();
                obj.ID = ID;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeStatusOptionsDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeStatusOptionsDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }



        public bool DeleteDamTypeFileExtensionOptions(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                DamTypeFileExtensionDao obj = new DamTypeFileExtensionDao();
                obj.ID = ID;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<DamTypeFileExtensionDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<DamTypeFileExtensionDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        /// <summary>
        /// Get the entity type status
        /// </summary>
        /// <param name="entityTypeID"></param>
        /// <param name="isAdmin"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        public IList<IEntityTypeStatusOptions> GetEntityStatus(MetadataManagerProxy proxy, int entityTypeID, bool isAdmin, int entityId = 0)
        {
            string xmlPath = string.Empty;
            IList<IEntityTypeStatusOptions> _iiEntityTypeStatus = new List<IEntityTypeStatusOptions>();
            IList<EntityTypeStatusOptionsDao> dao = new List<EntityTypeStatusOptionsDao>();
            int tempentitTypeID = 0;

            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                if (isAdmin == true)
                {
                    xmlPath = GetXmlWorkingPath();
                    IList<EntityTypeStatusOptionsDao> attributeDao = new List<EntityTypeStatusOptionsDao>();
                    tempentitTypeID = entityTypeID;
                }
                else
                {
                    if (entityId != 0)
                    {
                        var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                         where item.Id == entityId
                                         select item).FirstOrDefault();

                        xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                        tempentitTypeID = entityObj.Typeid;
                    }
                    else
                    {
                        int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                        xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                        tempentitTypeID = entityTypeID;
                    }
                }

                dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeStatusOptionsDao>(xmlPath).Where(a => a.EntityTypeID == tempentitTypeID && a.IsRemoved == false).OrderBy(a => a.SortOrder).Select(a => a).ToList();


                foreach (var itm in dao)
                {
                    //IEntityTypeStatusOptions _ientityTypeStatus = new BrandSystems.Marcom.Core.Metadata.EntityTypeStatusOptions();
                    //_ientityTypeStatus.ID = itm.ID;
                    //_ientityTypeStatus.EntityTypeID = dao[0].EntityTypeID;
                    //_ientityTypeStatus.StatusOptions = itm.StatusOptions;
                    //_iiEntityTypeStatus.Add(_ientityTypeStatus);
                    _iiEntityTypeStatus.Add(new EntityTypeStatusOptions { ID = itm.ID, EntityTypeID = dao[0].EntityTypeID, StatusOptions = itm.StatusOptions });
                }
                tx.Commit();
                return _iiEntityTypeStatus;
            }
        }

        //public IList<IDamTypeFileExtension> GetDamTypeFileExtension(MetadataManagerProxy proxy, int entityTypeID, bool isAdmin, int entityId = 0)
        //{
        //    string xmlPath = string.Empty;
        //    IList<IDamTypeFileExtension> _iiEntityTypeStatus = new List<IDamTypeFileExtension>();
        //    IList<DamTypeFileExtensionDao> dao = new List<DamTypeFileExtensionDao>();
        //    int tempentitTypeID = 0;

        //    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
        //    {
        //        if (isAdmin == true)
        //        {
        //            xmlPath = GetXmlWorkingPath();
        //            IList<DamTypeFileExtensionDao> attributeDao = new List<DamTypeFileExtensionDao>();
        //            tempentitTypeID = entityTypeID;
        //        }
        //        else
        //        {
        //            if (entityId != 0)
        //            {
        //                //need towork karthi
        //                var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
        //                                 where item.Id == entityId
        //                                 select item).FirstOrDefault();

        //                xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
        //                tempentitTypeID = entityObj.Typeid;
        //            }
        //            else
        //            {
        //                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
        //                xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
        //                tempentitTypeID = entityTypeID;
        //            }
        //        }

        //        dao = tx.PersistenceManager.MetadataRepository.GetObject<DamTypeFileExtensionDao>(xmlPath).Where(a => a.EntityTypeID == tempentitTypeID && a.IsRemoved == false).OrderBy(a => a.SortOrder).Select(a => a).ToList();


        //        foreach (var itm in dao)
        //        {
        //            //IEntityTypeStatusOptions _ientityTypeStatus = new BrandSystems.Marcom.Core.Metadata.EntityTypeStatusOptions();
        //            //_ientityTypeStatus.ID = itm.ID;
        //            //_ientityTypeStatus.EntityTypeID = dao[0].EntityTypeID;
        //            //_ientityTypeStatus.StatusOptions = itm.StatusOptions;
        //            //_iiEntityTypeStatus.Add(_ientityTypeStatus);
        //            _iiEntityTypeStatus.Add(new DamTypeFileExtensionDao { ID = itm.ID, EntityTypeID = dao[0].EntityTypeID, ExtensionOptions = itm.ExtensionOptions });
        //        }
        //        tx.Commit();
        //        return _iiEntityTypeStatus;
        //    }
        //}

        public IList<IEntityType> RootLevelEntityTypeHierarchy(MetadataManagerProxy proxy)
        {
            try
            {
                IList<IEntityTypeHierarchy> listEntities = new List<IEntityTypeHierarchy>();
                string xmlPath = string.Empty;
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                IList<IEntityType> listentity = new List<IEntityType>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    XDocument xDoc = XDocument.Load(xmlPath);
                    var entityTypeHeirarchyDaoresultObj = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeHierarchyDao>(xmlPath).GroupBy(p => p.ParentActivityTypeID).Select(g => g.First()).ToList();
                    if (entityTypeHeirarchyDaoresultObj.Count > 0)
                    {
                        foreach (var entObj in entityTypeHeirarchyDaoresultObj)
                        {
                            EntityTypeHierarchy entityTypeHierobj = new EntityTypeHierarchy();
                            entityTypeHierobj.Id = entObj.Id;
                            entityTypeHierobj.ParentActivityTypeID = entObj.ParentActivityTypeID;
                            entityTypeHierobj.ChildActivityTypeID = entObj.ChildActivityTypeID;
                            entityTypeHierobj.SortOrder = entObj.SortOrder;
                            listEntities.Add(entityTypeHierobj);
                        }

                        var EntityType = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath);
                        foreach (var item in listEntities)
                        {
                            var entitytypeobj = EntityType.Where(a => a.Id == item.ParentActivityTypeID);
                            EntityType entity = new EntityType();
                            entity.Caption = entitytypeobj.ElementAt(0).Caption;
                            entity.Id = entitytypeobj.ElementAt(0).Id;
                            entity.ColorCode = entitytypeobj.ElementAt(0).ColorCode;
                            entity.ShortDescription = entitytypeobj.ElementAt(0).ShortDescription;
                            listentity.Add(entity);
                        }

                    }
                    return listentity;
                }


            }
            catch
            {
                throw;
            }
        }


        public IList<IEntityType> ChildEntityTypeHierarchy(MetadataManagerProxy proxy)
        {
            try
            {
                IList<IEntityTypeHierarchy> listEntities = new List<IEntityTypeHierarchy>();
                string xmlPath = string.Empty;
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                IList<IEntityType> listentity = new List<IEntityType>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    XDocument xDoc = XDocument.Load(xmlPath);
                    var entityTypeHeirarchyDaoresultObjCollection = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeHierarchyDao>(xmlPath).ToList();
                    var entityTypeHeirarchyDaoresultObj = entityTypeHeirarchyDaoresultObjCollection.GroupBy(p => p.ParentActivityTypeID).Select(g => g.First()).ToList();

                    StringBuilder str = new StringBuilder();
                    str.Append("SELECT ageta.EntityTypeID, ageta.AccessPermission ");
                    str.Append("FROM   AM_GlobalEntityTypeAcl ageta INNER JOIN MM_Module mm ON  mm.ID = ageta.ModuleID ");
                    str.Append("AND mm.IsEnable = 1 INNER JOIN MM_EntityType met ON  met.ID = ageta.EntityTypeID ");
                    str.Append("WHERE mm.ID = " + (int)Modules.Planning + "  AND  ageta.GlobalRoleID IN (SELECT GlobalRoleID FROM   AM_GlobalRole_User WHERE  UserId = " + proxy.MarcomManager.User.Id + ") ");

                    var entityTypeAccess = tx.PersistenceManager.MetadataRepository.ExecuteQuery(str.ToString()).Cast<Hashtable>().ToList();

                    if (entityTypeHeirarchyDaoresultObj.Count > 0)
                    {
                        foreach (var entObj in entityTypeHeirarchyDaoresultObj)
                        {
                            EntityTypeHierarchy entityTypeHierobj = new EntityTypeHierarchy();
                            entityTypeHierobj.Id = entObj.Id;
                            entityTypeHierobj.ParentActivityTypeID = entObj.ParentActivityTypeID;
                            entityTypeHierobj.ChildActivityTypeID = entObj.ChildActivityTypeID;
                            entityTypeHierobj.SortOrder = entObj.SortOrder;
                            listEntities.Add(entityTypeHierobj);
                        }
                        var EntityType = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath);

                        foreach (var item in listEntities)
                        {
                            var childColl = entityTypeHeirarchyDaoresultObjCollection.Where(a => a.ParentActivityTypeID == item.ParentActivityTypeID);
                            foreach (var val in childColl)
                            {
                                var entitytypeobj = EntityType.Where(a => a.Id == val.ChildActivityTypeID);

                                var isEntityAccess = entityTypeAccess.Where(b => (int)b["EntityTypeID"] == val.ChildActivityTypeID).Select(a => (bool)a["AccessPermission"]).ToList();

                                if (entitytypeobj.Count() > 0)
                                {
                                    EntityType entity = new EntityType();
                                    entity.Caption = entitytypeobj.ElementAt(0).Caption;
                                    entity.Id = entitytypeobj.ElementAt(0).Id;
                                    entity.ColorCode = entitytypeobj.ElementAt(0).ColorCode;
                                    entity.ShortDescription = entitytypeobj.ElementAt(0).ShortDescription;
                                    entity.ParentTypeId = item.ParentActivityTypeID;
                                    if (isEntityAccess.Count > 0)
                                        entity.EntityTypeAccessIsEnabled = true;
                                    else
                                        entity.EntityTypeAccessIsEnabled = false;
                                    listentity.Add(entity);
                                }
                            }
                        }
                    }
                    return listentity;
                }


            }
            catch
            {
                throw;
            }
        }

        public string GetActiveVersionXmlPath()
        {
            string mappingfilesPath = AppDomain.CurrentDomain.BaseDirectory;
            mappingfilesPath = mappingfilesPath + "MetadataXML" + @"\MetadataVersion_V" + Convert.ToString(MarcomManagerFactory.ActiveMetadataVersionNumber) + ".xml";
            return mappingfilesPath;
        }
        public IList<IOption> GetOptionDetailListByIDOptimised(MetadataManagerProxy proxy, int EntityTypeID, int EntityID)
        {

            try
            {
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                string xmlpath = string.Empty;
                IList<IOption> _iioption = new List<IOption>();
                IList<OptionDao> dao = new List<OptionDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    //xmlpath = GetXmlWorkingPath();
                    //dao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath);

                    //----------------------------------

                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == EntityID
                                     select item).FirstOrDefault();


                    xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath);


                    XDocument docx = XDocument.Load(xmlpath);
                    var rddd = (from EntityAttrRel in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation")
                                join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute") on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) equals Convert.ToInt32(Attr.Element("ID").Value)
                                where Convert.ToInt32(EntityAttrRel.Element("EntityTypeID").Value) == entityObj.Typeid && Convert.ToInt32(EntityAttrRel.Element("ChooseFromParentOnly").Value) == 1
                                select new
                                {
                                    ID = Convert.ToInt16(Attr.Element("ID").Value),
                                    Caption = EntityAttrRel.Element("Caption").Value,
                                    AttributeTypeID = Convert.ToInt16(Attr.Element("AttributeTypeID").Value),
                                    Description = Attr.Element("Description").Value,
                                    IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSystemDefined").Value)),
                                    IsSpecial = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSpecial").Value))
                                }).ToList();
                    var attributesdetails1 = rddd;

                    //----------------------------------
                    //XDocument docx = XDocument.Load(xmlpath);
                    var attributesdetails = (from c in docx.Root.Elements("Attribute_Table").Elements("Attribute")
                                             join attr in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation") on Convert.ToInt32(c.Element("ID").Value) equals Convert.ToInt32(attr.Element("AttributeID").Value)
                                             where Convert.ToInt32(attr.Element("EntityTypeID").Value) == entityObj.Typeid
                                             //.Where(a => a.Element("ID").Value == attributesdetails1.
                                             select new
                                             {
                                                 ID = Convert.ToInt16(c.Element("ID").Value),
                                                 Caption = c.Element("Caption").Value,
                                                 AttributeTypeID = Convert.ToInt16(c.Element("AttributeTypeID").Value),
                                                 Description = c.Element("Description").Value,
                                                 IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(c.Element("IsSystemDefined").Value)),
                                                 IsSpecial = Convert.ToBoolean(Convert.ToInt32(c.Element("IsSpecial").Value))
                                             }).ToList();



                    foreach (var val in attributesdetails)
                    {

                        if (val.IsSpecial == true && val.AttributeTypeID == 3)
                        {
                            SystemDefinedAttributes systemType = (SystemDefinedAttributes)val.ID;

                            switch (systemType)
                            {
                                case SystemDefinedAttributes.Owner:

                                    var memberList = (from item in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() where item.Entityid == EntityID select item).ToList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                                    var entitymembers = memberList.GroupBy(x => x.Userid).Select(x => x.FirstOrDefault()).ToList<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>();
                                    IList<BrandSystems.Marcom.Dal.User.Model.UserDao> listmembers = new List<BrandSystems.Marcom.Dal.User.Model.UserDao>();
                                    for (int i = 0; i < entitymembers.Count(); i++)
                                    {
                                        BrandSystems.Marcom.Core.User.Interface.IEntityUsers entityuser = new BrandSystems.Marcom.Core.User.EntityUsers();

                                        BrandSystems.Marcom.Dal.User.Model.UserDao users = new Dal.User.Model.UserDao();
                                        users = tx.PersistenceManager.MetadataRepository.Get<BrandSystems.Marcom.Dal.User.Model.UserDao>(entitymembers.ElementAt(i).Userid);

                                        if (entitymembers.ElementAt(i).Roleid == 1)
                                        {
                                            entityuser.IsOwner = true;
                                        }
                                        else
                                            entityuser.IsOwner = false;
                                        if (users != null)
                                        {
                                            IOption _ioption = new Option();
                                            _ioption.Caption = users.FirstName + " " + users.LastName;
                                            _ioption.AttributeID = (int)SystemDefinedAttributes.Owner;
                                            _ioption.SortOrder = 0;
                                            _ioption.Id = users.Id;
                                            _iioption.Add(_ioption);
                                        }

                                    }

                                    break;
                            }

                        }
                        else if (val.IsSpecial == false && (val.AttributeTypeID == 3 || val.AttributeTypeID == 4))
                        {
                            if (val.AttributeTypeID == 4 && attributesdetails1.Count > 0)
                            {
                                IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                                entityAttrVal = proxy.MarcomManager.PlanningManager.GetEntityAttributesDetails(entityObj.Parentid);

                                IList<IAttributeData> entityAttrVal1 = new List<IAttributeData>();
                                entityAttrVal1 = entityAttrVal.Where(a => a.ID == val.ID).Select(a => a).ToList();

                                var tempcaption = (dynamic)entityAttrVal1.Where(a => a.ID == val.ID).Select(a => a.Caption).ToList();
                                string[] optioncaptionArr = tempcaption[0].Split(',');

                                for (int i = 0; i < optioncaptionArr.Length; i++)
                                {
                                    IOption _ioption = new Option();
                                    _ioption.Caption = optioncaptionArr[i].ToString();
                                    _ioption.AttributeID = val.ID;
                                    _ioption.SortOrder = 0;
                                    _ioption.Id = entityAttrVal1[0].Value[i];
                                    _iioption.Add(_ioption);
                                }

                            }
                            else if (val.AttributeTypeID == 3 && attributesdetails1.Count > 0)
                            {
                                IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                                entityAttrVal = proxy.MarcomManager.PlanningManager.GetEntityAttributesDetails(entityObj.Parentid);

                                IList<IAttributeData> entityAttrVal1 = new List<IAttributeData>();
                                entityAttrVal1 = entityAttrVal.Where(a => a.ID == val.ID).Select(a => a).ToList();

                                if (entityAttrVal1 != null)
                                {
                                    IOption _ioption = new Option();
                                    _ioption.Caption = entityAttrVal1[0].Caption[0];
                                    _ioption.AttributeID = val.ID;
                                    _ioption.SortOrder = 0;
                                    _ioption.Id = entityAttrVal1[0].Value;
                                    _iioption.Add(_ioption);
                                }
                            }
                            else
                            {
                                var optionresult = dao.Where(a => a.AttributeID == val.ID);
                                foreach (var item in optionresult)
                                {
                                    IOption _ioption = new Option();
                                    _ioption.Caption = item.Caption;
                                    _ioption.AttributeID = item.AttributeID;
                                    _ioption.SortOrder = item.SortOrder;
                                    _ioption.Id = item.Id;
                                    _iioption.Add(_ioption);
                                }
                            }
                        }
                    }

                }
                return _iioption;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public int ReportViewCreationAndPushSchema(MetadataManagerProxy proxy)
        {
            bool dynamicview = false;
            bool dynamicviewAttributeGroup = false;
            int pushresult = -1;
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                try
                {
                    string activeXMLPath = GetActiveVersionXmlPath();


                    dynamicview = SyncToDbCreateDynamicView(tx, activeXMLPath);
                    dynamicviewAttributeGroup = SyncToDbCreateDynamicViewAttributeGroup(tx, activeXMLPath);
                    if (dynamicview && dynamicviewAttributeGroup)
                    {
                        tx.Commit();
                    }
                    else
                    {
                        tx.Rollback();
                    }
                }
                catch (Exception ex)
                {
                    tx.Rollback();
                }

            }

            //using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            //{
            //    try
            //    {
            //        string activeXMLPath = GetActiveVersionXmlPath();


            //        dynamicviewAttributeGroup = SyncToDbCreateDynamicViewAttributeGroup(tx, activeXMLPath);
            //        if (dynamicviewAttributeGroup)
            //        {
            //            tx.Commit();
            //        }
            //        else
            //        {
            //            tx.Rollback();
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        tx.Rollback();
            //    }

            //}
            if (dynamicview && dynamicviewAttributeGroup)
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    try
                    {

                        pushresult = proxy.MarcomManager.ReportManager.pushviewSchema();
                        if (pushresult == 0)
                        {
                            tx.Commit();
                        }
                        else
                        {
                            tx.Rollback();
                        }

                    }
                    catch (Exception ex)
                    {
                        tx.Rollback();
                    }
                }
            }
            return pushresult;
        }

        public IList<IFeature> GetAllModuleFeatures(MetadataManagerProxy proxy, int moduleID)
        {
            IList<IFeature> _iimodulefeature = new List<IFeature>();
            FeatureDao modulefeatures = new FeatureDao();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                //modulefeatures= tx.PersistenceManager.PlanningRepository.Get<ModuleFeatureDao>(ModuleFeatureDao.PropertyNames.Moduleid, moduleID);
                var features = tx.PersistenceManager.PlanningRepository.GetAll<FeatureDao>().Where(a => a.ModuleID == moduleID);

                foreach (var item in features)
                {
                    IFeature _featuress = new Feature();
                    _featuress.Id = item.Id;
                    _featuress.Caption = item.Caption;
                    _featuress.Description = item.Description;
                    _featuress.ModuleID = item.ModuleID;
                    _featuress.IsEnable = item.IsEnable;
                    _featuress.IsTopNavigation = item.IsTopNavigation;
                    _iimodulefeature.Add(_featuress);
                }

            }

            return _iimodulefeature;
        }

        public IAttributeGroupAttributeRelation CreateAttributeRelationInstace()
        {
            return new AttributeGroupAttributeRelation();
        }

        /// <summary>
        /// Insert Or Update the attribute group and attribute relations
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="attributegroupId"></param>
        /// <param name="attributegroupcaption"></param>
        /// <param name="attributegroupdescription"></param>
        /// <param name="ObjattributerelationList"></param>
        /// <returns></returns>
        public int InsertUpdateAttributeGroupAndAttributeRelation(MetadataManagerProxy proxy, int attributegroupId, string attributegroupcaption, string attributegroupdescription, IList<IAttributeGroupAttributeRelation> ObjattributerelationList)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                if (attributegroupId == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR AttributeGroup_MaxID AS AttributeGroup_MaxID";
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        attributegroupId = Convert.ToInt32(sequenceNoVal[0]["AttributeGroup_MaxID"]);
                    }
                }

                AttributeGroupDao obj = new AttributeGroupDao(attributegroupId, attributegroupcaption, attributegroupdescription);
                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<AttributeGroupDao>(GetXmlWorkingPath(), obj, attributegroupId);
                SavetoSynDBXml(SavedXML, "AttributeGroup", GetSynchXMLPath(), attributegroupId);

                if (ObjattributerelationList != null)
                {
                    foreach (var tempobj in ObjattributerelationList)
                    {
                        if (tempobj.ID == 0)
                        {
                            string sequencenumber = "SELECT NEXT VALUE FOR AttributeGroupAttributeRelation_MaxID AS AttributeGroupAttributeRelation_MaxID";
                            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                            {
                                var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                                tempobj.ID = Convert.ToInt32(sequenceNoVal[0]["AttributeGroupAttributeRelation_MaxID"]);
                            }
                        }

                        tempobj.AttributeGroupID = attributegroupId;
                        AttributeGroupAttributeRelationDao objattrRelation = new AttributeGroupAttributeRelationDao(tempobj.ID, tempobj.AttributeGroupID, tempobj.AttributeID, tempobj.Caption, tempobj.SortOrder);
                        XElement SavedattrRelationXML = PersistenceManager.Instance.MetadataRepository.SaveObject<AttributeGroupAttributeRelationDao>(GetXmlWorkingPath(), objattrRelation, tempobj.ID);
                        SavetoSynDBXml(SavedattrRelationXML, "AttributeGroupAttributeRelation", GetSynchXMLPath(), tempobj.ID);
                    }
                }

                return attributegroupId;
            }

            catch (MarcomAccessDeniedException ex)
            {
                return 0;
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
                throw ex;

            }
            return attributegroupId;
        }

        /// <summary>
        /// Gets attribute group
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IAttributeGroup</returns>
        public IList<IAttributeGroup> GetAttributeGroup(MetadataManagerProxy proxy)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string moduleCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IAttributeGroup> _iientitytype = new List<IAttributeGroup>();
                IList<AttributeGroupDao> dao = new List<AttributeGroupDao>();
                string mappingfilesPath = "";

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = GetXmlWorkingPath();
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupDao>(xmlpath);
                    foreach (var item in dao)
                    {
                        IAttributeGroup _ientitytype = new AttributeGroup();
                        _ientitytype.Id = item.Id;
                        _ientitytype.Caption = item.Caption.Trim();
                        _ientitytype.Description = item.Description.Trim();

                        _iientitytype.Add(_ientitytype);
                    }
                    tx.Commit();
                }

                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<IAttributeGroupAttributeRelation> GetAttributeGroupAttributeRelation(MetadataManagerProxy proxy, int attributegroupId)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string moduleCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IAttributeGroupAttributeRelation> _iientitytype = new List<IAttributeGroupAttributeRelation>();
                IList<AttributeGroupAttributeRelationDao> dao = new List<AttributeGroupAttributeRelationDao>();
                string mappingfilesPath = "";

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = GetXmlWorkingPath();
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupAttributeRelationDao>(xmlpath).Where(a => a.AttributeGroupID == attributegroupId).Select(a => a).ToList();
                    foreach (var item in dao)
                    {
                        IAttributeGroupAttributeRelation _ientitytype = new AttributeGroupAttributeRelation();
                        _ientitytype.ID = item.ID;
                        _ientitytype.Caption = item.Caption.Trim();
                        _ientitytype.AttributeGroupID = item.AttributeGroupID;
                        _ientitytype.AttributeID = item.AttributeID;

                        _iientitytype.Add(_ientitytype);
                    }
                    tx.Commit();
                }

                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public int DeleteAttributeGroup(MetadataManagerProxy proxy, int attributegroupid)
        {
            try
            {
                int status = 0;
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    IList<EntityTypeAttributeGroupRelationDao> dao = new List<EntityTypeAttributeGroupRelationDao>();
                    var res = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(GetXmlWorkingPath());
                    if (res != null)
                    {
                        dao = res.Where(a => a.AttributeGroupID == attributegroupid).Select(a => a).ToList();
                        //-----> IF ATTRIBUTE GROUP HAS ANY RELATION IN ENTITY TYPE RETURN FALSE SAYING CAN'T DELETE <--------------
                        if (dao.Count > 0)
                        {
                            return 2;
                        }
                    }

                    AttributeGroupDao attrGroupobj = new AttributeGroupDao(attributegroupid);
                    IList<AttributeGroupAttributeRelationDao> dao1 = new List<AttributeGroupAttributeRelationDao>();
                    dao1 = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupAttributeRelationDao>(GetXmlWorkingPath()).Where(a => a.AttributeGroupID == attributegroupid).Select(a => a).ToList();

                    if (dao1.Count > 0)
                    {
                        foreach (var obj in dao1)
                        {
                            if (PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupAttributeRelationDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupAttributeRelationDao>(GetSynchXMLPath(), obj) == true)
                            {
                                status = 1;
                            }
                            else
                                status = 0;
                        }
                    }
                    else
                        status = 1;

                    if (status == 1)
                    {
                        if (PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupDao>(GetXmlWorkingPath(), attrGroupobj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupDao>(GetSynchXMLPath(), attrGroupobj) == true)
                        {
                            return 1;
                        }
                    }
                }
                return 1;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public int DeleteAttributeGroupAttributeRelation(MetadataManagerProxy proxy, int attributeRelationId)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    AttributeGroupAttributeRelationDao attrRelationobj = new AttributeGroupAttributeRelationDao();
                    attrRelationobj.ID = attributeRelationId;

                    if (PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupAttributeRelationDao>(GetXmlWorkingPath(), attrRelationobj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupAttributeRelationDao>(GetSynchXMLPath(), attrRelationobj) == true)
                    {
                        return 1;
                    }
                    else
                        return 0;
                }
                return 1;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        public int InsertUpdateEntityTypeAttributeGroup(MetadataManagerProxy proxy, IList<IEntityTypeAttributeGroupRelation> ObjattributegroupList, IList<IAttributeGroupRoleAccess> attrgroupaccess, int entitytypeId, string globalaccessids)
        {
            int attributegroupId = 0;
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (ObjattributegroupList != null)
                    {
                        foreach (var tempobj in ObjattributegroupList)
                        {
                            if (tempobj.ID == 0)
                            {
                                string sequencenumber = "SELECT NEXT VALUE FOR [EntityTypeAttributeGroup_MaxID] AS [EntityTypeAttributeGroup_MaxID]";
                                //using(ITransaction tx = proxy.MarcomManager.GetTransaction())
                                //    {
                                var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                                attributegroupId = Convert.ToInt32(sequenceNoVal[0]["EntityTypeAttributeGroup_MaxID"]);
                                //}
                                tempobj.ID = attributegroupId;
                            }
                            tempobj.EntityTypeID = entitytypeId;

                            EntityTypeAttributeGroupRelationDao objattrgrpRelation = new EntityTypeAttributeGroupRelationDao(tempobj.ID, tempobj.AttributeGroupID, tempobj.EntityTypeID, tempobj.Caption, tempobj.LocationType, tempobj.RepresentationType, tempobj.SortOrder);
                            XElement SavedattrRelationXML = PersistenceManager.Instance.MetadataRepository.SaveObject<EntityTypeAttributeGroupRelationDao>(GetXmlWorkingPath(), objattrgrpRelation, tempobj.AttributeGroupID);
                            SavetoSynDBXml(SavedattrRelationXML, "EntityTypeAttributeGroupRelation", GetSynchXMLPath(), tempobj.ID);
                        }
                    }
                    if (attrgroupaccess != null)
                    {
                        foreach (var tempobj1 in attrgroupaccess)
                        {
                            if (tempobj1.ID == 0)
                            {
                                string sequencenumber = "SELECT NEXT VALUE FOR [AttributeGroupRoleAccess_MaxID] AS [AttributeGroupRoleAccess_MaxID]";
                                var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                                tempobj1.ID = Convert.ToInt32(sequenceNoVal[0]["AttributeGroupRoleAccess_MaxID"]);
                            }

                            AttributeGroupRoleAccessDao objcustomtab = new AttributeGroupRoleAccessDao(tempobj1.ID, tempobj1.EntityTypeID, tempobj1.GlobalRoleID, tempobj1.AttributeGroupID);
                            XElement SavedattrcustomtabRelationXML = PersistenceManager.Instance.MetadataRepository.SaveObject<AttributeGroupRoleAccessDao>(GetXmlWorkingPath(), objcustomtab, tempobj1.AttributeGroupID);
                            SavetoSynDBXml(SavedattrcustomtabRelationXML, "AttributeGroupRoleAccess", GetSynchXMLPath(), tempobj1.AttributeGroupID);
                        }
                    }
                }
                return attributegroupId;
            }

            catch (MarcomAccessDeniedException ex)
            {
                return 0;
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
                throw ex;

            }
            return attributegroupId;
        }

        public IEntityTypeAttributeGroupRelation CreateAttributeGroupRelationInstace()
        {
            return new EntityTypeAttributeGroupRelation();
        }


        public List<object> GetEntityTypeAttributeGroupRelation(MetadataManagerProxy proxy, int entitytypeId, int EntityID = 0, int AttributeGroupId = 0)
        {
            try
            {
                string xmlpath = string.Empty;
                IList<EntityTypeAttributeGroupRelationDao> dao = new List<EntityTypeAttributeGroupRelationDao>();
                IList<EntityTypeAttributeGroupRelationDao> dao1 = new List<EntityTypeAttributeGroupRelationDao>();
                IList<AttributeGroupRoleAccessDao> dao2 = new List<AttributeGroupRoleAccessDao>();

                List<object> listAttrGroup = new List<object>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (EntityID != 0)
                    {
                        var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                         where item.Id == EntityID
                                         select item).FirstOrDefault();
                        entitytypeId = entityObj.Typeid;
                        xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    }
                    else
                    {
                        xmlpath = GetXmlWorkingPath();
                    }

                    if (EntityID != 0)
                        dao1 = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(xmlpath).Where(a => a.EntityTypeID == entitytypeId).Select(a => a).OrderByDescending(a => a.LocationType).ToList();
                    else
                    {
                        var res = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupRoleAccessDao>(xmlpath);
                        dao1 = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(xmlpath).Where(a => a.EntityTypeID == entitytypeId).Select(a => a).ToList();
                        if (res != null)
                            dao2 = res.Where(a => a.EntityTypeID == entitytypeId).Select(a => a).ToList();
                    }

                    if (AttributeGroupId != 0)
                    {
                        dao = dao1.Where(a => a.AttributeGroupID == AttributeGroupId).ToList();
                        var grpacc = dao2.Where(a => a.AttributeGroupID == AttributeGroupId).ToList();

                        foreach (var item in dao)
                        {
                            listAttrGroup.Add(new { ID = item.ID, Caption = item.Caption.Trim(), AttributeGroupID = item.AttributeGroupID, LocationType = item.LocationType, RepresentationType = item.RepresentationType, GlobalAccess = grpacc });
                        }
                    }

                    if (AttributeGroupId == 0)
                    {
                        if (EntityID != 0)
                        {
                            string qry = "SELECT COUNT(*) as GroupAccess FROM   AM_Entity_Role_User aeru  inner join AM_EntityTypeRoleAcl aera on aera.ID = aeru.RoleID  WHERE aeru.EntityID = " + EntityID + " AND aeru.UserID = " + proxy.MarcomManager.User.Id + " AND aera.EntityRoleID IN (1,2,8)";
                            var result = tx.PersistenceManager.CommonRepository.ExecuteQuery(qry);

                            int cnt = 0;
                            int IsAccessEmpty = 0;
                            int[] CurrentUserRole = proxy.MarcomManager.User.ListOfUserGlobalRoles.Select(a => a.GlobalRoleid).Distinct().ToArray();
                            var attrRoleAcc = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupRoleAccessDao>(xmlpath);

                            foreach (var item in dao1)
                            {
                                if (attrRoleAcc != null)
                                {
                                    IsAccessEmpty = attrRoleAcc.Where(a => a.EntityTypeID == entitytypeId && a.AttributeGroupID == item.AttributeGroupID).Count();
                                    if (IsAccessEmpty > 0)
                                        cnt = attrRoleAcc.Where(a => a.EntityTypeID == entitytypeId && a.AttributeGroupID == item.AttributeGroupID && CurrentUserRole.Contains(a.GlobalRoleID)).Count();
                                }

                                if ((((int)((System.Collections.Hashtable)(result)[0])["GroupAccess"] > 0 || CurrentUserRole.Contains(1)) || ((int)((System.Collections.Hashtable)(result)[0])["GroupAccess"] <= 0 && (cnt > 0 || attrRoleAcc == null)) || CurrentUserRole.Contains(1)) || (IsAccessEmpty == 0 || CurrentUserRole.Contains(1)))
                                {
                                    listAttrGroup.Add(new { ID = item.ID, Caption = item.Caption.Trim(), AttributeGroupID = item.AttributeGroupID, LocationType = item.LocationType, RepresentationType = item.RepresentationType });
                                }
                            }
                        }
                        else
                        {
                            foreach (var item in dao1)
                            {
                                int[] grpacc = dao2.Where(a => a.AttributeGroupID == item.AttributeGroupID).Select(a => a.GlobalRoleID).ToArray();
                                listAttrGroup.Add(new { ID = item.ID, Caption = item.Caption.Trim(), AttributeGroupID = item.AttributeGroupID, LocationType = item.LocationType, RepresentationType = item.RepresentationType, GlobalAccess = grpacc });
                            }
                        }
                    }
                    tx.Commit();
                }
                return listAttrGroup;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public int DeleteEntityTypeAttributeGroupRelation(MetadataManagerProxy proxy, int attributegroupId)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    EntityTypeAttributeGroupRelationDao attrRelationobj = new EntityTypeAttributeGroupRelationDao();
                    attrRelationobj.ID = attributegroupId;

                    AttributeGroupRoleAccessDao attrgrpAccess = new AttributeGroupRoleAccessDao();
                    attrgrpAccess.EntityTypeID = attributegroupId;

                    if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeGroupRelationDao>(GetXmlWorkingPath(), attrRelationobj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeGroupRelationDao>(GetSynchXMLPath(), attrRelationobj) == true)
                    {
                        if (PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupRoleAccessDao>(GetXmlWorkingPath(), attrgrpAccess) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupRoleAccessDao>(GetSynchXMLPath(), attrgrpAccess) == true)
                        {
                            return 1;
                        }
                        else
                            return 0;
                    }
                    else
                        return 0;
                }
                return 1;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        public IList<IEntityTypeAttributeGroupRelationwithLevels> GetAttributeGroupAttributeOptions(MetadataManagerProxy proxy, int GroupID, int EntityID, int GroupRecordID = 0)
        {

            try
            {
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                string attributeCaption = string.Empty;
                string entitytypeCaption = string.Empty;
                Boolean isSpecial = false;
                string xmlpath = string.Empty;
                IList<IEntityTypeAttributeGroupRelationwithLevels> _iientitytyperelation = new List<IEntityTypeAttributeGroupRelationwithLevels>();
                IList<AttributeGroupAttributeRelationDao> dao = new List<AttributeGroupAttributeRelationDao>();
                IList<EntityTypeAttributeGroupRelationDao> entitygroupdao = new List<EntityTypeAttributeGroupRelationDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeGroupAttributeRelationDao>(xmlpath);
                    entitygroupdao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(xmlpath);
                    var entityattribtuegroup = entitygroupdao.Where(a => a.ID == GroupID);

                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == (int)EntityID
                                     select item).FirstOrDefault();


                    var entityName = GetAttributeGroupTableName(tx, entityattribtuegroup.ElementAt(0).AttributeGroupID, entityObj.Version);
                    var dynamicvalues = tx.PersistenceManager.PlanningRepository.GetAll<AttrGroupDynamicAttributesDao>(entityName).Where(a => a.Id == GroupRecordID).Select(a => a.Attributes).SingleOrDefault();

                    var entityttyperesult = dao.Where(a => a.AttributeGroupID == entityattribtuegroup.ElementAt(0).AttributeGroupID).OrderBy(x => x.SortOrder);

                    var attrIDs = entityttyperesult.Select(a => a.AttributeID).ToList();
                    IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                    entityAttrVal = null;
                    IList<IOption> optionSelection = GetOptionList(proxy, attrIDs);
                    var xDoc = XDocument.Load(xmlpath);

                    List<AttrGroupTreeValueDao> treevaluedao = new List<AttrGroupTreeValueDao>();
                    List<int> treevalues = new List<int>();

                    List<AttrGroupTreeValueDao> multiselecttreevalues = new List<AttrGroupTreeValueDao>();
                    List<int> temptreevalues = new List<int>();

                    foreach (var item in entityttyperesult)
                    {
                        IEntityTypeAttributeGroupRelationwithLevels _ientitytyperelation = new EntityTypeAttributeGroupRelationwithLevels();
                        _ientitytyperelation.ID = item.ID;
                        _ientitytyperelation.AttributeID = item.AttributeID;
                        _ientitytyperelation.AttributeCaption = item.Caption; //Convert.ToString(xDoc.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation").Where(a => Convert.ToInt32(a.Element("AttributeID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.AttributeTypeID = Convert.ToInt32(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("AttributeTypeID").Value).First());
                        _ientitytyperelation.SortOrder = item.SortOrder;
                        _ientitytyperelation.Caption = item.Caption;

                        if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DropDownTree)
                        {
                            treevaluedao = new List<AttrGroupTreeValueDao>();
                            treevaluedao = tx.PersistenceManager.PlanningRepository.Query<AttrGroupTreeValueDao>().Where(a => a.GroupRecordID == GroupRecordID && a.GroupID == item.AttributeGroupID && a.Attributeid == item.AttributeID).OrderBy(a => a.Level).ToList();
                            treevalues = new List<int>();
                            treevalues = (from treevalue in treevaluedao where treevalue.Attributeid == item.AttributeID select treevalue.Nodeid).ToList();
                        }
                        if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TreeMultiSelection)
                        {
                            multiselecttreevalues = new List<AttrGroupTreeValueDao>();
                            multiselecttreevalues = tx.PersistenceManager.PlanningRepository.Query<AttrGroupTreeValueDao>().Where(a => a.GroupRecordID == GroupRecordID && a.GroupID == item.AttributeGroupID && a.Attributeid == item.AttributeID).OrderBy(a => a.Level).ToList();
                            temptreevalues = new List<int>();
                            temptreevalues = (from treevalue in multiselecttreevalues where treevalue.Attributeid == item.AttributeID select treevalue.Nodeid).ToList();
                        }

                        if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TextSingleLine)
                        {
                            _ientitytyperelation.AttributeValue = dynamicvalues == null ? "" : (dynamic)dynamicvalues[item.AttributeID.ToString()];
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TextMultiLine)
                        {
                            _ientitytyperelation.AttributeValue = dynamicvalues == null ? "" : (dynamic)dynamicvalues[item.AttributeID.ToString()];
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DateTime)
                        {
                            if (dynamicvalues == null)
                                _ientitytyperelation.AttributeValue = "";
                            else
                                _ientitytyperelation.AttributeValue = (object)dynamicvalues[item.AttributeID.ToString()] == null ? "" : ((System.DateTime)((object)dynamicvalues[item.AttributeID.ToString()])).Date.Year + "/" + ((System.DateTime)((object)dynamicvalues[item.AttributeID.ToString()])).Date.Month + "/" + ((System.DateTime)((object)dynamicvalues[item.AttributeID.ToString()])).Date.Day;
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DropDownTree)
                        {
                            IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                            var levelList = from level in treeLevels
                                            where level.AttributeID == _ientitytyperelation.AttributeID
                                            select level;
                            _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                            _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);

                            _ientitytyperelation.AttributeValue = treevalues;

                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.ListSingleSelection)
                        {
                            IList<IOption> optionSinglrSelection = (from options in optionSelection
                                                                    where options.AttributeID == _ientitytyperelation.AttributeID
                                                                    select options).OrderBy(a => a.Caption).ToList<IOption>();
                            _ientitytyperelation.Options = optionSinglrSelection.OrderBy(a => a.SortOrder).ToList();
                            _ientitytyperelation.AttributeValue = dynamicvalues == null ? "" : (dynamic)dynamicvalues[item.AttributeID.ToString()];
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.ListMultiSelection)
                        {
                            IList<IOption> optionmultiselection = (from options in optionSelection
                                                                   where options.AttributeID == _ientitytyperelation.AttributeID
                                                                   select options).OrderBy(a => a.SortOrder).ToList<IOption>();
                            _ientitytyperelation.Options = optionmultiselection;

                            var optioncaption = (from objitem in tx.PersistenceManager.PlanningRepository.Query<AttrGroupMultiSelectDao>() where objitem.GroupRecordID == GroupRecordID && objitem.GroupID == item.AttributeGroupID && objitem.Attributeid == item.AttributeID select objitem.Optionid).ToArray();

                            string result = string.Join(",", optioncaption);
                            _ientitytyperelation.AttributeValue = optioncaption;
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TreeMultiSelection)
                        {
                            IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                            var levelList = from level in treeLevels
                                            where level.AttributeID == _ientitytyperelation.AttributeID
                                            select level;
                            _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                            _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);

                            _ientitytyperelation.AttributeValue = temptreevalues;
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.Tree)
                        {
                            _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.Uploader)
                        {
                            _ientitytyperelation.AttributeValue = dynamicvalues == null ? "" : (dynamic)dynamicvalues[item.AttributeID.ToString()];
                        }
                        _iientitytyperelation.Add(_ientitytyperelation);
                    }
                    tx.Commit();
                }
                return _iientitytyperelation;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList GetEntityAttributesGroupValues(MetadataManagerProxy proxy, int entityId, int EntityTypeID, int GroupID, bool IsCmsContent )
        {
            IList resultresponse = new List<object>();
            IList<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel> droplabel;
            IList<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption> itreeCaption = new List<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption>();
            AttributeData attributedate;
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == entityId
                                     select item).FirstOrDefault();
                    bool IsLock = false;

                    if (IsCmsContent == true)
                        IsLock = true;
                    else
                    IsLock = proxy.MarcomManager.PlanningManager.GetLockStatus(entityId).Item1;
                    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    IList<EntityTypeAttributeGroupRelationDao> entitygroupdao = new List<EntityTypeAttributeGroupRelationDao>();
                    entitygroupdao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(xmlpath);
                    var IsListview = entitygroupdao.Where(a => a.ID == GroupID && a.RepresentationType == true).Count();
                    var entityattribtuegroup = entitygroupdao.Where(a => a.ID == GroupID);
                    GroupID = entityattribtuegroup.ElementAt(0).AttributeGroupID;

                    XDocument docx = XDocument.Load(xmlpath);
                    var rddd = (from EntityAttrRel in docx.Root.Elements("AttributeGroupAttributeRelation_Table").Elements("AttributeGroupAttributeRelation")
                                join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute") on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) equals Convert.ToInt32(Attr.Element("ID").Value)
                                where Convert.ToInt32(EntityAttrRel.Element("AttributeGroupID").Value) == GroupID
                                orderby Convert.ToInt32(EntityAttrRel.Element("SortOrder").Value)
                                select new
                                {
                                    ID = Convert.ToInt16(Attr.Element("ID").Value),
                                    Caption = EntityAttrRel.Element("Caption").Value,
                                    AttributeTypeID = Convert.ToInt16(Attr.Element("AttributeTypeID").Value),
                                    Description = Attr.Element("Description").Value,
                                    IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSystemDefined").Value)),
                                    IsSpecial = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSpecial").Value))
                                }).ToList();

                    var attributesdetails = rddd;
                    List<AttrGroupTreeValueDao> treevaluedao = new List<AttrGroupTreeValueDao>();
                    List<int> treevalues = new List<int>();

                    List<AttrGroupTreeValueDao> multiselecttreevalues = new List<AttrGroupTreeValueDao>();
                    List<int> temptreevalues = new List<int>();

                    var entityName = "";
                    if (MarcomManagerFactory.ActiveMetadataVersionNumber == 0)
                        entityName = "AttributeGroup" + GroupID + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    else
                        entityName = "AttributeGroup" + GroupID + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber.ToString();
                    var dynamicvalues = IsListview > 0 ? tx.PersistenceManager.MetadataRepository.GetAll<AttrGroupDynamicAttributesDao>(entityName).Where(a => a.EntityId == entityId).OrderByDescending(a => a.SortOrder) : tx.PersistenceManager.MetadataRepository.GetAll<AttrGroupDynamicAttributesDao>(entityName).Where(a => a.EntityId == entityId).OrderBy(a => a.SortOrder);
                    foreach (var dynamics in dynamicvalues)
                    {
                        int SortOrder = (int)dynamics.SortOrder;
                        IList<IAttributeData> attributesWithValues = new List<IAttributeData>();
                        foreach (var val in attributesdetails)
                        {
                            AttributesList attypeid = (AttributesList)val.AttributeTypeID;
                            if (Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID || Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID)
                            {
                                treevaluedao = new List<AttrGroupTreeValueDao>();
                                treevaluedao = tx.PersistenceManager.PlanningRepository.Query<AttrGroupTreeValueDao>().Where(a => a.GroupRecordID == (int)dynamics.Id && a.GroupID == GroupID && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                                treevalues = new List<int>();
                                treevalues = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                            }
                            if (Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID || Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID)
                            {
                                multiselecttreevalues = new List<AttrGroupTreeValueDao>();
                                multiselecttreevalues = tx.PersistenceManager.PlanningRepository.Query<AttrGroupTreeValueDao>().Where(a => a.GroupRecordID == (int)dynamics.Id && a.GroupID == GroupID && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                                temptreevalues = new List<int>();
                                temptreevalues = (from treevalue in multiselecttreevalues where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                            }
                            switch (attypeid)
                            {
                                case AttributesList.TextSingleLine:
                                    attributedate = new AttributeData();
                                    attributedate.ID = val.ID;
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Lable = val.Caption.Trim();
                                    if (dynamics.Attributes == null)
                                    {
                                        attributedate.Caption = "-";
                                    }
                                    else
                                    {
                                        attributedate.Caption = dynamics.Attributes[val.ID.ToString()] == "" ? "-" : (dynamic)dynamics.Attributes[val.ID.ToString()];
                                    }
                                    attributedate.Value = dynamics.Attributes == null ? 0 : (dynamic)dynamics.Attributes[val.ID.ToString()];
                                    attributedate.AttributeRecordID = dynamics.Id;
                                    attributedate.IsLock = IsLock;
                                    attributedate.SortOrder = SortOrder;
                                    attributesWithValues.Add(attributedate);
                                    break;
                                case AttributesList.TextMultiLine:
                                    attributedate = new AttributeData();
                                    if (dynamics.Attributes == null)
                                    {
                                        attributedate.Caption = "-";
                                    }
                                    else
                                    {
                                        attributedate.Caption = dynamics.Attributes[val.ID.ToString()] == "" ? "-" : (dynamic)dynamics.Attributes[val.ID.ToString()];
                                    }
                                    attributedate.ID = val.ID;
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Lable = val.Caption.Trim();
                                    attributedate.Value = dynamics.Attributes == null ? 0 : (dynamic)dynamics.Attributes[val.ID.ToString()];
                                    attributedate.AttributeRecordID = dynamics.Id;
                                    attributedate.IsLock = IsLock;
                                    attributedate.SortOrder = SortOrder;
                                    attributesWithValues.Add(attributedate);
                                    break;
                                case AttributesList.ListSingleSelection:
                                    attributedate = new AttributeData();
                                    attributedate.ID = val.ID;
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Lable = val.Caption.Trim();
                                    if (dynamics == null)
                                    {
                                        attributedate.Caption = "-";
                                        attributedate.Value = 0;
                                    }
                                    else
                                    {
                                        var singleCaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where item.Id == Convert.ToInt32(dynamics.Attributes[val.ID.ToString()]) select item.Caption).ToList();
                                        attributedate.Value = dynamics.Attributes[val.ID.ToString()] == null ? 0 : (dynamic)dynamics.Attributes[val.ID.ToString()]; ;
                                        attributedate.Caption = singleCaption.Count() == 0 ? "-" : singleCaption[0];
                                        attributedate.AttributeRecordID = dynamics.Id;
                                    }
                                    attributedate.IsLock = IsLock;
                                    attributedate.SortOrder = SortOrder;
                                    attributesWithValues.Add(attributedate);
                                    break;
                                case AttributesList.ListMultiSelection:
                                    var multiSelectValuedao = (from item in tx.PersistenceManager.PlanningRepository.Query<AttrGroupMultiSelectDao>()
                                                               where item.GroupRecordID == (int)dynamics.Id && item.GroupID == GroupID
                                                               select item).ToList();
                                    attributedate = new AttributeData();
                                    attributedate.ID = val.ID;
                                    attributedate.Lable = val.Caption.Trim();
                                    attributedate.TypeID = val.AttributeTypeID;
                                    var optionIDs = (from multiValues in multiSelectValuedao where multiValues.Attributeid == val.ID select multiValues.Optionid).ToArray();
                                    var optioncaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where optionIDs.Contains(item.Id) select item.Caption).ToList();
                                    string Multicaptionresults = string.Join<string>(", ", optioncaption);
                                    attributedate.Caption = Multicaptionresults == "" ? "-" : Multicaptionresults;
                                    attributedate.Value = optionIDs;
                                    attributedate.AttributeRecordID = dynamics.Id;
                                    attributedate.IsLock = IsLock;
                                    attributedate.SortOrder = SortOrder;
                                    attributesWithValues.Add(attributedate);
                                    break;
                                case AttributesList.DateTime:
                                    attributedate = new AttributeData();
                                    attributedate.Caption = dynamics.Attributes[val.ID.ToString()] == null ? "" : ((System.DateTime)((object)dynamics.Attributes[val.ID.ToString()])).Date.Year + "/" + ((System.DateTime)((object)dynamics.Attributes[val.ID.ToString()])).Date.Month + "/" + ((System.DateTime)((object)dynamics.Attributes[val.ID.ToString()])).Date.Day;
                                    attributedate.ID = val.ID;
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Lable = val.Caption.Trim(); ;
                                    attributedate.Value = dynamics.Attributes[val.ID.ToString()] == null ? "" : ((System.DateTime)((object)dynamics.Attributes[val.ID.ToString()])).Date.Year + "/" + ((System.DateTime)((object)dynamics.Attributes[val.ID.ToString()])).Date.Month + "/" + ((System.DateTime)((object)dynamics.Attributes[val.ID.ToString()])).Date.Day;
                                    attributedate.AttributeRecordID = dynamics.Id;
                                    attributedate.IsLock = IsLock;
                                    attributedate.SortOrder = SortOrder;
                                    attributesWithValues.Add(attributedate);
                                    break;
                                case AttributesList.DropDownTree:
                                    attributedate = new AttributeData();
                                    attributedate.ID = val.ID;
                                    attributedate.IsSpecial = val.IsSpecial;
                                    droplabel = new List<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel>();
                                    attributedate.AttributeRecordID = dynamics.Id;
                                    var treeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();
                                    List<int> dropdownResults = new List<int>();
                                    List<string> tempcaption1 = new List<string>();
                                    if (treevaluedao.Count > 0)
                                    {
                                        foreach (var lvlObj in treevaluedao)
                                        {
                                            treeLevelList.Remove(treeLevelList.Where(a => a.Level == lvlObj.Level).FirstOrDefault());
                                        }
                                        var entityTreeLevelList = treevaluedao.Select(a => a.Level).ToList();
                                        dropdownResults = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                                        var nodes = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where dropdownResults.Contains(item.Id) select item.Level);
                                        var distinctNodes = nodes.Distinct();
                                        int lastRow = 0;
                                        foreach (var dropnode in distinctNodes)
                                        {
                                            BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                            BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                            var nodelevels = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>() where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                            treecaption.Level = nodelevels.Level;
                                            dropdownlabel.Level = nodelevels.Level;
                                            dropdownlabel.Label = nodelevels.LevelName.Trim();
                                            itreeCaption.Add(treecaption);
                                            droplabel.Add(dropdownlabel);
                                            if (lastRow == distinctNodes.Count() - 1)
                                            {
                                                foreach (var levelObj in treeLevelList)
                                                {
                                                    BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel2 = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                                    BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption2 = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                                    treecaption2.Level = levelObj.Level;
                                                    dropdownlabel2.Level = levelObj.Level;
                                                    dropdownlabel2.Label = levelObj.LevelName.Trim();
                                                    itreeCaption.Add(treecaption2);
                                                    droplabel.Add(dropdownlabel2);
                                                }
                                            }
                                            lastRow++;
                                        }
                                        attributedate.Lable = droplabel;
                                        tempcaption1 = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where treevalues.Contains(item.Id) orderby item.Level select item.Caption).ToList();
                                        int cntlevel = 0;
                                        cntlevel = tempcaption1.Count;
                                        int tot = 1;
                                        if (droplabel.Count != tempcaption1.Count)
                                        {
                                            for (int i = 0; i < droplabel.Count; i++)
                                            {
                                                if (cntlevel != tot && cntlevel < droplabel.Count)
                                                    tempcaption1.Add("-");
                                                tot++;
                                            }
                                        }
                                        attributedate.TypeID = val.AttributeTypeID;
                                        attributedate.Value = tempcaption1;
                                        attributedate.Caption = treevalues;
                                    }
                                    else
                                    {
                                        foreach (var levelObj in treeLevelList)
                                        {
                                            BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                            BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                            treecaption.Level = levelObj.Level;
                                            dropdownlabel.Level = levelObj.Level;
                                            dropdownlabel.Label = levelObj.LevelName.Trim();
                                            itreeCaption.Add(treecaption);
                                            droplabel.Add(dropdownlabel);
                                        }
                                        for (int i = 0; i < droplabel.Count; i++)
                                        {
                                            tempcaption1.Add("-");
                                        }

                                        attributedate.Lable = droplabel;
                                        attributedate.Caption = treevalues;
                                        attributedate.TypeID = val.AttributeTypeID;
                                        attributedate.Value = tempcaption1;
                                    }
                                    attributedate.IsLock = IsLock;
                                    attributedate.SortOrder = SortOrder;
                                    attributesWithValues.Add(attributedate);
                                    break;
                                case AttributesList.Tree:
                                    attributedate = new AttributeData();
                                    attributedate.ID = val.ID;
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.IsSpecial = val.IsSpecial;
                                    var treeCaptionList = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where treevalues.Contains(item.Id) select item.Caption).ToList();
                                    string treeCaptionResult = string.Join<string>(", ", treeCaptionList);
                                    attributedate.Caption = treeCaptionResult;
                                    attributedate.Lable = val.Caption.Trim();
                                    attributedate.Value = treevalues;
                                    attributedate.IsLock = IsLock;
                                    attributedate.SortOrder = SortOrder;
                                    attributesWithValues.Add(attributedate);
                                    break;
                                case AttributesList.Uploader:
                                    attributedate = new AttributeData();
                                    attributedate.ID = val.ID;
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.IsSpecial = val.IsSpecial;
                                    attributedate.Caption = dynamics.Attributes[val.ID.ToString()] == null ? "No thumnail present" : (dynamic)dynamics.Attributes[val.ID.ToString()];
                                    attributedate.Caption = attributedate.Caption == "" ? "No thumnail present" : attributedate.Caption;
                                    attributedate.Lable = val.Caption.Trim();
                                    attributedate.Value = dynamics.Attributes[val.ID.ToString()] == null || dynamics.Attributes[val.ID.ToString()] == "" ? "noPreview.jpg" : (dynamic)dynamics.Attributes[val.ID.ToString()];
                                    attributedate.AttributeRecordID = dynamics.Id;
                                    attributedate.IsLock = IsLock;
                                    attributedate.SortOrder = SortOrder;
                                    attributesWithValues.Add(attributedate);
                                    break;
                                case AttributesList.TreeMultiSelection:
                                    attributedate = new AttributeData();
                                    attributedate.ID = val.ID;
                                    attributedate.IsSpecial = val.IsSpecial;
                                    attributedate.AttributeRecordID = dynamics.Id;
                                    droplabel = new List<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel>();
                                    var multiselecttreeLevelList = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).Where(a => a.AttributeID == val.ID).ToList();
                                    List<int> multiselectdropdownResults = new List<int>();
                                    List<string> tempcaption = new List<string>();
                                    if (multiselecttreevalues.Count > 0)
                                    {
                                        foreach (var levelObj in multiselecttreeLevelList)
                                        {
                                            BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                            BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                            treecaption.Level = levelObj.Level;
                                            dropdownlabel.Level = levelObj.Level;
                                            dropdownlabel.Label = levelObj.LevelName.Trim();
                                            itreeCaption.Add(treecaption);
                                            droplabel.Add(dropdownlabel);
                                        }
                                        List<string> capstr = (from item in tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath) where temptreevalues.Contains(item.Id) orderby item.Level select item.Caption).ToList();
                                        List<string> capval = new List<string>();
                                        int i = 1;
                                        string lastlevelcap = "";
                                        foreach (string itm in capstr)
                                        {
                                            if (droplabel.Count == i)
                                            {
                                                lastlevelcap += itm + ",";
                                            }
                                            else
                                            {
                                                capval.Add(itm);
                                                i++;
                                            }
                                        }
                                        capval.Add(lastlevelcap.TrimEnd(','));
                                        attributedate.Lable = droplabel;
                                        attributedate.Caption = capval;
                                        attributedate.TypeID = val.AttributeTypeID;
                                        attributedate.Value = multiselecttreevalues;
                                    }
                                    else
                                    {
                                        foreach (var levelObj in multiselecttreeLevelList)
                                        {
                                            BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                            BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                            treecaption.Level = levelObj.Level;
                                            dropdownlabel.Level = levelObj.Level;
                                            dropdownlabel.Label = levelObj.LevelName.Trim();
                                            itreeCaption.Add(treecaption);
                                            droplabel.Add(dropdownlabel);
                                        }
                                        for (int i = 0; i < droplabel.Count; i++)
                                        {
                                            tempcaption.Add("-");
                                        }

                                        attributedate.Lable = droplabel;
                                        attributedate.Caption = tempcaption;
                                        attributedate.TypeID = val.AttributeTypeID;
                                        attributedate.Value = multiselecttreevalues;
                                    }
                                    attributedate.IsLock = IsLock;
                                    attributedate.SortOrder = SortOrder;
                                    attributesWithValues.Add(attributedate);
                                    break;
                                default:
                                    break;
                            }
                        }
                        resultresponse.Add(attributesWithValues);
                    }

                    tx.Commit();
                }

                return resultresponse;
            }
            catch (Exception ex)
            {

            }
            return null;
        }

        public string GetAttributeGroupTableName(ITransaction tx, int groupId, int mappingFileVersion = 0)
        {
            string entityName = string.Empty;
            if (mappingFileVersion == 0)
                entityName = "AttributeGroup" + groupId + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
            else
                entityName = "AttributeGroup" + groupId + "_V" + mappingFileVersion.ToString();
            return entityName;
        }

        public IList<IEntityType> DuplicateEntityType(MetadataManagerProxy proxy, int entitytypeId, string entitycaption, string entityshortdesc, string entitydescription, string entitycolor)
        {
            try
            {
                string xmlPath = string.Empty;
                IList<EntityTypeDao> entityTypeDao = new List<EntityTypeDao>();
                IList<IEntityType> _iientitytype = new List<IEntityType>();

                xmlPath = GetXmlWorkingPath();
                XDocument xDoc = XDocument.Load(xmlPath);
                int newModuleID = 0;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    int newentitytypeId = 0;

                    //---------------------------> INSERT ENTITY TYPE <------------------------
                    entityTypeDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath).Where(a => a.Id == entitytypeId).ToList();
                    foreach (var entObj in entityTypeDao)
                    {
                        newentitytypeId = InsertUpdateEntityType(proxy, entitycaption, entitydescription, entObj.ModuleID, entObj.Category, entityshortdesc, entitycolor, entObj.IsAssociate, (int)entObj.WorkFlowID, entObj.IsRootLevel, 0);
                        newModuleID = entObj.ModuleID;
                    }

                    //---------------------------> INSERT ENTITY TYPE ATTRIBUTE RELATION <------------------------
                    IList<IEntityTypeAttributeRelation> entitytyperelationlist = new List<IEntityTypeAttributeRelation>();
                    entitytyperelationlist = GetEntityTypeAttributeRelationByID(proxy, entitytypeId);
                    foreach (var objrel in entitytyperelationlist)
                    {
                        InsertUpdateEntityTypeAttributeRelation(proxy, newentitytypeId, objrel.AttributeID, objrel.ValidationID, objrel.SortOrder, objrel.DefaultValue, objrel.InheritFromParent,
                           objrel.IsReadOnly, objrel.ChooseFromParentOnly, objrel.IsValidationNeeded, objrel.Caption, objrel.IsSystemDefined, objrel.PlaceHolderValue, 0);
                    }

                    //---------------------------> INSERT ENTITY TYPE HIERARCHY<------------------------
                    IList<IEntityTypeHierarchy> _iientitytypeFeature = new List<IEntityTypeHierarchy>();
                    _iientitytypeFeature = GettingEntityTypeHierarchy(proxy, entitytypeId);
                    if (_iientitytypeFeature != null)
                    {
                        foreach (var objfeat in _iientitytypeFeature)
                        {
                            InsertEntityTypeHierarchy(proxy, newentitytypeId, objfeat.ChildActivityTypeID, objfeat.SortOrder, 0);
                        }
                    }

                    if (newModuleID != 5)
                    {
                        //---------------------------> INSERT ENTITY TYPE OVERALL STATUS <------------------------
                        IList<IEntityTypeStatusOptions> _iientitystatusoptions = new List<IEntityTypeStatusOptions>();
                        _iientitystatusoptions = GetEntityStatusOptions(proxy, entitytypeId);
                        IList<EntityTypeStatusOptionsDao> entitystatusdao = new List<EntityTypeStatusOptionsDao>();
                        if (_iientitystatusoptions != null)
                        {
                            foreach (var objsts in _iientitystatusoptions)
                            {
                                InsertUpdateEntityTypeStatusOption(proxy, newentitytypeId, objsts.StatusOptions, objsts.SortOrder, 0);
                            }
                        }
                    }
                    else
                    {

                        //---------------------------> INSERT DAM ENTITY TYPE EXTENSION OPTIONS STATUS <------------------------
                        IList<IDamTypeFileExtension> _iidamTypeFileExtension = new List<IDamTypeFileExtension>();
                        _iidamTypeFileExtension = GetDamTypeFileExtensionOptions(proxy, entitytypeId);
                        IList<DamTypeFileExtensionDao> entitystatusdao = new List<DamTypeFileExtensionDao>();
                        if (_iidamTypeFileExtension != null)
                        {
                            foreach (var objsts in _iidamTypeFileExtension)
                            {
                                InsertUpdateDamTypeFileExtensionOption(proxy, newentitytypeId, objsts.ExtensionOptions, objsts.SortOrder, 0);
                            }
                        }

                    }

                    //---------------------------> INSERT ENTITY TYPE Role  ACCESS <------------------------
                    //Tuple<IList<IEntityTypeRoleAcl>,IList<IEntityTypeRoleAcl>> _ientitytypeRoleAcl = new Tuple<IList<EntityTypeRoleAcl>,IList<EntityTypeRoleAcl>>();
                    var _ientitytypeRoleAcl = GetEntityTypeRoleAcl(proxy, entitytypeId);
                    if (_ientitytypeRoleAcl.Item1 != null)
                    {
                        foreach (var objsts in _ientitytypeRoleAcl.Item1)
                        {
                            InsertUpdateEntityTypeRoleAccess(proxy, objsts.Caption, newentitytypeId, objsts.EntityRoleID, objsts.ModuleID, objsts.Sortorder, 0);
                        }
                    }

                    if (_ientitytypeRoleAcl.Item2 != null)
                    {
                        foreach (var objsts in _ientitytypeRoleAcl.Item2)
                        {
                            InsertUpdateEntityTypeRoleAccess(proxy, objsts.Caption, newentitytypeId, objsts.EntityRoleID, objsts.ModuleID, objsts.Sortorder, 0);
                        }
                    }

                    //--------


                    //---------------------------> INSERT ENTITY TYPE VALIDATION <------------------------
                    IList<IValidation> tempvalidationList = new List<IValidation>();
                    tempvalidationList = GetAttributeValidationByEntityTypeId(proxy, entitytypeId, 0);
                    string attrtype = "";
                    if (tempvalidationList != null)
                    {
                        foreach (var objval1 in tempvalidationList)
                        {
                            IValidation validList = new Validation();
                            IList<IValidation> validationList = new List<IValidation>();
                            validList.AttributeID = objval1.AttributeID;
                            validList.EntityTypeID = newentitytypeId;
                            validList.ErrorMessage = objval1.ErrorMessage;
                            validList.Name = objval1.Name;
                            validList.Value = objval1.Value;
                            validList.ValueType = objval1.ValueType;
                            validationList.Add(validList);
                            attrtype = objval1.Name.ToString().Substring((objval1.Name.ToString().LastIndexOf("_") + 1));
                            InsertUpdateValidation(proxy, validationList, objval1.AttributeID, newentitytypeId, Convert.ToInt32(attrtype.ToString()), 0);
                        }
                    }
                    tx.Commit();
                }
                _iientitytype = GetEntityType(proxy, newModuleID);
                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<IEntityTypeAttributeRelationwithLevels> GetEntityTypeAttributeRelationWithLevelsByIDForUserDetails(MetadataManagerProxy proxy, int TypeId, int UserID = 0)
        {

            try
            {
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                string attributeCaption = string.Empty;
                string entitytypeCaption = string.Empty;
                Boolean isSpecial = false;
                string xmlpath = string.Empty;
                IList<IEntityTypeAttributeRelationwithLevels> _iientitytyperelation = new List<IEntityTypeAttributeRelationwithLevels>();
                IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath);
                    var entityttyperesult = dao.Where(a => a.EntityTypeID == TypeId).OrderBy(x => x.SortOrder);
                    var attrIDs = entityttyperesult.Select(a => a.AttributeID).ToList();

                    if (UserID != 0)
                    {
                        entityAttrVal = GetEntityAttributesDetailsForUserDetails(proxy, UserID, TypeId);

                    }
                    else
                        entityAttrVal = null;
                    IList<IOption> optionSelection = GetOptionList(proxy, attrIDs);
                    var xDoc = XDocument.Load(xmlpath);
                    foreach (var item in entityttyperesult)
                    {
                        IEntityTypeAttributeRelationwithLevels _ientitytyperelation = new EntityTypeAttributeRelationwithLevels();
                        _ientitytyperelation.ID = item.ID;
                        _ientitytyperelation.EntityTypeID = item.EntityTypeID;
                        //entitytypeCaption = Convert.ToString(xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.EntityTypeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.EntityTypeCaption = Convert.ToString(xDoc.Root.Elements("EntityType_Table").Elements("EntityType").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.EntityTypeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.AttributeID = item.AttributeID;
                        //attributeCaption = Convert.ToString(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First());
                        isSpecial = Convert.ToBoolean(Convert.ToInt32(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("IsSpecial").Value).First()));
                        _ientitytyperelation.IsSpecial = isSpecial;
                        _ientitytyperelation.AttributeCaption = item.Caption; //Convert.ToString(xDoc.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation").Where(a => Convert.ToInt32(a.Element("AttributeID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.AttributeTypeID = Convert.ToInt32(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("AttributeTypeID").Value).First());
                        _ientitytyperelation.ValidationID = item.ValidationID;
                        _ientitytyperelation.SortOrder = item.SortOrder;
                        _ientitytyperelation.DefaultValue = item.DefaultValue;
                        _ientitytyperelation.InheritFromParent = item.InheritFromParent;
                        _ientitytyperelation.PlaceHolderValue = item.PlaceHolderValue;
                        _ientitytyperelation.IsReadOnly = item.IsReadOnly;
                        _ientitytyperelation.ChooseFromParentOnly = item.ChooseFromParentOnly;
                        _ientitytyperelation.IsValidationNeeded = item.IsValidationNeeded;
                        _ientitytyperelation.Caption = item.Caption;
                        _ientitytyperelation.IsSystemDefined = item.IsSystemDefined;


                        if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DropDownTree)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly)
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                _ientitytyperelation.tree = GetTreeNodeFromParent(proxy, _ientitytyperelation.AttributeID, UserID);
                            }
                            else
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);
                            }
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.ListSingleSelection)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly && entityAttrVal != null)
                            {
                                IList<IOption> optionSelectionfromparent = GetOptionListFromParent(proxy, entityAttrVal, item.AttributeID, _ientitytyperelation.AttributeTypeID);
                                _ientitytyperelation.Options = optionSelectionfromparent.OrderBy(a => a.SortOrder).ToList();

                            }
                            else
                            {
                                IList<IOption> optionSinglrSelection = (from options in optionSelection
                                                                        where options.AttributeID == _ientitytyperelation.AttributeID
                                                                        select options).OrderBy(a => a.Caption).ToList<IOption>();
                                _ientitytyperelation.Options = optionSinglrSelection.OrderBy(a => a.SortOrder).ToList();
                            }
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.ListMultiSelection)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly)
                            {
                                IList<IOption> optionSelectionfromparent = GetOptionListFromParent(proxy, entityAttrVal, item.AttributeID, _ientitytyperelation.AttributeTypeID);
                                _ientitytyperelation.Options = optionSelectionfromparent.OrderBy(a => a.SortOrder).ToList();
                            }
                            else
                            {
                                IList<IOption> optionmultiselection = (from options in optionSelection
                                                                       where options.AttributeID == _ientitytyperelation.AttributeID
                                                                       select options).OrderBy(a => a.SortOrder).ToList<IOption>();
                                _ientitytyperelation.Options = optionmultiselection;
                            }

                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TreeMultiSelection)
                        {
                            if (_ientitytyperelation.ChooseFromParentOnly)
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                _ientitytyperelation.tree = GetTreeNodeFromParent(proxy, _ientitytyperelation.AttributeID, UserID);
                            }
                            else
                            {
                                IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                                var levelList = from level in treeLevels
                                                where level.AttributeID == _ientitytyperelation.AttributeID
                                                select level;
                                _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                                _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);
                            }
                        }
                        _iientitytyperelation.Add(_ientitytyperelation);
                    }
                }
                return _iientitytyperelation;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<IAttributeData> GetEntityAttributesDetailsForUserDetails(MetadataManagerProxy proxy, int UserID, int TypeID)
        {

            IList<IAttributeData> attributesWithValues = new List<IAttributeData>();
            IList<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel> droplabel;
            IList<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption> itreeCaption = new List<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption>();
            AttributeData attributedate;
            try
            {

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(MarcomManagerFactory.ActiveMetadataVersionNumber);
                    XDocument docx = XDocument.Load(xmlpath);
                    var rddd = (from EntityAttrRel in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation")
                                join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute") on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) equals Convert.ToInt32(Attr.Element("ID").Value)
                                where Convert.ToInt32(EntityAttrRel.Element("EntityTypeID").Value) == TypeID
                                orderby Convert.ToInt32(EntityAttrRel.Element("SortOrder").Value)
                                select new
                                {
                                    ID = Convert.ToInt16(Attr.Element("ID").Value),
                                    Caption = EntityAttrRel.Element("Caption").Value,
                                    AttributeTypeID = Convert.ToInt16(Attr.Element("AttributeTypeID").Value),
                                    Description = Attr.Element("Description").Value,
                                    IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSystemDefined").Value)),
                                    IsSpecial = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSpecial").Value)),
                                    InheritFromParent = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("InheritFromParent").Value)),
                                    ChooseFromParent = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("ChooseFromParentOnly").Value)),
                                    IsReadOnly = Convert.ToBoolean(Convert.ToInt32(EntityAttrRel.Element("IsReadOnly").Value))
                                }).ToList();

                    var attributesdetails = rddd;

                    List<UserDetailsTreeValueDao> treevaluedao = new List<UserDetailsTreeValueDao>();
                    List<int> treevalues = new List<int>();

                    List<UserDetailsTreeValueDao> multiselecttreevalues = new List<UserDetailsTreeValueDao>();
                    List<int> temptreevalues = new List<int>();


                    var entityName = "AttributeRecord" + TypeID + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    var dynamicvalues = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => a.Id == UserID).Select(a => a.Attributes).SingleOrDefault();

                    foreach (var val in attributesdetails)
                    {
                        AttributesList attypeid = (AttributesList)val.AttributeTypeID;
                        if (Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID || Convert.ToInt32(AttributesList.DropDownTree) == val.AttributeTypeID)
                        {
                            treevaluedao = new List<UserDetailsTreeValueDao>();
                            treevaluedao = tx.PersistenceManager.PlanningRepository.Query<UserDetailsTreeValueDao>().Where(a => a.UserID == UserID && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                            treevalues = new List<int>();
                            treevalues = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                        }
                        if (Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID || Convert.ToInt32(AttributesList.TreeMultiSelection) == val.AttributeTypeID)
                        {
                            multiselecttreevalues = new List<UserDetailsTreeValueDao>();
                            multiselecttreevalues = tx.PersistenceManager.PlanningRepository.Query<UserDetailsTreeValueDao>().Where(a => a.UserID == UserID && a.Attributeid == val.ID).OrderBy(a => a.Level).ToList();
                            temptreevalues = new List<int>();
                            temptreevalues = (from treevalue in multiselecttreevalues where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                        }
                        switch (attypeid)
                        {
                            case AttributesList.TextSingleLine:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                                attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.TextMultiLine:
                                attributedate = new AttributeData();
                                attributedate.Caption = dynamicvalues[val.ID.ToString()] == "" ? "-" : (dynamic)dynamicvalues[val.ID.ToString()];
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Value = (dynamic)dynamicvalues[val.ID.ToString()];
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.ListSingleSelection:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.IsSpecial = val.IsSpecial;

                                if (val.IsSpecial == false)
                                {
                                    if (dynamicvalues == null)
                                    {
                                        attributedate.Value = 0;
                                        attributedate.Caption = "";
                                    }
                                    else
                                    {
                                        attributedate.Value = dynamicvalues[val.ID.ToString()] == null ? 0 : (dynamic)dynamicvalues[val.ID.ToString()];

                                        var singleCaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where item.Id == Convert.ToInt32(dynamicvalues[val.ID.ToString()]) select item.Caption).ToList();
                                        attributedate.Caption = singleCaption;
                                    }
                                }
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.ListMultiSelection:
                                var multiSelectValuedao = (from item in tx.PersistenceManager.PlanningRepository.Query<UserDetailsMultiSelectDao>()
                                                           where item.UserID == UserID
                                                           select item).ToList();
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.TypeID = val.AttributeTypeID;
                                var optionIDs = (from multiValues in multiSelectValuedao where multiValues.Attributeid == val.ID select multiValues.Optionid).ToArray();
                                var optioncaption = (from item in tx.PersistenceManager.PlanningRepository.Query<OptionDao>() where optionIDs.Contains(item.Id) select item.Caption).ToList();
                                string Multicaptionresults = string.Join<string>(", ", optioncaption);
                                attributedate.Caption = Multicaptionresults;
                                attributedate.Value = optionIDs;
                                attributedate.IsReadOnly = val.IsReadOnly;

                                attributesWithValues.Add(attributedate);
                                break;

                            case AttributesList.DropDownTree:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.IsSpecial = val.IsSpecial;
                                droplabel = new List<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel>();

                                var treeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();
                                List<int> dropdownResults = new List<int>();
                                if (treevaluedao.Count > 0)
                                {
                                    foreach (var lvlObj in treevaluedao)
                                    {
                                        treeLevelList.Remove(treeLevelList.Where(a => a.Level == lvlObj.Level).FirstOrDefault());
                                    }
                                    var entityTreeLevelList = treevaluedao.Select(a => a.Level).ToList();
                                    dropdownResults = (from treevalue in treevaluedao where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                                    var nodes = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where dropdownResults.Contains(item.Id) select item.Level);
                                    var distinctNodes = nodes.Distinct();
                                    int lastRow = 0;
                                    foreach (var dropnode in distinctNodes)
                                    {
                                        BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                        BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                        var nodelevels = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>() where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                        treecaption.Level = nodelevels.Level;
                                        dropdownlabel.Level = nodelevels.Level;
                                        dropdownlabel.Label = nodelevels.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                        if (lastRow == distinctNodes.Count() - 1)
                                        {
                                            foreach (var levelObj in treeLevelList)
                                            {
                                                BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel2 = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                                BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption2 = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                                treecaption2.Level = levelObj.Level;
                                                dropdownlabel2.Level = levelObj.Level;
                                                dropdownlabel2.Label = levelObj.LevelName.Trim();
                                                itreeCaption.Add(treecaption2);
                                                droplabel.Add(dropdownlabel2);
                                            }
                                        }
                                        lastRow++;
                                    }
                                    attributedate.Lable = droplabel;
                                    var captionlist = from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where treevalues.Contains(item.Id) orderby item.Level select item.Caption;
                                    string result = string.Join<string>(",", captionlist);
                                    attributedate.Caption = result;
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = treevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                else
                                {
                                    foreach (var levelObj in treeLevelList)
                                    {
                                        BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                        BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                        treecaption.Level = levelObj.Level;
                                        dropdownlabel.Level = levelObj.Level;
                                        dropdownlabel.Label = levelObj.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                    }
                                    attributedate.Lable = droplabel;
                                    attributedate.Caption = "-";
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = treevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                attributedate.IsReadOnly = val.IsReadOnly;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.TreeMultiSelection:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.IsSpecial = val.IsSpecial;
                                attributedate.IsReadOnly = val.IsReadOnly;

                                droplabel = new List<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel>();

                                var multiselecttreeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();
                                List<int> multiselectdropdownResults = new List<int>();
                                if (multiselecttreevalues.Count > 0)
                                {
                                    foreach (var lvlObj in multiselecttreevalues)
                                    {
                                        multiselecttreeLevelList.Remove(multiselecttreeLevelList.Where(a => a.Level == lvlObj.Level).FirstOrDefault());
                                    }
                                    var entityTreeLevelList = multiselecttreevalues.Select(a => a.Level).ToList();
                                    multiselectdropdownResults = (from treevalue in multiselecttreevalues where treevalue.Attributeid == val.ID select treevalue.Nodeid).ToList();
                                    var nodes = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where multiselectdropdownResults.Contains(item.Id) select item.Level);
                                    var distinctNodes = nodes.Distinct();
                                    int lastRow = 0;
                                    foreach (var dropnode in distinctNodes)
                                    {
                                        BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                        BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                        var nodelevels = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>() where item.Level == dropnode && item.AttributeID == val.ID select item).SingleOrDefault();
                                        treecaption.Level = nodelevels.Level;
                                        dropdownlabel.Level = nodelevels.Level;
                                        dropdownlabel.Label = nodelevels.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                        if (lastRow == distinctNodes.Count() - 1)
                                        {
                                            foreach (var levelObj in multiselecttreeLevelList)
                                            {
                                                BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel2 = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                                BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption2 = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                                treecaption2.Level = levelObj.Level;
                                                dropdownlabel2.Level = levelObj.Level;
                                                dropdownlabel2.Label = levelObj.LevelName.Trim();
                                                itreeCaption.Add(treecaption2);
                                                droplabel.Add(dropdownlabel2);
                                            }
                                        }
                                        lastRow++;
                                    }
                                    attributedate.Lable = droplabel;
                                    attributedate.Caption = (from item in tx.PersistenceManager.PlanningRepository.Query<TreeNodeDao>() where temptreevalues.Contains(item.Id) orderby item.Level select item.Caption).ToList();
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = multiselecttreevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                else
                                {
                                    foreach (var levelObj in multiselecttreeLevelList)
                                    {
                                        BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                        BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                        treecaption.Level = levelObj.Level;
                                        dropdownlabel.Level = levelObj.Level;
                                        dropdownlabel.Label = levelObj.LevelName.Trim();
                                        itreeCaption.Add(treecaption);
                                        droplabel.Add(dropdownlabel);
                                    }
                                    attributedate.Lable = droplabel;
                                    attributedate.Caption = "-";
                                    attributedate.TypeID = val.AttributeTypeID;
                                    attributedate.Value = multiselecttreevalues;
                                    attributedate.IsInheritFromParent = val.InheritFromParent;
                                    attributedate.IsChooseFromParent = val.ChooseFromParent;
                                }
                                attributesWithValues.Add(attributedate);
                                break;
                            default:

                                break;
                        }
                    }

                }
                return attributesWithValues;
            }
            catch (Exception ex)
            {

            }
            return null;
        }

        public IList<IEntityTypeAttributeGroupRelationwithLevels> GetUserDetailsAttributes(MetadataManagerProxy proxy, int TypeId, int UserID = 0)
        {

            try
            {
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                string attributeCaption = string.Empty;
                string entitytypeCaption = string.Empty;
                Boolean isSpecial = false;
                string xmlpath = string.Empty;
                IList<IEntityTypeAttributeGroupRelationwithLevels> _iientitytyperelation = new List<IEntityTypeAttributeGroupRelationwithLevels>();
                IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    XDocument docx = XDocument.Load(xmlpath);
                    var query = (from c in docx.Root.Elements("Attribute_Table").Elements("Attribute")
                                 join attr in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation") on Convert.ToInt32(c.Element("ID").Value) equals Convert.ToInt32(attr.Element("AttributeID").Value)
                                 where Convert.ToInt32(attr.Element("EntityTypeID").Value) == 12
                                 select new
                                 {
                                     Caption = c.Element("Caption").Value,
                                     AttributeID = Convert.ToInt16(attr.Element("AttributeID").Value),
                                     AttributeTypeID = Convert.ToInt16(c.Element("AttributeTypeID").Value)
                                 });
                    if (query.Count() == 0)
                    {
                        tx.Commit();
                        return null;
                    }
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath);
                    var entityName = "AttributeRecord" + TypeId + "_V" + MarcomManagerFactory.ActiveMetadataVersionNumber;
                    var dynamicvalues = tx.PersistenceManager.PlanningRepository.GetAll<DynamicAttributesDao>(entityName).Where(a => a.Id == UserID).Select(a => a.Attributes).SingleOrDefault();
                    var entityttyperesult = dao.Where(a => a.EntityTypeID == TypeId).OrderBy(x => x.SortOrder);
                    var attrIDs = entityttyperesult.Select(a => a.AttributeID).ToList();
                    IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                    entityAttrVal = null;
                    IList<IOption> optionSelection = GetOptionList(proxy, attrIDs);
                    var xDoc = XDocument.Load(xmlpath);
                    List<UserDetailsTreeValueDao> treevaluedao = new List<UserDetailsTreeValueDao>();
                    List<int> treevalues = new List<int>();
                    List<UserDetailsTreeValueDao> multiselecttreevalues = new List<UserDetailsTreeValueDao>();
                    List<int> temptreevalues = new List<int>();
                    foreach (var item in entityttyperesult)
                    {
                        IEntityTypeAttributeGroupRelationwithLevels _ientitytyperelation = new EntityTypeAttributeGroupRelationwithLevels();
                        _ientitytyperelation.ID = item.ID;
                        _ientitytyperelation.AttributeID = item.AttributeID;
                        _ientitytyperelation.AttributeCaption = item.Caption; //Convert.ToString(xDoc.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation").Where(a => Convert.ToInt32(a.Element("AttributeID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("Caption").Value).First());
                        _ientitytyperelation.AttributeTypeID = Convert.ToInt32(xDoc.Root.Elements("Attribute_Table").Elements("Attribute").Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.AttributeID)).Select(a => a.Element("AttributeTypeID").Value).First());
                        _ientitytyperelation.SortOrder = item.SortOrder;
                        _ientitytyperelation.Caption = item.Caption;
                        _ientitytyperelation.PlaceHolderValue = item.PlaceHolderValue;

                        if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DropDownTree)
                        {
                            treevaluedao = new List<UserDetailsTreeValueDao>();
                            treevaluedao = tx.PersistenceManager.PlanningRepository.Query<UserDetailsTreeValueDao>().Where(a => a.UserID == UserID && a.Attributeid == item.AttributeID).OrderBy(a => a.Level).ToList();
                            treevalues = new List<int>();
                            treevalues = (from treevalue in treevaluedao where treevalue.Attributeid == item.AttributeID select treevalue.Nodeid).ToList();
                        }
                        if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TreeMultiSelection)
                        {
                            multiselecttreevalues = new List<UserDetailsTreeValueDao>();
                            multiselecttreevalues = tx.PersistenceManager.PlanningRepository.Query<UserDetailsTreeValueDao>().Where(a => a.UserID == UserID && a.Attributeid == item.AttributeID).OrderBy(a => a.Level).ToList();
                            temptreevalues = new List<int>();
                            temptreevalues = (from treevalue in multiselecttreevalues where treevalue.Attributeid == item.AttributeID select treevalue.Nodeid).ToList();
                        }

                        if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TextSingleLine)
                        {
                            _ientitytyperelation.AttributeValue = dynamicvalues == null ? "" : (dynamic)dynamicvalues[item.AttributeID.ToString()];
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TextMultiLine)
                        {
                            _ientitytyperelation.AttributeValue = dynamicvalues == null ? "" : (dynamic)dynamicvalues[item.AttributeID.ToString()];
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DateTime)
                        {
                            _ientitytyperelation.AttributeValue = dynamicvalues == null ? "" : ((System.DateTime)((object)dynamicvalues[item.AttributeID.ToString()])).Date.Year + "/" + ((System.DateTime)((object)dynamicvalues[item.AttributeID.ToString()])).Date.Month + "/" + ((System.DateTime)((object)dynamicvalues[item.AttributeID.ToString()])).Date.Day;
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.DropDownTree)
                        {
                            IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                            var levelList = from level in treeLevels
                                            where level.AttributeID == _ientitytyperelation.AttributeID
                                            select level;
                            _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                            _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);

                            _ientitytyperelation.AttributeValue = treevalues;

                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.ListSingleSelection)
                        {
                            IList<IOption> optionSinglrSelection = (from options in optionSelection
                                                                    where options.AttributeID == _ientitytyperelation.AttributeID
                                                                    select options).OrderBy(a => a.Caption).ToList<IOption>();
                            _ientitytyperelation.Options = optionSinglrSelection.OrderBy(a => a.SortOrder).ToList();
                            _ientitytyperelation.AttributeValue = dynamicvalues == null ? "" : (dynamic)dynamicvalues[item.AttributeID.ToString()];
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.ListMultiSelection)
                        {
                            IList<IOption> optionmultiselection = (from options in optionSelection
                                                                   where options.AttributeID == _ientitytyperelation.AttributeID
                                                                   select options).OrderBy(a => a.SortOrder).ToList<IOption>();
                            _ientitytyperelation.Options = optionmultiselection;

                            var optioncaption = (from objitem in tx.PersistenceManager.PlanningRepository.Query<UserDetailsMultiSelectDao>() where objitem.UserID == UserID && objitem.Attributeid == item.AttributeID select objitem.Optionid).ToArray();

                            string result = string.Join(",", optioncaption);
                            _ientitytyperelation.AttributeValue = optioncaption;
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.TreeMultiSelection)
                        {
                            IList<ITreeLevel> treeLevels = GetTreelevel(proxy, version);
                            var levelList = from level in treeLevels
                                            where level.AttributeID == _ientitytyperelation.AttributeID
                                            select level;
                            _ientitytyperelation.Levels = levelList.ToList<ITreeLevel>();
                            _ientitytyperelation.tree = GetTreeNode(proxy, _ientitytyperelation.AttributeID, false);

                            _ientitytyperelation.AttributeValue = temptreevalues;
                        }
                        else if (_ientitytyperelation.AttributeTypeID == (int)AttributesList.CheckBoxSelection)
                        {
                            _ientitytyperelation.AttributeValue = dynamicvalues == null ? "" : (dynamic)dynamicvalues[item.AttributeID.ToString()];
                        }
                        _iientitytyperelation.Add(_ientitytyperelation);
                    }
                    tx.Commit();
                }
                return _iientitytyperelation;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<IOption> GetOptionDetailListByIDForMyPage(MetadataManagerProxy proxy, int attributeID, int UserID)
        {

            try
            {
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                string xmlpath = string.Empty;
                IList<IOption> _iioption = new List<IOption>();
                IList<OptionDao> dao = new List<OptionDao>();

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    //xmlpath = GetXmlWorkingPath();
                    //dao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath);

                    //----------------------------------

                    xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<OptionDao>(xmlpath).OrderBy(a => a.SortOrder).ToList<OptionDao>();


                    XDocument docx = XDocument.Load(xmlpath);
                    var rddd = (from EntityAttrRel in docx.Root.Elements("EntityTypeAttributeRelation_Table").Elements("EntityTypeAttributeRelation")
                                join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute") on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) equals Convert.ToInt32(Attr.Element("ID").Value)
                                where Convert.ToInt32(EntityAttrRel.Element("EntityTypeID").Value) == (int)EntityTypeList.UserDetails && Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) == attributeID && Convert.ToInt32(EntityAttrRel.Element("ChooseFromParentOnly").Value) == 1
                                select new
                                {
                                    ID = Convert.ToInt16(Attr.Element("ID").Value),
                                    Caption = EntityAttrRel.Element("Caption").Value,
                                    AttributeTypeID = Convert.ToInt16(Attr.Element("AttributeTypeID").Value),
                                    Description = Attr.Element("Description").Value,
                                    IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSystemDefined").Value)),
                                    IsSpecial = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSpecial").Value))
                                }).ToList();
                    var attributesdetails1 = rddd;

                    //----------------------------------

                    //XDocument docx = XDocument.Load(xmlpath);
                    var attributesdetails = (from c in docx.Root.Elements("Attribute_Table").Elements("Attribute")
                                             where Convert.ToInt32(c.Element("ID").Value) == attributeID
                                             select new
                                             {
                                                 ID = Convert.ToInt16(c.Element("ID").Value),
                                                 Caption = c.Element("Caption").Value,
                                                 AttributeTypeID = Convert.ToInt16(c.Element("AttributeTypeID").Value),
                                                 Description = c.Element("Description").Value,
                                                 IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(c.Element("IsSystemDefined").Value)),
                                                 IsSpecial = Convert.ToBoolean(Convert.ToInt32(c.Element("IsSpecial").Value))
                                             }).ToList();
                    foreach (var val in attributesdetails)
                    {

                        if (val.IsSpecial == false && (val.AttributeTypeID == 3 || val.AttributeTypeID == 4))
                        {
                            if (val.AttributeTypeID == 4 && attributesdetails1.Count > 0)
                            {
                                IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                                entityAttrVal = proxy.MarcomManager.PlanningManager.GetEntityAttributesDetailsUserDetails(UserID);

                                IList<IAttributeData> entityAttrVal1 = new List<IAttributeData>();
                                entityAttrVal1 = entityAttrVal.Where(a => a.ID == attributeID).Select(a => a).ToList();

                                var tempcaption = (dynamic)entityAttrVal1.Where(a => a.ID == attributeID).Select(a => a.Caption).ToList();
                                string[] optioncaptionArr = tempcaption[0].Split(',');

                                for (int i = 0; i < optioncaptionArr.Length; i++)
                                {
                                    IOption _ioption = new Option();
                                    _ioption.Caption = optioncaptionArr[i].ToString();
                                    _ioption.AttributeID = attributeID;
                                    _ioption.SortOrder = 0;
                                    _ioption.Id = entityAttrVal1[0].Value[i];
                                    _iioption.Add(_ioption);
                                }

                            }
                            else if (val.AttributeTypeID == 3 && attributesdetails1.Count > 0)
                            {
                                IList<IAttributeData> entityAttrVal = new List<IAttributeData>();
                                entityAttrVal = proxy.MarcomManager.PlanningManager.GetEntityAttributesDetailsUserDetails(UserID);

                                IList<IAttributeData> entityAttrVal1 = new List<IAttributeData>();
                                entityAttrVal1 = entityAttrVal.Where(a => a.ID == attributeID).Select(a => a).ToList();

                                if (entityAttrVal1 != null)
                                {
                                    IOption _ioption = new Option();
                                    _ioption.Caption = entityAttrVal1[0].Caption[0];
                                    _ioption.AttributeID = attributeID;
                                    _ioption.SortOrder = 0;
                                    _ioption.Id = entityAttrVal1[0].Value;
                                    _iioption.Add(_ioption);
                                }
                            }
                            else
                            {
                                var optionresult = dao.Where(a => a.AttributeID == attributeID);
                                foreach (var item in optionresult)
                                {
                                    IOption _ioption = new Option();
                                    _ioption.Caption = item.Caption;
                                    _ioption.AttributeID = item.AttributeID;
                                    _ioption.SortOrder = item.SortOrder;
                                    _ioption.Id = item.Id;
                                    _iioption.Add(_ioption);
                                }
                            }
                        }
                    }

                }
                return _iioption;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public bool SaveDetailBlockForLevelsFromMyPage(MetadataManagerProxy proxy, int UserID, int AttributeTypeid, int attributeid, List<object> NewValue, int Level)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var attrdetails = (from item in tx.PersistenceManager.MetadataRepository.Query<AttributeDao>() where item.Id == attributeid select item).FirstOrDefault();
                    var DynamicQuery = new StringBuilder();
                    int Typeid = (int)EntityTypeList.UserDetails;
                    var attr = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Metadata.Model.AttributeDao>(attributeid);

                    string stroldvalue = "";
                    IList<MultiProperty> prplst = new List<MultiProperty>();

                    // dropdown value updation
                    if (AttributeTypeid == 6)
                    {
                        prplst.Add(new MultiProperty { propertyName = UserDetailsTreeValueDao.PropertyNames.UserID, propertyValue = UserID });
                        prplst.Add(new MultiProperty { propertyName = UserDetailsTreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });

                        string str2 = "Delete from MM_UserDetailsTreeValue where UserID= ? and AttributeID = ? ";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, UserID, attributeid);
                        UserDetailsTreeValueDao treeval;
                        for (var i = 0; i < NewValue.Count(); i++)
                        {

                            if ((int)NewValue[i] != 0)
                            {
                                treeval = new UserDetailsTreeValueDao();
                                treeval.Attributeid = attributeid;
                                treeval.UserID = UserID;
                                treeval.Nodeid = (int)NewValue[i];
                                treeval.Level = i + 1;
                                tx.PersistenceManager.MetadataRepository.Save<UserDetailsTreeValueDao>(treeval);

                            }
                        }
                        tx.Commit();

                    }
                    else if (AttributeTypeid == 3)
                    {
                        IList<MultiProperty> parList3 = new List<MultiProperty>();

                        string str = "select * from MM_AttributeRecord_" + Typeid + " where ID= ? ";
                        IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(UserID));
                        if (item.Count == 0)
                        {
                            DynamicQuery.Append("Insert into MM_AttributeRecord_" + Typeid + " (ID,Attr_" + attributeid + ") values(" + UserID + "," + (int)NewValue[0] + ") ");
                            tx.PersistenceManager.PlanningRepository.ExecuteQuery(DynamicQuery.ToString());
                        }
                        else
                        {
                            parList3.Add(new MultiProperty { propertyName = "UserID_NewValue", propertyValue = (int)NewValue[0] });
                            parList3.Add(new MultiProperty { propertyName = "UserID", propertyValue = UserID });
                            DynamicQuery.Append("update  MM_AttributeRecord_" + Typeid + " set Attr_" + attributeid + "= :UserID_NewValue where ID= :UserID");
                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithParam(DynamicQuery.ToString(), parList3);
                        }
                        tx.Commit();
                    }
                    else if (AttributeTypeid == 1)
                    {
                        string str = "select * from MM_AttributeRecord_" + Typeid + " where ID= ? ";
                        IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(UserID));
                        if (item.Count == 0)
                        {
                            DynamicQuery.Append("Insert into MM_AttributeRecord_" + Typeid + " (ID,Attr_" + attributeid + ") values(" + UserID + ",'" + HttpUtility.HtmlEncode((string)NewValue[0]) + "')");
                            tx.PersistenceManager.PlanningRepository.ExecuteQuery(DynamicQuery.ToString());
                        }
                        else
                        {
                            DynamicQuery.Append("update  MM_AttributeRecord_" + Typeid + " set Attr_" + attributeid + "= ?  where ID= ?");
                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), UserID);
                        }
                        tx.Commit();
                    }

                    else if (AttributeTypeid == 2)
                    {
                        if (attrdetails.IsSpecial == false)
                        {
                            string str = "select * from MM_AttributeRecord_" + Typeid + " where ID= ? ";
                            IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(UserID));
                            if (item.Count == 0)
                            {
                                DynamicQuery.Append("Insert into MM_AttributeRecord_" + Typeid + " (ID,Attr_" + attributeid + ") values (" + UserID + "," + HttpUtility.HtmlEncode((string)NewValue[0]) + ")");
                                tx.PersistenceManager.PlanningRepository.ExecuteQuery(DynamicQuery.ToString());
                            }
                            else
                            {
                                DynamicQuery.Append("update  MM_AttributeRecord_" + Typeid + " set Attr_" + attributeid + "= ? where ID= ? ");
                                tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), HttpUtility.HtmlEncode((string)NewValue[0]), UserID);
                            }
                        }
                        tx.Commit();
                    }
                    else if (AttributeTypeid == 4)
                    {
                        IList<UserDetailsMultiSelectDao> listMultiselect = new List<UserDetailsMultiSelectDao>();
                        var listOfOldValuesforFeed = (from item in tx.PersistenceManager.PlanningRepository.Query<UserDetailsMultiSelectDao>() where item.Attributeid == Convert.ToInt32(attributeid) && item.UserID == Convert.ToInt32(UserID) select item).ToList();
                        string query = "DELETE FROM MM_UserDetailsMultiSelect WHERE UserID = ? AND AttributeID = ? ";
                        tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(query.ToString(), Convert.ToInt32(UserID), attributeid);
                        foreach (var at in NewValue)
                        {
                            UserDetailsMultiSelectDao mt = new UserDetailsMultiSelectDao();
                            mt.Attributeid = attributeid;
                            mt.UserID = Convert.ToInt32(UserID);
                            mt.Optionid = Convert.ToInt32(at);
                            listMultiselect.Add(mt);
                        }
                        tx.PersistenceManager.PlanningRepository.Save<UserDetailsMultiSelectDao>(listMultiselect);

                        tx.Commit();
                    }
                    else if (AttributeTypeid == 12)
                    {
                        //old values for feed
                        var treeValue = (from item2 in tx.PersistenceManager.PlanningRepository.Query<UserDetailsTreeValueDao>() where item2.UserID == UserID && item2.Attributeid == attributeid select item2).ToList<UserDetailsTreeValueDao>();
                        // obj.obj3 = treeValue;
                        prplst.Add(new MultiProperty { propertyName = UserDetailsTreeValueDao.PropertyNames.UserID, propertyValue = UserID });
                        prplst.Add(new MultiProperty { propertyName = UserDetailsTreeValueDao.PropertyNames.Attributeid, propertyValue = attributeid });
                        //end
                        string str2 = "Delete from MM_UserDetailsTreeValue where UserID= ? and AttributeID = ?";
                        tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str2, UserID, attributeid);
                        UserDetailsTreeValueDao treeval;

                        for (var i = 0; i < NewValue.Count(); i++)
                        {
                            if ((int)NewValue[i] != 0)
                            {
                                treeval = new UserDetailsTreeValueDao();
                                treeval.Attributeid = attributeid;
                                treeval.UserID = UserID;
                                treeval.Nodeid = (int)NewValue[i];
                                treeval.Level = i + 1;
                                tx.PersistenceManager.MetadataRepository.Save<UserDetailsTreeValueDao>(treeval);
                            }
                        }
                        tx.Commit();


                    }
                    else if (AttributeTypeid == 5)
                    {
                        IList<MultiProperty> parList3 = new List<MultiProperty>();
                        dynamic value = DateTime.Parse(NewValue[0] == null ? "" : (string)NewValue[0].ToString());
                        string str = "select * from MM_AttributeRecord_" + Typeid + " where ID= ? ";
                        IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(UserID));
                        if (item.Count == 0)
                        {
                            DynamicQuery.Append("Insert into MM_AttributeRecord_" + Typeid + " (ID,Attr_" + attributeid + ") values(" + UserID + "," + value + ") ");
                            tx.PersistenceManager.PlanningRepository.ExecuteQuery(DynamicQuery.ToString());
                        }
                        else
                        {
                            DynamicQuery.Append("update  MM_AttributeRecord_" + Typeid + " set Attr_" + attributeid + "= '" + value + "' where ID= " + UserID + "");
                            tx.PersistenceManager.PlanningRepository.ExecuteQuery(DynamicQuery.ToString());
                        }
                        tx.Commit();
                    }

                }

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        public IList<IUserVisibleInfo> GetUserVisiblity(MetadataManagerProxy proxy)
        {
            try
            {
                int version = 0;
                IList<IUserVisibleInfo> _iiuservisible = new List<IUserVisibleInfo>();
                IList<UserVisibleInfoDao> dao = new List<UserVisibleInfoDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    //if (version == 0)
                    //{
                    //    dao = tx.PersistenceManager.MetadataRepository.GetAll<UserVisibleInfoDao>();
                    //    tx.Commit();
                    //}
                    //else
                    //{
                    //    string xmlpath = GetXmlWorkingPath();
                    //    dao = tx.PersistenceManager.MetadataRepository.GetObject<UserVisibleInfoDao>(xmlpath);
                    //}
                    string xmlpath = GetXmlWorkingPath();
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<UserVisibleInfoDao>(xmlpath);
                    foreach (var item in dao)
                    {
                        IUserVisibleInfo _iuservisible = new BrandSystems.Marcom.Core.Metadata.UserVisibleInfo();
                        _iuservisible.Id = item.Id;
                        _iuservisible.AttributeId = item.AttributeId;
                        _iiuservisible.Add(_iuservisible);
                    }
                }
                return _iiuservisible;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public int InsertUpdateUserVisibleInfo(MetadataManagerProxy proxy, int attributeId, int IsEnable)
        {

            try
            {
                int ID = 0;
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                int UserVisibleInfo_MaxID = 0;
                UserVisibleInfoDao obj = new UserVisibleInfoDao(ID, attributeId);
                if (IsEnable == 1)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR UserVisibleInfo_MaxID AS UserVisibleInfo_MaxID";
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        UserVisibleInfo_MaxID = Convert.ToInt32(sequenceNoVal[0]["UserVisibleInfo_MaxID"]);
                    }
                    XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<UserVisibleInfoDao>(GetXmlWorkingPath(), obj, UserVisibleInfo_MaxID);
                    if (SavedXML != null)
                    {
                        PersistenceManager.Instance.MetadataRepository.DeleteTableTag<UserVisibleInfoDao>(GetSynchXMLPath(), obj);
                        SavetoSynDBXml(SavedXML, "UserVisibleInfo", GetSynchXMLPath(), ID);
                    }
                }
                else
                {
                    PersistenceManager.Instance.MetadataRepository.DeleteObject<UserVisibleInfoDao>(GetXmlWorkingPath(), obj);
                    PersistenceManager.Instance.MetadataRepository.DeleteObject<UserVisibleInfoDao>(GetSynchXMLPath(), obj);
                }
                return UserVisibleInfo_MaxID;
            }

            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;

            }
            return 0;
        }



        public Tuple<int, int> InsertUpdateFinancialAttribute(MetadataManagerProxy metadataManagerProxy, string caption, string description, int attributetypeid, bool issystemdefined, bool isspecial, int finatttype, int id = 0)
        {
            FinancialAttributeDao iFinAttr = new FinancialAttributeDao();
            try
            {
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("-----------------------------------------------------------------------------------------------", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                BrandSystems.Marcom.Core.Metadata.LogHandler.LogInfo("Started adding Financial Attributes", BrandSystems.Marcom.Core.Metadata.LogHandler.LogType.General);
                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    iFinAttr.FinTypeID = finatttype;
                    iFinAttr.Caption = caption.Trim();
                    iFinAttr.Description = description;
                    iFinAttr.AttributeTypeID = attributetypeid;
                    iFinAttr.IsSystemDefined = issystemdefined;
                    iFinAttr.IsColumn = false;
                    iFinAttr.IsTooltip = false;
                    iFinAttr.IsCommitTooltip = false;
                    int sortorder = tx.PersistenceManager.MetadataRepository.Query<FinancialAttributeDao>().Max(a => a.SortOrder);
                    iFinAttr.SortOrder = sortorder + 1;
                    tx.PersistenceManager.MetadataRepository.Save<FinancialAttributeDao>(iFinAttr);
                    tx.Commit();
                }
                var tuple = Tuple.Create(iFinAttr.ID, iFinAttr.SortOrder);
                CreateTableAndDynamicXML(metadataManagerProxy);
                return tuple;
            }
            catch (Exception ex)
            {
            }
            return null;
        }
        public bool CreateTableAndDynamicXML(MetadataManagerProxy metadataManagerProxy)
        {
            try
            {
                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {

                    IList<FinancialAttributeDao> financial = tx.PersistenceManager.MetadataRepository.GetAll<FinancialAttributeDao>().Where(a => a.FinTypeID == 3 && a.IsSystemDefined == false).ToList();
                    List<BrandSystems.Marcom.Utility.DynamicColumn> idynamicttableColumns = new List<BrandSystems.Marcom.Utility.DynamicColumn>();
                    BrandSystems.Marcom.Utility.DynamicTable dynamictentitytable = new BrandSystems.Marcom.Utility.DynamicTable();
                    idynamicttableColumns.Clear();
                    foreach (var item in financial)
                    {
                        string Datatype;
                        string SqlType = "";
                        switch (item.AttributeTypeID)
                        {
                            case 1:
                                Datatype = "string";
                                SqlType = "nvarchar";
                                break;
                            case 2:
                                Datatype = "string";
                                SqlType = "nvarchar";
                                break;
                            case 3:
                                Datatype = "int";
                                SqlType = "INT";
                                break;
                            case 4:
                                Datatype = "int";
                                SqlType = "INT";
                                break;
                            default:
                                Datatype = "int";
                                SqlType = "INT";
                                break;
                        }
                        if (item.FinTypeID == 3)
                            dynamictentitytable.Name = "PM_FundingCostCentreRecords";
                        else if (item.FinTypeID == 1)
                            dynamictentitytable.Name = "PM_PORecords";
                        else if (item.FinTypeID == 2)
                            dynamictentitytable.Name = "PM_SpentRecords";

                        BrandSystems.Marcom.Utility.DynamicColumn attrdynamictableColumns = new BrandSystems.Marcom.Utility.DynamicColumn();
                        attrdynamictableColumns.AttributeId = item.ID;
                        attrdynamictableColumns.Name = item.Caption;
                        attrdynamictableColumns.Type = SqlType;
                        attrdynamictableColumns.IsNullable = true;
                        attrdynamictableColumns.ColumnName = "Attr_" + item.ID;
                        idynamicttableColumns.Add(attrdynamictableColumns);
                    }
                    dynamictentitytable.Columns = idynamicttableColumns;

                    //Creating Dynamic Table

                    IList<FinancialAttributeDao> POReclist = tx.PersistenceManager.MetadataRepository.GetAll<FinancialAttributeDao>().Where(a => a.FinTypeID == 1 && a.IsSystemDefined == false).ToList();
                    List<BrandSystems.Marcom.Utility.DynamicColumn> idynamicttableColumns_PO = new List<BrandSystems.Marcom.Utility.DynamicColumn>();
                    BrandSystems.Marcom.Utility.DynamicTable dynamictentitytable_PO = new BrandSystems.Marcom.Utility.DynamicTable();
                    idynamicttableColumns_PO.Clear();
                    foreach (var item in POReclist)
                    {
                        string Datatype;
                        string SqlType = "";
                        switch (item.AttributeTypeID)
                        {
                            case 1:
                                Datatype = "string";
                                SqlType = "nvarchar";
                                break;
                            case 2:
                                Datatype = "string";
                                SqlType = "nvarchar";
                                break;
                            case 3:
                                Datatype = "int";
                                SqlType = "INT";
                                break;
                            case 4:
                                Datatype = "int";
                                SqlType = "INT";
                                break;
                            default:
                                Datatype = "int";
                                SqlType = "INT";
                                break;
                        }
                        if (item.FinTypeID == 3)
                            dynamictentitytable_PO.Name = "PM_FundingCostCentreRecords";
                        else if (item.FinTypeID == 1)
                            dynamictentitytable_PO.Name = "PM_PORecords";
                        else if (item.FinTypeID == 2)
                            dynamictentitytable_PO.Name = "PM_SpentRecords";

                        BrandSystems.Marcom.Utility.DynamicColumn attrdynamictableColumns_PO = new BrandSystems.Marcom.Utility.DynamicColumn();
                        attrdynamictableColumns_PO.AttributeId = item.ID;
                        attrdynamictableColumns_PO.Name = item.Caption;
                        attrdynamictableColumns_PO.Type = SqlType;
                        attrdynamictableColumns_PO.IsNullable = true;
                        attrdynamictableColumns_PO.ColumnName = "Attr_" + item.ID;
                        idynamicttableColumns_PO.Add(attrdynamictableColumns_PO);
                    }
                    dynamictentitytable_PO.Columns = idynamicttableColumns_PO;

                    IList<FinancialAttributeDao> SpentRecordsList = tx.PersistenceManager.MetadataRepository.GetAll<FinancialAttributeDao>().Where(a => a.FinTypeID == 2 && a.IsSystemDefined == false).ToList();
                    List<BrandSystems.Marcom.Utility.DynamicColumn> idynamicttableColumns_SR = new List<BrandSystems.Marcom.Utility.DynamicColumn>();
                    BrandSystems.Marcom.Utility.DynamicTable dynamictentitytable_SR = new BrandSystems.Marcom.Utility.DynamicTable();
                    idynamicttableColumns_SR.Clear();
                    foreach (var item in SpentRecordsList)
                    {
                        string Datatype;
                        string SqlType = "";
                        switch (item.AttributeTypeID)
                        {
                            case 1:
                                Datatype = "string";
                                SqlType = "nvarchar";
                                break;
                            case 2:
                                Datatype = "string";
                                SqlType = "nvarchar";
                                break;
                            case 3:
                                Datatype = "int";
                                SqlType = "INT";
                                break;
                            case 4:
                                Datatype = "int";
                                SqlType = "INT";
                                break;
                            default:
                                Datatype = "int";
                                SqlType = "INT";
                                break;
                        }
                        if (item.FinTypeID == 3)
                            dynamictentitytable_SR.Name = "PM_FundingCostCentreRecords";
                        else if (item.FinTypeID == 1)
                            dynamictentitytable_SR.Name = "PM_PORecords";
                        else if (item.FinTypeID == 2)
                            dynamictentitytable_SR.Name = "PM_SpentRecords";

                        BrandSystems.Marcom.Utility.DynamicColumn attrdynamictableColumns_SR = new BrandSystems.Marcom.Utility.DynamicColumn();
                        attrdynamictableColumns_SR.AttributeId = item.ID;
                        attrdynamictableColumns_SR.Name = item.Caption;
                        attrdynamictableColumns_SR.Type = SqlType;
                        attrdynamictableColumns_SR.IsNullable = true;
                        attrdynamictableColumns_SR.ColumnName = "Attr_" + item.ID;
                        idynamicttableColumns_SR.Add(attrdynamictableColumns_SR);
                    }
                    dynamictentitytable_SR.Columns = idynamicttableColumns_SR;
                    //Creating Dynamic Table
                    StringBuilder sbHeader = new StringBuilder();
                    sbHeader.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                    sbHeader.Append("<hibernate-mapping xmlns=\"urn:nhibernate-mapping-2.2\" assembly=\"BrandSystems.Marcom.Dal\" namespace=\"BrandSystems.Marcom.Dal\">");
                    if (POReclist.Count > 0)
                    {
                        var mappingxmlfilestatus_PO = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateOrUpdateTableUsingQuery(tx, dynamictentitytable_PO, IsFinancialCostCentre: true);
                        sbHeader.Append(mappingxmlfilestatus_PO.InnerXml);
                    }
                    else
                    {
                        sbHeader.Append(" <class name=\"BrandSystems.Marcom.Dal.Planning.Model.DynamicAttributesDao,BrandSystems.Marcom.Dal\" table=\"PM_PORecords\" entity-name=\"PORecords\" lazy=\"true\"><id name=\"Id\" column=\"Id\"><generator class=\"assigned\" /></id></class>");
                    }
                    if (SpentRecordsList.Count > 0)
                    {
                        var mappingxmlfilestatus_SR = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateOrUpdateTableUsingQuery(tx, dynamictentitytable_SR, IsFinancialCostCentre: true);
                        sbHeader.Append(mappingxmlfilestatus_SR.InnerXml);
                    }
                    else
                    {
                        sbHeader.Append(" <class name=\"BrandSystems.Marcom.Dal.Planning.Model.DynamicAttributesDao,BrandSystems.Marcom.Dal\" table=\"PM_SpentRecords\" entity-name=\"SpentRecords\" lazy=\"true\"><id name=\"Id\" column=\"Id\"><generator class=\"assigned\" /></id></class>");
                    }
                    if (financial.Count > 0)
                    {
                        var mappingxmlfilestatus = BrandSystems.Marcom.Utility.DynamicTableLibrary.Instance.CreateOrUpdateTableUsingQuery(tx, dynamictentitytable, IsFinancialCostCentre: true);
                        sbHeader.Append(mappingxmlfilestatus.InnerXml);
                    }
                    else
                    {
                        sbHeader.Append(" <class name=\"BrandSystems.Marcom.Dal.Planning.Model.DynamicAttributesDao,BrandSystems.Marcom.Dal\" table=\"PM_FundingCostCentreRecords\" entity-name=\"FundingCostCentreRecords\" lazy=\"true\"><id name=\"Id\" column=\"Id\"><generator class=\"assigned\" /></id></class>");
                    }
                    sbHeader.Append("</hibernate-mapping>");
                    string dynamicMappingFilePath = AppDomain.CurrentDomain.BaseDirectory + "DynamicMappingfiles\\" + @"\DynamicFinancialMappingfile.hbml.xml";
                    using (StreamWriter outfile = new StreamWriter(dynamicMappingFilePath))
                    {
                        outfile.Write(sbHeader.ToString());
                    }
                    tx.Commit();
                    PersistenceManager.Instance.Initialize();
                    try
                    {
                        CopyFinancialFilestoAPI();
                    }
                    catch (Exception ex)
                    {
                    }

                }
                return true;
            }
            catch
            {
                return false;
            }
        }


        public int InsertUpdateFinancialAttrOptions(MetadataManagerProxy metadataManagerProxy, string caption, int attributeid, int sortorder, int id = 0)
        {
            try
            {
                int Option_MaxID = 0;
                using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                {
                    FinancialOptionDao iFinAttrOptions = new FinancialOptionDao();
                    iFinAttrOptions.Caption = caption.Trim();
                    iFinAttrOptions.FinAttributeID = attributeid;
                    iFinAttrOptions.SortOrder = sortorder;
                    if (id != 0)
                    {
                        iFinAttrOptions.ID = id;
                    }
                    tx.PersistenceManager.MetadataRepository.Save<FinancialOptionDao>(iFinAttrOptions);
                    tx.Commit();
                }

                return Option_MaxID;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public IList<IFinancialAttribute> GetFinancialAttribute(MetadataManagerProxy proxy)
        {
            try
            {
                IList<IFinancialAttribute> _iiFinAttribute = new List<IFinancialAttribute>();
                IList<FinancialAttributeDao> finAttrdao = new List<FinancialAttributeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    finAttrdao = tx.PersistenceManager.MetadataRepository.GetAll<FinancialAttributeDao>().OrderBy(a => a.SortOrder).ToList();
                    tx.Commit();
                }
                foreach (var item in finAttrdao)
                {
                    IFinancialAttribute _ifinAttribute = new BrandSystems.Marcom.Core.Metadata.FinancailAttribute();
                    _ifinAttribute.Caption = item.Caption;
                    _ifinAttribute.Description = item.Description;
                    _ifinAttribute.FinTypeID = item.FinTypeID;
                    _ifinAttribute.AttributeTypeID = item.AttributeTypeID;
                    _ifinAttribute.IsSystemDefined = item.IsSystemDefined;
                    _ifinAttribute.IsColumn = item.IsColumn;
                    _ifinAttribute.IsTooltip = item.IsTooltip;
                    _ifinAttribute.IsCommitTooltip = item.IsCommitTooltip;
                    _ifinAttribute.SortOrder = item.SortOrder;
                    _ifinAttribute.ID = item.ID;
                    _iiFinAttribute.Add(_ifinAttribute);
                }
                return _iiFinAttribute;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public int DeleteFinancialAttribute(MetadataManagerProxy proxy, int FinID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.PlanningRepository.DeleteByID<FinancialAttributeDao>(FinID);
                    tx.PersistenceManager.MetadataRepository.DeleteByID<FinancialOptionDao>("FinAttributeID", FinID);
                    tx.Commit();
                }
                return 1;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public bool DeleteFinancialOptionByAttributeID(MetadataManagerProxy proxy, int attributeid)
        {
            try
            {
                OptionDao obj = new OptionDao();
                obj.AttributeID = attributeid;
                if (PersistenceManager.Instance.MetadataRepository.DeleteOptionByAttributeID<OptionDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteOptionByAttributeID<OptionDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch
            {
                return false;
            }
        }

        public bool UpdateFinancialMetadata(MetadataManagerProxy proxy, int ID, string Caption, string Description, int FinType, int AttributeTypeID, bool IsSystemDefined, bool IsColumn, bool IsToolTip, bool IsCommitTooltip, int SortOrder)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FinancialAttributeDao dao = new FinancialAttributeDao();
                    dao.ID = ID;
                    dao.Caption = Caption;
                    dao.Description = Description;
                    dao.FinTypeID = FinType;
                    dao.AttributeTypeID = AttributeTypeID;
                    dao.IsSystemDefined = IsSystemDefined;
                    dao.IsColumn = IsColumn;
                    dao.IsTooltip = IsToolTip;
                    dao.IsCommitTooltip = IsCommitTooltip;
                    dao.SortOrder = SortOrder;
                    tx.PersistenceManager.MetadataRepository.Save<FinancialAttributeDao>(dao);
                    tx.Commit();
                }
                return true;
            }
            catch
            {
                return false;
            }
        }
        public bool DeleteFinMetadata(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.MetadataRepository.DeleteByID<FinancialAttributeDao>(ID);
                    tx.Commit();
                    CreateTableAndDynamicXML(proxy);
                }
                return true;
            }
            catch
            {
                return false;
            }
        }
        public bool UpdateFinMetadataSortOrder(MetadataManagerProxy proxy, int ID, int SortOrder)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    FinancialAttributeDao finattrdao = new FinancialAttributeDao();
                    finattrdao = tx.PersistenceManager.MetadataRepository.Get<FinancialAttributeDao>(ID);
                    if (finattrdao != null)
                    {
                        finattrdao.SortOrder = SortOrder;
                    }
                    tx.PersistenceManager.MetadataRepository.Save<FinancialAttributeDao>(finattrdao);
                    tx.Commit();
                }
                return true;
            }
            catch
            {
                return false;
            }
        }

        public IList<IFinancialOption> GetFinancialAttributeOptions(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                IList<IFinancialOption> _iiFinAttributeOptions = new List<IFinancialOption>();
                IList<FinancialOptionDao> finAttrOptionsdao = new List<FinancialOptionDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    finAttrOptionsdao = tx.PersistenceManager.MetadataRepository.GetAll<FinancialOptionDao>().Where(a => a.FinAttributeID == ID).OrderBy(a => a.SortOrder).ToList();
                    tx.Commit();
                }
                foreach (var item in finAttrOptionsdao)
                {
                    IFinancialOption _ifinAttributeoptions = new BrandSystems.Marcom.Core.Metadata.FinancialOption();
                    _ifinAttributeoptions.ID = item.ID;
                    _ifinAttributeoptions.Caption = item.Caption;
                    _ifinAttributeoptions.FinAttributeID = item.FinAttributeID;
                    _ifinAttributeoptions.SortOrder = item.SortOrder;
                    _iiFinAttributeOptions.Add(_ifinAttributeoptions);
                }
                return _iiFinAttributeOptions;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public bool DeleteFinancialOption(MetadataManagerProxy proxy, int optionid)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    tx.PersistenceManager.MetadataRepository.DeleteByID<FinancialOptionDao>(optionid);
                    tx.Commit();
                }
                return true;
            }
            catch (Exception ex)
            {
            }
            return false;
        }

        /// <summary>
        /// GET ALL THE ENTITY TYPE IDS THAT ARE HAVING THE GLOBAL ACCESS
        /// </summary>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public List<int> GetEntityTypeAccessPermission(MetadataManagerProxy proxy)
        {
            try
            {
                List<int> listentitytypeId = new List<int>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    StringBuilder str = new StringBuilder();

                    str.Append("SELECT ageta.EntityTypeID ");
                    str.Append("FROM   AM_GlobalEntityTypeAcl ageta INNER JOIN MM_Module mm ON  mm.ID = ageta.ModuleID ");
                    str.Append("AND mm.IsEnable = 1 INNER JOIN MM_EntityType met ON  met.ID = ageta.EntityTypeID ");
                    str.Append("WHERE mm.ID = 3  AND  ageta.GlobalRoleID IN (SELECT GlobalRoleID FROM   AM_GlobalRole_User WHERE  UserId = " + proxy.MarcomManager.User.Id + ") ");

                    var result = tx.PersistenceManager.MetadataRepository.ExecuteQuery(str.ToString()).Cast<Hashtable>().ToList();

                    foreach (var obj in result)
                    {
                        listentitytypeId.Add((int)obj["EntityTypeID"]);
                    }
                    tx.Commit();
                }
                return listentitytypeId;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// GET ENTITY WISE ACCESS ON ENTITY MEMBER ROLE AND ENTITY TYPE ACCESS
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="entityId"></param>
        /// <param name="entityTypeId"></param>
        /// <returns></returns>
        public List<string> GetSubEntityTypeAccessPermission(MetadataManagerProxy proxy, int entityId, string entityTypeId, int moduleID)
        {
            List<string> entyperm = new List<string>();
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    StringBuilder str = new StringBuilder();

                    str.Append(" SELECT MIN(aetra.EntityRoleID) as Permission  FROM AM_Entity_Role_User aeru ");
                    str.Append("INNER JOIN AM_EntityTypeRoleAcl aetra ON aeru.RoleID=aetra.ID ");
                    str.Append("WHERE aeru.EntityID= " + entityId + " AND aeru.UserID = " + proxy.MarcomManager.User.Id + " ");

                    var res = tx.PersistenceManager.MetadataRepository.ExecuteQuery(str.ToString()).Cast<Hashtable>().ToList();
                    if (Convert.ToInt32(res[0]["Permission"]) <= 2 && res[0]["Permission"] != null)
                    {
                        entyperm.Add("Role, " + entityId + ", " + Convert.ToInt32(res[0]["Permission"]));
                    }
                    else
                    {
                        for (int i = 0; i < entityTypeId.Split(',').Length; i++)
                        {
                            str.Clear();
                            str.Append("SELECT ageta.EntityTypeID, ageta.AccessPermission ");
                            str.Append("FROM   AM_GlobalEntityTypeAcl ageta INNER JOIN MM_Module mm ON  mm.ID = ageta.ModuleID ");
                            str.Append("AND mm.IsEnable = 1 INNER JOIN MM_EntityType met ON  met.ID = ageta.EntityTypeID ");
                            str.Append("WHERE ageta.EntityTypeID = " + entityTypeId.Split(',')[i] + " AND mm.ID = " + moduleID + "  AND  ageta.GlobalRoleID IN (SELECT GlobalRoleID FROM   AM_GlobalRole_User WHERE  UserId = " + proxy.MarcomManager.User.Id + ") ");

                            var result = tx.PersistenceManager.MetadataRepository.ExecuteQuery(str.ToString()).Cast<Hashtable>().ToList();

                            foreach (var obj in result)
                            {
                                entyperm.Add("GlobalRole, " + (int)obj["EntityTypeID"] + ", " + (bool)obj["AccessPermission"]);
                            }

                        }
                    }

                    tx.Commit();
                }
                return entyperm;
            }

            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// CREATE THE ENTITY TYPE TREE STRUCTURE ON PARENT AND CHILD RELATION
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="entityTypeId"></param>
        /// <returns></returns>
        public string GettingEntityTypeTreeStructure(MetadataManagerProxy proxy, int entityTypeId)
        {
            try
            {
                string tree = string.Empty;
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string moduleCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityType> _iientitytype = new List<IEntityType>();

                string mappingfilesPath = "";

                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlpath = GetXmlWorkingPath();
                    int cnt = 0;

                    IList<IEntityType> ientitytype = new List<IEntityType>();
                    ientitytype = GetEntityTypeIsAssociate(proxy);


                    var hierarchyObj = from entyobj in tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath)
                                       join hrcy in tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeHierarchyDao>(xmlpath)
                                       on entyobj.Id equals hrcy.ChildActivityTypeID
                                       where hrcy.ChildActivityTypeID == entityTypeId
                                       orderby hrcy.ParentActivityTypeID
                                       select new
                                       {
                                           ID = entyobj.Id,
                                           Caption = entyobj.Caption,
                                           ParentCaption =
                                               (from entyobj1 in tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath)
                                                where entyobj1.Id == hrcy.ParentActivityTypeID
                                                select entyobj1.Caption).FirstOrDefault(),
                                           ParentEntityTypeID = hrcy.ParentActivityTypeID
                                       };

                    UIEntityTypeTreeNode parentNode = new UIEntityTypeTreeNode();
                    parentNode.Caption = "Root";
                    parentNode.Id = 0;
                    parentNode.Children = new List<UIEntityTypeTreeNode>();

                    foreach (var node in hierarchyObj)
                    {
                        UIEntityTypeTreeNode uiFirstNode = new UIEntityTypeTreeNode();
                        uiFirstNode.Children = new List<UIEntityTypeTreeNode>();
                        uiFirstNode.Id = node.ID;
                        uiFirstNode.Caption = node.Caption;

                        UIEntityTypeTreeNode uichildNode = new UIEntityTypeTreeNode();
                        uichildNode.Children = new List<UIEntityTypeTreeNode>();
                        uichildNode.Id = node.ParentEntityTypeID;
                        uichildNode.Caption = node.ParentCaption;

                        uiFirstNode.Children.Add(uichildNode);
                        parentNode.Children.Add(uiFirstNode);

                        EntityTypeRecursionTreeSerialization(tx, xmlpath, parentNode, uiFirstNode, uichildNode, node.ParentEntityTypeID);
                    }

                    tree = JsonConvert.SerializeObject(parentNode);

                    tx.Commit();
                }

                return tree;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public void EntityTypeRecursionTreeSerialization(ITransaction tx, string xmlpath, UIEntityTypeTreeNode uiRootNode, UIEntityTypeTreeNode uiFirstNode, UIEntityTypeTreeNode uiParentNode, int parententityID)
        {
            var hierarchyObj = from entyobj in tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath)
                               join hrcy in tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeHierarchyDao>(xmlpath)
                               on entyobj.Id equals hrcy.ChildActivityTypeID
                               where hrcy.ChildActivityTypeID == parententityID
                               orderby hrcy.ParentActivityTypeID
                               select new
                               {
                                   ID = entyobj.Id,
                                   Caption = entyobj.Caption,
                                   ParentCaption =
                                       (from entyobj1 in tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath)
                                        where entyobj1.Id == hrcy.ParentActivityTypeID
                                        select entyobj1.Caption).FirstOrDefault(),
                                   ParentEntityTypeID = hrcy.ParentActivityTypeID
                               };

            foreach (var node in hierarchyObj)
            {
                UIEntityTypeTreeNode uiNode = new UIEntityTypeTreeNode();
                uiNode.Children = new List<UIEntityTypeTreeNode>();
                uiNode.Id = node.ParentEntityTypeID;
                uiNode.Caption = node.ParentCaption;

                if (hierarchyObj.Count() > 1)
                {
                    UIEntityTypeTreeNode uiSilblingNode1 = new UIEntityTypeTreeNode();
                    uiSilblingNode1 = UIEntityTypeTreeNode.DeepClone<UIEntityTypeTreeNode>(uiFirstNode);
                    uiRootNode.Children.Add(FindLastChildrenOfNode(uiSilblingNode1, uiNode, 0));
                    EntityTypeRecursionTreeSerialization(tx, xmlpath, uiRootNode, uiSilblingNode1, uiNode, node.ParentEntityTypeID);
                }
                else
                {
                    uiParentNode.Children.Add(uiNode);
                    EntityTypeRecursionTreeSerialization(tx, xmlpath, uiRootNode, uiFirstNode, uiNode, node.ParentEntityTypeID);
                }
            }

        }

        public UIEntityTypeTreeNode FindLastChildrenOfNode(UIEntityTypeTreeNode uiParentNode, UIEntityTypeTreeNode uiChildNode, int cnt)
        {
            try
            {
                if (uiParentNode.Children.Count() == 0)
                {
                    uiParentNode.Children.Add(uiChildNode);
                    return uiParentNode;
                }
                else
                    FindLastChildrenOfNode(uiParentNode.Children[cnt], uiChildNode, 0);

                return uiParentNode;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public int InsertUpdateEntityTypeRoleAccess(MetadataManagerProxy metadataManagerProxy, string Caption, int EntityTypeID, int EntityRoleID, int ModuleID, int SortOrder, int ID)
        {

            try
            {
                metadataManagerProxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                IEntityTypeRoleAcl entitytyperoleobj = new EntityTypeRoleAcl();
                entitytyperoleobj.EntityTypeID = EntityTypeID;
                entitytyperoleobj.EntityRoleID = EntityRoleID;
                entitytyperoleobj.Caption = Caption;
                entitytyperoleobj.ModuleID = ModuleID;
                entitytyperoleobj.Sortorder = SortOrder;
                int EntityTypeRole_MaxID = 0;

                if (ID == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR EntityTypeRoleAcl_MaxID AS EntityTypeRoleAcl_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        EntityTypeRole_MaxID = Convert.ToInt32(sequenceNoVal[0]["EntityTypeRoleAcl_MaxID"]);
                        entitytyperoleobj.ID = EntityTypeRole_MaxID;
                    }
                }
                else
                {
                    entitytyperoleobj.ID = ID;
                    EntityTypeRole_MaxID = ID;
                }
                EntityTypeRoleAclDao obj = new EntityTypeRoleAclDao(entitytyperoleobj.ID, Caption, EntityRoleID, ModuleID, EntityTypeID, SortOrder);

                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<EntityTypeRoleAclDao>(GetXmlWorkingPath(), obj, EntityTypeRole_MaxID);
                SavetoSynDBXml(SavedXML, "EntityTypeRole_Acl", GetSynchXMLPath(), ID);

                return EntityTypeRole_MaxID;

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        public Tuple<IList<IEntityTypeRoleAcl>, IList<IEntityTypeRoleAcl>> GetEntityTypeRoleAcl(MetadataManagerProxy proxy, int EntityTypeID)
        {
            try
            {

                IList<IEntityTypeRoleAcl> _iientityTyperoleobj = new List<IEntityTypeRoleAcl>();
                IList<IEntityTypeRoleAcl> _iDefaultientityTyperoleobj = new List<IEntityTypeRoleAcl>();
                string xmlPath = string.Empty;
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = GetXmlWorkingPath();
                    XDocument xDoc = XDocument.Load(xmlPath);
                    IList<EntityTypeRoleAclDao> dao = new List<EntityTypeRoleAclDao>();

                    if (versionNumber == 0)
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetAll<EntityTypeRoleAclDao>();
                        tx.Commit();
                    }
                    else
                    {
                        dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeRoleAclDao>(xmlPath);
                        tx.Commit();
                    }
                    int[] FilterIds = { (int)EntityRoles.Owner, (int)EntityRoles.BudgerApprover };
                    if ((EntityTypeList)EntityTypeID == EntityTypeList.CostCentre || (EntityTypeList)EntityTypeID == EntityTypeList.Objective)
                    {
                        FilterIds = FilterIds.Take(1).ToArray();
                    }
                    //var entityroleobj = dao.Where(a => a.EntityTypeID == EntityTypeID && !FilterIds.Contains(a.EntityRoleID)).OrderBy(a => a.Sortorder);
                    var entityroleobj = dao.Where(a => a.EntityTypeID == EntityTypeID).OrderBy(a => a.Sortorder);
                    foreach (var item in entityroleobj)
                    {
                        EntityTypeRoleAcl entitytypeRoleAclObj = new EntityTypeRoleAcl();
                        entitytypeRoleAclObj.ID = item.ID;
                        entitytypeRoleAclObj.EntityTypeID = item.EntityTypeID;
                        entitytypeRoleAclObj.EntityRoleID = item.EntityRoleID;
                        entitytypeRoleAclObj.ModuleID = item.ModuleID;
                        entitytypeRoleAclObj.Sortorder = item.Sortorder;
                        entitytypeRoleAclObj.Caption = item.Caption;
                        if (!FilterIds.Contains(item.EntityRoleID))
                            _iientityTyperoleobj.Add(entitytypeRoleAclObj);
                        else
                            _iDefaultientityTyperoleobj.Add(entitytypeRoleAclObj);
                    }
                }
                if (_iientityTyperoleobj.Count() > 0)
                    return Tuple.Create(_iDefaultientityTyperoleobj, _iientityTyperoleobj);
                //return _iientityTyperoleobj;
                else
                    return null;

            }
            catch
            {

                return null;
            }
        }

        public bool DeleteEntityTypeRoleAcl(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                EntityTypeRoleAclDao obj = new EntityTypeRoleAclDao();
                obj.ID = ID;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeRoleAclDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeRoleAclDao>(GetSynchXMLPath(), obj) == true)
                {
                    using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                    {
                        tx.PersistenceManager.AccessRepository.DeleteByID<EntityTypeRoleAclDao>(ID);
                        tx.Commit();
                    }
                    return true;
                }
            }
            catch (Exception ex)
            {

            }
            return false;
        }
        /// <summary>
        /// GetRoleFeatures
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="GlobalRoleID"></param>
        /// <returns>return Ilist of Rolefeatures</returns>
        public IList<IRoleFeature> GetRoleFeatures(MetadataManagerProxy proxy, int GlobalRoleID)
        {
            IList<IRoleFeature> _iirolefeature = new List<IRoleFeature>();
            FeatureDao modulefeatures = new FeatureDao();
            using (ITransaction tx = proxy.MarcomManager.GetTransaction())
            {
                IList<ModuleDao> moudle = new List<ModuleDao>();
                moudle = tx.PersistenceManager.MetadataRepository.GetAll<ModuleDao>();
                foreach (var itemmodule in moudle)
                {
                    tx.PersistenceManager.MetadataRepository.GetAll<FeatureDao>();
                    var features = tx.PersistenceManager.MetadataRepository.GetAll<FeatureDao>().Where(a => a.IsEnable == true && a.ModuleID == itemmodule.Id);
                    var globalroles = tx.PersistenceManager.MetadataRepository.GetAll<GlobalAclDao>().Where(a => a.GlobalRoleid == GlobalRoleID);
                    foreach (var item in features)
                    {
                        IRoleFeature _featuress = new RoleFeature();
                        var access = globalroles.Where(a => a.Featureid == item.Id);
                        bool permission = false;
                        _featuress.GlobalAclID = 0;
                        if (access.Count() == 1)
                        {
                            permission = access.ElementAt(0).AccessPermission;
                            _featuress.GlobalAclID = access.ElementAt(0).Id;
                        }
                        _featuress.Id = item.Id;
                        _featuress.Caption = item.Caption;
                        _featuress.Description = item.Description;
                        _featuress.ModuleID = item.ModuleID;
                        _featuress.IsChecked = permission;
                        _iirolefeature.Add(_featuress);
                    }
                }

            }
            return _iirolefeature;
        }
        /// <summary>
        /// SaveUpdateRoleFeatures
        /// </summary>
        /// <param name="proxy"></param>
        /// <param name="GlobalRoleID"></param>
        /// <param name="ModuleID"></param>
        /// <param name="FeatureID"></param>
        /// <param name="IsChecked"></param>
        /// <returns>return true is save is success </returns>
        public bool SaveUpdateRoleFeatures(MetadataManagerProxy proxy, int GlobalRoleID, int ModuleID, int FeatureID, bool IsChecked, int GlobalAclId)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    GlobalAclDao dao = new GlobalAclDao();
                    if (GlobalAclId != 0)
                        dao.Id = GlobalAclId;

                    dao.GlobalRoleid = GlobalRoleID;
                    dao.Moduleid = ModuleID;
                    dao.Featureid = FeatureID;
                    dao.AccessPermission = IsChecked;
                    dao.EntityTypeid = 0;
                    tx.PersistenceManager.MetadataRepository.Save<GlobalAclDao>(dao);
                    tx.Commit();
                }
                return true;
            }
            catch
            {
                return false;
            }
        }

        public bool IsRoleExist(MetadataManagerProxy proxy, int ID)
        {
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    if (tx.PersistenceManager.AccessRepository.Query<EntityRoleUserDao>().Where(a => a.Roleid == ID).Count() > 0)
                    {
                        return true;
                    }

                }

            }
            catch
            {

            }
            return false;
        }

        private void CopyFinancialFilestoAPI()
        {
            var sourceDir = ConfigurationManager.AppSettings["OriginalXMLpath"] + "DynamicMappingfiles";
            string DestPath = ConfigurationManager.AppSettings["APIXMLPath"] + "DynamicMappingfiles";
            var pattern = "*.xml";
            if (!System.IO.Directory.Exists(DestPath))
            {
                System.IO.Directory.CreateDirectory(DestPath);
            }
            foreach (var file in new DirectoryInfo(sourceDir).GetFiles(pattern))
            {
                if (file.Name == "DynamicFinancialMappingfile.hbml.xml")
                {
                    file.CopyTo(Path.Combine(DestPath, file.Name), true);
                }
            }
        }

        private void CopyXMLfilestoAPI()
        {
            //CopyAdminSettings.xml
            string fileName = "AdminSettings.xml";
            string sourcePath = ConfigurationManager.AppSettings["OriginalXMLpath"];
            string targetPath = ConfigurationManager.AppSettings["APIXMLPath"];
            // Use Path class to manipulate file and directory paths.
            string sourceFile = System.IO.Path.Combine(sourcePath, fileName);
            string destFile = System.IO.Path.Combine(targetPath, fileName);
            System.IO.File.Copy(sourceFile, destFile, true);

            //CopyMetadataxmls
            var sourceDirMetadataXML = ConfigurationManager.AppSettings["OriginalXMLpath"] + "MetadataXML";
            string DestPath = ConfigurationManager.AppSettings["APIXMLPath"] + "MetadataXML";
            var pattern = "*.xml";
            if (!System.IO.Directory.Exists(DestPath))
            {
                System.IO.Directory.CreateDirectory(DestPath);
            }
            foreach (var file in new DirectoryInfo(sourceDirMetadataXML).GetFiles(pattern))
            {
                file.CopyTo(Path.Combine(DestPath, file.Name), true);
            }

            //CopyDynamicMappingfiles
            var sourceDynMappingXML = ConfigurationManager.AppSettings["OriginalXMLpath"] + "DynamicMappingfiles";
            string DestPathDynMappFiles = ConfigurationManager.AppSettings["APIXMLPath"] + "DynamicMappingfiles";
            if (!System.IO.Directory.Exists(DestPathDynMappFiles))
            {
                System.IO.Directory.CreateDirectory(DestPathDynMappFiles);
            }
            foreach (var file in new DirectoryInfo(sourceDynMappingXML).GetFiles(pattern))
            {
                file.CopyTo(Path.Combine(DestPathDynMappFiles, file.Name), true);
            }
        }

        public string GetAttributeTreeNodesForFilter(ITransaction tx, int attributeID, int FilterID)
        {
            try
            {
                IList<ITreeNode> _iitreenode = new List<ITreeNode>();
                IList<TreeNodeDao> dao = new List<TreeNodeDao>();
                int[] daotreevalues = { };
                int[] parentNodes = { };
                string tree = string.Empty;


                string xmlpath = string.Empty;

                xmlpath = GetActiveVersionXmlPath();

                dao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();

                //daotreevalues = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Entityid == parentID).Select(a => a.Nodeid).ToArray();
                daotreevalues = tx.PersistenceManager.MetadataRepository.Query<FiltersettingsValuesDao>().Where(a => a.FilterId == FilterID && a.AttributeId == attributeID).Select(a => a.Value).ToArray();

                var parentNode = from node in dao
                                 where node.AttributeID == attributeID
                                     && node.ParentNodeID == 0
                                 select node;

                UITreeNode uiNode = new UITreeNode();
                uiNode.Caption = "Root";
                uiNode.Level = 0;
                uiNode.id = 0;
                uiNode.AttributeId = attributeID;
                uiNode.SortOrder = 0;
                uiNode.IsDeleted = false;
                uiNode.isShow = true;
                uiNode.ischecked = true;
                uiNode.Children = new List<UITreeNode>();
                RecursionAttributeTreeSerialization(uiNode, parentNode.OrderBy(a => a.SortOrder).ToList<TreeNodeDao>(), dao, attributeID, daotreevalues);
                tree = JsonConvert.SerializeObject(uiNode);
                return tree;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public bool GetWorkspacePermission(MetadataManagerProxy proxy)
        {
            bool status = false;
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    status = proxy.MarcomManager.AccessManager.CheckUserAccess((int)Modules.Planning, (int)FeatureID.Plan, 64);
                    tx.Commit();
                    return status;
                }
            }
            catch (Exception ex)
            { }
            return status;
        }


        public IList<IEntityType> GetDAMEntityTypes(MetadataManagerProxy proxy)
        {
            try
            {
                string xmlPath = string.Empty;
                int version = MarcomManagerFactory.ActiveMetadataVersionNumber;
                IList<IEntityType> listentity = new List<IEntityType>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = tx.PersistenceManager.MetadataRepository.GetXmlPath(version);
                    XDocument xDoc = XDocument.Load(xmlPath);
                    var entityTypeHeirarchyDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlPath);
                    var entityTypeHeirarchyDaoresultObj = entityTypeHeirarchyDao.Where(a => a.ModuleID == 5).ToList();
                    foreach (var entObj in entityTypeHeirarchyDaoresultObj)
                    {
                        EntityType entity = new EntityType();
                        entity.Id = entObj.Id;
                        entity.Caption = entObj.Caption;
                        entity.ColorCode = entObj.ColorCode;
                        entity.ShortDescription = entObj.ShortDescription;
                        listentity.Add(entity);
                    }
                }

                return listentity;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void UpdateTreeAdminSettings(MetadataManagerProxy proxy, int EntityTypeID)
        {
            try
            {
                IList<EntityTypeDao> entityTypeDao = new List<EntityTypeDao>();
                string synchXMLPath;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    synchXMLPath = tx.PersistenceManager.MetadataRepository.GetSynchXMLPath(MarcomManagerFactory.IsWorkingWithCurrentWorkingVersion);
                    entityTypeDao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(synchXMLPath).Where(a => a.ModuleID == 3 && a.Id > 59).Select(a => a).ToList();
                }
                if (entityTypeDao != null)
                {
                    string xmlpath = Path.Combine(HttpRuntime.AppDomainAppPath, "AdminSettings.xml");
                    XDocument adminXdoc = XDocument.Load(xmlpath);
                    var result = adminXdoc.Descendants("ListSettings").Descendants("RootLevel").Select(a => a).ToList().Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == EntityTypeID).Select(a => a);
                    var abc = result.Descendants("Tree").ToList();
                    var abd = abc.Elements("EntityTypes").Elements("EntityType").Select(a => a.Attribute("ID")).ToList();
                    StringBuilder sbtreeplan = new StringBuilder();
                    StringBuilder sbtree = new StringBuilder();
                    sbtreeplan.Append("<Tree><EntityTypes>");
                    List<int> entittypeobj = new List<int>();
                    for (int i = 0; i < abd.Count(); i++)
                    {
                        sbtreeplan.Append("<EntityType ID=\"" + Convert.ToInt32(abd.ElementAt(i).Value) + "\" />");
                        entittypeobj.Add(Convert.ToInt32(abd.ElementAt(i).Value));
                    }
                    foreach (var item in entityTypeDao)
                    {
                        bool entitytypeexists = entittypeobj.Contains(item.Id);
                        if (entitytypeexists == false)
                        {
                            sbtreeplan.Append("<EntityType ID=\"" + item.Id + "\" />");
                            entittypeobj.Add(Convert.ToInt32(item.Id));
                        }
                    }
                    if (EntityTypeID == 35)
                    {
                        var resultfrCal = adminXdoc.Descendants("ListSettings").Descendants("RootLevel").Select(a => a).ToList().Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == 6).Select(a => a);
                        var abcfrCal = resultfrCal.Descendants("Tree").ToList();
                        var abdfrCal = abcfrCal.Elements("EntityTypes").Elements("EntityType").Select(a => a.Attribute("ID")).ToList();
                        for (int i = 0; i < abdfrCal.Count(); i++)
                        {
                            bool entitytypeexistsfrCal = entittypeobj.Contains(Convert.ToInt32(abdfrCal.ElementAt(i).Value));
                            if (entitytypeexistsfrCal == false)
                            {
                                sbtreeplan.Append("<EntityType ID=\"" + Convert.ToInt32(abdfrCal.ElementAt(i).Value) + "\" />");
                                entittypeobj.Add(Convert.ToInt32(abdfrCal.ElementAt(i).Value));
                            }
                        }

                    }
                    sbtreeplan.Append("</EntityTypes></Tree>");
                    XElement elementtree = XElement.Parse(sbtreeplan.ToString());
                    adminXdoc.Descendants("ListSettings").Descendants("RootLevel").Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == EntityTypeID).Select(a => a).Descendants("Tree").Remove();
                    adminXdoc.Descendants("ListSettings").Descendants("RootLevel").Where(a => Convert.ToInt32(a.Attribute("typeid").Value) == EntityTypeID).FirstOrDefault().Add(elementtree);
                    adminXdoc.Save(xmlpath);
                }
            }
            catch (Exception ex)
            {

            }
        }

        public bool SaveDetailBlockForLink(MetadataManagerProxy proxy, int EntityID, int AttributeTypeid, int attributeid, string url, List<object> name, int linktype, int moduleid)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryEntityTypeAccess(EntityID, Modules.Planning);
                NotificationFeedObjects obj = new NotificationFeedObjects();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var currentUserRole = (from item in tx.PersistenceManager.UserRepository.Query<BrandSystems.Marcom.Dal.Access.Model.EntityRoleUserDao>() where item.Entityid == EntityID select item).FirstOrDefault();
                    var attrdetails = (from item in tx.PersistenceManager.MetadataRepository.Query<AttributeDao>() where item.Id == attributeid select item).FirstOrDefault();
                    var DynamicQuery = new StringBuilder();
                    var entityTypeid = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Planning.Model.EntityDao>(EntityID);
                    var attr = tx.PersistenceManager.UserRepository.Get<BrandSystems.Marcom.Dal.Metadata.Model.AttributeDao>(attributeid);
                    BrandSystems.Marcom.Core.Utility.FeedNotificationServer fs = new Utility.FeedNotificationServer();
                    IList<MultiProperty> prplst = new List<MultiProperty>();
                    if (AttributeTypeid == 14)
                    {
                        string str = "";
                        if (moduleid != 5)
                            str = "SELECT * FROM CM_Links cl WHERE cl.EntityID= ? AND cl.ModuleID != 5";
                        else
                            str = "SELECT * FROM CM_Links cl WHERE cl.EntityID= ? AND cl.ModuleID = 5";
                        IList item = tx.PersistenceManager.MetadataRepository.ExecuteQuerywithMinParam(str, Convert.ToInt32(EntityID));
                        obj.obj3 = item;
                        if (item.Count > 0)
                        {
                            if (moduleid != 5)
                                DynamicQuery.Append("UPDATE CM_Links SET LinkType = ?, Name = ?, [URL] = ? WHERE EntityID= ? AND ModuleID != 5");
                            else
                                DynamicQuery.Append("UPDATE CM_Links SET LinkType = ?, Name = ?, [URL] = ? WHERE EntityID= ? AND ModuleID = 5");
                            tx.PersistenceManager.PlanningRepository.ExecuteQuerywithMinParam(DynamicQuery.ToString(), linktype, name[0].ToString(), url, EntityID);
                        }
                        else
                        {
                            LinksDao ldao = new LinksDao();
                            ldao.ActiveVersionNo = 1;
                            ldao.CreatedOn = DateTime.Now.ToString("yyyy-MM-dd");
                            ldao.Description = "";
                            ldao.EntityID = EntityID;
                            ldao.LinkGuid = Guid.NewGuid();
                            ldao.LinkType = linktype;
                            ldao.ModuleID = moduleid;
                            ldao.Name = name[0].ToString();
                            ldao.OwnerID = proxy.MarcomManager.User.Id;
                            ldao.TypeID = 9;
                            ldao.URL = url;
                            tx.PersistenceManager.MetadataRepository.Save<LinksDao>(ldao);
                        }
                        tx.Commit();
                    }
                    obj.action = "metadata update";
                    obj.Actorid = proxy.MarcomManager.User.Id;
                    obj.AttributeId = Convert.ToInt32(attributeid);
                    obj.EntityId = EntityID;
                    obj.AttributeDetails = new List<AttributeDao>();
                    obj.AttributeDetails.Add(attrdetails);
                    obj.Attributetypeid = AttributeTypeid;
                    obj.obj2 = name;
                    fs.AsynchronousNotify(obj);
                }
                return true;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public bool DeleteEntitytypeAttributeGrpAccessRole(MetadataManagerProxy proxy, int entityID)
        {
            try
            {
                proxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                AttributeGroupRoleAccessDao obj = new AttributeGroupRoleAccessDao();
                obj.EntityTypeID = entityID;
                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupRoleAccessDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<AttributeGroupRoleAccessDao>(GetSynchXMLPath(), obj) == true)
                    return true;
                else
                    return false;
            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public bool DamDeleteEntityAttributeRelation(MetadataManagerProxy proxy, int ID, int attributeid, int entitytypeid)
        {
            try
            {
                EntityTypeAttributeRelationDao obj = new EntityTypeAttributeRelationDao();
                obj.ID = ID;

                var tempvalobj = PersistenceManager.Instance.MetadataRepository.GetObject<ValidationDao>(GetXmlWorkingPath());
                if (tempvalobj != null)
                {
                    var ids = tempvalobj.Where(a => a.RelationShipID == ID).Select(a => a.Id);
                    foreach (var valid in ids.ToList())
                    {
                        ValidationDao valTemp = new ValidationDao();
                        valTemp.Id = valid;
                        PersistenceManager.Instance.MetadataRepository.DeleteObject<ValidationDao>(GetXmlWorkingPath(), valTemp);
                        PersistenceManager.Instance.MetadataRepository.DeleteObject<ValidationDao>(GetSynchXMLPath(), valTemp);
                    }
                }

                if (PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeRelationDao>(GetXmlWorkingPath(), obj) == true && PersistenceManager.Instance.MetadataRepository.DeleteObject<EntityTypeAttributeRelationDao>(GetSynchXMLPath(), obj) == true)
                {

                    try
                    {
                        //removing dam view relation from the admin setting
                        System.Threading.Tasks.Task taskforremoveviewrelation = new System.Threading.Tasks.Task(() => proxy.MarcomManager.DigitalAssetManager.DAMadminSettingsDeleteAttributeRelationAllViews(entitytypeid, attributeid));
                        taskforremoveviewrelation.Start();
                    }
                    catch { }

                    return true;

                }
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        public IAttributeGroupRoleAccess CreateAttributeGroupRoleAccessInstace()
        {
            return new AttributeGroupRoleAccess();
        }

        public string[] GetAttributeGroupImportedFileColumnName(MetadataManagerProxy proxy, string fileid)
        {
            System.Data.OleDb.OleDbConnection MyConnection = null;
            string[] error = new string[2];
            try
            {
                System.Data.DataSet ds = null;
                string CsvSheetName = "";
                DataTable CsvDt = new DataTable();
                int i = 0;
                string uploadPath = Path.Combine(HttpRuntime.AppDomainAppPath) + "UploadedImages\\AttributeGroupImport\\";
                string OutputXmlFileName = uploadPath + fileid;
                bool ValiDtCsvStatus = false;

                System.Data.OleDb.OleDbDataAdapter MyCommand = null;
                //System.Data.OleDb.OleDbConnection MyConnection = new System.Data.OleDb.OleDbConnection("provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + OutputXmlFileName + ";Extended Properties=\"Text\"");

                if (fileid.Substring(fileid.LastIndexOf('.') + 1) == "xlsx" || fileid.Substring(fileid.LastIndexOf('.') + 1) == "xls")
                {
                    MyConnection = new System.Data.OleDb.OleDbConnection(
                                        "Provider=Microsoft.ACE.OLEDB.12.0; " +
                                        "data source='" + OutputXmlFileName + "';" +
                                        "Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"");
                }
                else if (fileid.Substring(fileid.LastIndexOf('.') + 1) == "csv")
                {
                    MyConnection = new System.Data.OleDb.OleDbConnection(
                                      "Provider=Microsoft.ACE.OLEDB.12.0; " +
                                      "data source='" + OutputXmlFileName + "';" +
                                      "Extended Properties=\"Text\"");
                }

                MyConnection.Open();
                string query = String.Format("SELECT * from [{0}$]", "Sheet1");
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, MyConnection);
                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet);
                DataTable YourTable = dataSet.Tables[0];


                //List<object> obj = new List<object>();
                //return YourTable.AsEnumerable().Select(x => x).ToList<object>();

                string[] columnNames = YourTable.Columns.Cast<DataColumn>()
                                 .Select(x => x.ColumnName).Concat(new[] { "Fill With" })
                                 .ToArray();

                //var empList = dataSet.Tables[0].AsEnumerable().Select(dataRow => new {Name = dataRow.Field<string>("Name")}).ToList();

                //var empList = dataSet.Tables[0].AsEnumerable().Select(dataRow => dataRow).ToList();
                return columnNames;

            }
            catch (Exception ex)
            {
                error[0] = "@Exception";
                error[1] = ex.Message.ToString();
                return error;
            }
            finally
            {
                MyConnection.Close();
            }
            return error;
        }

        public IList InsertImportedAttributeGroupData(MetadataManagerProxy proxy, List<object> LabelColumnValue, int EntityId, string attrgrpName, string filename, int AttrGrpID)
        {
            System.Data.OleDb.OleDbConnection MyConnection = null;
            try
            {
                System.Data.DataSet ds = null;
                string CsvSheetName = "";
                DataTable CsvDt = new DataTable();
                int i = 0;
                string uploadPath = Path.Combine(HttpRuntime.AppDomainAppPath) + "UploadedImages\\AttributeGroupImport\\";
                string OutputXmlFileName = uploadPath + filename;
                bool ValiDtCsvStatus = false;

                System.Data.OleDb.OleDbDataAdapter MyCommand = null;
                if (filename.Substring(filename.LastIndexOf('.') + 1) == "xlsx" || filename.Substring(filename.LastIndexOf('.') + 1) == "xls")
                {
                    MyConnection = new System.Data.OleDb.OleDbConnection(
                                        "Provider=Microsoft.ACE.OLEDB.12.0; " +
                                        "data source='" + OutputXmlFileName + "';" +
                                        "Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"");
                }
                else if (filename.Substring(filename.LastIndexOf('.') + 1) == "csv")
                {
                    MyConnection = new System.Data.OleDb.OleDbConnection(
                                      "Provider=Microsoft.ACE.OLEDB.12.0; " +
                                      "data source='" + OutputXmlFileName + "';" +
                                      "Extended Properties=\"Text\"");
                }

                MyConnection.Open();
                string query = String.Format("SELECT * from [{0}$]", "Sheet1");
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, MyConnection);
                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet);
                DataTable dt = dataSet.Tables[0];

                List<IAttributeData> finallistAttr = new List<IAttributeData>();
                IList<IAttributeData> listAttr = new List<IAttributeData>();
                foreach (DataRow row in dt.Rows)
                {
                    listAttr.Clear();
                    foreach (var val in LabelColumnValue)
                    {
                        if (val.GetType().GetProperty("ColumnName").GetValue(val, null) != null)
                        {
                            if (val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString() != "" && val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString() != "Fill With")
                            {
                                listAttr.Add(new AttributeData
                                {
                                    ID = int.Parse(val.GetType().GetProperty("AttributeID").GetValue(val, null).ToString()),
                                    Lable = val.GetType().GetProperty("AttributeCaption").GetValue(val, null).ToString(),
                                    TypeID = int.Parse(val.GetType().GetProperty("AttributeType").GetValue(val, null).ToString()),
                                    Level = int.Parse(val.GetType().GetProperty("Level").GetValue(val, null).ToString()),
                                    Caption = (dynamic)row[val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString()].ToString(),
                                    Value = (dynamic)row[val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString()].ToString()
                                });
                            }
                            else if (val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString() == "Fill With")
                            {
                                listAttr.Add(new AttributeData
                                {
                                    ID = int.Parse(val.GetType().GetProperty("AttributeID").GetValue(val, null).ToString()),
                                    Lable = val.GetType().GetProperty("AttributeCaption").GetValue(val, null).ToString(),
                                    TypeID = int.Parse(val.GetType().GetProperty("AttributeType").GetValue(val, null).ToString()),
                                    Level = int.Parse(val.GetType().GetProperty("Level").GetValue(val, null).ToString()),
                                    Caption = (dynamic)val.GetType().GetProperty("Value").GetValue(val, null).ToString(),
                                    Value = (dynamic)val.GetType().GetProperty("Value").GetValue(val, null).ToString()
                                });
                            }
                        }
                    }
                    proxy.MarcomManager.PlanningManager.CreateImportedAttributeGroupRecord(0, EntityId, 0, AttrGrpID, false, attrgrpName, 0, listAttr);
                }



                //foreach (var val in LabelColumnValue)
                //{
                //    if (val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString() != "" && val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString() != "Fill With")
                //    {
                //        if (dt.Columns[val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString()].ColumnName == val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString())
                //        {
                //            dt.Columns[val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString()].ColumnName = val.GetType().GetProperty("AttributeCaption").GetValue(val, null).ToString();
                //        }
                //        else
                //        {
                //            System.Data.DataColumn newColumn = new System.Data.DataColumn(val.GetType().GetProperty("AttributeCaption").GetValue(val, null).ToString(), typeof(System.String));
                //            newColumn.DefaultValue = val.GetType().GetProperty("Value").GetValue(val, null);
                //            dt.Columns.Add(newColumn);

                //        }
                //    }
                //    else if (val.GetType().GetProperty("ColumnName").GetValue(val, null).ToString() == "Fill With")
                //    {
                //        System.Data.DataColumn newColumn = new System.Data.DataColumn(val.GetType().GetProperty("AttributeCaption").GetValue(val, null).ToString(), typeof(System.String));
                //        newColumn.DefaultValue = val.GetType().GetProperty("Value").GetValue(val, null);
                //        dt.Columns.Add(newColumn);
                //    }
                //}


            }
            catch (Exception ex)
            {
                MyConnection.Close();
            }
            finally { }
            return null;
        }


        public List<object> FetchEntityStatusTree(MetadataManagerProxy proxy, int entityID)
        {

            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    BaseEntityDao bdao = new BaseEntityDao();
                    bdao = tx.PersistenceManager.MetadataRepository.Query<BaseEntityDao>().Where(a => a.Id == entityID).Select(a => a).FirstOrDefault();
                    List<object> retObj = new List<object>();
                    string xmlpath = "";
                    IList<EntityTypeAttributeRelationDao> dao = new List<EntityTypeAttributeRelationDao>();
                    IList<AttributeDao> adao = new List<AttributeDao>();
                    xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(bdao.Version);
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeRelationDao>(xmlpath).ToList<EntityTypeAttributeRelationDao>();
                    adao = tx.PersistenceManager.MetadataRepository.GetObject<AttributeDao>(xmlpath).ToList<AttributeDao>();
                    var entityttyperesult = dao.Where(a => a.EntityTypeID == bdao.Typeid).OrderBy(x => x.SortOrder).ToList<EntityTypeAttributeRelationDao>();
                    int[] attrIDs = entityttyperesult.Select(a => a.AttributeID).ToArray<int>();
                    var attrresult = adao.Where(a => attrIDs.Contains(a.Id) && a.AttributeTypeID == 15);
                    IList<TreeNodeDao> tdao = new List<TreeNodeDao>();
                    tdao = tx.PersistenceManager.MetadataRepository.GetObject<TreeNodeDao>(xmlpath).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();

                    foreach (var parent in attrresult.Distinct())
                    {
                        var parentNode = from node in tdao
                                         where node.AttributeID == parent.Id
                                             && node.ParentNodeID == 0
                                         select node;
                        if (parentNode != null)
                        {
                            if (parentNode.Count() > 0)
                            {
                                foreach (var item in parentNode)
                                {
                                    IList<TreeNodeDao> optNode = new List<TreeNodeDao>();
                                    TreeNodeDao tnDao = new TreeNodeDao();
                                    optNode = tdao.Where(a => a.AttributeID == item.AttributeID && a.ParentNodeID == item.Id).Select(a => a).OrderBy(a => a.SortOrder).ToList<TreeNodeDao>();
                                    int[] idarr = optNode.Select(a => a.Id).ToArray();
                                    IList<TreeValueDao> tvDao = new List<TreeValueDao>();
                                    string optionvalue = "", colorcode = "", comment = "-";
                                    int optionid = 0;
                                    tvDao = tx.PersistenceManager.MetadataRepository.Query<TreeValueDao>().Where(a => a.Entityid == entityID && idarr.Contains(a.Nodeid)).Select(a => a).ToList<TreeValueDao>();
                                    if (tvDao.Count > 0)
                                    {
                                        optionid = tvDao.FirstOrDefault().Nodeid;
                                        tnDao = tdao.Where(a => a.Id == optionid).Select(a => a).FirstOrDefault();
                                        optionvalue = tnDao.Caption;
                                        colorcode = tnDao.ColorCode;
                                        comment = tvDao.FirstOrDefault().Value != "" ? tvDao.FirstOrDefault().Value : "-";
                                    }
                                    else
                                    {
                                        if (optNode.Count > 0)
                                        {
                                            optionid = optNode.FirstOrDefault().Id;
                                            optionvalue = optNode.Select(a => a.Caption).FirstOrDefault();
                                            colorcode = optNode.FirstOrDefault().ColorCode;
                                            comment = "-";
                                        }
                                    }
                                    retObj.Add(new
                                    {
                                        levelcaption = item.Caption,
                                        levelid = item.Id,
                                        leveloptions = optNode,
                                        selectvalue = optionvalue,
                                        selectid = optionid,
                                        optioncolorcode = colorcode,
                                        optioncomment = comment,
                                        attributeid = item.AttributeID
                                    });
                                }
                            }
                        }
                    }
                    return retObj;
                }

            }
            catch (Exception ex)
            {
                return null;
            }



        }


        /// <summary>
        /// Gets the type of the task entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IEntityType</returns>
        public IList<IEntityType> GetTaskEntityType(MetadataManagerProxy proxy)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string moduleCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityType> _iientitytype = new List<IEntityType>();
                IList<EntityTypeDao> dao = new List<EntityTypeDao>();
                IList<EntitytasktypeDao> entityTasktypedao = new List<EntitytasktypeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    xmlpath = GetXmlWorkingPath();
                    var xDoc = XDocument.Load(xmlpath);
                    var modules = xDoc.Root.Elements("Module_Table").Elements("Module").Select(a => a);
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath).Where(a => a.Id != (int)EntityTypeList.UserDetails).ToList();
                    entityTasktypedao = tx.PersistenceManager.MetadataRepository.GetObject<EntitytasktypeDao>(xmlpath).ToList();
                    List<int> entitytasktypes = new List<int>();
                    entitytasktypes = entityTasktypedao.Select(a => a.EntitytypeId).ToList();
                    if (entitytasktypes != null)
                    {
                        entitytasktypes = entitytasktypes.Distinct().ToList();
                        if (entitytasktypes.Count > 0)
                        {
                            dao = dao.Where(a => entitytasktypes.Contains(a.Id)).ToList<EntityTypeDao>();
                            foreach (var item in dao)
                            {
                                IEntityType _ientitytype = new EntityType();
                                _ientitytype.Id = item.Id;
                                _ientitytype.Caption = item.Caption.Trim();
                                _ientitytype.ModuleID = item.ModuleID;
                                _ientitytype.ModuleCaption = Convert.ToString(modules.Where(a => Convert.ToInt32(a.Element("ID").Value) == Convert.ToInt32(item.ModuleID)).Select(a => a.Element("Caption").Value).First());
                                _ientitytype.Description = item.Description.Trim();
                                _ientitytype.Category = item.Category;
                                _ientitytype.ShortDescription = item.ShortDescription.Trim();
                                _ientitytype.ColorCode = item.ColorCode.Trim();
                                _ientitytype.IsAssociate = item.IsAssociate;
                                _ientitytype.WorkFlowID = item.WorkFlowID;
                                _ientitytype.IsRootLevel = item.IsRootLevel;
                                _ientitytype.WorkFlowName = "";
                                _iientitytype.Add(_ientitytype);
                            }
                        }
                    }
                    tx.Commit();
                }
                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public IList<EntitytasktypeDao> GetEntityTaskType(MetadataManagerProxy proxy, int entitytypeid)
        {
            try
            {

                IList<EntitytasktypeDao> _ientitytasktypedao = new List<EntitytasktypeDao>();
                string xmlPath = string.Empty;
                int versionNumber = MarcomManagerFactory.AdminMetadataVersionNumber;
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    xmlPath = GetXmlWorkingPath();
                    XDocument xDoc = XDocument.Load(xmlPath);
                    if (versionNumber == 0)
                    {
                        _ientitytasktypedao = tx.PersistenceManager.MetadataRepository.GetAll<EntitytasktypeDao>().ToList<EntitytasktypeDao>();
                        tx.Commit();
                    }
                    else
                    {
                        _ientitytasktypedao = tx.PersistenceManager.MetadataRepository.GetObject<EntitytasktypeDao>(xmlPath);
                        tx.Commit();
                    }
                    _ientitytasktypedao = _ientitytasktypedao.Where(a => a.EntitytypeId == entitytypeid).ToList<EntitytasktypeDao>();
                }
                if (_ientitytasktypedao.Count() > 0)
                    return _ientitytasktypedao;
                else
                    return null;
            }
            catch
            {

                return null;
            }
        }

        /// <summary>
        /// Gets the type of the task entity.
        /// </summary>
        /// <param name="proxy">The proxy.</param>
        /// <returns>List of IEntityType</returns>
        public IList<IEntityType> GetTaskTypes(MetadataManagerProxy proxy)
        {
            try
            {
                int version = MarcomManagerFactory.AdminMetadataVersionNumber;
                string moduleCaption = string.Empty;
                string xmlpath = string.Empty;
                IList<IEntityType> _iientitytype = new List<IEntityType>();
                IList<EntityTypeDao> dao = new List<EntityTypeDao>();
                EntitytasktypeDao itasktype = new EntitytasktypeDao();
                IList<EntitytasktypeDao> entityTasktypedao = new List<EntitytasktypeDao>();
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {

                    xmlpath = GetXmlWorkingPath();
                    var xDoc = XDocument.Load(xmlpath);
                    dao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeDao>(xmlpath).Where(a => a.Id != (int)EntityTypeList.UserDetails).ToList();
                    entityTasktypedao = tx.PersistenceManager.MetadataRepository.GetObject<EntitytasktypeDao>(xmlpath).ToList();
                    List<int> entitytasktypes = new List<int>();
                    entitytasktypes = entityTasktypedao.Select(a => a.EntitytypeId).ToList();
                    if (entitytasktypes != null)
                    {
                        entitytasktypes = entitytasktypes.Distinct().ToList();
                        if (entitytasktypes.Count > 0)
                        {
                            dao = dao.Where(a => entitytasktypes.Contains(a.Id)).ToList<EntityTypeDao>();
                            foreach (var item in dao)
                            {
                                IEntityType _ientitytype = new EntityType();
                                _ientitytype.Id = item.Id;
                                _ientitytype.Caption = item.Caption.Trim();
                                _ientitytype.Description = item.Description.Trim();
                                _ientitytype.ShortDescription = item.ShortDescription.Trim();
                                _ientitytype.ColorCode = item.ColorCode.Trim();
                                itasktype = entityTasktypedao.Where(a => a.EntitytypeId == item.Id).FirstOrDefault();
                                _ientitytype.TaskTypeId = itasktype.TaskTypeId;
                                _iientitytype.Add(_ientitytype);
                            }
                        }
                    }
                    tx.Commit();
                }
                return _iientitytype;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public int InsertUpdateEntityTaskType(MetadataManagerProxy metadataManagerProxy, int EntityTypeID, int taskType, int ID)
        {

            try
            {
                metadataManagerProxy.MarcomManager.AccessManager.TryAccess(Modules.Admin, FeatureID.MetadataSettings);
                IEntityTaskType iextensionoption = new Entitytasktype();
                iextensionoption.EntitytypeId = EntityTypeID;
                iextensionoption.TaskTypeId = taskType;
                int ExtensionOption_MaxID = 0;

                if (ID == 0)
                {
                    string sequencenumber = "SELECT NEXT VALUE FOR EntityTaskType_MaxID AS EntityTaskType_MaxID";
                    using (ITransaction tx = metadataManagerProxy.MarcomManager.GetTransaction())
                    {
                        var sequenceNoVal = tx.PersistenceManager.PlanningRepository.ExecuteQuery(sequencenumber).Cast<Hashtable>().ToList(); ;
                        ExtensionOption_MaxID = Convert.ToInt32(sequenceNoVal[0]["EntityTaskType_MaxID"]);
                        iextensionoption.Id = ExtensionOption_MaxID;
                    }
                }
                else
                {
                    iextensionoption.Id = ID;
                    ExtensionOption_MaxID = ID;
                }
                EntitytasktypeDao obj = new EntitytasktypeDao(iextensionoption.Id, EntityTypeID, taskType);

                XElement SavedXML = PersistenceManager.Instance.MetadataRepository.SaveObject<EntitytasktypeDao>(GetXmlWorkingPath(), obj, ExtensionOption_MaxID);
                SavetoSynDBXml(SavedXML, "EntityTaskType", GetSynchXMLPath(), ID);

                return ExtensionOption_MaxID;

            }
            catch (MarcomAccessDeniedException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        public IList GetEntityAttributesGroupLabelNames(MetadataManagerProxy proxy, int entityId, int GroupID)
        {
            IList resultresponse = new List<object>();
            IList<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel> droplabel;
            IList<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption> itreeCaption = new List<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption>();
            AttributeData attributedate;
            try
            {
                using (ITransaction tx = proxy.MarcomManager.GetTransaction())
                {
                    var entityObj = (from item in tx.PersistenceManager.PlanningRepository.Query<EntityDao>()
                                     where item.Id == entityId
                                     select item).FirstOrDefault();
                    bool IsLock = false;
                    IsLock = proxy.MarcomManager.PlanningManager.GetLockStatus(entityId).Item1;
                    string xmlpath = tx.PersistenceManager.MetadataRepository.GetXmlPath(entityObj.Version);
                    IList<EntityTypeAttributeGroupRelationDao> entitygroupdao = new List<EntityTypeAttributeGroupRelationDao>();
                    entitygroupdao = tx.PersistenceManager.MetadataRepository.GetObject<EntityTypeAttributeGroupRelationDao>(xmlpath);
                    var entityattribtuegroup = entitygroupdao.Where(a => a.ID == GroupID);
                    GroupID = entityattribtuegroup.ElementAt(0).AttributeGroupID;
                    XDocument docx = XDocument.Load(xmlpath);
                    var rddd = (from EntityAttrRel in docx.Root.Elements("AttributeGroupAttributeRelation_Table").Elements("AttributeGroupAttributeRelation")
                                join Attr in docx.Root.Elements("Attribute_Table").Elements("Attribute") on Convert.ToInt32(EntityAttrRel.Element("AttributeID").Value) equals Convert.ToInt32(Attr.Element("ID").Value)
                                where Convert.ToInt32(EntityAttrRel.Element("AttributeGroupID").Value) == GroupID
                                orderby Convert.ToInt32(EntityAttrRel.Element("SortOrder").Value)
                                select new
                                {
                                    ID = Convert.ToInt16(Attr.Element("ID").Value),
                                    Caption = EntityAttrRel.Element("Caption").Value,
                                    AttributeTypeID = Convert.ToInt16(Attr.Element("AttributeTypeID").Value),
                                    Description = Attr.Element("Description").Value,
                                    IsSystemDefined = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSystemDefined").Value)),
                                    IsSpecial = Convert.ToBoolean(Convert.ToInt32(Attr.Element("IsSpecial").Value))
                                }).ToList();

                    var attributesdetails = rddd;
                    IList<IAttributeData> attributesWithValues = new List<IAttributeData>();
                    foreach (var val in attributesdetails)
                    {
                        AttributesList attypeid = (AttributesList)val.AttributeTypeID;
                        switch (attypeid)
                        {
                            case AttributesList.TextSingleLine:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.IsLock = IsLock;
                                attributedate.Level = 0;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.TextMultiLine:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Level = 0;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.ListSingleSelection:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Level = 0;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.ListMultiSelection:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Level = 0;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.DateTime:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Level = 0;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.DropDownTree:
                                attributedate = new AttributeData();
                                droplabel = new List<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel>();
                                var treeLevelList = tx.PersistenceManager.PlanningRepository.Query<TreeLevelDao>().Where(a => a.AttributeID == val.ID).ToList();
                                foreach (var levelObj in treeLevelList)
                                {
                                    BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                    BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                    treecaption.Level = levelObj.Level;
                                    dropdownlabel.Level = levelObj.Level;
                                    dropdownlabel.Label = levelObj.LevelName.Trim();
                                    itreeCaption.Add(treecaption);
                                    droplabel.Add(dropdownlabel);
                                }

                                attributedate.ID = val.ID;
                                attributedate.Lable = droplabel;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Level = 0;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.Tree:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Level = 0;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.Uploader:
                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Lable = val.Caption.Trim();
                                attributedate.Level = 0;
                                attributesWithValues.Add(attributedate);
                                break;
                            case AttributesList.TreeMultiSelection:
                                var multiselecttreeLevelList = tx.PersistenceManager.MetadataRepository.GetObject<TreeLevelDao>(xmlpath).Where(a => a.AttributeID == val.ID).ToList();
                                droplabel = new List<BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel>();
                                foreach (var levelObj in multiselecttreeLevelList)
                                {
                                    BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownLabel dropdownlabel = new BrandSystems.Marcom.Core.Planning.TreeDropDownLabel();
                                    BrandSystems.Marcom.Core.Planning.Interface.ITreeDropDownCaption treecaption = new BrandSystems.Marcom.Core.Planning.TreeDropDownCaption();
                                    treecaption.Level = levelObj.Level;
                                    dropdownlabel.Level = levelObj.Level;
                                    dropdownlabel.Label = levelObj.LevelName.Trim();
                                    itreeCaption.Add(treecaption);
                                    droplabel.Add(dropdownlabel);
                                }

                                attributedate = new AttributeData();
                                attributedate.ID = val.ID;
                                attributedate.Lable = droplabel;
                                attributedate.TypeID = val.AttributeTypeID;
                                attributedate.Level = 0;
                                attributesWithValues.Add(attributedate);
                                break;
                            default:
                                break;
                        }
                    }
                    resultresponse.Add(attributesWithValues);


                    tx.Commit();
                }

                return resultresponse;
            }
            catch (Exception ex)
            {

            }
            return null;
        }


    }


}
